% Program to create a dta files from a parent-fragment spectra
% Reads an isos file for the parent as well as its UMC list file 
% The UMC file is created outside of this program using VIPER.

clear all ;
clc ;
mdbl_mass_H =  1.00727638 ;
cd('C:\DriftTimePrediction\MS_MS\4pep_4T_1.8_600_1500_50ms_adc_parent_fr5_0000');

file_name = '4pep_4T_1.8_600_1500_50ms_adc_parent_fr5_0000.Merge_0000_isos.csv';
%parent_isos_data = csvread(file_name, 1, 0 ) ;

%%read the UMC list for the parent
file_name = '4pep_4T_1.8_600_1500_50ms_adc_parent_fr5_0000.Merge_0000_UMC.xls';
parent_umc_data = xlsread(file_name);

file_name = '4pep_4T_1.8_600_1500_50ms_adc_parent_fr5_0000.Merge_0000_UMCProfiles.xls';
parent_umc_profiles = xlsread(file_name);

cd('C:\DriftTimePrediction\MS_MS\4pep_4T_1.8_600_1500_50ms_adc_frag_lin_fr5_0000');
file_name = '4pep_4T_1.8_600_1500_50ms_adc_frag_lin_fr5_0000.Merge_0000_isos.csv';
%fragment_isos_data = csvread(file_name, 1, 0 ) ;

file_name = '4pep_4T_1.8_600_1500_50ms_adc_frag_lin_fr5_0000.Merge_0000_UMC.xls';
fragment_umc_data = xlsread(file_name);

file_name = '4pep_4T_1.8_600_1500_50ms_adc_frag_lin_fr5_0000.Merge_0000_UMCProfiles.xls';
fragment_umc_profiles = xlsread(file_name);

parent_fragment_matrix = zeros(size(parent_umc_data,1), size(fragment_umc_data,1));
[total_parent_umcs, col] = size(parent_umc_data);
[total_fragment_umcs, col] = size(fragment_umc_data);

%for each fragment, check how many parents can it belong to
%this check is going to be based on scan numbers and it's
%monoisotopic mass.

%The scan numbers cannot go outside the bounds of the parent scan numbers
%while the monoisotopic mass of a fragment cannot be greater than that of
%the parent
for fragment_index = 1: total_fragment_umcs
    fragment = fragment_umc_data(fragment_index,:);
    parent_start_scan = parent_umc_data(:,4);
    parent_end_scan = parent_umc_data(:,5);
    parent_mono_mw = parent_umc_data(:,3);
    fragment_mono_mw = fragment_umc_data (fragment_index,3);
    indices = fragment(:,4) >= parent_start_scan & fragment(:,5) <= parent_end_scan;% & parent_mono_mw >= fragment_mono_mw;

    parent_fragment_matrix (:,fragment_index) = indices;
end;

%gives an indication of the total number of fragments in the parent
fragmentSum = sum(parent_fragment_matrix,2);

for parent_index = 1: total_parent_umcs
    %%take the fragment sum to figure out how many fragments are present in
    %%this parent
    if ( fragmentSum(parent_index,1) == 0)
        continue;
    else
         output_file_name = 'C:\Documents And Settings\d3m293\Desktop\Dta.' ;
         str_isos = sprintf('%d', parent_umc_data(parent_index,1 )) ;
         str_cs = sprintf('%d', parent_umc_data(parent_index,11 )) ;
         output_file_name = strcat(output_file_name, str_cs) ;
         output_file_name = strcat(output_file_name, '.') ;
         output_file_name = strcat(output_file_name, str_isos) ;
         output_file_name = strcat(output_file_name, '.') ;
         output_file_name = strcat(output_file_name, str_isos) ;
         output_file_name = strcat(output_file_name, '.dta') ;
         fout = fopen(output_file_name, 'wb') ;
         fprintf(fout, '%6.3f\t', parent_umc_data(parent_index, 12) + mdbl_mass_H) ;
         fprintf(fout, '%d\n', parent_umc_data(parent_index, 11)) ;
         
         if fragmentSum(parent_index,1) == 1
         %%it's just got one fragment, I guess we can write this one out
               fragmentIndex = find(parent_fragment_matrix(parent_index,:) ==1);
               fragment = fragment_umc_data(fragmentIndex,:);
               fprintf(fout, '%6.3f %6.3f\n', fragment(:,13), fragment(:,14)) ; 
         else
            %%we need to be really smart about this one
            parent_peak_list = getPeaks(parent_umc_profiles, parent_index);
            parent_maxpeak_scan = getScanNumberForMaxPeak(parent_peak_list);
            %%first get all fragments that may be in this parent
            fragment_indices = find(parent_fragment_matrix(parent_index, :)==1);
            for fragmentCounter =1:size(fragment_indices,2)
                fragmentIndex = fragment_indices(fragmentCounter);
                fragment_umc = fragment_umc_data(fragmentIndex,:);
                fragment_peaks = getPeaks(fragment_umc_profiles, fragment_umc(:,1));
                scan_number = getScanNumberForMaxPeak(fragment_peaks);
                
                if parent_maxpeak_scan == scan_number
                   fprintf(fout, '%6.3f %6.3f\n', fragment_umc(:,13), fragment_umc(:,14)) ;
                   
                end;
                
            end;
            
            
            
         end;
         fclose(fout);
    end;

    
end;

% fragList = zeros(1,14);
% 
% for umc_index = 1:total_umcs
%     
%     if parent_umc_data(umc_index,2) < 3
%         continue;
%     end;
%     
%     %for each umc, skip if number of points in cluster is less than 3
%     
%     
%     parent_peak_list = getPeaks(parent_umc_profiles,parent_umc_data(umc_index,1));
%     
%     parent_umc_start_scan = parent_umc_data(umc_index,4); 
%     parent_umc_end_scan = parent_umc_data(umc_index,5); 
%     
%     %%first get all UMCs from the fragment that fall within this range and
%     %%only within this range
%     indices = fragment_umc_data(:,4) >= parent_umc_start_scan & fragment_umc_data(:,5) <= parent_umc_end_scan;
%     
%     candidate_fragment_umcs = fragment_umc_data(indices, :);
%     
%     fragList = [];
%     
%     found = 0;
%     [r, c] = size(candidate_fragment_umcs);
%     
%     if r == 1 
%         
%     end;
%     %for each fragment candidate
%     for index = 1:r
%         
%         %consider one fragment umc at a time
%         fragment_umc = candidate_fragment_umcs(index, :);
%         
%         if (fragment_umc(:,2) <= 2 )
%             continue;
%         end;
%          
%         found = 1;
%         
%         %get the parent spectra that falls within the same ims region
%         parent_spectra = getPeaksWithinScans(parent_peak_list, fragment_umc(:,4), fragment_umc(:,5) );
%         %%sort the parent spectra by scan numbers
%         B = sortrows(parent_spectra,1);
%         
%         %get the peak list for the candidate umc fragment
%         candidate_peak_list = getPeaks(fragment_umc_profiles,fragment_umc(:,1));
%         A = sortrows(candidate_peak_list, 1);
%         %now correlate parent spectra with fragment and see how good the R
%         %squared value is,
%         
%         if size(A) == size(B)
%             %%if it meeets our cut-off then write the dta file, else skip it
%             R = corr2 (A(:,4), B(:,4));
%     
%             %%this means those two parts of the spectra correlate reasonbaly
%             %%well, we found a match for a parent and fragment
%             if R > 0.5
%                 vertcat(fragList, fragment_umc);
%             end;
%             
%         end;
%         
%         
%     end;
%    
% 
%     if size(fragList,2) > 1
%             %%construct the output file name 
%         output_file_name = 'C:\Documents And Settings\d3m293\Desktop\4pep_4T_1.8_600_1500_50ms_adc_parent_fr5_0000.' ;
%         str_isos = sprintf('%d', parent_umc_data(umc_index,1 )) ;
%         str_cs = sprintf('%d', parent_umc_data(umc_index,11 )) ;
%         output_file_name = strcat(output_file_name, str_cs) ;
%         output_file_name = strcat(output_file_name, '.') ;
%         output_file_name = strcat(output_file_name, str_isos) ;
%         output_file_name = strcat(output_file_name, '.') ;
%         output_file_name = strcat(output_file_name, str_isos) ;
%         output_file_name = strcat(output_file_name, '.dta') ;
%         fout = fopen(output_file_name, 'wb') ;
%             
%         sprintf('Processing scan # %d', parent_umc_data(umc_index, 10));
%         fprintf(fout, '%6.3f\t', parent_umc_data(umc_index, 12) + mdbl_mass_H) ;
%         fprintf(fout, '%d\n', parent_umc_data(umc_index, 11)) ;
%     
%         for i = 2:size(fragList,2)
%             fprintf(fout, '%6.3f %6.3f\n', fragList(i,13), fragment_umc(i,14)) ;
%         end;
%          fclose(fout) ;   
%     end;
%         
% end;
