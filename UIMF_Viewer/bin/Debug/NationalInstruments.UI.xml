<?xml version="1.0" encoding="utf-8"?>
<doc xmlns:ni="urn:ni">
  <assembly>
    <name>NationalInstruments.UI</name>
  </assembly>
  <members>
    <member name="T:NationalInstruments.UI.WaveformPlotMode">
      <summary>
            Specifies the category of the method that is used to plot data on a waveform plot.
            </summary>
    </member>
    <member name="F:NationalInstruments.UI.WaveformPlotMode.Clear">
      <summary>
            The method that clears data from the plot is being used.
            </summary>
    </member>
    <member name="F:NationalInstruments.UI.WaveformPlotMode.PlotX">
      <summary>
            The method that plots a waveform of x data values is being used.
            </summary>
    </member>
    <member name="F:NationalInstruments.UI.WaveformPlotMode.PlotY">
      <summary>
            The method that plots a waveform of y data values is being used.
            </summary>
    </member>
    <member name="F:NationalInstruments.UI.WaveformPlotMode.PlotWaveform">
      <summary> 
            The method that plots a waveform of AnalogWaveform or AnalogWaveform&lt;T&gt; data values is 
            being used.
             
            The method that plots a waveform of AnalogWaveform&lt;T&gt;  data values is 
            being used.
            </summary>
    </member>
    <member name="F:NationalInstruments.UI.WaveformPlotMode.PlotComplexWaveform">
      <summary>
            The method that plots a waveform of ComplexWaveform&lt;T&gt; data values is 
            being used.
            </summary>
    </member>
    <member name="T:NationalInstruments.UI.SwitchStyle">
      <summary>
            Provides an abstract base class for specifying a switch style.
            </summary>
    </member>
    <member name="M:NationalInstruments.UI.SwitchStyle.#ctor">
      <summary>
            Initializes a new instance of the SwitchStyle class.
            </summary>
    </member>
    <member name="M:NationalInstruments.UI.SwitchStyle.Draw(System.Object,NationalInstruments.UI.SwitchStyleDrawArgs)">
      <summary>
            Draws a switch with the specified SwitchStyleDrawArgs.
            </summary>
      <param name="context">
            The object that specifies the context in which Draw is called.</param>
      <param name="args">
            A SwitchStyleDrawArgs that contains the
            drawing data.
            </param>
    </member>
    <member name="P:NationalInstruments.UI.SwitchStyle.UnderlyingType">
      <summary>
            Gets the underlying type of an EnumObject value.
            </summary>
    </member>
    <member name="P:NationalInstruments.UI.SwitchStyle.Is3D">
      <summary>
            Gets a value indicating whether the SwitchStyle is drawn as a 3D style.
            </summary>
    </member>
    <member name="P:NationalInstruments.UI.SwitchStyle.VerticalToggle">
      <summary>
            Gets a vertical toggle switch style.
            </summary>
    </member>
    <member name="P:NationalInstruments.UI.SwitchStyle.VerticalToggle3D">
      <summary>
            Gets a 3D, vertical toggle switch style.
            </summary>
    </member>
    <member name="P:NationalInstruments.UI.SwitchStyle.HorizontalToggle">
      <summary>
            Gets a horizontal toggle switch style.
            </summary>
    </member>
    <member name="P:NationalInstruments.UI.SwitchStyle.HorizontalToggle3D">
      <summary>
            Gets a 3D, horizontal toggle switch style.
            </summary>
    </member>
    <member name="P:NationalInstruments.UI.SwitchStyle.VerticalRocker">
      <summary>
            Gets a vertical rocker switch style.
            </summary>
    </member>
    <member name="P:NationalInstruments.UI.SwitchStyle.VerticalRocker3D">
      <summary>
            Gets a 3D, vertical rocker switch style.
            </summary>
    </member>
    <member name="P:NationalInstruments.UI.SwitchStyle.HorizontalRocker">
      <summary>
            Gets a horizontal rocker switch style.
            </summary>
    </member>
    <member name="P:NationalInstruments.UI.SwitchStyle.HorizontalRocker3D">
      <summary>
            Gets a 3D, horizontal rocker switch style.
            </summary>
    </member>
    <member name="P:NationalInstruments.UI.SwitchStyle.PushButton">
      <summary>
            Gets a pushbutton switch style.
            </summary>
    </member>
    <member name="P:NationalInstruments.UI.SwitchStyle.PushButton3D">
      <summary>
            Gets a 3D, pushbutton switch style.
            </summary>
    </member>
    <member name="P:NationalInstruments.UI.SwitchStyle.VerticalSlide">
      <summary>
            Gets a vertical slide switch style.
            </summary>
    </member>
    <member name="P:NationalInstruments.UI.SwitchStyle.VerticalSlide3D">
      <summary>
            Gets a 3D, vertical slide switch style.
            </summary>
    </member>
    <member name="P:NationalInstruments.UI.SwitchStyle.HorizontalSlide">
      <summary>
            Gets a horizontal slide switch style.
            </summary>
    </member>
    <member name="P:NationalInstruments.UI.SwitchStyle.HorizontalSlide3D">
      <summary>
            Gets a 3D, horizontal slide switch style.
            </summary>
    </member>
    <member name="T:NationalInstruments.UI.ShapeStyleDrawArgs">
      <summary>
            Provides data for drawing shape styles.
            </summary>
    </member>
    <member name="T:NationalInstruments.UI.DrawArgs">
      <summary>
            Defines the base class for classes that contain drawing data.
            </summary>
    </member>
    <member name="M:NationalInstruments.UI.DrawArgs.#ctor(System.Drawing.Graphics)">
      <summary>
            Initializes a new instance of the DrawArgs
            class using the specified graphics.
            </summary>
      <param name="graphics">
            The Graphics with which to draw.
            </param>
    </member>
    <member name="M:NationalInstruments.UI.DrawArgs.ToString">
      <summary>
            Returns a string representation of the object.
            </summary>
      <returns>
            A string representation of the object.
            </returns>
    </member>
    <member name="P:NationalInstruments.UI.DrawArgs.Graphics">
      <summary>
            Gets the graphics with which to draw.
            </summary>
    </member>
    <member name="M:NationalInstruments.UI.ShapeStyleDrawArgs.#ctor(System.Drawing.Graphics,System.Drawing.Size,System.Drawing.PointF,System.Single,NationalInstruments.UI.FillStyle,NationalInstruments.UI.LineStyle,System.Drawing.Color,System.Drawing.Color,System.Single)">
      <summary>
            Initializes a new instance of the ShapeStyleDrawArgs class
            with the specified size, point, rotation, fill style, line style, fill color, line color, and line width.
            </summary>
      <param name="graphics">
            The Graphics used to draw the shape.
            </param>
      <param name="size">
            The Size of the shape.
            </param>
      <param name="point">
            The Point at which to draw the shape.
            </param>
      <param name="rotation">
            The rotation of the shape.
            </param>
      <param name="fillStyle">
            The FillStyle of the shape.
            </param>
      <param name="lineStyle">
            The LineStyle of the shape.
            </param>
      <param name="fillColor">
            The Color to use to fill the shape.
            </param>
      <param name="lineColor">
            The Color of the shape line.
            </param>
      <param name="lineWidth">
            The width of the shape line.
            </param>
    </member>
    <member name="P:NationalInstruments.UI.ShapeStyleDrawArgs.Size">
      <summary>
            Gets the size of the shape.
            </summary>
    </member>
    <member name="P:NationalInstruments.UI.ShapeStyleDrawArgs.Point">
      <summary>
            Gets the point at which to draw the shape.
            </summary>
    </member>
    <member name="P:NationalInstruments.UI.ShapeStyleDrawArgs.Rotation">
      <summary>
            Gets the angle at which to rotate the shape.
            </summary>
    </member>
    <member name="P:NationalInstruments.UI.ShapeStyleDrawArgs.FillStyle">
      <summary>
            Gets the style used to draw the fill color of the shape. 
            </summary>
    </member>
    <member name="P:NationalInstruments.UI.ShapeStyleDrawArgs.LineStyle">
      <summary>
            Gets the style of the line that borders the shape.
            </summary>
    </member>
    <member name="P:NationalInstruments.UI.ShapeStyleDrawArgs.FillColor">
      <summary>
            Gets the color used to fill the shape.
            </summary>
    </member>
    <member name="P:NationalInstruments.UI.ShapeStyleDrawArgs.LineColor">
      <summary>
            Gets the color of the line that borders the shape.
            </summary>
    </member>
    <member name="P:NationalInstruments.UI.ShapeStyleDrawArgs.LineWidth">
      <summary>
            Gets the width of the line that borders the shape.
            </summary>
    </member>
    <member name="T:NationalInstruments.UI.ScrollBarState">
      <summary>
            Specifies the state of the scroll bar.
            </summary>
    </member>
    <member name="F:NationalInstruments.UI.ScrollBarState.Disabled">
      <summary>
            The scroll bar is disabled.
            </summary>
    </member>
    <member name="F:NationalInstruments.UI.ScrollBarState.Hot">
      <summary>
            The state is hot, which means the mouse is currently hovering over the scroll bar.
            </summary>
    </member>
    <member name="F:NationalInstruments.UI.ScrollBarState.Normal">
      <summary>
            The scroll bar is in a normal state.
            </summary>
    </member>
    <member name="F:NationalInstruments.UI.ScrollBarState.Pressed">
      <summary>
            The scroll bar is in a pressed state.
            </summary>
    </member>
    <member name="T:NationalInstruments.UI.ScaleRangeFillCollection">
      <summary>
            Represents a strongly typed collection of ScaleRangeFill objects.
            </summary>
    </member>
    <member name="M:NationalInstruments.UI.ScaleRangeFillCollection.#ctor">
      <summary>
            Initializes a new instance of the ScaleRangeFillCollection class.
            </summary>
    </member>
    <member name="M:NationalInstruments.UI.ScaleRangeFillCollection.#ctor(NationalInstruments.UI.ScaleRangeFill[])">
      <summary>
            Initializes a new instance of the ScaleRangeFillCollection class
            from an array of ScaleRangeFill objects.
            </summary>
      <param name="item">
            Array of ScaleRangeFill objects to copy.
            </param>
      <exception cref="T:System.ArgumentNullException">item (parameter) is null.
            
            -or-
            
            An element in item (parameter) is null.
            </exception>
      <exception cref="T:System.NotSupportedException">
            		An element in item (parameter) has been disposed.
            
            -or-
            
            		An element in item (parameter) is in another ScaleRangeFillCollection.
            
            -or-
            
            		An element in item (parameter) is already in this collection.
            </exception>
    </member>
    <member name="M:NationalInstruments.UI.ScaleRangeFillCollection.#ctor(NationalInstruments.UI.ScaleRangeFillCollection)">
      <summary>
            Initializes a new instance of ScaleRangeFillCollection
            from an existing collection.
            </summary>
      <param name="item">
            The ScaleRangeFillCollection to copy.
            </param>
      <exception cref="T:System.ArgumentNullException">item (parameter) is null.
            
            -or-
            
            An element in item (parameter) is null.
            </exception>
      <exception cref="T:System.NotSupportedException">
            		An element in item (parameter) has been disposed.
            
            -or-
            
            		An element in item (parameter) is in another ScaleRangeFillCollection.
            
            -or-
            
            		An element in item (parameter) is already in this collection.
            </exception>
    </member>
    <member name="M:NationalInstruments.UI.ScaleRangeFillCollection.ToString">
      <summary>
            Returns a string representation of the object.
            </summary>
      <returns>
            A string representation of the object.
            </returns>
    </member>
    <member name="M:NationalInstruments.UI.ScaleRangeFillCollection.Add(NationalInstruments.UI.ScaleRangeFill)">
      <summary>
            Adds an item to the end of the collection.
            </summary>
      <param name="item">
            Item to add to the collection.
            </param>
      <returns>
            The array index of the added item.
            </returns>
      <exception cref="T:System.ArgumentNullException">item (parameter) is null.
            </exception>
      <exception cref="T:System.NotSupportedException">item (parameter) has been disposed.
            
            -or-
            item (parameter) is in another ScaleRangeFillCollection.
            
            -or-
            item (parameter) is already in this collection.
            </exception>
    </member>
    <member name="M:NationalInstruments.UI.ScaleRangeFillCollection.AddRange(NationalInstruments.UI.ScaleRangeFill[])">
      <summary>
            Adds an array of ScaleRangeFill objects to the end of the collection.
            </summary>
      <param name="item">
            Array of ScaleRangeFill objects to add to the collection.
            </param>
      <exception cref="T:System.ArgumentNullException">item (parameter) is null.
            
            -or-
            
            An element in item (parameter) is null.
            </exception>
      <exception cref="T:System.NotSupportedException">
            		An element in item (parameter) has been disposed.
            
            -or-
            
            		An element in item (parameter) is in another ScaleRangeFillCollection.
            
            -or-
            
            		An element in item (parameter) is already in this collection.
            </exception>
    </member>
    <member name="M:NationalInstruments.UI.ScaleRangeFillCollection.AddRange(NationalInstruments.UI.ScaleRangeFillCollection)">
      <summary>
            Adds a collection of ScaleRangeFill objects to the end of the collection.
            </summary>
      <param name="item">
            Collection of ScaleRangeFill objects to add to the collection.
            </param>
      <exception cref="T:System.ArgumentNullException">item (parameter) is null.
            
            -or-
            
            An element in item (parameter) is null.
            </exception>
      <exception cref="T:System.NotSupportedException">
            		An element in item (parameter) has been disposed.
            
            -or-
            
            		An element in item (parameter) is in another ScaleRangeFillCollection.
            
            -or-
            
            		An element in item (parameter) is already in this collection.
            </exception>
    </member>
    <member name="M:NationalInstruments.UI.ScaleRangeFillCollection.Clear">
      <summary>
            Removes all items from the collection.
            </summary>
    </member>
    <member name="M:NationalInstruments.UI.ScaleRangeFillCollection.Contains(NationalInstruments.UI.ScaleRangeFill)">
      <summary>
            Determines if the specified element is in the collection.
            </summary>
      <param name="item">Item to locate in the collection.</param>
      <returns>true if the collection contains item (parameter).
            </returns>
    </member>
    <member name="M:NationalInstruments.UI.ScaleRangeFillCollection.CopyTo(NationalInstruments.UI.ScaleRangeFill[],System.Int32)">
      <summary>
            Copies the collection to an array or a portion of an array.
            </summary>
      <param name="array">
            Destination array for the collection.
            </param>
      <param name="index">
            The index in the target array at which you want to begin copying the collection to.
            </param>
      <exception cref="T:System.ArgumentNullException">array (parameter) is null.
            </exception>
      <exception cref="T:System.ArgumentException">array (parameter) is multidimensional.
            
            -or-
            index (parameter) is equal to or greater than the length of array (parameter).
            
            -or-
            
            The number of elements in the collection is greater than the available space between
            index (parameter) and the end of array (parameter).
            </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">index (parameter) is less than the lower bound of array (parameter).
            </exception>
    </member>
    <member name="M:NationalInstruments.UI.ScaleRangeFillCollection.IndexOf(NationalInstruments.UI.ScaleRangeFill)">
      <summary>
            Returns the zero-based index of the first occurrence of an item in the collection.
            </summary>
      <param name="item">
            Item to search for.
            </param>
      <returns>
            Index of the item. If the item is not found, returns -1.
            </returns>
    </member>
    <member name="M:NationalInstruments.UI.ScaleRangeFillCollection.Insert(System.Int32,NationalInstruments.UI.ScaleRangeFill)">
      <summary>
            Inserts an item into the collection at the specified index.
            </summary>
      <param name="index">
            Index to insert the item at.
            </param>
      <param name="item">
            Item to insert into the collection.
            </param>
      <exception cref="T:System.ArgumentNullException">item (parameter) is null.
            </exception>
      <exception cref="T:System.NotSupportedException">item (parameter) has been disposed.
            
            -or-
            item (parameter) is in another ScaleRangeFillCollection.
            
            -or-
            item (parameter) is already in this collection.
            </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">index (parameter) is less than zero.
            
            -or-
            

index (parameter) is greater than Count.
            


            -or-
            index (parameter) is greater than Count.
            </exception>
    </member>
    <member name="M:NationalInstruments.UI.ScaleRangeFillCollection.GetEnumerator">
      <summary>
            Returns an enumerator that you can use to iterate through the collection.
            </summary>
      <returns>
            The enumerator for the collection.
            </returns>
    </member>
    <member name="M:NationalInstruments.UI.ScaleRangeFillCollection.Remove(NationalInstruments.UI.ScaleRangeFill)">
      <summary>
            Removes the first occurrence of the specified item.
            </summary>
      <param name="item">
            Item to remove from the collection.
            </param>
    </member>
    <member name="M:NationalInstruments.UI.ScaleRangeFillCollection.RemoveAt(System.Int32)">
      <summary>
            Removes the item at the specified index.
            </summary>
      <param name="index">
            The zero-based index of the item to remove.
            </param>
      <exception cref="T:System.ArgumentOutOfRangeException">index (parameter) is less than zero.
            
            -or-
            

index (parameter) is greater than or equal to Count.
            


            -or-
            index (parameter) is greater than or equal to Count.
            </exception>
    </member>
    <member name="P:NationalInstruments.UI.ScaleRangeFillCollection.Item(System.Int32)">
      <summary>
            Gets or sets the ScaleRangeFill at the specified index. 
            </summary>
      <param name="index">
            The zero-based index of the entry to locate in the collection.
            </param>
      <exception cref="T:System.ArgumentNullException">
            	The value is null.
            </exception>
      <exception cref="T:System.NotSupportedException">
            		The value has been disposed.
            
            -or-
            
            		The value is in another ScaleRangeFillCollection.
            
            -or-
            
            		The value is already in this collection.
            </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">index (parameter) is less than zero.
            
            -or-
            

index (parameter) is greater than Count.
            


            -or-
            index (parameter) is greater than Count.
            </exception>
    </member>
    <member name="P:NationalInstruments.UI.ScaleRangeFillCollection.Count">
      <summary>
            Gets the number of elements in the ScaleRangeFillCollection.
            </summary>
    </member>
    <member name="P:NationalInstruments.UI.ScaleRangeFillCollection.IsSynchronized">
      <summary>
            Gets a value indicating whether access to the collection is synchronized
            (thread-safe).
            </summary>
    </member>
    <member name="P:NationalInstruments.UI.ScaleRangeFillCollection.IsFixedSize">
      <summary>
            Gets a value indicating whether the collection has a fixed size.
            </summary>
    </member>
    <member name="P:NationalInstruments.UI.ScaleRangeFillCollection.IsReadOnly">
      <summary>
            Gets a value indicating whether the collection is read-only.
            </summary>
    </member>
    <member name="P:NationalInstruments.UI.ScaleRangeFillCollection.SyncRoot">
      <summary>
            Gets an object that can be used to synchronize access to the collection.
            </summary>
    </member>
    <member name="M:NationalInstruments.Restricted.ControlElement.Invalidate(System.Boolean)">
      <summary />
    </member>
    <member name="T:NationalInstruments.UI.PropertyEditorDisplayMode">
      <summary>
            Specifies the display options available in the property editor.
            </summary>
    </member>
    <member name="F:NationalInstruments.UI.PropertyEditorDisplayMode.PaintValue">
      <summary>
            The property editor displays the painted representation of the value if paint value is supported.
            </summary>
    </member>
    <member name="F:NationalInstruments.UI.PropertyEditorDisplayMode.Text">
      <summary>
            The property editor displays a textual representation of the value.
            </summary>
    </member>
    <member name="F:NationalInstruments.UI.PropertyEditorDisplayMode.TextAndPaintValue">
      <summary>
            The property editor displays both the textual and painted representation of the value. 
            The painted representation is only drawn if paint value is supported.
            </summary>
    </member>
    <member name="T:NationalInstruments.UI.LinearNumericPointerInteractionModes">
      <summary>
            Defines the set of user interactions that are possible within a linear numeric pointer.
            </summary>
    </member>
    <member name="F:NationalInstruments.UI.LinearNumericPointerInteractionModes.Indicator">
      <summary>
            No interaction.
            </summary>
    </member>
    <member name="F:NationalInstruments.UI.LinearNumericPointerInteractionModes.DragPointer">
      <summary>
            The pointer can be dragged.
            </summary>
    </member>
    <member name="F:NationalInstruments.UI.LinearNumericPointerInteractionModes.SnapPointer">
      <summary>
            The pointer can be snapped to a value.
            </summary>
    </member>
    <member name="F:NationalInstruments.UI.LinearNumericPointerInteractionModes.EditRange">
      <summary>
            Interactively edit the minimum and maximum values of the scale at run time.
            </summary>
    </member>
    <member name="T:NationalInstruments.UI.ILegendItemSource">
      <summary>
            Defines an interface for objects that can be displayed in a legend control.
            </summary>
    </member>
    <member name="M:NationalInstruments.UI.ILegendItemSource.DrawLegendItem(NationalInstruments.UI.ComponentDrawArgs)">
      <summary>
            Draws the symbol of a legend item.
            </summary>
      <param name="args">
            A ComponentDrawArgs that contains the graphics surface to
            draw the legend item on and the bounds in which to draw the legend item.
            </param>
      <exception cref="T:System.ArgumentNullException">args (parameter) is null.
            </exception>
    </member>
    <member name="E:NationalInstruments.UI.ILegendItemSource.LegendItemChanged">
      <summary>
            Occurs when the ILegendItemSource has changed such
            that its appearance in a legend control must be updated.
            </summary>
    </member>
    <member name="E:NationalInstruments.UI.ILegendItemSource.Disposed">
      <summary>
            Occurs when the ILegendItemSource has been disposed.
            </summary>
    </member>
    <member name="M:NationalInstruments.UI.Internal.Quantizer.#ctor(System.Boolean)">
      <summary>
            Construct the quantizer
            </summary>
      <param name="singlePass">If true, the quantization only needs to loop through the source pixels once</param>
    </member>
    <member name="M:NationalInstruments.UI.Internal.Quantizer.Quantize(System.Drawing.Image)">
      <summary>
            Quantize an image and return the resulting output bitmap
            </summary>
      <param name="source">The image to quantize</param>
      <returns>A quantized version of the image</returns>
    </member>
    <member name="M:NationalInstruments.UI.Internal.Quantizer.FirstPass(System.Drawing.Imaging.BitmapData,System.Int32,System.Int32)">
      <summary>
            Execute the first pass through the pixels in the image
            </summary>
      <param name="sourceData">The source data</param>
      <param name="width">The width in pixels of the image</param>
      <param name="height">The height in pixels of the image</param>
    </member>
    <member name="M:NationalInstruments.UI.Internal.Quantizer.SecondPass(System.Drawing.Imaging.BitmapData,System.Drawing.Bitmap,System.Int32,System.Int32,System.Drawing.Rectangle)">
      <summary>
            Execute a second pass through the bitmap
            </summary>
      <param name="sourceData">The source bitmap, locked into memory</param>
      <param name="output">The output bitmap</param>
      <param name="width">The width in pixels of the image</param>
      <param name="height">The height in pixels of the image</param>
      <param name="bounds">The bounding rectangle</param>
    </member>
    <member name="M:NationalInstruments.UI.Internal.Quantizer.InitialQuantizePixel(System.Drawing.Color)">
      <summary>
            Override this to process the pixel in the first pass of the algorithm
            </summary>
      <param name="pixel">The pixel to quantize</param>
    </member>
    <member name="M:NationalInstruments.UI.Internal.Quantizer.QuantizePixel(System.Drawing.Color)">
      <summary>
            Override this to process the pixel in the second pass of the algorithm
            </summary>
      <param name="pixel">The pixel to quantize</param>
      <returns>The quantized value</returns>
    </member>
    <member name="M:NationalInstruments.UI.Internal.Quantizer.GetPalette(System.Drawing.Imaging.ColorPalette)">
      <summary>
            Retrieve the palette for the quantized image
            </summary>
      <param name="original">Any old palette, this is overrwritten</param>
      <returns>The new color palette</returns>
    </member>
    <member name="F:NationalInstruments.UI.Internal.Quantizer._singlePass">
      <summary>
            Flag used to indicate whether a single pass or two passes are needed for quantization.
            </summary>
    </member>
    <member name="T:NationalInstruments.UI.IntensityYAxisEventArgs">
      <summary>
            Provides data for the 
            YAxisRangeChanged event.
            </summary>
    </member>
    <member name="M:NationalInstruments.UI.IntensityYAxisEventArgs.#ctor(NationalInstruments.UI.IntensityYAxis)">
      <summary>
            Initializes a new instance of the IntensityYAxisEventArgs class
            with the specified intensity y-axis.
            </summary>
      <param name="intensityYAxis">
            The IntensityYAxis on which the range changed event occurred.
            </param>
      <exception cref="T:System.ArgumentNullException">intensityYAxis (parameter) is null.
            </exception>
    </member>
    <member name="M:NationalInstruments.UI.IntensityYAxisEventArgs.#ctor(NationalInstruments.UI.IntensityYAxis,NationalInstruments.UI.GraphAction)">
      <summary>
            Initializes a new instance of the IntensityYAxisEventArgs class
            with the specified intensity y-axis and the action on the graph.
            </summary>
      <param name="intensityYAxis">
            The IntensityYAxis on which the range changed event occurred.
            </param>
      <param name="action">
            The GraphAction that caused the range changed event.
            </param>
      <exception cref="T:System.ArgumentNullException">intensityYAxis (parameter) is null.
            </exception>
    </member>
    <member name="M:NationalInstruments.UI.IntensityYAxisEventArgs.ToString">
      <summary>
            Returns a string representation of the object.
            </summary>
      <returns>
            A string representation of the object.
            </returns>
    </member>
    <member name="P:NationalInstruments.UI.IntensityYAxisEventArgs.IntensityYAxis">
      <summary>
            Gets the y-axis on which the range changed event occurred.
            </summary>
    </member>
    <member name="P:NationalInstruments.UI.IntensityYAxisEventArgs.Action">
      <summary>
            Gets the action which raised the range changed event on the intensity y-axis.
            </summary>
    </member>
    <member name="T:NationalInstruments.UI.IntensityXAxisEventHandler">
      <summary>
            Represents the method that handles the 
            XAxisRangeChanged event.
            </summary>
      <param name="sender">
            The source of the event.
            </param>
      <param name="e">
            An IntensityXAxisEventArgs that contains the event
            data.
            </param>
    </member>
    <member name="T:NationalInstruments.UI.ImageType">
      <summary>
            Provides an abstract class for specifying the format, content type, and file extension of an image.
            </summary>
    </member>
    <member name="M:NationalInstruments.UI.ImageType.#ctor">
      <summary>
            Initializes a new instance of the ImageType class.
            </summary>
    </member>
    <member name="M:NationalInstruments.UI.ImageType.Save(System.Drawing.Image,System.IO.Stream)">
      <summary>
            Saves an image to the specified stream with the appropriate format.
            </summary>
      <param name="image">
            The Image to save.
            </param>
      <param name="stream">
            The Stream where the image is saved.
            </param>
      <exception cref="T:System.ArgumentNullException">

image (parameter) is null.
            
            -or-
            

stream (parameter) is null.
            


            -or-
            stream (parameter) is null.
            </exception>
    </member>
    <member name="M:NationalInstruments.UI.ImageType.ToBytes(System.Drawing.Image)">
      <summary>
            Converts an image to an array of bytes.
            </summary>
      <param name="image">
            The Image to convert.
            </param>
      <returns>
            An array of bytes that represents the binary data of the image.
            </returns>
      <exception cref="T:System.ArgumentNullException">image (parameter) is null.
            </exception>
    </member>
    <member name="P:NationalInstruments.UI.ImageType.UnderlyingType">
      <summary>
            Gets the underlying type of an EnumObject value.
            </summary>
    </member>
    <member name="P:NationalInstruments.UI.ImageType.ImageFormat">
      <summary>
            Gets the format of the image.
            </summary>
    </member>
    <member name="P:NationalInstruments.UI.ImageType.Extension">
      <summary>
            Gets the file extension of the image.
            </summary>
    </member>
    <member name="P:NationalInstruments.UI.ImageType.ContentType">
      <summary>
            Gets the Multipurpose Internet Mail Extensions (MIME) content type of the image.
            </summary>
    </member>
    <member name="P:NationalInstruments.UI.ImageType.Bmp">
      <summary>
            Gets an ImageType for bitmap (BMP) images.
            </summary>
    </member>
    <member name="P:NationalInstruments.UI.ImageType.Gif">
      <summary>
            Gets an ImageType for Graphics Interchange Format (GIF) images.
            </summary>
    </member>
    <member name="P:NationalInstruments.UI.ImageType.Jpeg">
      <summary>
            Gets an ImageType for Joint Photographic Experts Group (JPEG)
            images.
            </summary>
    </member>
    <member name="P:NationalInstruments.UI.ImageType.Png">
      <summary>
            Gets an ImageType for W3C Portable Network Graphics (PNG) images.
            </summary>
    </member>
    <member name="T:NationalInstruments.UI.GaugeStyleDrawArgs">
      <summary>
            Provides the data to draw a GaugeStyle.
            </summary>
    </member>
    <member name="T:NationalInstruments.UI.RadialNumericPointerStyleDrawArgs">
      <summary>
            Provides the data to draw a RadialNumericPointerStyle.
            </summary>
    </member>
    <member name="T:NationalInstruments.UI.NumericPointerStyleDrawArgs">
      <summary>
            Provides the data to draw a numeric pointer style.
            </summary>
    </member>
    <member name="M:NationalInstruments.UI.NumericPointerStyleDrawArgs.#ctor(System.Drawing.Graphics,System.Drawing.Rectangle)">
      <summary>
            Initializes a new instance of the NumericPointerStyleDrawArgs class with the specified
            graphics and bounds.
            </summary>
      <param name="graphics">
            The Graphics with which to draw.
            </param>
      <param name="bounds">
            A Rectangle representing the bounds in which the style is drawn.
            </param>
      <exception cref="T:System.ArgumentNullException">graphics (parameter)	is null.
            </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
            The	Width of bounds (parameter) is less than zero.
            
            -or-
            
            The	Height of bounds (parameter) is less than zero.
            </exception>
    </member>
    <member name="M:NationalInstruments.UI.NumericPointerStyleDrawArgs.ToString">
      <summary>
            Returns a string representation of the object.
            </summary>
      <returns>
            A string representation of the object.
            </returns>
    </member>
    <member name="P:NationalInstruments.UI.NumericPointerStyleDrawArgs.Bounds">
      <summary>
            Gets the rectangle in which the style is drawn.
            </summary>
    </member>
    <member name="M:NationalInstruments.UI.RadialNumericPointerStyleDrawArgs.#ctor(System.Drawing.Graphics,System.Drawing.Rectangle)">
      <summary>
            Initializes a new instance of the RadialNumericPointerStyleDrawArgs class with the specified
            graphics and bounds.
            </summary>
      <param name="graphics">
            The Graphics with which to draw.
            </param>
      <param name="bounds">
            The Rectangle in which the RadialNumericPointerStyle is drawn.
            </param>
      <exception cref="T:System.ArgumentNullException">graphics (parameter)	is null.
            </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
            The	Width of bounds (parameter) is less than zero.
            
            -or-
            
            The	Height of bounds (parameter) is less than zero.
            </exception>
    </member>
    <member name="M:NationalInstruments.UI.GaugeStyleDrawArgs.#ctor(System.Drawing.Graphics,System.Drawing.Rectangle)">
      <summary>
            Initializes a new instance of the GaugeStyleDrawArgs class with the specified
            graphics and bounds.
            </summary>
      <param name="graphics">
            The Graphics with which to draw.
            </param>
      <param name="bounds">
            The Rectangle in which the GaugeStyle is drawn.
            </param>
      <exception cref="T:System.ArgumentNullException">graphics (parameter)	is null.
            </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
            The	Width of bounds (parameter) is less than zero.
            
            -or-
            
            The	Height of bounds (parameter) is less than zero.
            </exception>
    </member>
    <member name="T:NationalInstruments.UI.DigitalYAxis">
      <summary>
            Represents the vertical axis on a digital waveform graph.
            </summary>
    </member>
    <member name="T:NationalInstruments.UI.ControlEntity">
      <summary>
            Defines the base class for components that behave as sub-objects of a control.
            </summary>
    </member>
    <member name="M:NationalInstruments.UI.ControlEntity.#ctor">
      <summary>
            Initializes a new instance of the ControlEntity class.
            </summary>
    </member>
    <member name="M:NationalInstruments.UI.ControlEntity.Dispose(System.Boolean)">
      <summary>
            Releases the unmanaged resources used by the ControlEntity 
            and optionally releases the managed resources.
            </summary>
      <param name="disposing">true to release both managed and unmanaged resources; false to release only
            unmanaged resources.
            </param>
    </member>
    <member name="M:NationalInstruments.UI.ControlEntity.GetBounds">
      <summary>
            Gets the rectangle that represents the bounds of the component. 
            </summary>
      <returns>
            A Rectangle that represents the bounds of the component.
            </returns>
      <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
    </member>
    <member name="M:NationalInstruments.UI.ControlEntity.GetSize">
      <summary>
            Gets a size that represents the width and height of the component.
            </summary>
      <returns>
            A Size that represents the width and height of the component.
            </returns>
      <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
    </member>
    <member name="M:NationalInstruments.UI.ControlEntity.Draw(NationalInstruments.UI.ComponentDrawArgs)">
      <summary>
            Draws the component with the specified ComponentDrawArgs.
            </summary>
      <param name="args">
            A ComponentDrawArgs that contains the 
            drawing data.
            </param>
      <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
      <exception cref="T:System.ArgumentNullException">args (parameter) is null.
            </exception>
    </member>
    <member name="M:NationalInstruments.UI.ControlEntity.OnOwnerChanged(System.EventArgs)">
      <summary>
            Raises the OwnerChanged event.
            </summary>
      <param name="e">
            An EventArgs that contains the event data.
            </param>
      <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
    </member>
    <member name="M:NationalInstruments.UI.ControlEntity.Invalidate">
      <summary>
            Invalidates the Owner and causes it to redraw.
            </summary>
      <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
    </member>
    <member name="M:NationalInstruments.UI.ControlEntity.Invalidate(System.Boolean)">
      <summary>
            Invalidates the Owner and causes it to layout and then redraw.
            </summary>
      <param name="forceLayout">true to force a layout before redraw; false to cause a redraw only.
            </param>
      <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
    </member>
    <member name="M:NationalInstruments.UI.ControlEntity.OnPropertyChanged(System.ComponentModel.PropertyChangedEventArgs)">
      <summary>
            Raises the PropertyChanged event.
            </summary>
      <param name="e">
            A PropertyChangedEventArgs that contains the event data.
            </param>
      <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
    </member>
    <member name="M:NationalInstruments.UI.ControlEntity.GetService(System.Type)">
      <summary>
            Gets the service object of the specified type.
            </summary>
      <param name="service">
            A service provided by the component.
            </param>
      <returns>
            An Object that represents the service provided by the component or 
            null if the component does not provide the 
            specified service.
            </returns>
    </member>
    <member name="P:NationalInstruments.UI.ControlEntity.Owner">
      <summary>
            Gets the control that this ControlEntity belongs to.
            </summary>
      <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
    </member>
    <member name="P:NationalInstruments.UI.ControlEntity.Tag">
      <summary>
            Gets or sets an object that contains data about the component.
            </summary>
      <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
    </member>
    <member name="P:NationalInstruments.UI.ControlEntity.SynchronizingObject">
      <summary>
            Gets or sets the object that marshals calls to event handlers and callbacks. 
            </summary>
    </member>
    <member name="P:NationalInstruments.UI.ControlEntity.Visible">
      <summary>
            Gets or sets a value indicating if the component is displayed.
            </summary>
      <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
    </member>
    <member name="E:NationalInstruments.UI.ControlEntity.OwnerChanged">
      <summary>
            Occurs when the value of Owner 
            changes.
            </summary>
      <exception cref="T:System.ObjectDisposedException">
            An event handler is added after the object has been disposed.
            </exception>
    </member>
    <member name="E:NationalInstruments.UI.ControlEntity.PropertyChanged">
      <summary>
            Occurs when the value of a property changes.
            </summary>
      <exception cref="T:System.ObjectDisposedException">
            An event handler is added after the object has been disposed.</exception>
    </member>
    <member name="M:NationalInstruments.UI.DigitalYAxis.ToString">
      <summary>
            Returns a string representation of the object.
            </summary>
      <returns>
            A string representation of the object.
            </returns>
      <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
    </member>
    <member name="M:NationalInstruments.UI.DigitalYAxis.GetBounds(System.Drawing.Graphics,System.Drawing.Rectangle)">
      <summary>
            Returns the bounds of the DigitalYAxis relative to a reference rectangle.
            </summary>
      <param name="graphics">
            The Graphics object that is used to calculate the bounds of the axis.
            </param>
      <param name="referenceRectangle">
            A Rectangle that provides a reference for the bounds of the YAxis.
            </param>
      <returns>
            A Rectangle that represents the bounds of the DigitalYAxis.
            </returns>
      <exception cref="T:System.ArgumentNullException">graphics (parameter) is null.
            	</exception>
      <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
    </member>
    <member name="M:NationalInstruments.UI.DigitalYAxis.GetService(System.Type)">
      <summary>
            Gets the service object of the specified type.
            </summary>
      <param name="service">
            A service provided by the component.
            </param>
      <returns>
            An Object that represents the service provided by the component or 
            null if the component does not provide the 
            specified service.
            </returns>
    </member>
    <member name="P:NationalInstruments.UI.DigitalYAxis.MajorGridColor">
      <summary>
            Gets or sets the color of the major grid lines.
            </summary>
      <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
    </member>
    <member name="P:NationalInstruments.UI.DigitalYAxis.MajorGridVisible">
      <summary>
            Gets or sets a value indicating if the major grid lines are displayed.
            </summary>
      <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
    </member>
    <member name="P:NationalInstruments.UI.DigitalYAxis.MinorGridColor">
      <summary>
            Gets or sets the color of the minor grid lines.
            </summary>
      <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
    </member>
    <member name="P:NationalInstruments.UI.DigitalYAxis.MinorGridVisible">
      <summary>
            Gets or sets a value indicating if the minor grid lines are displayed.
            </summary>
      <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
    </member>
    <member name="P:NationalInstruments.UI.DigitalYAxis.MinimumWidth">
      <summary>
            Gets or sets the minimum width required by DigitalYAxis,
            allowing you to customize the DigitalYAxis width. 
            </summary>
      <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
            The specified value is less than zero.
            </exception>
    </member>
    <member name="P:NationalInstruments.UI.DigitalYAxis.MaximumWidth">
      <summary>
            Gets or sets the maximum width required by DigitalYAxis,
            allowing you to customize the DigitalYAxis width. 
            </summary>
      <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
            The specified value is less than zero.
            </exception>
    </member>
    <member name="P:NationalInstruments.UI.DigitalYAxis.LabelFont">
      <summary>
            Gets or sets the font of the labels that are displayed by the y-axis.
            </summary>
      <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
    </member>
    <member name="T:NationalInstruments.UI.DigitalWaveformGraphHitTestInfo">
      <summary>
            Specifies the parts of a digital waveform graph that can be hit-tested.
            </summary>
    </member>
    <member name="F:NationalInstruments.UI.DigitalWaveformGraphHitTestInfo.None">
      <summary>
            The portion of a digital waveform graph outside the axes, plots, and plot area.
            </summary>
    </member>
    <member name="F:NationalInstruments.UI.DigitalWaveformGraphHitTestInfo.HorizontalScrollBar">
      <summary>
            The horizontal scroll bar of a digital waveform graph.
            </summary>
    </member>
    <member name="F:NationalInstruments.UI.DigitalWaveformGraphHitTestInfo.VerticalScrollBar">
      <summary>
            The vertical scroll bar of a digital waveform graph.
            </summary>
    </member>
    <member name="F:NationalInstruments.UI.DigitalWaveformGraphHitTestInfo.WaveformPlot">
      <summary>
            The waveform plot of a digital waveform graph.
            </summary>
    </member>
    <member name="F:NationalInstruments.UI.DigitalWaveformGraphHitTestInfo.SignalPlot">
      <summary>
            The signal plot of a digital waveform graph.
            </summary>
    </member>
    <member name="F:NationalInstruments.UI.DigitalWaveformGraphHitTestInfo.XAxis">
      <summary>
            The x-axis of a digital waveform graph.
            </summary>
    </member>
    <member name="F:NationalInstruments.UI.DigitalWaveformGraphHitTestInfo.YAxis">
      <summary>
            The y-axis of a digital waveform graph.
            </summary>
    </member>
    <member name="F:NationalInstruments.UI.DigitalWaveformGraphHitTestInfo.PlotArea">
      <summary>
            The plot area of a digital waveform graph.
            </summary>
    </member>
    <member name="T:NationalInstruments.UI.DigitalWaveformGraphDefaultInteractionMode">
      <summary>
            Specifies the user interaction that is enabled without the use of a modifier key in the plot area of a digital waveform graph.
            </summary>
    </member>
    <member name="F:NationalInstruments.UI.DigitalWaveformGraphDefaultInteractionMode.None">
      <summary>
            No interaction is enabled by default.
            </summary>
    </member>
    <member name="F:NationalInstruments.UI.DigitalWaveformGraphDefaultInteractionMode.ZoomX">
      <summary>
            The plot are can be zoomed with a horizontal selection by default.
            </summary>
    </member>
    <member name="F:NationalInstruments.UI.DigitalWaveformGraphDefaultInteractionMode.ZoomAroundPoint">
      <summary>
            The plot area can be zoomed around a particular point by default.
            </summary>
    </member>
    <member name="F:NationalInstruments.UI.DigitalWaveformGraphDefaultInteractionMode.PanX">
      <summary>
            The plot area can be panned horizontally by default.
            </summary>
    </member>
    <member name="F:NationalInstruments.UI.DigitalWaveformGraphDefaultInteractionMode.PanY">
      <summary>
            The plot area can be panned vertically by default.
            </summary>
    </member>
    <member name="F:NationalInstruments.UI.DigitalWaveformGraphDefaultInteractionMode.PanXY">
      <summary>
            The plot area can be panned both horizontally and vertically by default.
            </summary>
    </member>
    <member name="T:NationalInstruments.UI.DigitalTransitionStyleDrawArgs">
      <summary>
            Provides data for drawing the transitions that connect digital states and digital waveform samples together.
            </summary>
    </member>
    <member name="M:NationalInstruments.UI.DigitalTransitionStyleDrawArgs.#ctor(System.Drawing.Graphics,System.Drawing.Color,System.Single,NationalInstruments.DigitalWaveformSample,NationalInstruments.DigitalWaveformSample,System.Object,System.Object,System.Drawing.PointF[],System.Drawing.PointF[])">
      <summary>
            Initializes a new instance of the DigitalTransitionStyleDrawArgs class with the specified graphics,
            line color, line width, previous sample, next sample, previous tag, next tag, previous points, and next points.
            </summary>
      <param name="graphics">
            The Graphics used to draw the style.
            </param>
      <param name="lineColor">
            The Color of the line to draw.
            </param>
      <param name="lineWidth">
            The width of the line to draw.
            </param>
      <param name="previousSample">
            The DigitalWaveformSample before the transition. 
            </param>
      <param name="nextSample">
            The DigitalWaveformSample  after the transition.
            </param>
      <param name="previousTag">
            The Object value of the tag before the transition.
            </param>
      <param name="nextTag">
            The Object value of the tag  after the transition.
            </param>
      <param name="previousPoints">
            The PointF array containing the points before the transition.
            </param>
      <param name="nextPoints">
            The PointF array containing the points after the transition.
            </param>
      <exception cref="T:System.ArgumentOutOfRangeException">lineWidth (parameter) is less than or equal to zero.
            </exception>
      <exception cref="T:System.ArgumentNullException">previousSample (parameter) is null.
            
            -or-
            nextSample (parameter) is null.
            
            -or-
            previousPoints (parameter) is null.
            
            -or-
            nextPoints (parameter) is null.
            
            -or-
            graphics (parameter) is null.
            	</exception>
    </member>
    <member name="M:NationalInstruments.UI.DigitalTransitionStyleDrawArgs.GetPreviousPoints">
      <summary>
            Returns an array containing the points before the transition.
            </summary>
      <returns>
            A PointF array containing the points before the transition.
            </returns>
    </member>
    <member name="M:NationalInstruments.UI.DigitalTransitionStyleDrawArgs.GetNextPoints">
      <summary>
            Returns an array containing the points after the transition.
            </summary>
      <returns>
            A PointF array containing the points after the transition.
            </returns>
    </member>
    <member name="P:NationalInstruments.UI.DigitalTransitionStyleDrawArgs.LineColor">
      <summary>
            Gets the color of the transition line.
            </summary>
    </member>
    <member name="P:NationalInstruments.UI.DigitalTransitionStyleDrawArgs.LineWidth">
      <summary>
            Gets the width of the transition line.
            </summary>
    </member>
    <member name="P:NationalInstruments.UI.DigitalTransitionStyleDrawArgs.PreviousSample">
      <summary>
            Gets the digital waveform sample before the transition.
            </summary>
    </member>
    <member name="P:NationalInstruments.UI.DigitalTransitionStyleDrawArgs.NextSample">
      <summary>
            Gets the digital waveform sample after the transition.
            </summary>
    </member>
    <member name="P:NationalInstruments.UI.DigitalTransitionStyleDrawArgs.PreviousTag">
      <summary>
            Gets the tag before the transition.
            </summary>
    </member>
    <member name="P:NationalInstruments.UI.DigitalTransitionStyleDrawArgs.NextTag">
      <summary>
            Gets the tag after the transition.
            </summary>
    </member>
    <member name="T:NationalInstruments.UI.ComplexPlotCollection">
      <summary>
            Represents a strongly typed collection of ComplexPlot objects.
            </summary>
    </member>
    <member name="M:NationalInstruments.UI.ComplexPlotCollection.#ctor">
      <summary>
            Initializes a new instance of the ComplexPlotCollection class.
            </summary>
    </member>
    <member name="M:NationalInstruments.UI.ComplexPlotCollection.#ctor(NationalInstruments.UI.ComplexPlot[])">
      <summary>
            Initializes a new instance of the ComplexPlotCollection class
            from an array of ComplexPlot objects.
            </summary>
      <param name="item">
            Array of ComplexPlot objects to copy.
            </param>
      <exception cref="T:System.ArgumentNullException">item (parameter) is null.
            
            -or-
            
            An element in item (parameter) is null.
            </exception>
      <exception cref="T:System.NotSupportedException">
            		An element in item (parameter) has been disposed.
            
            -or-
            
            		An element in item (parameter) is in another ComplexPlotCollection.
            
            -or-
            
            		An element in item (parameter) is already in this collection.
            </exception>
    </member>
    <member name="M:NationalInstruments.UI.ComplexPlotCollection.#ctor(NationalInstruments.UI.ComplexPlotCollection)">
      <summary>
            Initializes a new instance of ComplexPlotCollection
            from an existing collection.
            </summary>
      <param name="item">
            The ComplexPlotCollection to copy.
            </param>
      <exception cref="T:System.ArgumentNullException">item (parameter) is null.
            
            -or-
            
            An element in item (parameter) is null.
            </exception>
      <exception cref="T:System.NotSupportedException">
            		An element in item (parameter) has been disposed.
            
            -or-
            
            		An element in item (parameter) is in another ComplexPlotCollection.
            
            -or-
            
            		An element in item (parameter) is already in this collection.
            </exception>
    </member>
    <member name="M:NationalInstruments.UI.ComplexPlotCollection.ToString">
      <summary>
            Returns a string representation of the object.
            </summary>
      <returns>
            A string representation of the object.
            </returns>
    </member>
    <member name="M:NationalInstruments.UI.ComplexPlotCollection.Add(NationalInstruments.UI.ComplexPlot)">
      <summary>
            Adds an item to the end of the collection.
            </summary>
      <param name="item">
            Item to add to the collection.
            </param>
      <returns>
            The array index of the added item.
            </returns>
      <exception cref="T:System.ArgumentNullException">item (parameter) is null.
            </exception>
      <exception cref="T:System.NotSupportedException">item (parameter) has been disposed.
            
            -or-
            item (parameter) is in another ComplexPlotCollection.
            
            -or-
            item (parameter) is already in this collection.
            </exception>
    </member>
    <member name="M:NationalInstruments.UI.ComplexPlotCollection.AddRange(NationalInstruments.UI.ComplexPlot[])">
      <summary>
            Adds an array of ComplexPlot objects to the end of the collection.
            </summary>
      <param name="item">
            Array of ComplexPlot objects to add to the collection.
            </param>
      <exception cref="T:System.ArgumentNullException">item (parameter) is null.
            
            -or-
            
            An element in item (parameter) is null.
            </exception>
      <exception cref="T:System.NotSupportedException">
            		An element in item (parameter) has been disposed.
            
            -or-
            
            		An element in item (parameter) is in another ComplexPlotCollection.
            
            -or-
            
            		An element in item (parameter) is already in this collection.
            </exception>
    </member>
    <member name="M:NationalInstruments.UI.ComplexPlotCollection.AddRange(NationalInstruments.UI.ComplexPlotCollection)">
      <summary>
            Adds a collection of ComplexPlot objects to the end of the collection.
            </summary>
      <param name="item">
            Collection of ComplexPlot objects to add to the collection.
            </param>
      <exception cref="T:System.ArgumentNullException">item (parameter) is null.
            
            -or-
            
            An element in item (parameter) is null.
            </exception>
      <exception cref="T:System.NotSupportedException">
            		An element in item (parameter) has been disposed.
            
            -or-
            
            		An element in item (parameter) is in another ComplexPlotCollection.
            
            -or-
            
            		An element in item (parameter) is already in this collection.
            </exception>
    </member>
    <member name="M:NationalInstruments.UI.ComplexPlotCollection.Clear">
      <summary>
            Removes all items from the collection.
            </summary>
    </member>
    <member name="M:NationalInstruments.UI.ComplexPlotCollection.Contains(NationalInstruments.UI.ComplexPlot)">
      <summary>
            Determines if the specified element is in the collection.
            </summary>
      <param name="item">Item to locate in the collection.</param>
      <returns>true if the collection contains item (parameter).
            </returns>
    </member>
    <member name="M:NationalInstruments.UI.ComplexPlotCollection.CopyTo(NationalInstruments.UI.ComplexPlot[],System.Int32)">
      <summary>
            Copies the collection to an array or a portion of an array.
            </summary>
      <param name="array">
            Destination array for the collection.
            </param>
      <param name="index">
            The index in the target array at which you want to begin copying the collection to.
            </param>
      <exception cref="T:System.ArgumentNullException">array (parameter) is null.
            </exception>
      <exception cref="T:System.ArgumentException">array (parameter) is multidimensional.
            
            -or-
            index (parameter) is equal to or greater than the length of array (parameter).
            
            -or-
            
            The number of elements in the collection is greater than the available space between
            index (parameter) and the end of array (parameter).
            </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">index (parameter) is less than the lower bound of array (parameter).
            </exception>
    </member>
    <member name="M:NationalInstruments.UI.ComplexPlotCollection.IndexOf(NationalInstruments.UI.ComplexPlot)">
      <summary>
            Returns the zero-based index of the first occurrence of an item in the collection.
            </summary>
      <param name="item">
            Item to search for.
            </param>
      <returns>
            Index of the item. If the item is not found, returns -1.
            </returns>
    </member>
    <member name="M:NationalInstruments.UI.ComplexPlotCollection.Insert(System.Int32,NationalInstruments.UI.ComplexPlot)">
      <summary>
            Inserts an item into the collection at the specified index.
            </summary>
      <param name="index">
            Index to insert the item at.
            </param>
      <param name="item">
            Item to insert into the collection.
            </param>
      <exception cref="T:System.ArgumentNullException">item (parameter) is null.
            </exception>
      <exception cref="T:System.NotSupportedException">item (parameter) has been disposed.
            
            -or-
            item (parameter) is in another ComplexPlotCollection.
            
            -or-
            item (parameter) is already in this collection.
            </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">index (parameter) is less than zero.
            
            -or-
            

index (parameter) is greater than Count.
            


            -or-
            index (parameter) is greater than Count.
            </exception>
    </member>
    <member name="M:NationalInstruments.UI.ComplexPlotCollection.GetEnumerator">
      <summary>
            Returns an enumerator that you can use to iterate through the collection.
            </summary>
      <returns>
            The enumerator for the collection.
            </returns>
    </member>
    <member name="M:NationalInstruments.UI.ComplexPlotCollection.Remove(NationalInstruments.UI.ComplexPlot)">
      <summary>
            Removes the first occurrence of the specified item.
            </summary>
      <param name="item">
            Item to remove from the collection.
            </param>
    </member>
    <member name="M:NationalInstruments.UI.ComplexPlotCollection.RemoveAt(System.Int32)">
      <summary>
            Removes the item at the specified index.
            </summary>
      <param name="index">
            The zero-based index of the item to remove.
            </param>
      <exception cref="T:System.ArgumentOutOfRangeException">index (parameter) is less than zero.
            
            -or-
            

index (parameter) is greater than or equal to Count.
            


            -or-
            index (parameter) is greater than or equal to Count.
            </exception>
    </member>
    <member name="P:NationalInstruments.UI.ComplexPlotCollection.Item(System.Int32)">
      <summary>
            Gets or sets the ComplexPlot at the specified index. 
            </summary>
      <param name="index">
            The zero-based index of the entry to locate in the collection.
            </param>
      <exception cref="T:System.ArgumentNullException">
            	The value is null.
            </exception>
      <exception cref="T:System.NotSupportedException">
            		The value has been disposed.
            
            -or-
            
            		The value is in another ComplexPlotCollection.
            
            -or-
            
            		The value is already in this collection.
            </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">index (parameter) is less than zero.
            
            -or-
            

index (parameter) is greater than Count.
            


            -or-
            index (parameter) is greater than Count.
            </exception>
    </member>
    <member name="P:NationalInstruments.UI.ComplexPlotCollection.Count">
      <summary>
            Gets the number of elements in the ComplexPlotCollection.
            </summary>
    </member>
    <member name="P:NationalInstruments.UI.ComplexPlotCollection.IsSynchronized">
      <summary>
            Gets a value indicating whether access to the collection is synchronized
            (thread-safe).
            </summary>
    </member>
    <member name="P:NationalInstruments.UI.ComplexPlotCollection.IsFixedSize">
      <summary>
            Gets a value indicating whether the collection has a fixed size.
            </summary>
    </member>
    <member name="P:NationalInstruments.UI.ComplexPlotCollection.IsReadOnly">
      <summary>
            Gets a value indicating whether the collection is read-only.
            </summary>
    </member>
    <member name="P:NationalInstruments.UI.ComplexPlotCollection.SyncRoot">
      <summary>
            Gets an object that can be used to synchronize access to the collection.
            </summary>
    </member>
    <member name="T:NationalInstruments.UI.ComplexErrorDataArgs">
      <summary>
            Provides data for the GetErrorData method.
            </summary>
    </member>
    <member name="M:NationalInstruments.UI.ComplexErrorDataArgs.#ctor(NationalInstruments.UI.ComplexDataType,NationalInstruments.ComplexDouble[])">
      <summary>
            Initializes a new instance of the ComplexErrorDataArgs class
            with the specified primary error data type and complex data array.
            </summary>
      <param name="primaryErrorDataType">
            The type of primary error data for which GetErrorData is being called.
            </param>
      <param name="complexData">
            The values of the data points for which error data is requested.
            </param>
      <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
            The specified value is not one of the ComplexDataType values.
            </exception>
      <exception cref="T:System.ArgumentNullException">complexData (parameter) is null.
            </exception>
    </member>
    <member name="M:NationalInstruments.UI.ComplexErrorDataArgs.GetComplexData">
      <summary>
            Gets the values of the data points for which error data is requested.
            </summary>
      <returns>A ComplexDouble array that represents the values 
            of the data points for which error data is requested.</returns>
    </member>
    <member name="P:NationalInstruments.UI.ComplexErrorDataArgs.PrimaryErrorDataType">
      <summary>
            Gets the orientation of error data for which the GetErrorData 
            method is being called.
            </summary>
    </member>
    <member name="T:NationalInstruments.UI.ComplexCursor">
      <summary>
            Represents a cursor that is associated with a ComplexPlot.
            </summary>
    </member>
    <member name="T:NationalInstruments.UI.Cursor">
      <summary>
            Provides an abstract base class for a cursor.  
            </summary>
    </member>
    <member name="M:NationalInstruments.UI.Cursor.#ctor">
      <summary>
            Initializes a new instance of the Cursor class.
            </summary>
    </member>
    <member name="M:NationalInstruments.UI.Cursor.ToString">
      <summary>
            Returns a string representation of the object.
            </summary>
      <returns>
            A string representation of the object.
            </returns>
    </member>
    <member name="M:NationalInstruments.UI.Cursor.Dispose(System.Boolean)">
      <summary>
            Releases the unmanaged resources used by the Cursor 
            and optionally releases the managed resources.
            </summary>
      <param name="disposing">true to release both managed and unmanaged resources; false to release only
            unmanaged resources.
            </param>
    </member>
    <member name="M:NationalInstruments.UI.Cursor.DrawPoint(NationalInstruments.UI.ComponentDrawArgs)">
      <summary>
            Draws the point of the cursor.
            </summary>
      <param name="args">
            A ComponentDrawArgs that contains the 
            drawing data.
            </param>
      <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
      <exception cref="T:System.ArgumentNullException">args (parameter) is null.
            </exception>
      <exception cref="T:System.InvalidOperationException">
            The plot of the cursor is not in a good state.
            </exception>
    </member>
    <member name="M:NationalInstruments.UI.Cursor.DrawLabel(NationalInstruments.UI.ComponentDrawArgs)">
      <summary>
            Draws the label of the cursor.
            </summary>
      <param name="args">
            A ComponentDrawArgs that contains the 
            drawing data.
            </param>
      <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
      <exception cref="T:System.ArgumentNullException">args (parameter) is null.
            </exception>
      <exception cref="T:System.InvalidOperationException">
            The plot of the cursor is not in a good state.
            </exception>
    </member>
    <member name="M:NationalInstruments.UI.Cursor.DrawVerticalCrosshair(NationalInstruments.UI.ComponentDrawArgs)">
      <summary>
            Draws the vertical crosshair of the cursor.
            </summary>
      <param name="args">
            A ComponentDrawArgs that contains the 
            drawing data.
            </param>
      <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
      <exception cref="T:System.ArgumentNullException">args (parameter) is null.
            </exception>
      <exception cref="T:System.InvalidOperationException">
            The plot of the cursor is not in a good state.
            </exception>
    </member>
    <member name="M:NationalInstruments.UI.Cursor.DrawHorizontalCrosshair(NationalInstruments.UI.ComponentDrawArgs)">
      <summary>
            Draws the horizontal crosshair of the cursor.
            </summary>
      <param name="args">
            A ComponentDrawArgs that contains the 
            drawing data.
            </param>
      <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
      <exception cref="T:System.ArgumentNullException">args (parameter) is null.
            </exception>
      <exception cref="T:System.InvalidOperationException">
            The plot of the cursor is not in a good state.
            </exception>
    </member>
    <member name="M:NationalInstruments.UI.Cursor.DrawLegendItem(NationalInstruments.UI.ComponentDrawArgs)">
      <summary>
            Draws the symbol of a Cursor.
            </summary>
      <param name="args">
            A ComponentDrawArgs that contains the graphics surface to
            draw the legend item on and the bounds in which to draw the legend item.
            </param>
      <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
      <exception cref="T:System.ArgumentNullException">args (parameter) is null.
            </exception>
    </member>
    <member name="M:NationalInstruments.UI.Cursor.BeginInit">
      <summary>
            Signals to the object that initialization is beginning.
            </summary>
    </member>
    <member name="M:NationalInstruments.UI.Cursor.EndInit">
      <summary>
            Signals to the object that initialization is complete.
            </summary>
    </member>
    <member name="M:NationalInstruments.UI.Cursor.OnLegendItemChanged(System.EventArgs)">
      <summary>
            Raises the LegendItemChanged event.
            </summary>
      <param name="e">
            An EventArgs that contains the event data.
            </param>
      <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
    </member>
    <member name="P:NationalInstruments.UI.Cursor.PointStyle">
      <summary>
            Gets or sets the style of the point that is
            displayed in the middle of the crosshairs. 
            </summary>
      <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
      <exception cref="T:System.ArgumentNullException">
            The specified value is null.
            </exception>
    </member>
    <member name="P:NationalInstruments.UI.Cursor.PointSize">
      <summary>
            Gets or sets the size of the point that is displayed in the middle
            of the crosshairs.
            </summary>
      <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
            The Width is negative.
            
            -or-
            
            The Height is negative.
            </exception>
    </member>
    <member name="P:NationalInstruments.UI.Cursor.Color">
      <summary>
            Gets or sets the color of the cursor.
            </summary>
      <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
    </member>
    <member name="P:NationalInstruments.UI.Cursor.LineStyle">
      <summary>
            Gets or sets the line style that is used to display the crosshairs of the
            cursor. 
            </summary>
      <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
      <exception cref="T:System.ArgumentNullException">
            The specified value is null.
            </exception>
    </member>
    <member name="P:NationalInstruments.UI.Cursor.LineWidth">
      <summary>
            Gets or sets the line width that is used to display the crosshairs of the cursor.
            </summary>
      <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
            The specified value is less than or equal to zero.
            
            -or-
            
            The specified value is NaN, NegativeInfinity,
            or PositiveInfinity.
            </exception>
    </member>
    <member name="P:NationalInstruments.UI.Cursor.HorizontalCrosshairLength">
      <summary>
            Gets or sets the horizontal crosshair length.
            </summary>
      <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
            The specified value is less than zero.
            
            -or-
            
            The specified value is NaN, NegativeInfinity,
            or PositiveInfinity.
            </exception>
    </member>
    <member name="P:NationalInstruments.UI.Cursor.VerticalCrosshairLength">
      <summary>
            Gets or sets the vertical crosshair length.
            </summary>
      <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
            The specified value is less than zero.
            
            -or-
            
            The specified value is NaN, NegativeInfinity,
            or PositiveInfinity.
            </exception>
    </member>
    <member name="P:NationalInstruments.UI.Cursor.SnapMode">
      <summary>
            Gets or sets how the cursor behaves when it moves. 
            </summary>
      <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
      <exception cref="T:System.InvalidOperationException">
            The plot of the cursor is not in a good state.
            </exception>
    </member>
    <member name="P:NationalInstruments.UI.Cursor.HorizontalCrosshairMode">
      <summary>
            Gets or sets the horizontal crosshair mode.
            </summary>
      <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
      <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
            The specified value is not a CursorCrosshairMode value.
            </exception>
    </member>
    <member name="P:NationalInstruments.UI.Cursor.VerticalCrosshairMode">
      <summary>
            Gets or sets the vertical crosshair mode.
            </summary>
      <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
      <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
            The specified value is not a CursorCrosshairMode value.
            </exception>
    </member>
    <member name="P:NationalInstruments.UI.Cursor.LabelAlignment">
      <summary>
            Gets or sets the alignment of the cursor label with respect to the cursor crosshair.
            </summary>
      <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
      <exception cref="T:System.ArgumentNullException">value (parameter) is null.
            </exception>
    </member>
    <member name="P:NationalInstruments.UI.Cursor.LabelBackColor">
      <summary>
            Gets or sets the background color of the cursor label.
            </summary>
      <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
    </member>
    <member name="P:NationalInstruments.UI.Cursor.LabelFont">
      <summary>
            Gets or sets the font of the cursor label.
            </summary>
      <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
    </member>
    <member name="P:NationalInstruments.UI.Cursor.LabelForeColor">
      <summary>
            Gets or sets the foreground color of the cursor label.
            </summary>
      <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
    </member>
    <member name="P:NationalInstruments.UI.Cursor.LabelVisible">
      <summary>
            Gets or sets a value indicating if the cursor label is displayed.
            </summary>
      <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
    </member>
    <member name="E:NationalInstruments.UI.Cursor.LegendItemChanged">
      <summary>
            Occurs when the Cursor has changed such
            that its appearance in a legend control must be updated.
            </summary>
    </member>
    <member name="M:NationalInstruments.UI.ComplexCursor.#ctor(NationalInstruments.UI.ComplexPlot)">
      <summary>
            Initializes a new instance of the ComplexCursor class with the specified
            ComplexPlot.
            </summary>
      <param name="plot">
            The ComplexPlot of the cursor.
            </param>
      <exception cref="T:System.ArgumentNullException">plot (parameter) is null.	
            </exception>
    </member>
    <member name="M:NationalInstruments.UI.ComplexCursor.#ctor">
      <summary>
            Initializes a new instance of the ComplexCursor class.
            </summary>
    </member>
    <member name="M:NationalInstruments.UI.ComplexCursor.GetService(System.Type)">
      <summary>
            Gets the service object of the specified type.
            </summary>
      <param name="service">
            A service provided by the component.
            </param>
      <returns>
            An Object that represents the service provided by the component or 
            null if the component does not provide the 
            specified service.
            </returns>
    </member>
    <member name="M:NationalInstruments.UI.ComplexCursor.MoveCursor(NationalInstruments.ComplexDouble)">
      <summary>
            Moves ComplexCursor to the specified position. 
            </summary>
      <param name="complexDataValue">
            The location to move ComplexCursor to.
            </param>
      <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
            	The Real value of the complexDataValue (parameter) parameter or the Imaginary value of the complexDataValue (parameter) parameter is
            NaN.
            </exception>
      <exception cref="T:System.InvalidOperationException">
            		The XAxis of the
            Plot is null.
            
            -or-
            
            	The YAxis of the
            Plot is null.	
            
            -or-
            The PlotOwner
            and the ComplexCursorOwner are different.
            
            -or-
            The PlotOwner
            and the Plot y-axis Owner are different.
            
            -or-
            The PlotOwner
            and the Plot x-axis Owner are different.
            </exception>
    </member>
    <member name="M:NationalInstruments.UI.ComplexCursor.MoveCursor(System.Int32)">
      <summary>
            Moves ComplexCursor to the specified data index.
            </summary>
      <param name="index">
            The data index to move the cursor to.
            </param>
      <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">index (parameter) is less than 0.
            
            -or-
            index (parameter) is greater than or equal to
            HistoryCount.
            </exception>
    </member>
    <member name="M:NationalInstruments.UI.ComplexCursor.MoveNext">
      <summary>
            Advances ComplexCursor forward 1 index.
            </summary>
      <returns>true if ComplexCursor moved; otherwise,
            false.
            </returns>
      <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
    </member>
    <member name="M:NationalInstruments.UI.ComplexCursor.MoveNext(System.Int32)">
      <summary>
            Advances ComplexCursor forward a specified number of indexes.
            </summary>
      <param name="pointCount">
            The number of indexes to advance the cursor. 
            </param>
      <returns>true if ComplexCursor moved; otherwise,
            false.
            </returns>
      <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">pointCount (parameter) is less than or equal to zero.
            </exception>
    </member>
    <member name="M:NationalInstruments.UI.ComplexCursor.MovePrevious">
      <summary>
            Recedes ComplexCursor back 1 index.
            </summary>
      <returns>true if ComplexCursor moved; otherwise,
            false.
            </returns>
      <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
    </member>
    <member name="M:NationalInstruments.UI.ComplexCursor.MovePrevious(System.Int32)">
      <summary>
            Recedes ComplexCursor back a specified number of indexes. 
            </summary>
      <param name="pointCount">
            The number of indexes to recede the cursor.
            </param>
      <returns>true if the ComplexCursor moved; otherwise,
            false.
            </returns>
      <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">pointCount (parameter) is less than or equal to zero.
            </exception>
    </member>
    <member name="M:NationalInstruments.UI.ComplexCursor.GetCurrentIndex">
      <summary>
            Gets the current data index of the cursor.
            </summary>
      <returns>
            The value is -1 if SnapMode is
            Fixed or Floating or
            the Plot has no data; otherwise, the data index.
            </returns>
      <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
    </member>
    <member name="M:NationalInstruments.UI.ComplexCursor.Dispose(System.Boolean)">
      <summary>
            Releases the resources used by ComplexCursor.
            </summary>
      <param name="disposing">
            If true, this method releases managed and unmanaged resources. If false, this method releases
            only unmanaged resources.
            </param>
    </member>
    <member name="M:NationalInstruments.UI.ComplexCursor.Clone">
      <summary>
            Creates a new object that is a copy of this instance.
            </summary>
      <returns>
            A new object that is a copy of this instance.
            </returns>
    </member>
    <member name="M:NationalInstruments.UI.ComplexCursor.OnBeforeMove(NationalInstruments.UI.BeforeMoveComplexCursorEventArgs)">
      <summary>
            Raises the BeforeMove event.
            </summary>
      <param name="e">
            A BeforeMoveComplexCursorEventArgs 
            that contains the event data.
            </param>
      <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
    </member>
    <member name="M:NationalInstruments.UI.ComplexCursor.OnBeforeDraw(NationalInstruments.UI.BeforeDrawComplexCursorEventArgs)">
      <summary>
            Raises the BeforeDraw event.
            </summary>
      <param name="e">
            A BeforeDrawComplexCursorEventArgs that contains the event data.
            </param>
      <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
    </member>
    <member name="M:NationalInstruments.UI.ComplexCursor.OnAfterMove(NationalInstruments.UI.AfterMoveComplexCursorEventArgs)">
      <summary>
            Raises the AfterMove event.
            </summary>
      <param name="e">
            An AfterMoveComplexCursorEventArgs 
            that contains the event data.
            </param>
      <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
    </member>
    <member name="M:NationalInstruments.UI.ComplexCursor.OnAfterDraw(NationalInstruments.UI.AfterDrawComplexCursorEventArgs)">
      <summary>
            Raises the AfterDraw event.
            </summary>
      <param name="e">
            An AfterDrawComplexCursorEventArgs that contains the event data.
            </param>
      <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
    </member>
    <member name="P:NationalInstruments.UI.ComplexCursor.Plot">
      <summary>
            Gets or sets the ComplexPlot that 
            ComplexCursor is associated with.
            </summary>
      <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
    </member>
    <member name="P:NationalInstruments.UI.ComplexCursor.Position">
      <summary>
            Gets or sets the location of 
            ComplexCursor.  
            </summary>
      <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
            The real value is NaN.
            
            -or-
            
            The imaginary value is NaN.
            </exception>
      <exception cref="T:System.InvalidOperationException">
            		The XAxis of the
            Plot is null.
            
            -or-
            
            	The YAxis of the
            Plot is null.	
            
            -or-
            The PlotOwner
            and the ComplexCursorOwner are different.
            
            -or-
            The PlotOwner
            and the Plot y-axis Owner are different.
            
            -or-
            The PlotOwner
            and the Plot x-axis Owner are different.
            </exception>
    </member>
    <member name="P:NationalInstruments.UI.ComplexCursor.LabelFormatString">
      <summary>
            Gets or sets the format string that is used to format the 
            ComplexCursor label.
            </summary>
      <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
      <exception cref="T:System.FormatException">
            The format string is not well formed.
            </exception>
    </member>
    <member name="E:NationalInstruments.UI.ComplexCursor.BeforeMove">
      <summary>
            Occurs before ComplexCursor moves.
            </summary>
      <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
    </member>
    <member name="E:NationalInstruments.UI.ComplexCursor.BeforeDraw">
      <summary>
            Occurs before the cursor is drawn.
            </summary>
      <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
    </member>
    <member name="E:NationalInstruments.UI.ComplexCursor.AfterMove">
      <summary>
            Occurs after ComplexCursor moves.
            </summary>
      <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
    </member>
    <member name="E:NationalInstruments.UI.ComplexCursor.AfterDraw">
      <summary>
            Occurs after the cursor has been drawn.
            </summary>
    </member>
    <member name="T:NationalInstruments.UI.ColorScalePosition">
      <summary>
            Specifies the position of a ColorScale with respect to the plot area.
            </summary>
    </member>
    <member name="F:NationalInstruments.UI.ColorScalePosition.Right">
      <summary>
            The color scale is positioned at the right of the plot area.
            </summary>
    </member>
    <member name="F:NationalInstruments.UI.ColorScalePosition.Left">
      <summary>
            The color scale is positioned at the left  of the plot area.
            </summary>
    </member>
    <member name="F:NationalInstruments.UI.ColorScalePosition.Top">
      <summary>
            The color scale is positioned at the top of the plot area.
            </summary>
    </member>
    <member name="F:NationalInstruments.UI.ColorScalePosition.Bottom">
      <summary>
            The color scale is positioned at the bottom of the plot area.
            </summary>
    </member>
    <member name="T:NationalInstruments.UI.BoundsAlignment">
      <summary>
            Provides an abstract base class for aligning items around a bounding rectangle.
            </summary>
    </member>
    <member name="T:NationalInstruments.UI.Alignment">
      <summary>Provides an abstract base class for aligning items.
            </summary>
    </member>
    <member name="M:NationalInstruments.UI.Alignment.#ctor">
      <summary>
            Initializes a new instance of the Alignment class.
            </summary>
    </member>
    <member name="M:NationalInstruments.UI.Alignment.AdjustPosition(System.Object,NationalInstruments.UI.AlignmentArgs)">
      <summary>
            Adjusts the position of an item.
            </summary>
      <param name="context">
            The object that specifies the context in which AdjustPosition is called.
            </param>
      <param name="args">
            An AlignmentArgs that contains the 
            alignment data.
            </param>
      <returns>
            The adjusted location of the specified item.
            </returns>
      <exception cref="T:System.ArgumentNullException">args (parameter) is null.
            </exception>
    </member>
    <member name="M:NationalInstruments.UI.BoundsAlignment.#ctor">
      <summary>
            Initializes a new instance of the BoundsAlignment class.
            </summary>
    </member>
    <member name="P:NationalInstruments.UI.BoundsAlignment.UnderlyingType">
      <summary>
            Gets the underlying type of an EnumObject value.
            </summary>
    </member>
    <member name="P:NationalInstruments.UI.BoundsAlignment.Auto">
      <summary>
            Gets a bounds alignment that auto-aligns an item to the specified bounds.
            </summary>
    </member>
    <member name="P:NationalInstruments.UI.BoundsAlignment.BottomCenter">
      <summary>
            Gets a bounds alignment that aligns an item to the bottom center of the specified bounds.
            </summary>
    </member>
    <member name="P:NationalInstruments.UI.BoundsAlignment.BottomLeft">
      <summary>
            Gets a bounds alignment that aligns an item to the bottom left of the specified bounds.
            </summary>
    </member>
    <member name="P:NationalInstruments.UI.BoundsAlignment.BottomRight">
      <summary>
            Gets a bounds alignment that aligns an item to the bottom right of the specified bounds.
            </summary>
    </member>
    <member name="P:NationalInstruments.UI.BoundsAlignment.MiddleCenter">
      <summary>
            Gets a bounds alignment that aligns an item to the middle center of the specified bounds.
            </summary>
    </member>
    <member name="P:NationalInstruments.UI.BoundsAlignment.MiddleLeft">
      <summary>
            Gets a bounds alignment that aligns an item to the middle left of the specified bounds.
            </summary>
    </member>
    <member name="P:NationalInstruments.UI.BoundsAlignment.MiddleRight">
      <summary>
            Gets a bounds alignment that aligns an item to the middle right of the specified bounds.
            </summary>
    </member>
    <member name="P:NationalInstruments.UI.BoundsAlignment.TopLeft">
      <summary>
            Gets a bounds alignment that aligns an item to the top left of the specified bounds.
            </summary>
    </member>
    <member name="P:NationalInstruments.UI.BoundsAlignment.TopRight">
      <summary>
            Gets a bounds alignment that aligns an item to the top right of the specified bounds.
            </summary>
    </member>
    <member name="P:NationalInstruments.UI.BoundsAlignment.TopCenter">
      <summary>
            Gets a bounds alignment that aligns an item to the top center of the specified bounds.
            </summary>
    </member>
    <member name="P:NationalInstruments.UI.BoundsAlignment.None">
      <summary>
            Gets a bounds alignment that does not adjust the alignment of the item.
            </summary>
    </member>
    <member name="T:NationalInstruments.UI.BeforeDrawMagnitudePhaseRangeAnnotationEventHandler">
      <summary>
            Represents the method that handles the events that occur before a magnitude-phase range annotation draws.
            </summary>
      <param name="sender">
            The source of the event.
            </param>
      <param name="e">
            A BeforeDrawMagnitudePhaseRangeAnnotationEventArgs that contains the event data.
            </param>
    </member>
    <member name="T:NationalInstruments.UI.BeforeDrawMagnitudeCircleAnnotationEventHandler">
      <summary>
            Represents the method that handles the events that occur before a magnitude circle range annotation draws.
            </summary>
      <param name="sender">
            The source of the event.
            </param>
      <param name="e">
            A BeforeDrawMagnitudeCircleAnnotationEventArgs that contains the event data.
            </param>
    </member>
    <member name="T:NationalInstruments.UI.ArrowStyle">
      <summary>
            Provides an abstract base class for specifying an arrow style. 
            </summary>
    </member>
    <member name="M:NationalInstruments.UI.ArrowStyle.#ctor">
      <summary>
            Initializes a new instance of the ArrowStyle class.
            </summary>
    </member>
    <member name="M:NationalInstruments.UI.ArrowStyle.Draw(System.Object,NationalInstruments.UI.ArrowStyleDrawArgs)">
      <summary>
            Draws an arrow with the specified ArrowStyleDrawArgs.
            </summary>
      <param name="context">
            The object that specifies the context in which Draw is called.
            </param>
      <param name="args">
            An ArrowStyleDrawArgs that contains the 
            drawing data.
            </param>
      <exception cref="T:System.ArgumentNullException">args (parameter) is null.
            </exception>
    </member>
    <member name="M:NationalInstruments.UI.ArrowStyle.GetArrowLinePoint(System.Drawing.PointF,System.Drawing.Size)">
      <summary>
            Specifies the point at which the arrow line starts within the bounds of the the arrow style.
            </summary>
      <param name="point">
            A PointF that specifies the point at which the arrow style is drawn.
            </param>
      <param name="size">
            The Size of the arrow style.
            </param>
      <returns>
            The Point at which the arrow line starts drawing.
            </returns>
    </member>
    <member name="M:NationalInstruments.UI.ArrowStyle.Draw(System.Object,NationalInstruments.UI.ArrowStyleDrawArgs,System.Single)">
      <summary>
            Draws an arrow with the specified ArrowStyleDrawArgs at the rotation angle.
            </summary>
      <param name="context">
            The object that specifies the context in which Draw is called.
            </param>
      <param name="args">
            An ArrowStyleDrawArgs that contains the 
            drawing data.
            </param>
      <param name="angle">
            The angle or rotation to draw the arrow.
            </param>
      <exception cref="T:System.ArgumentNullException">args (parameter) is null.
            </exception>
    </member>
    <member name="P:NationalInstruments.UI.ArrowStyle.UnderlyingType">
      <summary>
            Gets the underlying type of an EnumObject value.
            </summary>
    </member>
    <member name="P:NationalInstruments.UI.ArrowStyle.None">
      <summary>
            Gets a value indicating that there is no arrow.
            </summary>
    </member>
    <member name="P:NationalInstruments.UI.ArrowStyle.Open">
      <summary>
            Gets an arrow with an open arrow style.
            </summary>
    </member>
    <member name="P:NationalInstruments.UI.ArrowStyle.SolidDiamond">
      <summary>
            Gets an arrow with a solid diamond arrow style.
            </summary>
    </member>
    <member name="P:NationalInstruments.UI.ArrowStyle.SolidRectangle">
      <summary>
            Gets an arrow with a solid rectangle arrow style.
            </summary>
    </member>
    <member name="P:NationalInstruments.UI.ArrowStyle.SolidRound">
      <summary>
            Gets an arrow with a solid, round arrow style.
            </summary>
    </member>
    <member name="P:NationalInstruments.UI.ArrowStyle.SolidTriangle">
      <summary>
            Gets an arrow with a solid triangle arrow style.
            </summary>
    </member>
    <member name="P:NationalInstruments.UI.ArrowStyle.SolidStealth">
      <summary>
            Gets an arrow with a solid stealth arrow style.
            </summary>
    </member>
    <member name="P:NationalInstruments.UI.ArrowStyle.EmptyDiamond">
      <summary>
            Gets an arrow with an empty diamond arrow style.
            </summary>
    </member>
    <member name="P:NationalInstruments.UI.ArrowStyle.EmptyRectangle">
      <summary>
            Gets an arrow with an empty rectangle arrow style.
            </summary>
    </member>
    <member name="P:NationalInstruments.UI.ArrowStyle.EmptyRound">
      <summary>
            Gets an arrow with an empty round arrow style.
            </summary>
    </member>
    <member name="P:NationalInstruments.UI.ArrowStyle.EmptyTriangle">
      <summary>
            Gets an arrow with an empty triangle arrow style.
            </summary>
    </member>
    <member name="P:NationalInstruments.UI.ArrowStyle.EmptyStealth">
      <summary>
            Gets an arrow with an empty stealth style.
            </summary>
    </member>
    <member name="T:NationalInstruments.UI.AfterDrawMagnitudePhaseRangeAnnotationEventArgs">
      <summary>
            Provides data for events that occur after the range annotation draws.
            </summary>
    </member>
    <member name="T:NationalInstruments.UI.AfterDrawEventArgs">
      <summary>
            Provides data for custom draw events that occur after a control or control sub-object is drawn.
            </summary>
    </member>
    <member name="M:NationalInstruments.UI.AfterDrawEventArgs.#ctor(System.Drawing.Graphics,System.Drawing.Rectangle)">
      <summary>
            Initializes a new instance of the AfterDrawEventArgs class with
            the specified graphics and bounds.
            </summary>
      <param name="graphics">
            The Graphics used to draw the item.
            </param>
      <param name="bounds">
            The Rectangle that represents that bounds in which to draw.
            </param>
    </member>
    <member name="M:NationalInstruments.UI.AfterDrawEventArgs.ToString">
      <summary>
            Returns a string representation of the object.
            </summary>
      <returns>
            A string representation of the object.
            </returns>
    </member>
    <member name="P:NationalInstruments.UI.AfterDrawEventArgs.Graphics">
      <summary>
            Gets the graphics used to draw the item.
            </summary>
    </member>
    <member name="P:NationalInstruments.UI.AfterDrawEventArgs.Bounds">
      <summary>
            Gets the rectangle in which to draw.
            </summary>
    </member>
    <member name="M:NationalInstruments.UI.AfterDrawMagnitudePhaseRangeAnnotationEventArgs.#ctor(System.Drawing.Graphics,System.Drawing.Rectangle,NationalInstruments.UI.MagnitudePhaseRangeAnnotation,NationalInstruments.UI.ComplexRangeAnnotationPart,System.Drawing.PointF,System.Drawing.PointF,System.Drawing.PointF,System.Drawing.Size,System.Single)">
      <summary>
            Initializes a new instance of the AfterDrawMagnitudePhaseRangeAnnotationEventArgs class with the specified graphics, bounds, 
            annotation, annotation part, arrow head point, arrow tail point, caption point, caption size, and caption angle.
            </summary>
      <param name="graphics">
            The Graphics used to draw the item.
            </param>
      <param name="bounds">
            The Rectangle that represents the bounds in which to draw.
            </param>
      <param name="annotation">
            The MagnitudePhaseRangeAnnotation for which the event is occurring.
            </param>
      <param name="annotationPart">
            The ComplexRangeAnnotationPart of the annotation that was drawn.
            </param>
      <param name="arrowHeadPoint">
            The Point at which the arrow head was drawn.
            </param>
      <param name="arrowTailPoint">
            The Point at which the arrow tail is located.
            </param>
      <param name="captionPoint">
            The Point at which the caption was drawn.
            </param>
      <param name="captionSize">
            The Size of the Rectangle in which to draw the caption.
            </param>
      <param name="captionAngle">
            The angle at which to draw the caption.
            </param>
      <exception cref="T:System.ArgumentNullException">annotation (parameter) is null.
            	-or-graphics (parameter) is null.
            	</exception>
    </member>
    <member name="P:NationalInstruments.UI.AfterDrawMagnitudePhaseRangeAnnotationEventArgs.Annotation">
      <summary>
            Gets the MagnitudePhaseRangeAnnotation that was drawn.
            </summary>
    </member>
    <member name="P:NationalInstruments.UI.AfterDrawMagnitudePhaseRangeAnnotationEventArgs.Part">
      <summary>
            Gets the part of the annotation that was drawn.
            </summary>
    </member>
    <member name="P:NationalInstruments.UI.AfterDrawMagnitudePhaseRangeAnnotationEventArgs.ArrowHeadPoint">
      <summary>
            Gets the point at which the arrow head was drawn.
            </summary>
    </member>
    <member name="P:NationalInstruments.UI.AfterDrawMagnitudePhaseRangeAnnotationEventArgs.ArrowTailPoint">
      <summary>
            Gets the point at which the arrow tail is located.
            </summary>
    </member>
    <member name="P:NationalInstruments.UI.AfterDrawMagnitudePhaseRangeAnnotationEventArgs.CaptionPoint">
      <summary>
            Gets the point at which the caption was drawn.
            </summary>
    </member>
    <member name="P:NationalInstruments.UI.AfterDrawMagnitudePhaseRangeAnnotationEventArgs.CaptionSize">
      <summary>
            Gets the size of the rectangle in which the caption was drawn.
            </summary>
    </member>
    <member name="P:NationalInstruments.UI.AfterDrawMagnitudePhaseRangeAnnotationEventArgs.CaptionAngle">
      <summary>
            Gets the angle at which the caption was drawn.
            </summary>
    </member>
    <member name="T:NationalInstruments.UI.AfterDrawMagnitudeCircleAnnotationEventArgs">
      <summary>
            Provides data for events that occur after the range annotation draws.
            </summary>
    </member>
    <member name="M:NationalInstruments.UI.AfterDrawMagnitudeCircleAnnotationEventArgs.#ctor(System.Drawing.Graphics,System.Drawing.Rectangle,NationalInstruments.UI.MagnitudeCircleAnnotation,NationalInstruments.UI.MagnitudeCircleAnnotationPart,System.Drawing.PointF,System.Drawing.PointF,System.Drawing.PointF,System.Drawing.Size,System.Single)">
      <summary>
            Initializes a new instance of the AfterDrawMagnitudeCircleAnnotationEventArgs class with the specified graphics, bounds, 
            annotation, annotation part, arrow head point, arrow tail point, caption point, caption size, and caption angle.
            </summary>
      <param name="graphics">
            The Graphics used to draw the item.
            </param>
      <param name="bounds">
            The Rectangle that represents the bounds in which to draw.
            </param>
      <param name="annotation">
            The MagnitudeCircleAnnotation for which the event is occurring.
            </param>
      <param name="annotationPart">
            The MagnitudeCircleAnnotationPart of the annotation that was drawn.
            </param>
      <param name="arrowHeadPoint">
            The Point at which the arrow head was drawn.
            </param>
      <param name="arrowTailPoint">
            The Point where the arrow tail is located.
            </param>
      <param name="captionPoint">
            The Point at which the caption was drawn.
            </param>
      <param name="captionSize">
            The Size of the Rectangle in which to draw the caption.
            </param>
      <param name="captionAngle">
            The angle at which to draw the caption.
            </param>
      <exception cref="T:System.ArgumentNullException">annotation (parameter) is null.
            	-or-graphics (parameter) is null.
            	</exception>
    </member>
    <member name="P:NationalInstruments.UI.AfterDrawMagnitudeCircleAnnotationEventArgs.Annotation">
      <summary>
            Gets the MagnitudeCircleAnnotation that was drawn.
            </summary>
    </member>
    <member name="P:NationalInstruments.UI.AfterDrawMagnitudeCircleAnnotationEventArgs.Part">
      <summary>
            Gets the part of the annotation that was drawn.
            </summary>
    </member>
    <member name="P:NationalInstruments.UI.AfterDrawMagnitudeCircleAnnotationEventArgs.ArrowHeadPoint">
      <summary>
            Gets the point at which the arrow head was drawn.
            </summary>
    </member>
    <member name="P:NationalInstruments.UI.AfterDrawMagnitudeCircleAnnotationEventArgs.ArrowTailPoint">
      <summary>
            Gets the point at which the arrow tail is located.
            </summary>
    </member>
    <member name="P:NationalInstruments.UI.AfterDrawMagnitudeCircleAnnotationEventArgs.CaptionPoint">
      <summary>
            Gets the point at which the caption was drawn.
            </summary>
    </member>
    <member name="P:NationalInstruments.UI.AfterDrawMagnitudeCircleAnnotationEventArgs.CaptionSize">
      <summary>
            Gets the size of the rectangle in which the caption was drawn.
            </summary>
    </member>
    <member name="P:NationalInstruments.UI.AfterDrawMagnitudeCircleAnnotationEventArgs.CaptionAngle">
      <summary>
            Gets the angle at which the caption was drawn.
            </summary>
    </member>
    <member name="T:NationalInstruments.UI.AfterDrawIntensityCursorEventArgs">
      <summary>
            Provides data for events that occur after the cursor draws.
            </summary>
    </member>
    <member name="M:NationalInstruments.UI.AfterDrawIntensityCursorEventArgs.#ctor(NationalInstruments.UI.IntensityCursor,System.Drawing.Rectangle,System.Drawing.Graphics,System.Drawing.Rectangle)">
      <summary>
            Initializes a new instance of AfterDrawIntensityCursorEventArgs with the specified cursor, point bounds,
            graphics, and bounds.
            </summary>
      <param name="cursor">
            The IntensityCursor for which the event is occurring.
            </param>
      <param name="pointBounds">
            The Rectangle that represents the bounds of the cursor point.
            </param>
      <param name="graphics">
            The Graphics used to draw the item.
            </param>
      <param name="bounds">
            The Rectangle that represents the bounds in which to draw.
            </param>
      <exception cref="T:System.ArgumentNullException">cursor (parameter) is null.
            	-or-graphics (parameter) is null.
            	</exception>
    </member>
    <member name="M:NationalInstruments.UI.AfterDrawIntensityCursorEventArgs.ToString">
      <summary>
            Returns a string representation of the object.
            </summary>
      <returns>
            A string representation of the object.
            </returns>
    </member>
    <member name="P:NationalInstruments.UI.AfterDrawIntensityCursorEventArgs.Cursor">
      <summary>
            Gets the IntensityCursor that has been drawn.
            </summary>
    </member>
    <member name="P:NationalInstruments.UI.AfterDrawIntensityCursorEventArgs.PointBounds">
      <summary>
            Gets the bounds of the cursor point.
            </summary>
    </member>
    <member name="T:NationalInstruments.UI.AfterDrawComplexRangeAnnotationEventArgs">
      <summary>
            Provides data for events that occur after the range annotation draws.
            </summary>
    </member>
    <member name="M:NationalInstruments.UI.AfterDrawComplexRangeAnnotationEventArgs.#ctor(System.Drawing.Graphics,System.Drawing.Rectangle,NationalInstruments.UI.ComplexRangeAnnotation,NationalInstruments.UI.ComplexRangeAnnotationPart,System.Drawing.PointF,System.Drawing.PointF,System.Drawing.PointF,System.Drawing.Size,System.Single)">
      <summary>
            Initializes a new instance of the AfterDrawComplexRangeAnnotationEventArgs class with the specified graphics, bounds, 
            annotation, annotation part, arrow head point, arrow tail point, caption point, caption size, and caption angle.
            </summary>
      <param name="graphics">
            The Graphics used to draw the item.
            </param>
      <param name="bounds">
            The Rectangle that represents the bounds in which to draw.
            </param>
      <param name="annotation">
            The ComplexRangeAnnotation for which the event is occurring.
            </param>
      <param name="annotationPart">
            The ComplexRangeAnnotationPart of the annotation that was drawn.
            </param>
      <param name="arrowHeadPoint">
            The Point at which the arrow head was drawn.
            </param>
      <param name="arrowTailPoint">
            The Point where the arrow tail is located.
            </param>
      <param name="captionPoint">
            The Point at which the caption was drawn.
            </param>
      <param name="captionSize">
            The Size of the Rectangle in which to draw the caption.
            </param>
      <param name="captionAngle">
            The angle at which to draw the caption.
            </param>
      <exception cref="T:System.ArgumentNullException">annotation (parameter) is null.
            	-or-graphics (parameter) is null.
            	</exception>
    </member>
    <member name="P:NationalInstruments.UI.AfterDrawComplexRangeAnnotationEventArgs.Annotation">
      <summary>
            Gets the ComplexRangeAnnotation that was drawn.
            </summary>
    </member>
    <member name="P:NationalInstruments.UI.AfterDrawComplexRangeAnnotationEventArgs.Part">
      <summary>
            Gets the part of the annotation that was drawn.
            </summary>
    </member>
    <member name="P:NationalInstruments.UI.AfterDrawComplexRangeAnnotationEventArgs.ArrowHeadPoint">
      <summary>
            Gets the point at which the arrow head was drawn.
            </summary>
    </member>
    <member name="P:NationalInstruments.UI.AfterDrawComplexRangeAnnotationEventArgs.ArrowTailPoint">
      <summary>
            Gets the point at which the arrow tail is located.
            </summary>
    </member>
    <member name="P:NationalInstruments.UI.AfterDrawComplexRangeAnnotationEventArgs.CaptionPoint">
      <summary>
            Gets the point at which the caption was drawn.
            </summary>
    </member>
    <member name="P:NationalInstruments.UI.AfterDrawComplexRangeAnnotationEventArgs.CaptionSize">
      <summary>
            Gets the size of the rectangle in which the caption was drawn.
            </summary>
    </member>
    <member name="P:NationalInstruments.UI.AfterDrawComplexRangeAnnotationEventArgs.CaptionAngle">
      <summary>
            Gets the angle at which the caption was drawn.
            </summary>
    </member>
    <member name="T:NationalInstruments.UI.AfterDrawComplexPlotEventArgs">
      <summary>
            Provides data for the AfterDrawPlot event.
            </summary>
    </member>
    <member name="M:NationalInstruments.UI.AfterDrawComplexPlotEventArgs.#ctor(NationalInstruments.UI.ComplexPlot,System.Drawing.Graphics,System.Drawing.Rectangle)">
      <summary>
            Initializes a new instance of the AfterDrawComplexPlotEventArgs
            class with the specified plot, graphics, and bounds.
            </summary>
      <param name="plot">
            The ComplexPlot for which the event is occurring.
            </param>
      <param name="graphics">
            The Graphics used to draw the item.
            </param>
      <param name="bounds">
            The Rectangle that represents the bounds in which to draw.
            </param>
      <exception cref="T:System.ArgumentNullException">plot (parameter) is null.
            	-or-graphics (parameter) is null.
            	</exception>
    </member>
    <member name="M:NationalInstruments.UI.AfterDrawComplexPlotEventArgs.ToString">
      <summary>
            Returns a string representation of the object.        
            </summary>
      <returns>
            A string representation of the object.
            </returns>
    </member>
    <member name="P:NationalInstruments.UI.AfterDrawComplexPlotEventArgs.Plot">
      <summary>
            Gets the ComplexPlot that has been drawn.
            </summary>
    </member>
    <member name="T:NationalInstruments.UI.AfterDragComplexAnnotationCaptionEventHandler">
      <summary>
            Represents the method that handles the events that occur after an annotation caption is dragged.
            </summary>
      <param name="sender">
            The source of the event.
            </param>
      <param name="e">
            An AfterDragComplexAnnotationCaptionEventArgs that contains the event data.
            </param>
    </member>
    <member name="T:NationalInstruments.UI.YAxisEventHandler">
      <summary>
            Represents the method that handles the 
            YAxisRangeChanged event.
            </summary>
      <param name="sender">
            The source of the event.
            </param>
      <param name="e">
            The YAxisEventArgs that contains the event
            data.
            </param>
    </member>
    <member name="T:NationalInstruments.UI.SelectionStyle">
      <summary>
            Provides an abstract base class for specifying the style used to draw a
            selection and also provides a list of pre-defined selection styles.
            </summary>
    </member>
    <member name="M:NationalInstruments.UI.SelectionStyle.#ctor">
      <summary>
            Initializes a new instance of the SelectionStyle class.
            </summary>
    </member>
    <member name="M:NationalInstruments.UI.SelectionStyle.Draw(System.Object,NationalInstruments.UI.SelectionStyleDrawArgs)">
      <summary>
            Draws a selection style with the specified SelectionStyleDrawArgs.
            </summary>
      <param name="context">
            The object that specifies the context in which Draw is called.
            </param>
      <param name="args">
            A SelectionStyleDrawArgs that contains
            the drawing data.
            </param>
    </member>
    <member name="P:NationalInstruments.UI.SelectionStyle.UnderlyingType">
      <summary>
            Gets the underlying type of an EnumObject value.
            </summary>
    </member>
    <member name="P:NationalInstruments.UI.SelectionStyle.OperatingSystem">
      <summary>
            Gets a selection style that is drawn based on the operating system settings.
            </summary>
    </member>
    <member name="P:NationalInstruments.UI.SelectionStyle.Outline">
      <summary>
            Gets a selection style that is drawn as an outline with a dashed border around the edge.
            </summary>
    </member>
    <member name="P:NationalInstruments.UI.SelectionStyle.Translucent">
      <summary>
            Gets a selection style that is drawn with a solid edge and a translucent body.
            </summary>
    </member>
    <member name="T:NationalInstruments.UI.ScaleType">
      <summary>
            Specifies how divisions are scaled.
            </summary>
    </member>
    <member name="F:NationalInstruments.UI.ScaleType.Linear">
      <summary>
            Divisions are spaced equally.
            </summary>
    </member>
    <member name="F:NationalInstruments.UI.ScaleType.Logarithmic">
      <summary>
            Divisions are spaced logarithmically.
            </summary>
    </member>
    <member name="T:NationalInstruments.UI.RefreshItem">
      <summary>
            Represents a server control that is updated in a refresh management control refresh event.
            </summary>
    </member>
    <member name="M:NationalInstruments.UI.RefreshItem.#ctor">
      <summary>
            Initializes a new instance of the RefreshItem class.
            </summary>
    </member>
    <member name="M:NationalInstruments.UI.RefreshItem.#ctor(System.String)">
      <summary>
            Initializes a new instance of the RefreshItem class
            with the specified server control ID.
            </summary>
      <param name="itemID">
            The ID of the server control that is updated in a refresh management control refresh event.
            </param>
    </member>
    <member name="M:NationalInstruments.UI.RefreshItem.Clone">
      <summary>
            Creates a new object that is a copy of this instance.
            </summary>
      <returns>
            A new object that is a copy of this instance.
            </returns>
    </member>
    <member name="M:NationalInstruments.UI.RefreshItem.ToString">
      <summary>
            Returns a string representation of the object.
            </summary>
      <returns>
            A string representation of the object.
            </returns>
    </member>
    <member name="P:NationalInstruments.UI.RefreshItem.ItemID">
      <summary>
            Gets or sets an ID that identifies a server control that is updated in a refresh management control
            refresh event.
            </summary>
    </member>
    <member name="T:NationalInstruments.UI.RadialNumericPointerStyle">
      <summary>
            Provides an abstract base class for radial pointer styles.
            </summary>
    </member>
    <member name="T:NationalInstruments.UI.NumericPointerStyle">
      <summary>
            Provides an abstract base class for numeric pointer styles.
            </summary>
    </member>
    <member name="M:NationalInstruments.UI.NumericPointerStyle.#ctor">
      <summary>
            Initializes a new instance of the NumericPointerStyle class.
            </summary>
    </member>
    <member name="M:NationalInstruments.UI.NumericPointerStyle.Draw(NationalInstruments.UI.INumericPointer,NationalInstruments.UI.NumericPointerStyleDrawArgs)">
      <summary>
            Draws the style using the Value from the INumericPointer 
            passed into this method. 
            </summary>
      <param name="context">
            An INumericPointer with additional context information. 
            </param>
      <param name="args">
            A NumericPointerStyleDrawArgs that contains the
            drawing data.
            </param>
      <exception cref="T:System.ArgumentNullException">context (parameter) is null.
            
            -or-
            args (parameter) is null.
            </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
            The Value is outside the Range.
            </exception>
    </member>
    <member name="M:NationalInstruments.UI.NumericPointerStyle.Draw(NationalInstruments.UI.INumericPointer,NationalInstruments.UI.NumericPointerStyleDrawArgs,System.Double)">
      <summary>
            Draws the style at the specified value.
            </summary>
      <param name="context">
            An INumericPointer with additional context information. 
            </param>
      <param name="args">
            A NumericPointerStyleDrawArgs that contains the
            drawing data.
            </param>
      <param name="value">
            The value used to draw the style.
            </param>
      <exception cref="T:System.ArgumentNullException">context (parameter) is null.
            	


                   -or-
            	args (parameter) is null.
                   

context (parameter) is null.
            	args (parameter) is null.
                   </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
            The value (parameter) is outside the Range.
            </exception>
    </member>
    <member name="M:NationalInstruments.UI.NumericPointerStyle.DrawPointer(NationalInstruments.UI.INumericPointer,NationalInstruments.UI.NumericPointerStyleDrawArgs,System.Double)">
      <summary>
            Draws the pointer of the style.
            </summary>
      <param name="context">
            An INumericPointer with additional context information. 
            </param>
      <param name="args">
            A NumericPointerStyleDrawArgs that contains the
            drawing data.
            </param>
      <param name="value">
            The value used to draw the pointer. 
            </param>
      <exception cref="T:System.ArgumentNullException">context (parameter) is null.
            
            -or-
            args (parameter) is null.
            </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
            The value (parameter) is outside the Range.
            </exception>
    </member>
    <member name="M:NationalInstruments.UI.NumericPointerStyle.DrawScaleRangeFill(NationalInstruments.UI.INumericPointer,NationalInstruments.UI.NumericPointerStyleDrawArgs,NationalInstruments.UI.ScaleRangeFill)">
      <summary>
            Draws a fill over a range on the scale.
            </summary>
      <param name="context">
            An INumericPointer with additional context information.
            </param>
      <param name="args">
            A NumericPointerStyleDrawArgs that contains the
            drawing data.
            </param>
      <param name="rangeFill">
            The ScaleRangeFill to be drawn.
            </param>
      <exception cref="T:System.ArgumentNullException">context (parameter) is null.
            
            -or-
            args (parameter) is null.
            
            -or-
            rangeFill (parameter) is null.
            </exception>
    </member>
    <member name="M:NationalInstruments.UI.NumericPointerStyle.DrawScale(NationalInstruments.UI.INumericPointer,NationalInstruments.UI.NumericPointerStyleDrawArgs)">
      <summary>
            Draws the scale of the style.
            </summary>
      <param name="context">
            An INumericPointer with additional context information.
            </param>
      <param name="args">
            A NumericPointerStyleDrawArgs that contains the
            drawing data.
            </param>
      <exception cref="T:System.ArgumentNullException">context (parameter) is null.
            
            -or-
            args (parameter) is null.
            </exception>
    </member>
    <member name="M:NationalInstruments.UI.NumericPointerStyle.MapValue(NationalInstruments.UI.INumericPointer,System.Drawing.Rectangle,System.Double,System.Drawing.PointF@,System.Drawing.PointF@)">
      <summary>
            Transforms the value to a start point and end point.
            </summary>
      <param name="context">
            An INumericPointer with additional context information.
            </param>
      <param name="bounds">
            The reference Rectangle.
            </param>
      <param name="value">
            The value to map.
            </param>
      <param name="pointerStart">
            Upon return, contains the start point. 
            </param>
      <param name="pointerEnd">
            Upon return, contains the end point.
            </param>
      <exception cref="T:System.ArgumentNullException">context (parameter) is null.
            </exception>
    </member>
    <member name="M:NationalInstruments.UI.NumericPointerStyle.InverseMapValue(NationalInstruments.UI.INumericPointer,System.Drawing.Rectangle,System.Single,System.Single)">
      <summary>
            Transforms a point to a value.
            </summary>
      <param name="context">
            An INumericPointer with additional context information.
            </param>
      <param name="bounds">
            The reference Rectangle.
            </param>
      <param name="x">
            The x-coordinate.
            </param>
      <param name="y">
            The y-coordinate.
            </param>
      <returns>
            The value equal to the x (parameter) and y (parameter) coordinates passed in.
            </returns>
      <exception cref="T:System.ArgumentNullException">context (parameter) is null.
            </exception>
    </member>
    <member name="P:NationalInstruments.UI.NumericPointerStyle.Is3D">
      <summary>
            Gets a value indicating whether the NumericPointerStyle is drawn as a 3D style.
            </summary>
    </member>
    <member name="M:NationalInstruments.UI.RadialNumericPointerStyle.#ctor">
      <summary>
            Initializes a new instance of the RadialNumericPointerStyle class.
            </summary>
    </member>
    <member name="M:NationalInstruments.UI.RadialNumericPointerStyle.HitTest(NationalInstruments.UI.IRadialNumericPointer,System.Drawing.Rectangle,System.Int32,System.Int32)">
      <summary>
            Returns a RadialNumericPointerHitTestInfo that specifies where on the style
            the specified point is located. 
            </summary>
      <param name="context">
            An IRadialNumericPointer with additional context information.
            </param>
      <param name="bounds">
            A Rectangle representing the bounds of the style.
            </param>
      <param name="x">
            The horizontal location of the point to be hit-tested, in client coordinates.
            </param>
      <param name="y">
            The vertical location of the point to be hit-tested, in client coordinates.
            </param>
      <returns>
            A RadialNumericPointerHitTestInfo that specifies where on the style 
            the x (parameter) and y (parameter) coordinate is located.
            </returns>
      <exception cref="T:System.ArgumentNullException">context (parameter) is null.
            </exception>
      <exception cref="T:System.NotSupportedException">GetScaleRadius is called and the 
            returned radius is NaN, NegativeInfinity, 
            PositiveInfinity, or is less than or equal to zero.
            </exception>
    </member>
    <member name="M:NationalInstruments.UI.RadialNumericPointerStyle.DrawDial(NationalInstruments.UI.IRadialNumericPointer,NationalInstruments.UI.RadialNumericPointerStyleDrawArgs)">
      <summary>
            Draws the dial area of the style.
            </summary>
      <param name="context">
            An IRadialNumericPointer with additional context information.
            </param>
      <param name="args">
            A RadialNumericPointerStyleDrawArgs that contains the
            drawing data.
            </param>
      <exception cref="T:System.ArgumentNullException">context (parameter) is null.
            
            -or-
            args (parameter) is null.
            </exception>
      <exception cref="T:System.NotSupportedException">GetDialBorderRadius is called and the 
            returned radius is NaN, NegativeInfinity, 
            PositiveInfinity, or is less than or equal to zero.
            </exception>
      <exception cref="T:System.NotSupportedException">GetDialRadius is called and the 
            returned radius is NaN, NegativeInfinity, 
            PositiveInfinity, or is less than or equal to zero.
            </exception>
    </member>
    <member name="M:NationalInstruments.UI.RadialNumericPointerStyle.GetSpindlePoint(NationalInstruments.UI.IRadialNumericPointer,System.Drawing.Graphics,System.Drawing.Rectangle)">
      <summary>
            Gets the spindle point of the style.
            </summary>
      <param name="context">
            An IRadialNumericPointer with additional context information.
            </param>
      <param name="graphics">
            The Graphics used for drawing.
            </param>
      <param name="bounds">
            A Rectangle representing the bounds of the style.
            </param>
      <returns>
            The PointF specifying the spindle point of the style.
            </returns>
      <exception cref="T:System.ArgumentNullException">context (parameter) is null.
            
            -or-
            graphics (parameter) is null.
            </exception>
    </member>
    <member name="M:NationalInstruments.UI.RadialNumericPointerStyle.GetScaleRadius(NationalInstruments.UI.IRadialNumericPointer,System.Drawing.Graphics,System.Drawing.Rectangle)">
      <summary>
            Gets the scale radius given a bounding rectangle.
            </summary>
      <param name="context">
            An IRadialNumericPointer with additional context information.
            </param>
      <param name="graphics">
            The Graphics object.
            </param>
      <param name="bounds">
            A Rectangle representing the bounds of the style.
            </param>
      <returns>
            The scale radius that best fits the bounds (parameter).
            </returns>
      <exception cref="T:System.ArgumentNullException">context (parameter) is null.
            
            -or-
            graphics (parameter) is null.
            </exception>
    </member>
    <member name="M:NationalInstruments.UI.RadialNumericPointerStyle.GetDialRadius(NationalInstruments.UI.IRadialNumericPointer,System.Drawing.Graphics,System.Drawing.Rectangle)">
      <summary>
            Gets the radius of the dial.
            </summary>
      <param name="context">
            An IRadialNumericPointer with additional context information.
            </param>
      <param name="graphics">
            The Graphics object.
            </param>
      <param name="bounds">
            A Rectangle representing the bounds of the style.
            </param>
      <returns>
            The radius of the dial.
            </returns>
    </member>
    <member name="M:NationalInstruments.UI.RadialNumericPointerStyle.GetDialBorderRadius(NationalInstruments.UI.IRadialNumericPointer,System.Drawing.Graphics,System.Drawing.Rectangle)">
      <summary>
            Gets the dial border radius.
            </summary>
      <param name="context">
            An IRadialNumericPointer with additional context information.
            </param>
      <param name="graphics">
            The Graphics object.
            </param>
      <param name="bounds">
            A Rectangle representing the bounds of the style.
            </param>
      <returns>
            The dial border radius.
            </returns>
    </member>
    <member name="M:NationalInstruments.UI.RadialNumericPointerStyle.Draw(NationalInstruments.UI.INumericPointer,NationalInstruments.UI.NumericPointerStyleDrawArgs,System.Double)">
      <summary>
            Draws the style at the specified value.
            </summary>
      <param name="context">
            An INumericPointer with additional context information. 
            </param>
      <param name="args">
            A NumericPointerStyleDrawArgs that contains the
            drawing data.
            </param>
      <param name="value">
            The value used to draw the style.
            </param>
      <exception cref="T:System.ArgumentNullException">context (parameter) is null.
            
            -or-
            args (parameter) is null.
            </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
            The value (parameter) is outside the Range.
            </exception>
      <exception cref="T:System.InvalidCastException">
            The context (parameter) does not support this style.
            </exception>
    </member>
    <member name="M:NationalInstruments.UI.RadialNumericPointerStyle.DrawScaleRangeFill(NationalInstruments.UI.INumericPointer,NationalInstruments.UI.NumericPointerStyleDrawArgs,NationalInstruments.UI.ScaleRangeFill)">
      <summary>
            Draws a fill over a range on the scale.
            </summary>
      <param name="context">
            An INumericPointer with additional context information.
            </param>
      <param name="args">
            A NumericPointerStyleDrawArgs that contains the
            drawing data.
            </param>
      <param name="rangeFill">
            The ScaleRangeFill to be drawn.
            </param>
      <exception cref="T:System.ArgumentNullException">context (parameter) is null.
            
            -or-
            args (parameter) is null.
            
            -or-
            rangeFill (parameter) is null.
            </exception>
      <exception cref="T:System.InvalidCastException">
            The context (parameter) does not support this style.
            </exception>
    </member>
    <member name="T:NationalInstruments.UI.PlotArrowDirection">
      <summary>
            Specifies the direction in which the plot arrows are drawn.
            </summary>
    </member>
    <member name="F:NationalInstruments.UI.PlotArrowDirection.AlongPlot">
      <summary>
            The arrows are drawn along the direction in which the points are plotted.
            </summary>
    </member>
    <member name="F:NationalInstruments.UI.PlotArrowDirection.AgainstPlot">
      <summary>
            The arrows are drawn against the direction in which the points are plotted.
            </summary>
    </member>
    <member name="T:NationalInstruments.UI.LinearNumericPointerStyle">
      <summary>
            Provides an abstract base class for linear pointer styles.
            </summary>
    </member>
    <member name="M:NationalInstruments.UI.LinearNumericPointerStyle.#ctor">
      <summary>
            Initializes a new instance of the LinearNumericPointerStyle class.
            </summary>
    </member>
    <member name="M:NationalInstruments.UI.LinearNumericPointerStyle.GetFillAreaBounds(NationalInstruments.UI.ILinearNumericPointer,System.Drawing.Graphics,System.Drawing.Rectangle)">
      <summary>
            Specifies the rectangle that determines where the fill area is drawn.
            </summary>
      <param name="context">
            An ILinearNumericPointer with additional context information.
            </param>
      <param name="graphics">
            The Graphics used for drawing.
            </param>
      <param name="bounds">
            A Rectangle representing the bounds of the style.
            </param>
      <returns>
            The Rectangle representing the fill area of the style.
            </returns>
      <exception cref="T:System.NotImplementedException">SupportsCustomBounds has been overridden
            to return true, but GetFillAreaBounds 
            has not been overridden.
            </exception>
    </member>
    <member name="M:NationalInstruments.UI.LinearNumericPointerStyle.GetBorderBounds(NationalInstruments.UI.ILinearNumericPointer,System.Drawing.Graphics,System.Drawing.Rectangle)">
      <summary>
            Specifies the rectangle used to determine where the border is drawn.
            </summary>
      <param name="context">
            An ILinearNumericPointer with additional context information.
            </param>
      <param name="graphics">
            The Graphics used for drawing.
            </param>
      <param name="bounds">
            A Rectangle representing the bounds of the style.
            </param>
      <returns>
            The Rectangle representing the fill area of the style.
            </returns>
      <exception cref="T:System.NotImplementedException">SupportsCustomBounds has been overridden
            to return true, but GetBorderBounds 
            has not been overridden.
            </exception>
    </member>
    <member name="M:NationalInstruments.UI.LinearNumericPointerStyle.HitTest(NationalInstruments.UI.ILinearNumericPointer,System.Drawing.Rectangle,System.Int32,System.Int32)">
      <summary>
            Returns a LinearNumericPointerHitTestInfo that specifies where on the style
            the specified point is located. 
            </summary>
      <param name="context">
            An ILinearNumericPointer with additional context information.
            </param>
      <param name="bounds">
            A Rectangle representing the bounds of the style.
            </param>
      <param name="x">
            The horizontal location of the point to be hit-tested, in client coordinates.
            </param>
      <param name="y">
            The vertical location of the point to be hit-tested, in client coordinates.
            </param>
      <returns>
            A LinearNumericPointerHitTestInfo that specifies where on the style 
            the x (parameter) and y (parameter) coordinate is located.
            </returns>
      <exception cref="T:System.ArgumentNullException">context (parameter) is null.
            </exception>
    </member>
    <member name="M:NationalInstruments.UI.LinearNumericPointerStyle.DrawFillArea(NationalInstruments.UI.ILinearNumericPointer,NationalInstruments.UI.LinearNumericPointerStyleDrawArgs,System.Double)">
      <summary>
            Draws the fill area of the style.
            </summary>
      <param name="context">
            An ILinearNumericPointer with additional context information.
            </param>
      <param name="args">
            A LinearNumericPointerStyleDrawArgs that contains the
            drawing data.
            </param>
      <param name="value">
            The value used to draw the fill. 
            </param>
      <exception cref="T:System.ArgumentNullException">context (parameter) is null.
            
            -or-
            args (parameter) is null.
            </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
            The value (parameter) is outside the Range.
            </exception>
    </member>
    <member name="M:NationalInstruments.UI.LinearNumericPointerStyle.GetScaleReferenceBounds(NationalInstruments.UI.ILinearNumericPointer,System.Drawing.Graphics,System.Drawing.Rectangle)">
      <summary>
            Gets a Rectangle that provides a reference for the bounds of the scale.
            </summary>
      <param name="context">
            An ILinearNumericPointer with additional context information.
            </param>
      <param name="graphics">
            The Graphics used for drawing.
            </param>
      <param name="bounds">
            A Rectangle representing the bounds of the style.
            </param>
      <returns>
            The Rectangle that provides a reference for the bounds of the scale.
            </returns>
      <exception cref="T:System.ArgumentNullException">context (parameter) is null.
            
            -or-
            graphics (parameter) is null.
            </exception>
    </member>
    <member name="M:NationalInstruments.UI.LinearNumericPointerStyle.Draw(NationalInstruments.UI.INumericPointer,NationalInstruments.UI.NumericPointerStyleDrawArgs,System.Double)">
      <summary>
            Draws the style at the specified value.
            </summary>
      <param name="context">
            An INumericPointer with additional context information. 
            </param>
      <param name="args">
            A NumericPointerStyleDrawArgs that contains the
            drawing data.
            </param>
      <param name="value">
            The value used to draw the style.
            </param>
      <exception cref="T:System.ArgumentNullException">context (parameter) is null.
            
            -or-
            args (parameter) is null.
            </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
            The value (parameter) is outside the Range.
            </exception>
      <exception cref="T:System.InvalidCastException">
            The context (parameter) does not support this style.
            </exception>
    </member>
    <member name="M:NationalInstruments.UI.LinearNumericPointerStyle.DrawScaleRangeFill(NationalInstruments.UI.INumericPointer,NationalInstruments.UI.NumericPointerStyleDrawArgs,NationalInstruments.UI.ScaleRangeFill)">
      <summary>
            Draws a fill over a range on the scale.
            </summary>
      <param name="context">
            An INumericPointer with additional context information.
            </param>
      <param name="args">
            A NumericPointerStyleDrawArgs that contains the
            drawing data.
            </param>
      <param name="rangeFill">
            The ScaleRangeFill to be drawn.
            </param>
      <exception cref="T:System.ArgumentNullException">context (parameter) is null.
            
            -or-
            args (parameter) is null.
            
            -or-
            rangeFill (parameter) is null.
            </exception>
      <exception cref="T:System.InvalidCastException">
            The context (parameter) does not support this style.
            </exception>
    </member>
    <member name="P:NationalInstruments.UI.LinearNumericPointerStyle.SupportsCustomBounds">
      <summary>
            Gets a value indicating whether the style supports GetFillAreaBounds
            and GetBorderBounds.
            </summary>
    </member>
    <member name="T:NationalInstruments.UI.IntensityXAxis">
      <summary>
            Represents the horizontal axis on an intensity graph.
            </summary>
    </member>
    <member name="T:NationalInstruments.UI.IntensityAxis">
      <summary>
            Provides an abstract base class for axes on an intensity graph.
            </summary>
    </member>
    <member name="M:NationalInstruments.UI.IntensityAxis.#ctor">
      <summary>
            Initializes a new instance of the IntensityAxis class.
            </summary>
    </member>
    <member name="M:NationalInstruments.UI.IntensityAxis.ToString">
      <summary>
            Returns a string representation of the object.
            </summary>
      <returns>
            A string representation of the object.
            </returns>
      <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
    </member>
    <member name="M:NationalInstruments.UI.IntensityAxis.Dispose(System.Boolean)">
      <summary>
            Releases the resources used by IntensityAxis.
            </summary>
      <param name="disposing">
            If true, this method releases managed and unmanaged resources. If false, this method releases
            only unmanaged resources.
            </param>
    </member>
    <member name="M:NationalInstruments.UI.IntensityAxis.OnRangeChanged(System.EventArgs)">
      <summary>
            Raises the RangeChanged event.
            </summary>
      <param name="e">
            An EventArgs that contains the event data.
            </param>
      <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
    </member>
    <member name="P:NationalInstruments.UI.IntensityAxis.AutoSpacing">
      <summary>
            Gets or sets a value indicating if the axis automatically calculates the location of tick marks.
            </summary>
      <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
    </member>
    <member name="P:NationalInstruments.UI.IntensityAxis.BaseLineVisible">
      <summary>
            Gets or sets a value indicating if the base line connecting the tick marks is displayed.
            </summary>
      <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
    </member>
    <member name="P:NationalInstruments.UI.IntensityAxis.BaseLineColor">
      <summary>
            Gets or sets the color of the base line connecting the tick marks.
            </summary>
      <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
    </member>
    <member name="P:NationalInstruments.UI.IntensityAxis.AutoMinorDivisionFrequency">
      <summary>
            Gets or sets the number of minor ticks located between two major ticks.
            </summary>
      <exception cref="T:System.ArgumentOutOfRangeException">
            The specified value is less than or equal to zero.
            </exception>
    </member>
    <member name="P:NationalInstruments.UI.IntensityAxis.Range">
      <summary>
            Gets or sets the range of the axis.
            </summary>
      <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
      <exception cref="T:System.ArgumentNullException">
            The specified value is null.
            </exception>
      <exception cref="T:System.ArgumentException">
            The specified value is Empty.
            </exception>
    </member>
    <member name="P:NationalInstruments.UI.IntensityAxis.Inverted">
      <summary>
            Gets or sets a value indicating if the axis is inverted.
            </summary>
      <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
    </member>
    <member name="P:NationalInstruments.UI.IntensityAxis.InteractionMode">
      <summary>
            Gets or sets the user interactions that are supported by the axis.
            </summary>
      <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
      <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
            The specified value is not a ScaleInteractionMode value.
            </exception>
    </member>
    <member name="P:NationalInstruments.UI.IntensityAxis.EditRangeNumericFormatMode">
      <summary>
            Gets or sets the mode used to format the value that is displayed when you click an
            editable minimum or maximum value label on a scale.
            </summary>
      <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
      <exception cref="T:System.ArgumentNullException">
            The value is null.
            </exception>
    </member>
    <member name="P:NationalInstruments.UI.IntensityAxis.EditRangeDateTimeFormatMode">
      <summary>
            Gets or sets the mode used to format the value that is displayed when you click an
            editable minimum or maximum value label on a scale.
            </summary>
      <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
      <exception cref="T:System.ArgumentNullException">
            The value is null.
            </exception>
    </member>
    <member name="P:NationalInstruments.UI.IntensityAxis.Caption">
      <summary>
            Gets or sets the text of the caption that is displayed by the axis.
            </summary>
      <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
    </member>
    <member name="P:NationalInstruments.UI.IntensityAxis.CaptionFont">
      <summary>
            Gets or sets the font of the caption that is displayed by the axis.
            </summary>
      <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
    </member>
    <member name="P:NationalInstruments.UI.IntensityAxis.AutoSpacingMajorInterval">
      <summary>
            Gets a value indicating the interval between the major divisions of the axis when AutoSpacing  is true.
            </summary>
      <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
    </member>
    <member name="P:NationalInstruments.UI.IntensityAxis.AutoSpacingMinorInterval">
      <summary>
            Gets a value indicating the interval between the minor divisions of the axis when AutoSpacing  is true.
            </summary>
      <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
    </member>
    <member name="P:NationalInstruments.UI.IntensityAxis.CaptionForeColor">
      <summary>
            Gets or sets the foreground color of the caption that is displayed by the axis.
            </summary>
      <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
    </member>
    <member name="P:NationalInstruments.UI.IntensityAxis.CaptionBackColor">
      <summary>
            Gets or sets the background color of the caption that is displayed by the axis.
            </summary>
      <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
    </member>
    <member name="P:NationalInstruments.UI.IntensityAxis.CaptionVisible">
      <summary>
            Gets or sets a value indicating if the caption is displayed by the axis.
            </summary>
      <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
    </member>
    <member name="P:NationalInstruments.UI.IntensityAxis.OriginLineVisible">
      <summary>
            Gets or sets a value indicating if the line passing through the origin is visible.
            </summary>
      <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
    </member>
    <member name="P:NationalInstruments.UI.IntensityAxis.OriginLineStyle">
      <summary>
            Gets or sets the style of the line passing through the origin.
            </summary>
      <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
      <exception cref="T:System.ArgumentNullException">value (parameter) is null.
            </exception>
    </member>
    <member name="P:NationalInstruments.UI.IntensityAxis.OriginLineColor">
      <summary>
            Gets or sets the color of the line passing through the origin.
            </summary>
      <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
    </member>
    <member name="P:NationalInstruments.UI.IntensityAxis.OriginLineWidth">
      <summary>
            Gets or sets the width of the line passing through the origin.
            </summary>
      <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
            The specified value is less than or equal to zero.
            
            -or-
            
            The specified value is NaN, NegativeInfinity,
            or PositiveInfinity.
            </exception>
    </member>
    <member name="P:NationalInstruments.UI.IntensityAxis.EndLabelsAlwaysVisible">
      <summary>
            Gets or sets a value indicating whether the ticks and labels at the end of the axis are visible.
            </summary>
      <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
    </member>
    <member name="P:NationalInstruments.UI.IntensityAxis.Mode">
      <summary>
            Gets or sets the update mode for the range of the axis.
            </summary>
      <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
      <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
            The specified value is not an IntensityAxisMode value.
            </exception>
    </member>
    <member name="P:NationalInstruments.UI.IntensityAxis.MajorDivisions">
      <summary>
            Gets AxisLabeledDivisions on the axis.
            </summary>
      <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
    </member>
    <member name="P:NationalInstruments.UI.IntensityAxis.MinorDivisions">
      <summary>
            Gets the minor AxisDivisions on the axis.
            </summary>
      <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
    </member>
    <member name="P:NationalInstruments.UI.IntensityAxis.CustomDivisions">
      <summary>
            Gets the collection of AxisCustomDivision objects on the axis.
            </summary>
      <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
    </member>
    <member name="E:NationalInstruments.UI.IntensityAxis.RangeChanged">
      <summary>
            Occurs when the Range of the axis changes.
            </summary>
      <exception cref="T:System.ObjectDisposedException">
            An event handler is added after the object has been disposed.
            </exception>
    </member>
    <member name="M:NationalInstruments.UI.IntensityXAxis.#ctor">
      <summary>
            Initializes a new instance of the IntensityXAxis class.
            </summary>
    </member>
    <member name="M:NationalInstruments.UI.IntensityXAxis.GetSize(NationalInstruments.UI.XAxisPosition)">
      <summary>
            Returns the size of the IntensityXAxis at the specified position.
            </summary>
      <param name="position">
            An XAxisPosition that indicates the position of the IntensityXAxis
            for which the size is returned.
            </param>
      <returns>
            The Size of the IntensityXAxis.
            </returns>
      <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
      <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">position (parameter) is an invalid XAxisPosition value.
            </exception>
      <exception cref="T:System.NotSupportedException">position (parameter) is TopBottom.
            	</exception>
    </member>
    <member name="M:NationalInstruments.UI.IntensityXAxis.GetBounds(NationalInstruments.UI.XAxisPosition)">
      <summary>
            Returns the bounds of the IntensityXAxis at the specified position.
            </summary>
      <param name="position">
            An XAxisPosition that indicates the position of the IntensityXAxis
             for which the bounds are returned.
            </param>
      <returns>
            A Rectangle that represents the bounds of the IntensityXAxis.
            </returns>
      <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
      <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">position (parameter) is an invalid XAxisPosition value.
            </exception>
      <exception cref="T:System.NotSupportedException">position (parameter) is TopBottom.
            	</exception>
    </member>
    <member name="M:NationalInstruments.UI.IntensityXAxis.GetBounds(System.Drawing.Graphics,System.Drawing.Rectangle)">
      <summary>
            Returns the bounds of the IntensityXAxis relative to a reference rectangle.
            </summary>
      <param name="graphics">
            The Graphics object that is used to calculate the bounds of the axis.
            </param>
      <param name="referenceRectangle">
            A Rectangle that provides a reference for the bounds of the IntensityXAxis.
            </param>
      <returns>
            A Rectangle that provides a reference for the bounds of the IntensityXAxis.
            </returns>
      <exception cref="T:System.ArgumentNullException">graphics (parameter) is null.
            	</exception>
      <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
    </member>
    <member name="M:NationalInstruments.UI.IntensityXAxis.GetBounds(System.Drawing.Graphics,System.Drawing.Rectangle,NationalInstruments.UI.XAxisPosition)">
      <summary>
            Returns the bounds of the IntensityXAxis relative to a reference rectangle at the specified position.
            </summary>
      <param name="graphics">
            The Graphics object that is used to calculate the bounds of the axis.
            </param>
      <param name="referenceRectangle">
            A Rectangle that provides a reference for the bounds of the IntensityXAxis.
            </param>
      <param name="position">
            An XAxisPosition that indicates the position of the IntensityXAxis
             for which the bounds are returned.
            </param>
      <returns>
            A Rectangle that represents the bounds of the IntensityXAxis.
            </returns>
      <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
      <exception cref="T:System.ArgumentNullException">graphics (parameter) is null.
            	</exception>
      <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">position (parameter) is an invalid XAxisPosition value.
            </exception>
      <exception cref="T:System.NotSupportedException">position (parameter) is TopBottom.
            	</exception>
    </member>
    <member name="M:NationalInstruments.UI.IntensityXAxis.Draw(NationalInstruments.UI.ComponentDrawArgs,NationalInstruments.UI.XAxisPosition)">
      <summary>
            Draws the IntensityXAxis with the specified axis position.
            </summary>
      <param name="args">
            A ComponentDrawArgs that contains the 
            drawing data.
            </param>
      <param name="position">
            The position of the axis.
            </param>
      <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
      <exception cref="T:System.ArgumentNullException">args (parameter) is null.
            </exception>
      <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">position (parameter) is not one of the XAxisPosition values.
            </exception>
      <exception cref="T:System.NotSupportedException">position (parameter) is TopBottom.
            	</exception>
    </member>
    <member name="M:NationalInstruments.UI.IntensityXAxis.Clone">
      <summary>
            Creates a new object that is a deep copy of this instance.
            </summary>
      <returns>
            A new object that is a deep copy of this instance.
            </returns>
    </member>
    <member name="P:NationalInstruments.UI.IntensityXAxis.CaptionPosition">
      <summary>
            Gets or sets the position of the caption that is displayed for the axis.
            </summary>
      <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
      <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
            The specified value is not an XAxisPosition value.
            </exception>
    </member>
    <member name="P:NationalInstruments.UI.IntensityXAxis.Position">
      <summary>
            Gets or sets the position of the axis.
            </summary>
      <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
      <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
            The specified value is not an XAxisPosition value.
            </exception>
    </member>
    <member name="P:NationalInstruments.UI.IntensityXAxis.MinimumHeight">
      <summary>
            Gets or sets the minimum height required by IntensityXAxis,
            allowing you to customize the IntensityXAxis height. 
            </summary>
      <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
            The specified value is less than zero.
            </exception>
    </member>
    <member name="T:NationalInstruments.UI.IDigitalWaveformGraph">
      <summary>
            Defines the interface for graphs that accept
            DigitalWaveform data.
            </summary>
    </member>
    <member name="T:NationalInstruments.UI.IGraph">
      <summary>
            Defines the interface for all graph controls.
            </summary>
    </member>
    <member name="T:NationalInstruments.UI.IControlBase">
      <summary>
            Defines the interface for Measurement Studio .NET user interface controls.
            </summary>
    </member>
    <member name="M:NationalInstruments.UI.IControlBase.Draw(NationalInstruments.UI.ComponentDrawArgs)">
      <summary>
            Draws the control with the specified ComponentDrawArgs.
            </summary>
      <param name="args">
            A ComponentDrawArgs that contains the drawing data.
            </param>
      <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
      <exception cref="T:System.ArgumentNullException">args (parameter) is null.
            </exception>
    </member>
    <member name="M:NationalInstruments.UI.IControlBase.ToImage">
      <summary>
            Creates an image of the control.
            </summary>
      <returns>
            An Image that represents the control.
            </returns>
      <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
    </member>
    <member name="M:NationalInstruments.UI.IControlBase.ToImage(System.Drawing.Size)">
      <summary>
            Creates an image of the control with a specified size.
            </summary>
      <param name="size">
            A Size that specifies the width and height of the exported image.
            </param>
      <returns>
            An Image that represents the control.
            </returns>
      <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
    </member>
    <member name="M:NationalInstruments.UI.IControlBase.ToStream(System.IO.Stream,NationalInstruments.UI.ImageType)">
      <summary>
            Writes an image of the control to a stream.
            </summary>
      <param name="stream">
            A Stream to write the image to.
            </param>
      <param name="type">
            The format of the image.
            </param>
      <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
      <exception cref="T:System.ArgumentNullException">type (parameter) is null.
            </exception>
    </member>
    <member name="M:NationalInstruments.UI.IControlBase.ToStream(System.IO.Stream,NationalInstruments.UI.ImageType,System.Drawing.Size)">
      <summary>
            Writes an image of the control to a stream with a specified size.
            </summary>
      <param name="stream">
            A Stream to write the image to.
            </param>
      <param name="type">
            The format of the image.
            </param>
      <param name="size">
            A Size that specifies the width and height of the image that
            is written to the stream.
            </param>
      <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
      <exception cref="T:System.ArgumentNullException">type (parameter) is null.
            </exception>
    </member>
    <member name="M:NationalInstruments.UI.IControlBase.ToFile(System.String,NationalInstruments.UI.ImageType)">
      <summary>
            Writes an image of the control to a file.
            </summary>
      <param name="filename">
            The path of the file to write the image to.
            </param>
      <param name="type">
            The format of the image.
            </param>
      <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
      <exception cref="T:System.ArgumentNullException">type (parameter) is null.
            </exception>
    </member>
    <member name="M:NationalInstruments.UI.IControlBase.ToFile(System.String,NationalInstruments.UI.ImageType,System.Drawing.Size)">
      <summary>
            Writes an image of the control to a file with a specified size.
            </summary>
      <param name="filename">
            The path of the file to write the image to.
            </param>
      <param name="type">
            The format of the image.
            </param>
      <param name="size">
            A Size that specifies the width and height of the image that
            is written to the file.
            </param>
      <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
      <exception cref="T:System.ArgumentNullException">type (parameter) is null.
            </exception>
    </member>
    <member name="P:NationalInstruments.UI.IControlBase.BackColor">
      <summary>
            Gets or sets the background color of the control.
            </summary>
      <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
    </member>
    <member name="P:NationalInstruments.UI.IControlBase.BackgroundImage">
      <summary>
            Gets or sets the background image to display in the control.
            </summary>
      <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
    </member>
    <member name="P:NationalInstruments.UI.IControlBase.BackgroundImageAlignment">
      <summary>
            Gets or sets the alignment of the background image of the control.
            </summary>
      <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
      <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
            The value is not an ImageAlignment value.
            </exception>
    </member>
    <member name="P:NationalInstruments.UI.IControlBase.Border">
      <summary>
            Gets or sets the border style of the control.
            </summary>
      <exception cref="T:System.ArgumentNullException">
            The specified Border is null.
            </exception>
      <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
    </member>
    <member name="P:NationalInstruments.UI.IControlBase.Caption">
      <summary>
            Gets or sets the caption for the control.
            </summary>
      <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
    </member>
    <member name="P:NationalInstruments.UI.IControlBase.CaptionBackColor">
      <summary>
            Gets or sets the background color of the caption that is displayed by the control.
            </summary>
      <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
    </member>
    <member name="P:NationalInstruments.UI.IControlBase.CaptionFont">
      <summary>
            Gets or sets the font of the caption that is displayed by the control.
            </summary>
      <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
    </member>
    <member name="P:NationalInstruments.UI.IControlBase.CaptionForeColor">
      <summary>
            Gets or sets the foreground color of the caption that is displayed by the control.
            </summary>
      <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
    </member>
    <member name="P:NationalInstruments.UI.IControlBase.CaptionPosition">
      <summary>
            Gets or sets the position of the caption that is displayed by the control.
            </summary>
      <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
      <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
            The value is not a CaptionPosition value.
            </exception>
    </member>
    <member name="P:NationalInstruments.UI.IControlBase.CaptionVisible">
      <summary>
            Gets or sets a value indicating whether the control displays the caption.
            </summary>
      <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
    </member>
    <member name="P:NationalInstruments.UI.IControlBase.Font">
      <summary>
            Gets or sets the font of the text that is displayed by the control.
            </summary>
      <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
    </member>
    <member name="P:NationalInstruments.UI.IControlBase.ForeColor">
      <summary>
            Gets or sets the foreground color of the control.
            </summary>
      <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
    </member>
    <member name="P:NationalInstruments.UI.IControlBase.Height">
      <summary>
            Gets or sets the height of the control.
            </summary>
      <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
    </member>
    <member name="P:NationalInstruments.UI.IControlBase.IsDisposed">
      <summary>
            Gets a value indicating if the control has been disposed.
            </summary>
    </member>
    <member name="P:NationalInstruments.UI.IControlBase.Enabled">
      <summary>
            Gets or sets a value indicating if the control responds to user interaction.
            </summary>
      <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
    </member>
    <member name="P:NationalInstruments.UI.IControlBase.Visible">
      <summary>
            Gets or sets a value indicating if the control is displayed.
            </summary>
      <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
    </member>
    <member name="P:NationalInstruments.UI.IControlBase.Width">
      <summary>
            Gets or sets the width of the control.
            </summary>
      <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
    </member>
    <member name="P:NationalInstruments.UI.IControlBase.InnerBounds">
      <summary>
            Gets a rectangle that represents the actual bounds of the control.
            </summary>
      <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
    </member>
    <member name="E:NationalInstruments.UI.IControlBase.BeforeDrawCaption">
      <summary>
            Occurs before the caption is drawn.
            </summary>
      <exception cref="T:System.ObjectDisposedException">
            An event handler is added after the object has been disposed.
            </exception>
    </member>
    <member name="E:NationalInstruments.UI.IControlBase.AfterDrawCaption">
      <summary>
            Occurs after the caption is drawn.
            </summary>
      <exception cref="T:System.ObjectDisposedException">
            An event handler is added after the object has been disposed.
            </exception>
    </member>
    <member name="M:NationalInstruments.UI.IGraph.ClearData">
      <summary>
            Removes all data from the history of all plots on the graph.
            </summary>
      <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
    </member>
    <member name="M:NationalInstruments.UI.IGraph.GetPlotCollection">
      <summary>
            Returns the collection of plots on the graph.
            </summary>
      <returns>
            An IList that contains the plot objects on the graph.
            </returns>
      <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
    </member>
    <member name="M:NationalInstruments.UI.IGraph.PointToVirtual(System.Drawing.Point)">
      <summary>
            Converts the location of the specified client coordinate to a virtual coordinate with respect to the plot area bounds.
            </summary>
      <param name="point">
            The Point in client coordinates to convert.
            </param>
      <returns>
            A PointF that represents the converted Point, point (parameter),
            in virtual coordinates.
            </returns>
      <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
    </member>
    <member name="M:NationalInstruments.UI.IGraph.RectangleToVirtual(System.Drawing.Rectangle)">
      <summary>
            Converts the size and location of the specified client rectangle to virtual coordinates with respect to the plot area bounds.
            </summary>
      <param name="rectangle">
            The Rectangle in client coordinates to convert.
            </param>
      <returns>
            A RectangleF that represent the converted Rectangle, rectangle (parameter),
            in virtual coordinates.
            </returns>
      <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
    </member>
    <member name="M:NationalInstruments.UI.IGraph.VirtualToPoint(System.Drawing.PointF)">
      <summary>
            Converts the location of the specified virtual point to a client coordinate with respect to the plot area bounds.
            </summary>
      <param name="virtualPoint">
            The PointF in virtual coordinates to convert.
            </param>
      <returns>
            A Point that represents the converted PointF, virtualPoint (parameter),
            in client coordinates.
            </returns>
      <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
    </member>
    <member name="M:NationalInstruments.UI.IGraph.VirtualToRectangle(System.Drawing.RectangleF)">
      <summary>
            Converts the size and location of the specified virtual rectangle to client coordinates with respect to the plot area bounds.
            </summary>
      <param name="virtualRectangle">
            The RectangleF in virtual coordinates to convert.
            </param>
      <returns>
            A Rectangle that represents the converted RectangleF, virtualRectangle (parameter),
            in client coordinates.
            </returns>
      <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
    </member>
    <member name="M:NationalInstruments.UI.IGraph.ZoomAroundPoint(System.Single)">
      <summary>
            Zooms around the center of the plot area using the specified zoom factor.
            </summary>
      <param name="zoomFactor">
            The percentage to zoom by.
            </param>
      <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
            The zoomFactor (parameter) is less than or equal to 0.0.
            
            -or-
            zoomFactor (parameter) is NaN,
            NegativeInfinity, or
            PositiveInfinity.
            </exception>
    </member>
    <member name="M:NationalInstruments.UI.IGraph.ZoomAroundPoint(System.Single,System.Single,System.Single)">
      <summary>
            Zooms around the specified x and y coordinates with the specified zoom factor.
            </summary>
      <param name="zoomFactor">
            The percentage to zoom by.
            </param>
      <param name="virtualX">
            The horizontal position of the point to zoom around in virtual coordinates.
            </param>
      <param name="virtualY">
            The vertical position of the point to zoom around in virtual coordinates.
            </param>
      <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
            The zoomFactor (parameter) is less than or equal to 0.0.
            
            -or-
            zoomFactor (parameter) is NaN,
            NegativeInfinity, or
            PositiveInfinity.
            </exception>
    </member>
    <member name="M:NationalInstruments.UI.IGraph.ZoomAroundPoint(System.Single,System.Drawing.PointF)">
      <summary>
            Zooms around the specified point with the specified zoom factor.
            </summary>
      <param name="zoomFactor">
            The percentage to zoom by.
            </param>
      <param name="virtualPoint">
            The PointF, in virtual coordinates, to zoom around.
            </param>
      <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
            The zoomFactor (parameter) is less than or equal to 0.0.
            
            -or-
            zoomFactor (parameter) is NaN,
            NegativeInfinity, or
            PositiveInfinity.
            </exception>
    </member>
    <member name="M:NationalInstruments.UI.IGraph.ZoomXY(System.Single,System.Single,System.Single,System.Single)">
      <summary>
            Zooms to the region of the plot area specified by the x location, y location, width, and height. 
            </summary>
      <param name="virtualX">The horizontal position, in virtual coordinates, of the left-bottom corner of the region of the plot area to zoom.
            </param>
      <param name="virtualY">
            The vertical position, in virtual coordinates, of the left-bottom corner of the region of the plot area to zoom.
            </param>
      <param name="virtualWidth">
            The width of the region of the plot area to zoom in virtual coordinates.
            </param>
      <param name="virtualHeight">
            The height of the region of the plot area to zoom in virtual coordinates.
            </param>
      <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">virtualX (parameter), virtualY (parameter), virtualWidth (parameter), or
            virtualHeight (parameter) is NaN,
            NegativeInfinity, or
            PositiveInfinity.
            </exception>
    </member>
    <member name="M:NationalInstruments.UI.IGraph.ZoomXY(System.Drawing.RectangleF)">
      <summary>
            Zooms to the region of the plot area specified by the rectangle.
            </summary>
      <param name="virtualRectangle">
            The RectangleF that specifies the region of the plot area to zoom in virtual coordinates.
            </param>
      <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
    </member>
    <member name="M:NationalInstruments.UI.IGraph.PanXY(System.Single,System.Single)">
      <summary>
            Pans the plot area according to the specified horizontal and vertical factors.
            </summary>
      <param name="xFactor">
            The horizontal factor.
            </param>
      <param name="yFactor">
            The vertical factor.
            </param>
      <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">xFactor (parameter) or yFactor (parameter) is
            NaN, NegativeInfinity,
            or PositiveInfinity.
            </exception>
    </member>
    <member name="M:NationalInstruments.UI.IGraph.UndoZoomPan">
      <summary>
            Reverts the last zoom or pan operation.
            </summary>
      <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
    </member>
    <member name="M:NationalInstruments.UI.IGraph.ResetZoomPan">
      <summary>
            Reverts all zoom and pan operations to restore the plot area to its initial state.
            </summary>
      <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
    </member>
    <member name="M:NationalInstruments.UI.IGraph.DrawPlotAreaImage(NationalInstruments.UI.ComponentDrawArgs)">
      <summary>
            Draws the background image of the plot area.
            </summary>
      <param name="args">
            A ComponentDrawArgs that contains the drawing data.
            </param>
      <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
      <exception cref="T:System.ArgumentNullException">args (parameter) is null.
            </exception>
    </member>
    <member name="M:NationalInstruments.UI.IGraph.DrawGridLines(NationalInstruments.UI.ComponentDrawArgs)">
      <summary>
            Draws the grid lines in the plot area of the graph.
            </summary>
      <param name="args">
            A ComponentDrawArgs that contains the drawing data.
            </param>
      <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
      <exception cref="T:System.ArgumentNullException">args (parameter) is null.
            </exception>
    </member>
    <member name="M:NationalInstruments.UI.IGraph.DrawPlotAreaComponents(NationalInstruments.UI.ComponentDrawArgs)">
      <summary>
            Draws the components contained in the plot area of the graph, such as plots and cursors.
            </summary>
      <param name="args">
            A ComponentDrawArgs that contains the drawing data.
            </param>
      <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
      <exception cref="T:System.ArgumentNullException">args (parameter) is null.
            </exception>
    </member>
    <member name="P:NationalInstruments.UI.IGraph.PlotAreaBorder">
      <summary>
            Gets or sets the border style of the plot area.
            </summary>
      <exception cref="T:System.ArgumentNullException">
            The specified Border is null.
            </exception>
      <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
    </member>
    <member name="P:NationalInstruments.UI.IGraph.PlotAreaBounds">
      <summary>
            Gets the rectangle that represents the plot area of the graph.
            </summary>
      <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
    </member>
    <member name="P:NationalInstruments.UI.IGraph.PlotAreaColor">
      <summary>
            Gets or sets the color of the plot area of the graph.
            </summary>
      <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
    </member>
    <member name="P:NationalInstruments.UI.IGraph.PlotAreaImage">
      <summary>
            Gets or sets the image that is displayed in the plot area of the graph.
            </summary>
      <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
    </member>
    <member name="P:NationalInstruments.UI.IGraph.PlotAreaImageAlignment">
      <summary>
            Gets or sets the alignment of the image that is displayed in the plot area of the graph.
            </summary>
      <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
      <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
            The value is not an ImageAlignment value.
            </exception>
    </member>
    <member name="P:NationalInstruments.UI.IGraph.SelectionColor">
      <summary>
            Gets or sets the color of a selection in the graph.
            </summary>
      <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
    </member>
    <member name="P:NationalInstruments.UI.IGraph.InteractionHistoryCount">
      <summary>
            Gets a value indicating the number of items on the interaction stack.
            </summary>
      <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
    </member>
    <member name="P:NationalInstruments.UI.IGraph.ZoomFactor">
      <summary>
            Gets or sets the factor used to zoom around a point when zooming interactively.
            </summary>
      <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
            The value is less than or equal to 0.0.
            
            -or-
            
            The specified value is NaN,
            NegativeInfinity, or
            PositiveInfinity.
            </exception>
    </member>
    <member name="E:NationalInstruments.UI.IGraph.AfterDrawPlotArea">
      <summary>
            Occurs after the plot area is drawn.
            </summary>
      <exception cref="T:System.ObjectDisposedException">
            An event handler is added after the object has been disposed.
            </exception>
    </member>
    <member name="E:NationalInstruments.UI.IGraph.BeforeDrawPlotArea">
      <summary>
            Occurs before the plot area is drawn.
            </summary>
      <exception cref="T:System.ObjectDisposedException">
            An event handler is added after the object has been disposed.
            </exception>
    </member>
    <member name="E:NationalInstruments.UI.IGraph.PlotsChanged">
      <summary>
            Occurs when the content of the graph plot collection changes.
            </summary>
      <exception cref="T:System.ObjectDisposedException">
            An event handler is added after the object has been disposed.
            </exception>
    </member>
    <member name="E:NationalInstruments.UI.IGraph.Zoom">
      <summary>
            Occurs when the plot area is zoomed.
            </summary>
      <exception cref="T:System.ObjectDisposedException">
            An event handler is added after the object has been disposed.
            </exception>
    </member>
    <member name="E:NationalInstruments.UI.IGraph.ZoomPanReset">
      <summary>
            Occurs when all zoom and pan operations are reset.
            </summary>
      <exception cref="T:System.ObjectDisposedException">
            An event handler is added after the object has been disposed.
            </exception>
    </member>
    <member name="E:NationalInstruments.UI.IGraph.ZoomPanUndone">
      <summary>
            Occurs when the last zoom or pan operation is reverted.
            </summary>
      <exception cref="T:System.ObjectDisposedException">
            An event handler is added after the object has been disposed.
            </exception>
    </member>
    <member name="M:NationalInstruments.UI.IDigitalWaveformGraph.GetWaveforms">
      <summary>
            Returns a DigitalWaveform array containing the graph data history.
            </summary>
      <returns>
            A DigitalWaveform array containing the graph data history.
            </returns>
      <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
    </member>
    <member name="M:NationalInstruments.UI.IDigitalWaveformGraph.CollapseSignals">
      <summary>
            Collapses all digital signals on each digital waveform plot. 
            </summary>
      <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
    </member>
    <member name="M:NationalInstruments.UI.IDigitalWaveformGraph.ExpandSignals">
      <summary>
            Expands all digital signals on each digital waveform plot. 
            </summary>
      <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
    </member>
    <member name="M:NationalInstruments.UI.IDigitalWaveformGraph.PlotWaveform(NationalInstruments.DigitalWaveform)">
      <summary>
            Plots a DigitalWaveform.
            </summary>
      <param name="waveform">
            The DigitalWaveform to plot.
            </param>
      <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
    </member>
    <member name="M:NationalInstruments.UI.IDigitalWaveformGraph.PlotWaveform(NationalInstruments.DigitalWaveform,System.Boolean)">
      <summary>
            Plots a DigitalWaveform with the choice to copy the digital waveform.
            </summary>
      <param name="waveform">
            The DigitalWaveform to plot.
            </param>
      <param name="copyWaveform">
            Whether to copy the DigitalWaveform.
            </param>
      <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
    </member>
    <member name="M:NationalInstruments.UI.IDigitalWaveformGraph.PlotWaveforms(NationalInstruments.DigitalWaveform[])">
      <summary>
            Plots a DigitalWaveform array.
            </summary>
      <param name="waveforms">
            The DigitalWaveform array to plot.
            </param>
    </member>
    <member name="M:NationalInstruments.UI.IDigitalWaveformGraph.PlotWaveforms(NationalInstruments.DigitalWaveform[],System.Boolean)">
      <summary>
            Plots a DigitalWaveform array with the choice to copy the digital waveforms.
            </summary>
      <param name="waveforms">
            The DigitalWaveform array to plot.
            </param>
      <param name="copyWaveforms">
            Whether to copy the DigitalWaveform array.
            </param>
      <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
    </member>
    <member name="P:NationalInstruments.UI.IDigitalWaveformGraph.ScrollBarStyle">
      <summary>
            Gets or sets the scroll bar style.
            </summary>
      <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
      <exception cref="T:System.ArgumentNullException">
            The specified value is null.
            </exception>
    </member>
    <member name="P:NationalInstruments.UI.IDigitalWaveformGraph.ScrollBarBackColor">
      <summary>
            Gets or sets the background color of the scroll bar.
            </summary>
      <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
    </member>
    <member name="P:NationalInstruments.UI.IDigitalWaveformGraph.ScrollBarForeColor">
      <summary>
            Gets or sets the foreground color of the scroll bar.
            </summary>
      <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
    </member>
    <member name="P:NationalInstruments.UI.IDigitalWaveformGraph.VerticalScrollMode">
      <summary>
            Gets or sets the scroll mode of the vertical scroll bar.
            </summary>
      <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
      <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
            The value is not a ScrollMode value.
            </exception>
    </member>
    <member name="P:NationalInstruments.UI.IDigitalWaveformGraph.VerticalScrollPosition">
      <summary>
            Gets or sets the scroll position of the vertical scroll bar.
            </summary>
      <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
      <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
            The value is not a VerticalScrollPosition value.
            </exception>
    </member>
    <member name="P:NationalInstruments.UI.IDigitalWaveformGraph.HorizontalScrollMode">
      <summary>
            Gets or sets the scroll mode of the horizontal scroll bar.
            </summary>
      <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
      <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
            The value is not a ScrollMode value.
            </exception>
    </member>
    <member name="P:NationalInstruments.UI.IDigitalWaveformGraph.HorizontalScrollPosition">
      <summary>
            Gets or sets the scroll position of the horizontal scroll bar.
            </summary>
      <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
      <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
            The value is not a HorizontalScrollPosition value.
            </exception>
    </member>
    <member name="P:NationalInstruments.UI.IDigitalWaveformGraph.DisplayMode">
      <summary>
            Gets or sets whether the graph displays only signals or waveforms and signals.
            </summary>
      <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
      <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
            The value is not a DigitalWaveformGraphDisplayMode value.
            </exception>
    </member>
    <member name="P:NationalInstruments.UI.IDigitalWaveformGraph.ShowGroupLines">
      <summary>
            Gets or sets whether the lines that group the signals of the waveform are displayed.
            </summary>
      <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
    </member>
    <member name="P:NationalInstruments.UI.IDigitalWaveformGraph.GroupLineColor">
      <summary>
            Gets or sets the color of the lines that group the signals of the waveform.
            </summary>
      <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
    </member>
    <member name="P:NationalInstruments.UI.IDigitalWaveformGraph.GroupNodeColor">
      <summary>
            Gets or sets the color next to the waveform plot that expands or collapses the signals of the waveform. 
            </summary>
      <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
    </member>
    <member name="P:NationalInstruments.UI.IDigitalWaveformGraph.SignalPlotPadding">
      <summary>
            Gets or sets the amount of space in pixels between the signal plots.
            </summary>
      <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
            The specified value is less than zero.
            </exception>
    </member>
    <member name="P:NationalInstruments.UI.IDigitalWaveformGraph.WaveformPlotPadding">
      <summary>
            Gets or sets the amount of space in pixels between the waveform plots.
            </summary>
      <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
            The specified value is less than zero.
            </exception>
    </member>
    <member name="P:NationalInstruments.UI.IDigitalWaveformGraph.PlotHeight">
      <summary>
            Gets or sets the height of the digital plots in pixels. 
            </summary>
      <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
            The specified value is less than zero.
            </exception>
    </member>
    <member name="P:NationalInstruments.UI.IDigitalWaveformGraph.PlotLabelMode">
      <summary>
            Gets or sets the plot label mode that determines where the labels for the digital plots come from.
            </summary>
      <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
      <exception cref="T:System.ArgumentNullException">
            The specified value is null.
            </exception>
    </member>
    <member name="P:NationalInstruments.UI.IDigitalWaveformGraph.Plots">
      <summary>
            Gets the collection of digital waveform plots.
            </summary>
      <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
    </member>
    <member name="P:NationalInstruments.UI.IDigitalWaveformGraph.WaveformPlotTemplate">
      <summary>
            Gets the waveform plot template.
            </summary>
      <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
    </member>
    <member name="P:NationalInstruments.UI.IDigitalWaveformGraph.SignalPlotTemplate">
      <summary>
            Gets the signal plot template.
            </summary>
      <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
    </member>
    <member name="P:NationalInstruments.UI.IDigitalWaveformGraph.YAxis">
      <summary>
            Gets the y-axis for the digital waveform graph.
            </summary>
      <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
    </member>
    <member name="P:NationalInstruments.UI.IDigitalWaveformGraph.XAxis">
      <summary>
            Gets the x-axis for the digital waveform graph.
            </summary>
      <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
    </member>
    <member name="E:NationalInstruments.UI.IDigitalWaveformGraph.BeforeCollapseWaveform">
      <summary>
            Occurs before a digital signal is collapsed on a digital waveform plot.
            </summary>
      <exception cref="T:System.ObjectDisposedException">
            An event handler
            </exception>
    </member>
    <member name="E:NationalInstruments.UI.IDigitalWaveformGraph.BeforeExpandWaveform">
      <summary>
            Occurs before a digital signal is expanded on a digital waveform plot.
            </summary>
      <exception cref="T:System.ObjectDisposedException">
            An event handler 
            </exception>
    </member>
    <member name="E:NationalInstruments.UI.IDigitalWaveformGraph.AfterCollapseWaveform">
      <summary>
            Occurs after a digital signal is collapsed on a digital waveform plot.
            </summary>
      <exception cref="T:System.ObjectDisposedException">
            An event handler is added after the object has been disposed.
            </exception>
    </member>
    <member name="E:NationalInstruments.UI.IDigitalWaveformGraph.AfterExpandWaveform">
      <summary>
            Occurs after a digital signal is expanded on a digital waveform plot.
            </summary>
      <exception cref="T:System.ObjectDisposedException">
            An event handler is added after the object has been disposed.
            </exception>
    </member>
    <member name="E:NationalInstruments.UI.IDigitalWaveformGraph.DataChanged">
      <summary>
            Occurs when the digital waveform graph data changes.
            </summary>
      <exception cref="T:System.ObjectDisposedException">
            An event handler is added after the object has been disposed.
            </exception>
    </member>
    <member name="P:NationalInstruments.UI.IDigitalWaveformGraph.BindingData">
      <summary>
            Gets or sets the data when binding to a data source.
            </summary>
      <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
    </member>
    <member name="T:NationalInstruments.UI.GraphWebInteractionMouseCursors">
      <summary>
            Represents the mouse cursor for interaction with the Web Forms graph controls.
            </summary>
    </member>
    <member name="F:NationalInstruments.UI.GraphWebInteractionMouseCursors.DefaultZoomX">
      <summary>
            Gets the default mouse cursor when GraphWebInteractionModes is set to ZoomX.
            </summary>
    </member>
    <member name="F:NationalInstruments.UI.GraphWebInteractionMouseCursors.DefaultZoomY">
      <summary>
            Gets the default mouse cursor when GraphWebInteractionModes is set to ZoomY.
            </summary>
    </member>
    <member name="F:NationalInstruments.UI.GraphWebInteractionMouseCursors.DefaultZoomXY">
      <summary>
            Gets the default mouse cursor when GraphWebInteractionModes is set to ZoomX and ZoomY.
            </summary>
    </member>
    <member name="F:NationalInstruments.UI.GraphWebInteractionMouseCursors.DefaultZoomPoint">
      <summary>
            Gets the default mouse cursor used when GraphWebInteractionModes is set to ZoomAroundPoint.
            </summary>
    </member>
    <member name="F:NationalInstruments.UI.GraphWebInteractionMouseCursors.DefaultZoomPointZoomX">
      <summary>
            Gets the default mouse cursor used when GraphWebInteractionModes is set to ZoomAroundPoint and ZoomX.
            </summary>
    </member>
    <member name="F:NationalInstruments.UI.GraphWebInteractionMouseCursors.DefaultZoomPointZoomY">
      <summary>
            Gets the default mouse cursor used when GraphWebInteractionModes is set to ZoomAroundPoint and ZoomY.
            </summary>
    </member>
    <member name="F:NationalInstruments.UI.GraphWebInteractionMouseCursors.DefaultZoomPointZoomXY">
      <summary>
            Gets the default mouse cursor used when GraphWebInteractionModes is set to ZoomAroundPoint, 
            ZoomX, and ZoomY.
            </summary>
    </member>
    <member name="F:NationalInstruments.UI.GraphWebInteractionMouseCursors.DefaultEditRange">
      <summary>
            Gets the default mouse cursor used when GraphWebInteractionModes is set to EditRange.
            </summary>
    </member>
    <member name="F:NationalInstruments.UI.GraphWebInteractionMouseCursors.DefaultDefault">
      <summary>
            Gets the default mouse cursor used on the non-interactive areas of the waveform or scatter graph.
            </summary>
    </member>
    <member name="F:NationalInstruments.UI.GraphWebInteractionMouseCursors.DefaultPlotAreaClick">
      <summary>
            Gets the default mouse cursor used when GraphWebInteractionModes is set to PlotAreaClick.
            </summary>
    </member>
    <member name="M:NationalInstruments.UI.GraphWebInteractionMouseCursors.#ctor">
      <summary>
            Initializes a new instance of the GraphWebInteractionMouseCursors class.
            </summary>
    </member>
    <member name="M:NationalInstruments.UI.GraphWebInteractionMouseCursors.ToString">
      <summary>
            Returns a string representation of the object.
            </summary>
      <returns>
            A string representation of the object.
            </returns>
    </member>
    <member name="M:NationalInstruments.UI.GraphWebInteractionMouseCursors.ResetAllToDefault">
      <summary>
            Resets all the properties of GraphWebInteractionMouseCursors to default values.
            </summary>
    </member>
    <member name="P:NationalInstruments.UI.GraphWebInteractionMouseCursors.ZoomX">
      <summary>
            Gets or sets the mouse cursor when GraphWebInteractionModes is set to ZoomX.
            </summary>
    </member>
    <member name="P:NationalInstruments.UI.GraphWebInteractionMouseCursors.ZoomY">
      <summary>
            Gets or sets the mouse cursor when GraphWebInteractionModes is set to ZoomY.
            </summary>
    </member>
    <member name="P:NationalInstruments.UI.GraphWebInteractionMouseCursors.ZoomXY">
      <summary>
            Gets or sets the mouse cursor when GraphWebInteractionModes is set toZoomX and ZoomY.
            </summary>
    </member>
    <member name="P:NationalInstruments.UI.GraphWebInteractionMouseCursors.ZoomPoint">
      <summary>
            Gets or sets the mouse cursor when GraphWebInteractionModes is set to ZoomAroundPoint.
            </summary>
    </member>
    <member name="P:NationalInstruments.UI.GraphWebInteractionMouseCursors.ZoomPointZoomX">
      <summary>
            Gets or sets the mouse cursor when GraphWebInteractionModes is set to ZoomAroundPoint and ZoomX.
            </summary>
    </member>
    <member name="P:NationalInstruments.UI.GraphWebInteractionMouseCursors.ZoomPointZoomY">
      <summary>
            Gets or sets the mouse cursor when GraphWebInteractionModes is set to ZoomAroundPoint and ZoomY.
            </summary>
    </member>
    <member name="P:NationalInstruments.UI.GraphWebInteractionMouseCursors.ZoomPointZoomXY">
      <summary>
            Gets or sets the mouse cursor when GraphWebInteractionModes is set to ZoomAroundPoint, ZoomX, and ZoomY.
            </summary>
    </member>
    <member name="P:NationalInstruments.UI.GraphWebInteractionMouseCursors.EditRange">
      <summary>
            Gets or sets the mouse cursor when GraphWebInteractionModes is set to  EditRange.
            </summary>
    </member>
    <member name="P:NationalInstruments.UI.GraphWebInteractionMouseCursors.PlotAreaClick">
      <summary>
            Gets or sets the mouse cursor when GraphWebInteractionModes is set to PlotAreaClick.
            </summary>
    </member>
    <member name="P:NationalInstruments.UI.GraphWebInteractionMouseCursors.Default">
      <summary>
            Gets or sets the mouse cursor when GraphWebInteractionModes is set to None.
            </summary>
    </member>
    <member name="T:NationalInstruments.UI.DrawImageEventArgs">
      <summary>
            Provides data for image drawing events.
            </summary>
    </member>
    <member name="M:NationalInstruments.UI.DrawImageEventArgs.#ctor(System.Drawing.Graphics,System.Drawing.Rectangle)">
      <summary>
            Initializes a new instance of the DrawImageEventArgs class with
            the specified graphics and bounds.
            </summary>
      <param name="graphics">
            The Graphics used to draw the item.
            </param>
      <param name="bounds">
            The Rectangle that represents that bounds in which to draw.
            </param>
    </member>
    <member name="M:NationalInstruments.UI.DrawImageEventArgs.ToString">
      <summary>
            Overrides ToString.
            </summary>
      <returns>
            A string representation of the object.
            </returns>
    </member>
    <member name="P:NationalInstruments.UI.DrawImageEventArgs.Graphics">
      <summary>
            Gets the graphics used to draw the item.
            </summary>
    </member>
    <member name="P:NationalInstruments.UI.DrawImageEventArgs.Bounds">
      <summary>
            Gets the rectangle in which to draw.
            </summary>
    </member>
    <member name="T:NationalInstruments.UI.DigitalWaveformStateManagementArgs">
      <summary>
            Provides data for managing the state of complex data.
            </summary>
    </member>
    <member name="T:NationalInstruments.UI.StateManagementArgs">
      <summary>
            Provides an abstract base class for providing data to classes that
            implement data state management strategies.
            </summary>
    </member>
    <member name="M:NationalInstruments.UI.StateManagementArgs.#ctor(System.Web.HttpContext,System.String)">
      <summary>
            Initializes a new instance of the StateManagementArgs
            class with the specified context and state ID.
            </summary>
      <param name="context">
            The HttpContext for the current HTTP request.
            </param>
      <param name="stateId">
            An identifier that uniquely identifies the source of the data.
            </param>
      <exception cref="T:System.ArgumentNullException">context (parameter) is null.
            


            -or-
            

stateId (parameter) is null.
            

context (parameter) is null.
            
            -or-
            </exception>
    </member>
    <member name="P:NationalInstruments.UI.StateManagementArgs.Context">
      <summary>
            Gets the HTTP context of the current HTTP request.
            </summary>
    </member>
    <member name="P:NationalInstruments.UI.StateManagementArgs.StateId">
      <summary>
            Gets an identifier that uniquely identifies the source of the data.
            </summary>
    </member>
    <member name="M:NationalInstruments.UI.DigitalWaveformStateManagementArgs.#ctor(System.Web.HttpContext,System.String,NationalInstruments.DigitalWaveform[])">
      <summary>
            Initializes a new instance of the
            DigitalWaveformStateManagementArgs class with the
            specified context, state ID, and waveform data.
            </summary>
      <param name="context">
            The HttpContext for the current HTTP request.
            </param>
      <param name="stateId">
            An identifier that uniquely identifies the source of the data.
            </param>
      <param name="waveforms">
            The digital waveform data to manage through state management.
            </param>
    </member>
    <member name="M:NationalInstruments.UI.DigitalWaveformStateManagementArgs.GetWaveforms">
      <summary>
            Gets the digital waveform data that is managed by the data state management strategy.
            </summary>
      <returns>
            An array of DigitalWaveform values that represents the digital 
            waveform data that is managed by the data state management strategy.
            </returns>
    </member>
    <member name="M:NationalInstruments.UI.DigitalWaveformStateManagementArgs.SetWaveforms(NationalInstruments.DigitalWaveform[])">
      <summary>
            Sets the digital waveform data that is managed by the data state management strategy.
            </summary>
      <param name="waveforms">
            An array of DigitalWaveform values that represents the digital 
            waveform data that is managed by the data state management strategy.
            </param>
      <exception cref="T:System.ArgumentNullException">waveforms (parameter) is null.
            </exception>
    </member>
    <member name="T:NationalInstruments.UI.DigitalWaveformGraphInteractionModes">
      <summary>
            Defines the set of possible user interactions, such as panning and zooming, within the plot area of a digital waveform graph.
            </summary>
    </member>
    <member name="F:NationalInstruments.UI.DigitalWaveformGraphInteractionModes.None">
      <summary>
            No interaction.
            </summary>
    </member>
    <member name="F:NationalInstruments.UI.DigitalWaveformGraphInteractionModes.ZoomX">
      <summary>
            The plot area can be zoomed with a horizontal selection.
            </summary>
    </member>
    <member name="F:NationalInstruments.UI.DigitalWaveformGraphInteractionModes.ZoomAroundPoint">
      <summary>
            The plot area can be zoomed around a particular point.
            </summary>
    </member>
    <member name="F:NationalInstruments.UI.DigitalWaveformGraphInteractionModes.PanX">
      <summary>
            The plot area can be panned horizontally.
            </summary>
    </member>
    <member name="F:NationalInstruments.UI.DigitalWaveformGraphInteractionModes.PanY">
      <summary>
            The plot area can be panned vertically.
            </summary>
    </member>
    <member name="F:NationalInstruments.UI.DigitalWaveformGraphInteractionModes.EditRange">
      <summary>
            The minimum and maximum values for the axes can be edited interactively at run time.
            </summary>
    </member>
    <member name="F:NationalInstruments.UI.DigitalWaveformGraphInteractionModes.CollapseSignals">
      <summary>
            The digital signals can be collapsed.
            </summary>
    </member>
    <member name="T:NationalInstruments.UI.DigitalEmphasisLocations">
      <summary>
            Specifies where the emphasized digital state line is drawn. 
            </summary>
    </member>
    <member name="F:NationalInstruments.UI.DigitalEmphasisLocations.None">
      <summary>
            There is no emphasis.
            </summary>
    </member>
    <member name="F:NationalInstruments.UI.DigitalEmphasisLocations.Top">
      <summary>
            The emphasized digital state line is drawn at the top.
            </summary>
    </member>
    <member name="F:NationalInstruments.UI.DigitalEmphasisLocations.Bottom">
      <summary>
            The emphasized digital state line is drawn at the bottom.
            </summary>
    </member>
    <member name="T:NationalInstruments.UI.ComponentDrawArgs">
      <summary>
            Provides data for drawing components.
            </summary>
    </member>
    <member name="M:NationalInstruments.UI.ComponentDrawArgs.#ctor(System.Drawing.Graphics,System.Drawing.Rectangle)">
      <summary>
            Initializes a new instance of the ComponentDrawArgs class
            with the specified graphics and bounds.
            </summary>
      <param name="graphics">
            The Graphics with which to draw.
            </param>
      <param name="bounds">
            The Rectangle in which a component is drawn.
            </param>
      <exception cref="T:System.ArgumentNullException">graphics (parameter) is null.
            </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
            The Width of bounds (parameter) is less than zero.
            
            -or-
            
            The Height of bounds (parameter) is less than zero.
            </exception>
    </member>
    <member name="M:NationalInstruments.UI.ComponentDrawArgs.ToString">
      <summary>
            Returns a string representation of the object.
            </summary>
      <returns>
            A string representation of the object.
            </returns>
    </member>
    <member name="P:NationalInstruments.UI.ComponentDrawArgs.Bounds">
      <summary>
            Gets the rectangle in which a component is drawn.
            </summary>
    </member>
    <member name="T:NationalInstruments.UI.ComplexXAxisCollection">
      <summary>
            Represents a strongly typed collection of ComplexXAxis objects.
            </summary>
    </member>
    <member name="M:NationalInstruments.UI.ComplexXAxisCollection.#ctor">
      <summary>
            Initializes a new instance of the ComplexXAxisCollection class.
            </summary>
    </member>
    <member name="M:NationalInstruments.UI.ComplexXAxisCollection.#ctor(NationalInstruments.UI.ComplexXAxis[])">
      <summary>
            Initializes a new instance of the ComplexXAxisCollection class
            from an array of ComplexXAxis objects.
            </summary>
      <param name="item">
            Array of ComplexXAxis objects to copy.
            </param>
      <exception cref="T:System.ArgumentNullException">item (parameter) is null.
            
            -or-
            
            An element in item (parameter) is null.
            </exception>
      <exception cref="T:System.NotSupportedException">
            		An element in item (parameter) has been disposed.
            
            -or-
            
            		An element in item (parameter) is in another ComplexXAxisCollection.
            
            -or-
            
            		An element in item (parameter) is already in this collection.
            </exception>
    </member>
    <member name="M:NationalInstruments.UI.ComplexXAxisCollection.#ctor(NationalInstruments.UI.ComplexXAxisCollection)">
      <summary>
            Initializes a new instance of the ComplexXAxisCollection class
            from an existing collection.
            </summary>
      <param name="item">
            The ComplexXAxisCollection to copy.
            </param>
      <exception cref="T:System.ArgumentNullException">item (parameter) is null.
            
            -or-
            
            An element in item (parameter) is null.
            </exception>
      <exception cref="T:System.NotSupportedException">
            		An element in item (parameter) has been disposed.
            
            -or-
            
            		An element in item (parameter) is in another ComplexXAxisCollection.
            
            -or-
            
            		An element in item (parameter) is already in this collection.
            </exception>
    </member>
    <member name="M:NationalInstruments.UI.ComplexXAxisCollection.ToString">
      <summary>
            Returns a string representation of the object.
            </summary>
      <returns>
            A string representation of the object.
            </returns>
    </member>
    <member name="M:NationalInstruments.UI.ComplexXAxisCollection.Add(NationalInstruments.UI.ComplexXAxis)">
      <summary>
            Adds an item to the end of the collection.
            </summary>
      <param name="item">
            Item to add to the collection.
            </param>
      <returns>
            The array index of the added item.
            </returns>
      <exception cref="T:System.ArgumentNullException">item (parameter) is null.
            </exception>
      <exception cref="T:System.NotSupportedException">item (parameter) has been disposed.
            
            -or-
            item (parameter) is in another ComplexXAxisCollection.
            
            -or-
            item (parameter) is already in this collection.
            </exception>
    </member>
    <member name="M:NationalInstruments.UI.ComplexXAxisCollection.AddRange(NationalInstruments.UI.ComplexXAxis[])">
      <summary>
            Adds an array of ComplexXAxis objects to the end of the collection.
            </summary>
      <param name="item">
            Array of ComplexXAxis objects to add to the collection.
            </param>
      <exception cref="T:System.ArgumentNullException">item (parameter) is null.
            
            -or-
            
            An element in item (parameter) is null.
            </exception>
      <exception cref="T:System.NotSupportedException">
            		An element in item (parameter) has been disposed.
            
            -or-
            
            		An element in item (parameter) is in another ComplexXAxisCollection.
            
            -or-
            
            		An element in item (parameter) is already in this collection.
            </exception>
    </member>
    <member name="M:NationalInstruments.UI.ComplexXAxisCollection.AddRange(NationalInstruments.UI.ComplexXAxisCollection)">
      <summary>
            Adds a collection of ComplexXAxis objects to the end of the collection.
            </summary>
      <param name="item">
            Collection of ComplexXAxis objects to add to the collection.
            </param>
      <exception cref="T:System.ArgumentNullException">item (parameter) is null.
            
            -or-
            
            An element in item (parameter) is null.
            </exception>
      <exception cref="T:System.NotSupportedException">
            		An element in item (parameter) has been disposed.
            
            -or-
            
            		An element in item (parameter) is in another ComplexXAxisCollection.
            
            -or-
            
            		An element in item (parameter) is already in this collection.
            </exception>
    </member>
    <member name="M:NationalInstruments.UI.ComplexXAxisCollection.Clear">
      <summary>
            Removes all items from the collection.
            </summary>
    </member>
    <member name="M:NationalInstruments.UI.ComplexXAxisCollection.Contains(NationalInstruments.UI.ComplexXAxis)">
      <summary>
            Determines if the specified element is in the collection.
            </summary>
      <param name="item">Item to locate in the collection.</param>
      <returns>true if the collection contains item (parameter).
            </returns>
    </member>
    <member name="M:NationalInstruments.UI.ComplexXAxisCollection.CopyTo(NationalInstruments.UI.ComplexXAxis[],System.Int32)">
      <summary>
            Copies the collection to an array or a portion of an array.
            </summary>
      <param name="array">
            Destination array for the collection.
            </param>
      <param name="index">
            The index in the target array at which you want to begin copying the collection to.
            </param>
      <exception cref="T:System.ArgumentNullException">array (parameter) is null.
            </exception>
      <exception cref="T:System.ArgumentException">array (parameter) is multidimensional.
            
            -or-
            index (parameter) is equal to or greater than the length of array (parameter).
            
            -or-
            
            The number of elements in the collection is greater than the available space between
            index (parameter) and the end of array (parameter).
            </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">index (parameter) is less than the lower bound of array (parameter).
            </exception>
    </member>
    <member name="M:NationalInstruments.UI.ComplexXAxisCollection.IndexOf(NationalInstruments.UI.ComplexXAxis)">
      <summary>
            Returns the zero-based index of the first occurrence of an item in the collection.
            </summary>
      <param name="item">
            Item to search for.
            </param>
      <returns>
            Index of the item. If the item is not found, returns -1.
            </returns>
    </member>
    <member name="M:NationalInstruments.UI.ComplexXAxisCollection.Insert(System.Int32,NationalInstruments.UI.ComplexXAxis)">
      <summary>
            Inserts an item into the collection at the specified index.
            </summary>
      <param name="index">
            Index to insert the item at.
            </param>
      <param name="item">
            Item to insert into the collection.
            </param>
      <exception cref="T:System.ArgumentNullException">item (parameter) is null.
            </exception>
      <exception cref="T:System.NotSupportedException">item (parameter) has been disposed.
            
            -or-
            item (parameter) is in another ComplexXAxisCollection.
            
            -or-
            item (parameter) is already in this collection.
            </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">index (parameter) is less than zero.
            
            -or-
            

index (parameter) is greater than Count.
            


            -or-
            index (parameter) is greater than Count.
            </exception>
    </member>
    <member name="M:NationalInstruments.UI.ComplexXAxisCollection.GetEnumerator">
      <summary>
            Returns an enumerator that you can use to iterate through the collection.
            </summary>
      <returns>
            The enumerator for the collection.
            </returns>
    </member>
    <member name="M:NationalInstruments.UI.ComplexXAxisCollection.Remove(NationalInstruments.UI.ComplexXAxis)">
      <summary>
            Removes the first occurrence of the specified item.
            </summary>
      <param name="item">
            Item to remove from the collection.
            </param>
    </member>
    <member name="M:NationalInstruments.UI.ComplexXAxisCollection.RemoveAt(System.Int32)">
      <summary>
            Removes the item at the specified index.
            </summary>
      <param name="index">
            The zero-based index of the item to remove.
            </param>
      <exception cref="T:System.ArgumentOutOfRangeException">index (parameter) is less than zero.
            
            -or-
            

index (parameter) is greater than or equal to Count.
            


            -or-
            index (parameter) is greater than or equal to Count.
            </exception>
    </member>
    <member name="P:NationalInstruments.UI.ComplexXAxisCollection.Item(System.Int32)">
      <summary>
            Gets or sets the ComplexXAxis at the specified index. 
            </summary>
      <param name="index">
            The zero-based index of the entry to locate in the collection.
            </param>
      <exception cref="T:System.ArgumentNullException">
            	The value is null.
            </exception>
      <exception cref="T:System.NotSupportedException">
            		The value has been disposed.
            
            -or-
            
            		The value is in another ComplexXAxisCollection.
            
            -or-
            
            		The value is already in this collection.
            </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">index (parameter) is less than zero.
            
            -or-
            

index (parameter) is greater than Count.
            


            -or-
            index (parameter) is greater than Count.
            </exception>
    </member>
    <member name="P:NationalInstruments.UI.ComplexXAxisCollection.Count">
      <summary>
            Gets the number of elements in the ComplexXAxisCollection.
            </summary>
    </member>
    <member name="P:NationalInstruments.UI.ComplexXAxisCollection.IsSynchronized">
      <summary>
            Gets a value indicating whether access to the collection is synchronized
            (thread-safe).
            </summary>
    </member>
    <member name="P:NationalInstruments.UI.ComplexXAxisCollection.IsFixedSize">
      <summary>
            Gets a value indicating whether the collection has a fixed size.
            </summary>
    </member>
    <member name="P:NationalInstruments.UI.ComplexXAxisCollection.IsReadOnly">
      <summary>
            Gets a value indicating whether the collection is read-only.
            </summary>
    </member>
    <member name="P:NationalInstruments.UI.ComplexXAxisCollection.SyncRoot">
      <summary>
            Gets an object that can be used to synchronize access to the collection.
            </summary>
    </member>
    <member name="T:NationalInstruments.UI.ComplexGraphInteractionModes">
      <summary>
            Defines the set of possible user interactions within the plot area of a complex graph.
            </summary>
    </member>
    <member name="F:NationalInstruments.UI.ComplexGraphInteractionModes.None">
      <summary>
            No interaction.
            </summary>
    </member>
    <member name="F:NationalInstruments.UI.ComplexGraphInteractionModes.ZoomX">
      <summary>
            The plot area can be zoomed with a horizontal selection.
            </summary>
    </member>
    <member name="F:NationalInstruments.UI.ComplexGraphInteractionModes.ZoomY">
      <summary>
            The plot area can be zoomed with a vertical selection.
            </summary>
    </member>
    <member name="F:NationalInstruments.UI.ComplexGraphInteractionModes.ZoomAroundPoint">
      <summary>
            The plot area can be zoomed around a particular point.
            </summary>
    </member>
    <member name="F:NationalInstruments.UI.ComplexGraphInteractionModes.PanX">
      <summary>
            The plot area can be panned horizontally.
            </summary>
    </member>
    <member name="F:NationalInstruments.UI.ComplexGraphInteractionModes.PanY">
      <summary>
            The plot area can be panned vertically.
            </summary>
    </member>
    <member name="F:NationalInstruments.UI.ComplexGraphInteractionModes.EditRange">
      <summary>
            The minimum and maximum values for the axes can be edited interactively at run time.
            </summary>
    </member>
    <member name="F:NationalInstruments.UI.ComplexGraphInteractionModes.DragAnnotationCaption">
      <summary>
            The annotation caption can be dragged.
            </summary>
    </member>
    <member name="F:NationalInstruments.UI.ComplexGraphInteractionModes.DragCursor">
      <summary>
            The cursor can be dragged.
            </summary>
    </member>
    <member name="T:NationalInstruments.UI.ComplexDataPart">
      <summary>
            Specifies parts of a complex data value.
            </summary>
    </member>
    <member name="F:NationalInstruments.UI.ComplexDataPart.Real">
      <summary>
            Represents the real part of the complex data value. 
            </summary>
    </member>
    <member name="F:NationalInstruments.UI.ComplexDataPart.Imaginary">
      <summary>
            Represents the imaginary part of the complex data value. 
            </summary>
    </member>
    <member name="F:NationalInstruments.UI.ComplexDataPart.Magnitude">
      <summary>
            Represents the magnitude part of the complex data value. 
            </summary>
    </member>
    <member name="F:NationalInstruments.UI.ComplexDataPart.Phase">
      <summary>
            Represents the phase part of the complex data value. 
            </summary>
    </member>
    <member name="T:NationalInstruments.UI.ComplexArrowHeadPosition">
      <summary>
            Specifies the position of the arrow head.
            </summary>
    </member>
    <member name="F:NationalInstruments.UI.ComplexArrowHeadPosition.ComplexData">
      <summary>
            The arrow head is at the complex number data point.
            </summary>
    </member>
    <member name="F:NationalInstruments.UI.ComplexArrowHeadPosition.ShapeBounds">
      <summary>
            The arrow head is on the boundary of the annotation shape.
            </summary>
    </member>
    <member name="T:NationalInstruments.UI.BorderDrawArgs">
      <summary>
            Provides data for drawing borders.
            </summary>
    </member>
    <member name="M:NationalInstruments.UI.BorderDrawArgs.#ctor(System.Drawing.Graphics,System.Drawing.Rectangle)">
      <summary>
            Initializes a new instance of the BorderDrawArgs class
            with the specified graphics surface and bounds.
            </summary>
      <param name="graphics">
            The Graphics with which to draw.
            </param>
      <param name="bounds">
            The Rectangle in which the border is drawn.
            </param>
      <exception cref="T:System.ArgumentNullException">graphics (parameter) is null.
            </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
            The Width is less than zero.
            
            -or-
            
            The Height is less than zero.
            </exception>
    </member>
    <member name="M:NationalInstruments.UI.BorderDrawArgs.ToString">
      <summary>
            Returns a string representation of the object.
            </summary>
      <returns>
            A string representation of the object.
            </returns>
    </member>
    <member name="P:NationalInstruments.UI.BorderDrawArgs.Bounds">
      <summary>
            Gets the rectangle in which the border is drawn.
            </summary>
    </member>
    <member name="T:NationalInstruments.UI.BeforeChangeNumericValueEventArgs">
      <summary>
            Provides data for the BeforeChangeValue event.
            </summary>
    </member>
    <member name="T:NationalInstruments.UI.ActionCancelEventArgs">
      <summary>
            Provides data for events that occur from interactive or programmatic user action.
            </summary>
    </member>
    <member name="M:NationalInstruments.UI.ActionCancelEventArgs.#ctor(NationalInstruments.UI.Action,System.Boolean)">
      <summary>
            Initializes a new instance of the ActionCancelEventArgs class
            with the specified action.
            </summary>
      <param name="action">
            The source of the Action that caused the event.
            </param>
      <param name="cancel">true to cancel the event.
            </param>
      <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">action (parameter) is not one of the Action
            values.
            </exception>
    </member>
    <member name="P:NationalInstruments.UI.ActionCancelEventArgs.Action">
      <summary>
            Gets the source of the action that caused the event.
            </summary>
    </member>
    <member name="M:NationalInstruments.UI.BeforeChangeNumericValueEventArgs.#ctor(System.Double,System.Double,NationalInstruments.UI.Action,System.Boolean)">
      <summary>
            Initializes a new instance of the BeforeChangeNumericValueEventArgs class.
            </summary>
      <param name="oldValue">The value before the event occurs.
            </param>
      <param name="newValue">The value after the event occurs.
            </param>
      <param name="action">The Action that caused the event.
            </param>
      <param name="cancel">true to cancel the event.
            </param>
      <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">action (parameter) is not one of the Action
            values.
            </exception>
    </member>
    <member name="M:NationalInstruments.UI.BeforeChangeNumericValueEventArgs.ToString">
      <summary>
            Returns a string representation of the object.
            </summary>
      <returns>
            A string representation of the object.
            </returns>
    </member>
    <member name="P:NationalInstruments.UI.BeforeChangeNumericValueEventArgs.OldValue">
      <summary>
            Gets the value before the event occurs.
            </summary>
    </member>
    <member name="P:NationalInstruments.UI.BeforeChangeNumericValueEventArgs.NewValue">
      <summary>
            Gets the value after the event occurs.
            </summary>
    </member>
    <member name="T:NationalInstruments.UI.AxisMode">
      <summary>
            Specifies the scaling mode of the specified axis.
            </summary>
    </member>
    <member name="F:NationalInstruments.UI.AxisMode.Fixed">
      <summary>
            The axis fixes the range to the existing range. The range is never updated.
            </summary>
    </member>
    <member name="F:NationalInstruments.UI.AxisMode.AutoScaleLoose">
      <summary>
            The axis automatically updates the range so that the range extends beyond the exact calculated data values. 
            </summary>
    </member>
    <member name="F:NationalInstruments.UI.AxisMode.AutoScaleExact">
      <summary>
            The axis automatically updates the range to the exact calculated values.
            </summary>
    </member>
    <member name="F:NationalInstruments.UI.AxisMode.ScopeChart">
      <summary>
            The axis updates the range to behave as a scope chart. For example, if the existing range is 0 to 10 and a data value of 13 is 
            plotted, the range is updated to 10 to 20.
            </summary>
    </member>
    <member name="F:NationalInstruments.UI.AxisMode.StripChart">
      <summary>
            The axis updates the range to behave as a strip chart by 
            scrolling to the most recent data value. For example, if the existing range is 0 to 10 and a data value of 13 is 
            plotted, the range is updated to 3 to 13.
            </summary>
    </member>
    <member name="F:NationalInstruments.UI.AxisMode.AutoScaleVisibleLoose">
      <summary>
            The axis automatically updates the range so that the range extends beyond the exact calculated data values for the subset of data in the range of the corresponding axis in the other dimension.
            </summary>
    </member>
    <member name="F:NationalInstruments.UI.AxisMode.AutoScaleVisibleExact">
      <summary>
            The axis automatically updates the range to the exact calculated values for the subset of data in the range of the corresponding axis in the other dimension.
            </summary>
    </member>
    <member name="T:NationalInstruments.UI.AxisLabeledDivisions">
      <summary>
            Represents a set of major divisions of an axis.
            </summary>
    </member>
    <member name="T:NationalInstruments.UI.ScaleLabeledDivisions">
      <summary>
            Represents a set of major divisions of a scale.
            </summary>
    </member>
    <member name="T:NationalInstruments.UI.ScaleDivisions">
      <summary>
            Represents a set of divisions of a scale.
            </summary>
    </member>
    <member name="M:NationalInstruments.UI.ScaleDivisions.ToString">
      <summary>
            Returns a string representation of the object.
            </summary>
      <returns>
            A string representation of the object.
            </returns>
    </member>
    <member name="M:NationalInstruments.UI.ScaleDivisions.GetService(System.Type)">
      <summary>
            Gets the service object of the specified type.
            </summary>
      <param name="serviceType">
            An Object that specifies the type of service object to get.
            </param>
      <returns>
            A service of type serviceType (parameter), or null
            if there is no object of type serviceType (parameter).
            </returns>
    </member>
    <member name="M:NationalInstruments.UI.ScaleDivisions.OnPropertyChanged(System.ComponentModel.PropertyChangedEventArgs)">
      <summary>
            Raises the PropertyChanged event.
            </summary>
      <param name="e">
            A PropertyChangedEventArgs that contains the event data.
            </param>
    </member>
    <member name="P:NationalInstruments.UI.ScaleDivisions.Owner">
      <summary>
            Gets the control that this ScaleDivisions belongs to.
            </summary>
    </member>
    <member name="P:NationalInstruments.UI.ScaleDivisions.LineWidth">
      <summary>
            Gets or sets the width of the minor or major divisions tick marks.
            </summary>
      <exception cref="T:System.ArgumentOutOfRangeException">
            The specified value is less than or equal to zero.
            
            -or-
            
            The specified value is NaN, NegativeInfinity,
            or PositiveInfinity.
            </exception>
    </member>
    <member name="P:NationalInstruments.UI.ScaleDivisions.TickLength">
      <summary>
            Gets or sets the length of the major or minor division tick marks on the scale.
            </summary>
      <exception cref="T:System.ArgumentOutOfRangeException">
            The specified value is less than or equal to zero.
            
            -or-
            
            The specified value is NaN, NegativeInfinity,
            or PositiveInfinity.
            </exception>
    </member>
    <member name="P:NationalInstruments.UI.ScaleDivisions.TickColor">
      <summary>
            Gets or sets the color of the major or minor divisions tick marks on the scale.
            </summary>
    </member>
    <member name="P:NationalInstruments.UI.ScaleDivisions.TickVisible">
      <summary>
            Gets or sets a value indicating if the major or minor divisions tick marks are displayed.
            </summary>
    </member>
    <member name="P:NationalInstruments.UI.ScaleDivisions.Base">
      <summary>
            Gets or sets a value that is used for calculating where the major or minor division tick marks are placed on a scale.
            </summary>
      <exception cref="T:System.ArgumentOutOfRangeException">
            The specified value is NaN, NegativeInfinity,
            or PositiveInfinity.
            </exception>
    </member>
    <member name="P:NationalInstruments.UI.ScaleDivisions.Interval">
      <summary>
            Gets or sets the number of units between major or minor division tick marks.
            </summary>
      <exception cref="T:System.ArgumentOutOfRangeException">
            The specified value is less than or equal to zero.
            
            -or-
            
            The specified value is NaN, NegativeInfinity,
            or PositiveInfinity.
            </exception>
    </member>
    <member name="E:NationalInstruments.UI.ScaleDivisions.PropertyChanged">
      <summary>
            Occurs when the value of a property changes.
            </summary>
      <exception cref="T:System.ObjectDisposedException">
            An event handler is added after the object has been disposed.</exception>
    </member>
    <member name="P:NationalInstruments.UI.ScaleLabeledDivisions.LabelFormat">
      <summary>
            Gets or sets the FormatString used to format the major division label text.
            </summary>
      <exception cref="T:System.ArgumentNullException">
            The specified value is null.
            </exception>
      <exception cref="T:System.FormatException">
            The Format is invalid.
            </exception>
    </member>
    <member name="P:NationalInstruments.UI.ScaleLabeledDivisions.LabelForeColor">
      <summary>
            Gets or sets the foreground color of the major division labels.
            </summary>
    </member>
    <member name="P:NationalInstruments.UI.ScaleLabeledDivisions.LabelBackColor">
      <summary>
            Gets or sets the background color of the major division labels.
            </summary>
    </member>
    <member name="P:NationalInstruments.UI.ScaleLabeledDivisions.LabelFont">
      <summary>
            Gets or sets the font of the major division labels.
            </summary>
    </member>
    <member name="P:NationalInstruments.UI.ScaleLabeledDivisions.LabelVisible">
      <summary>
            Gets or sets a value indicating if the major division label is displayed.
            </summary>
    </member>
    <member name="P:NationalInstruments.UI.AxisLabeledDivisions.GridVisible">
      <summary>
            Gets or sets a value indicating if the grid is displayed.
            </summary>
    </member>
    <member name="P:NationalInstruments.UI.AxisLabeledDivisions.GridColor">
      <summary>
            Gets or sets the color of the grid.
            </summary>
    </member>
    <member name="P:NationalInstruments.UI.AxisLabeledDivisions.GridLineStyle">
      <summary>
            Gets or sets the line style of the grid.
            </summary>
      <exception cref="T:System.ArgumentNullException">
            The specified value is null.
            </exception>
    </member>
    <member name="T:NationalInstruments.UI.Arc">
      <summary>
            Contains a StartAngle and SweepAngle that represent an arc.
            </summary>
    </member>
    <member name="M:NationalInstruments.UI.Arc.#ctor(System.Single,System.Single)">
      <summary>
            Initializes a new instance of the Arc class
            with the specified start angle and sweep angle.
            </summary>
      <param name="startAngle">
            Angle in degrees measured counter clockwise from the horizontal axis to the starting point of the arc.
            </param>
      <param name="sweepAngle">
            Angle in degrees measured clockwise or counter clockwise from the startAngle (parameter) parameter to the ending
            point of the arc.
            </param>
      <exception cref="T:System.ArgumentOutOfRangeException">startAngle (parameter) is NaN, PositiveInfinity,
            or NegativeInfinity.
            
            -or-
            startAngle (parameter) is less than zero or greater than 360.0.
            
            -or-
            sweepAngle (parameter) is NaN, PositiveInfinity,
            or NegativeInfinity.
            
            -or-
            sweepAngle (parameter) is less than -360.0 or greater than 360.0.
            </exception>
    </member>
    <member name="M:NationalInstruments.UI.Arc.Invert">
      <summary>
            Inverts an arc by changing the StartAngle and SweepAngle while maintaining the arc.
            </summary>
      <returns>
            The inverted Arc.
            </returns>
    </member>
    <member name="M:NationalInstruments.UI.Arc.Contains(System.Single)">
      <summary>
            Determines if the arc contains the angle.
            </summary>
      <param name="angle">
            The angle measured in degrees.
            </param>
      <returns>true if the arc contains the angle (parameter).
            </returns>
      <exception cref="T:System.ArgumentOutOfRangeException">angle (parameter) is NaN, PositiveInfinity,
            or NegativeInfinity.
            </exception>
    </member>
    <member name="M:NationalInstruments.UI.Arc.GetCircumference(System.Single)">
      <summary>
            Gets the circumference of the arc given a specified radius.
            </summary>
      <param name="radius">
            The radius of the arc.
            </param>
      <returns>
            The circumference of the arc given a specified radius.
            </returns>
      <exception cref="T:System.ArgumentOutOfRangeException">radius (parameter) is NaN, PositiveInfinity,
            or NegativeInfinity.
            
            -or-
            radius (parameter) is less than zero.
            </exception>
    </member>
    <member name="M:NationalInstruments.UI.Arc.GetHashCode">
      <summary>
            Returns a hash code for this object.
            </summary>
      <returns>
            A 32-bit signed integer hash code.
            </returns>
    </member>
    <member name="M:NationalInstruments.UI.Arc.Equals(System.Object)">
      <summary>
            Returns a value indicating if this instance is equal to the specified Arc.
            </summary>
      <param name="obj">
            The Arc to compare with this
            instance.
            </param>
      <returns>true if obj (parameter) is an Arc that is equal 
            to this instance.
            </returns>
    </member>
    <member name="M:NationalInstruments.UI.Arc.Equals(NationalInstruments.UI.Arc)">
      <summary>
            Returns a value indicating if this instance is equal to the specified Arc.
            </summary>
      <param name="arc">
            An Arc to compare with this instance.
            </param>
      <returns>true if arc (parameter) is an Arc that is equal 
            to this instance.
            </returns>
    </member>
    <member name="M:NationalInstruments.UI.Arc.op_Equality(NationalInstruments.UI.Arc,NationalInstruments.UI.Arc)">
      <summary>
            Returns whether two Arc objects are equal.
            </summary>
      <param name="arc1">
            An Arc.
            </param>
      <param name="arc2">
            An Arc.
            </param>
      <returns>true if the values of arc1 (parameter) and arc2 (parameter) are equal. 
            </returns>
    </member>
    <member name="M:NationalInstruments.UI.Arc.op_Inequality(NationalInstruments.UI.Arc,NationalInstruments.UI.Arc)">
      <summary>
            Returns whether two Arc objects are 
            not equal.
            </summary>
      <param name="arc1">
            An Arc.
            </param>
      <param name="arc2">
            An Arc.
            </param>
      <returns>true if the values of arc1 (parameter) and arc2 (parameter) are not equal. 
            </returns>
    </member>
    <member name="M:NationalInstruments.UI.Arc.Parse(System.String)">
      <summary>
            Converts a string representation of an arc to its Arc equivalent.
            </summary>
      <param name="value">
            A string containing the arc to convert. The string must be a string returned by ToString or a string in the following format: [float,float], where 
            float is
            a valid float string and  ',' is a culture-specific list separator symbol. The following strings are value (parameter) examples: "130, -30", "1.12e2, -1e2" and "Arc: StartAngle=10,SweepAngle=200". 
            </param>
      <returns>
            An Arc representing the arc specified in value (parameter).
            </returns>
      <exception cref="T:System.ArgumentNullException">value (parameter) is null.
            </exception>
      <exception cref="T:System.FormatException">value (parameter) is not in [float, float]  format or is not a string returned by ToString. 
            </exception>
    </member>
    <member name="M:NationalInstruments.UI.Arc.Parse(System.String,System.IFormatProvider,System.Globalization.CultureInfo)">
      <summary>
            Converts a string representation of an arc to its Arc equivalent using the specified format and culture.
            </summary>
      <param name="value">
            A string containing the arc to convert. The string must be a string returned by ToString or a string in the following format: [float,float], where 
            float is
            a valid float string and  ',' is a culture-specific list separator symbol. The following strings are value (parameter) examples: "130, -30", "1.12e2, -1e2" and "Arc: StartAngle=10,SweepAngle=200".</param>
      <param name="formatProvider">
            A format provider that supplies culture-specific formatting information about the string.
            </param>
      <param name="culture">
            The culture to use for converting the string. If value (parameter)  is a string returned by ToString, you must pass in the same CultureInfo object that you used with ToString.
            </param>
      <returns>
            An Arc representing the arc specified in value (parameter).
            </returns>
      <exception cref="T:System.ArgumentNullException">value (parameter) is null.
            
            -or-
            formatProvider (parameter) is null.
            
            -or-
            culture (parameter) is null.
            </exception>
      <exception cref="T:System.FormatException">value (parameter) is not in [float, float]  format or is not a string returned by ToString. 
            </exception>
    </member>
    <member name="M:NationalInstruments.UI.Arc.Clone">
      <summary>
            Creates a new object that is a copy of this instance.
            </summary>
      <returns>
            A new object that is a copy of this instance.
            </returns>
    </member>
    <member name="M:NationalInstruments.UI.Arc.ToString">
      <summary>
            Returns a string representation of the object.
            </summary>
      <returns>
            A string representation of the object.
            </returns>
    </member>
    <member name="P:NationalInstruments.UI.Arc.StartAngle">
      <summary>
            Gets the start angle of the arc in degrees.
            </summary>
    </member>
    <member name="P:NationalInstruments.UI.Arc.SweepAngle">
      <summary>
            Gets the sweep angle of the arc in degrees.
            </summary>
    </member>
    <member name="T:NationalInstruments.UI.AnnotationZOrder">
      <summary>
            Specifies if an annotation part is drawn above or below all plots.
            </summary>
    </member>
    <member name="F:NationalInstruments.UI.AnnotationZOrder.AbovePlot">
      <summary>
            The annotation part is drawn above all plots.
            </summary>
    </member>
    <member name="F:NationalInstruments.UI.AnnotationZOrder.BelowPlot">
      <summary>
            The annotation part is drawn below all plots.
            </summary>
    </member>
    <member name="T:NationalInstruments.UI.AnalogWaveformPlotScaleMode">
      <summary> 
            Provides an abstract base class for specifying a scale mode used to plot  
            AnalogWaveform or AnalogWaveform&lt;T&gt;  data on a waveform plot. 
             
            Provides an abstract base class for specifying a scale mode used to plot  
             AnalogWaveform&lt;T&gt;  data on a waveform plot. 
            </summary>
    </member>
    <member name="M:NationalInstruments.UI.AnalogWaveformPlotScaleMode.GetPlotData``1(NationalInstruments.AnalogWaveform{``0})">
      <summary>
            Returns the AnalogWaveform&lt;T&gt; data after applying the specified scaling.
            </summary>
      <typeparam name="TData">
            The underlying type of waveform (parameter). The following data types are supported by TData (generic type parameter):
            Byte,
            SByte,
            Decimal,
            Single,
            Double,
            Int16,
            UInt16,
            Int32,
            UInt32,
            Int64, and
            UInt64.
            			</typeparam>
      <param name="waveform">
            The AnalogWaveform&lt;T&gt; data.
            </param>
      <returns>
            A Double array that corresponds to the analog waveform data based on the scale mode. 
            </returns>
    </member>
    <member name="M:NationalInstruments.UI.AnalogWaveformPlotScaleMode.Equals(System.Object)">
      <summary>
            Returns a value indicating if this instance is equal to the specified Object.
            </summary>
      <param name="obj">
            The Object to compare with this
            instance.
            </param>
      <returns>true if obj (parameter) is an Object that is equal 
            to this instance.
            </returns>
    </member>
    <member name="M:NationalInstruments.UI.AnalogWaveformPlotScaleMode.GetHashCode">
      <summary>
            Returns a hash code for this object.
            </summary>
      <returns>
            A 32-bit signed integer hash code.
            </returns>
    </member>
    <member name="M:NationalInstruments.UI.AnalogWaveformPlotScaleMode.op_Equality(NationalInstruments.UI.AnalogWaveformPlotScaleMode,NationalInstruments.UI.AnalogWaveformPlotScaleMode)">
      <summary>
            Returns whether two AnalogWaveformPlotScaleMode objects are equal.
            </summary>
      <param name="source">
            An AnalogWaveformPlotScaleMode.
            </param>
      <param name="destination">
            An AnalogWaveformPlotScaleMode.
            </param>
      <returns>true if the values of source (parameter) and destination (parameter) are equal. 
            </returns>
    </member>
    <member name="M:NationalInstruments.UI.AnalogWaveformPlotScaleMode.op_Inequality(NationalInstruments.UI.AnalogWaveformPlotScaleMode,NationalInstruments.UI.AnalogWaveformPlotScaleMode)">
      <summary>
            Returns whether two AnalogWaveformPlotScaleMode objects are 
            not equal.
            </summary>
      <param name="source">
            An AnalogWaveformPlotScaleMode.
            </param>
      <param name="destination">
            An AnalogWaveformPlotScaleMode.
            </param>
      <returns>true if the values of source (parameter) and destination (parameter) are not equal. 
            </returns>
    </member>
    <member name="P:NationalInstruments.UI.AnalogWaveformPlotScaleMode.Raw">
      <summary>
            Gets a scale mode with no scaling information.
            </summary>
    </member>
    <member name="P:NationalInstruments.UI.AnalogWaveformPlotScaleMode.Scaled">
      <summary>
            Gets a scale mode with scaling information.
            </summary>
    </member>
    <member name="P:NationalInstruments.UI.AnalogWaveformPlotScaleMode.Name">
      <summary>
            Gets the name of the AnalogWaveformPlotOptions  value.
            </summary>
    </member>
    <member name="P:NationalInstruments.UI.AnalogWaveformPlotScaleMode.UnderlyingType">
      <summary>
            Gets Type  of AnalogWaveformPlotScaleMode.
            </summary>
    </member>
    <member name="T:NationalInstruments.UI.AfterDrawComplexPointAnnotationEventArgs">
      <summary>
            Provides data for events that occur after the point annotation draws.
            </summary>
    </member>
    <member name="M:NationalInstruments.UI.AfterDrawComplexPointAnnotationEventArgs.#ctor(System.Drawing.Graphics,System.Drawing.Rectangle,NationalInstruments.UI.ComplexPointAnnotation,NationalInstruments.UI.ComplexPointAnnotationPart,System.Drawing.PointF,System.Drawing.PointF,System.Drawing.PointF,System.Drawing.Size,System.Single,System.Drawing.PointF,System.Drawing.Size,System.Drawing.PointF[])">
      <summary>
            Initializes a new instance of the AfterDrawComplexPointAnnotationEventArgs class with the specified graphics, bounds, 
            annotation, annotation part, arrow head point, arrow tail point, caption point, caption size, caption angle, 
            shape point, shape size, and shape points.
            </summary>
      <param name="graphics">
            The Graphics used to draw the item.
            </param>
      <param name="bounds">
            The Rectangle that represents the bounds in which to draw.
            </param>
      <param name="annotation">
            The ComplexPointAnnotation for which the event is occurring.
            </param>
      <param name="annotationPart">
            The ComplexPointAnnotationPart of the annotation that was drawn.
            </param>
      <param name="arrowHeadPoint">
            The Point at which the arrow head was drawn.
            </param>
      <param name="arrowTailPoint">
            The Point where the arrow tail is located.
            </param>
      <param name="captionPoint">
            The Point at which the caption was drawn.
            </param>
      <param name="captionSize">
            The Size of the Rectangle in which to draw the caption.
            </param>
      <param name="captionAngle">
            The angle at which to draw the caption.
            </param>
      <param name="shapePoint">
            The Point at which the shape was drawn.
            </param>
      <param name="shapeSize">
            The Size of the shape that was drawn.
            </param>
      <param name="shapePoints">
            The Point array that defines the shape that was drawn.
            </param>
      <exception cref="T:System.ArgumentNullException">annotation (parameter) is null.
            	-or-graphics (parameter) is null.
            	</exception>
    </member>
    <member name="P:NationalInstruments.UI.AfterDrawComplexPointAnnotationEventArgs.Annotation">
      <summary>
            Gets the ComplexPointAnnotation that was drawn.
            </summary>
    </member>
    <member name="P:NationalInstruments.UI.AfterDrawComplexPointAnnotationEventArgs.Part">
      <summary>
            Gets the part of the annotation that was drawn.
            </summary>
    </member>
    <member name="P:NationalInstruments.UI.AfterDrawComplexPointAnnotationEventArgs.CaptionSize">
      <summary>
            Gets the size of the rectangle in which the caption was drawn.
            </summary>
    </member>
    <member name="P:NationalInstruments.UI.AfterDrawComplexPointAnnotationEventArgs.CaptionAngle">
      <summary>
            Gets the angle at which the caption was drawn.
            </summary>
    </member>
    <member name="P:NationalInstruments.UI.AfterDrawComplexPointAnnotationEventArgs.ShapePoint">
      <summary>
            Gets the point at which the shape was drawn.
            </summary>
    </member>
    <member name="P:NationalInstruments.UI.AfterDrawComplexPointAnnotationEventArgs.ShapeSize">
      <summary>
            Gets the size of the shape that was drawn.
            </summary>
    </member>
    <member name="P:NationalInstruments.UI.AfterDrawComplexPointAnnotationEventArgs.ArrowHeadPoint">
      <summary>
            Gets the point at which the arrow head was drawn.
            </summary>
    </member>
    <member name="P:NationalInstruments.UI.AfterDrawComplexPointAnnotationEventArgs.ArrowTailPoint">
      <summary>
            Gets the point at which the arrow tail is located.
            </summary>
    </member>
    <member name="P:NationalInstruments.UI.AfterDrawComplexPointAnnotationEventArgs.CaptionPoint">
      <summary>
            Gets the point at which the caption was drawn.
            </summary>
    </member>
    <member name="P:NationalInstruments.UI.AfterDrawComplexPointAnnotationEventArgs.ShapePoints">
      <summary>
            Gets the array of points used to define the shape that was drawn.
            </summary>
    </member>
    <member name="T:NationalInstruments.UI.AfterDigitalWaveformPlotEventArgs">
      <summary>
            Provides data for the events that occur after interactive or programmatic
            user actions on the digital waveform plot.
            </summary>
    </member>
    <member name="T:NationalInstruments.UI.ActionEventArgs">
      <summary>
            Provides data for events that occur from interactive or programmatic user actions.
            </summary>
    </member>
    <member name="M:NationalInstruments.UI.ActionEventArgs.#ctor(NationalInstruments.UI.Action)">
      <summary>
            Initializes a new instance of the ActionEventArgs  class
            with the specified action.
            </summary>
      <param name="action">
            The Action that caused the event.
            </param>
      <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">action (parameter) is not one of the Action
            values.
            </exception>
    </member>
    <member name="P:NationalInstruments.UI.ActionEventArgs.Action">
      <summary>
            Gets the action that caused the event.
            </summary>
    </member>
    <member name="M:NationalInstruments.UI.AfterDigitalWaveformPlotEventArgs.#ctor(NationalInstruments.UI.DigitalWaveformPlot,NationalInstruments.UI.Action)">
      <summary>
            Initializes a new instance of the AfterDigitalWaveformPlotEventArgs class
            with the specified digital waveform plot and action.
            </summary>
      <param name="waveformPlot">
            The DigitalWaveformPlot that caused the event.
            </param>
      <param name="action">
            The Action that caused the event.
            </param>
      <exception cref="T:System.ArgumentNullException">waveformPlot (parameter) is null.
            </exception>
      <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">action (parameter) is not one of the Action
            values.
            </exception>
    </member>
    <member name="P:NationalInstruments.UI.AfterDigitalWaveformPlotEventArgs.WaveformPlot">
      <summary>
            Gets the digital waveform plot.
            </summary>
    </member>
    <member name="T:NationalInstruments.UI.YAxisEventArgs">
      <summary>
            Provides data for the 
            YAxisRangeChanged event.
            </summary>
    </member>
    <member name="M:NationalInstruments.UI.YAxisEventArgs.#ctor(NationalInstruments.UI.YAxis)">
      <summary>
            Initializes a new instance of the YAxisEventArgs class
            with the specified y-axis.
            </summary>
      <param name="yAxis">
            The YAxis on which the range changed event occurred.
            </param>
      <exception cref="T:System.ArgumentNullException">yAxis (parameter) is null.
            </exception>
    </member>
    <member name="M:NationalInstruments.UI.YAxisEventArgs.#ctor(NationalInstruments.UI.YAxis,NationalInstruments.UI.GraphAction)">
      <summary>
            Initializes a new instance of the YAxisEventArgs class
            with the specified y-axis and the action on the graph.
            </summary>
      <param name="yAxis">
            The YAxis on which the range changed event occurred.
            </param>
      <param name="action">
            The GraphAction that caused the range changed event.
            </param>
      <exception cref="T:System.ArgumentNullException">yAxis (parameter) is null.
            </exception>
    </member>
    <member name="M:NationalInstruments.UI.YAxisEventArgs.ToString">
      <summary>
            Returns a string representation of the object.
            </summary>
      <returns>
            A string representation of the object.
            </returns>
    </member>
    <member name="P:NationalInstruments.UI.YAxisEventArgs.YAxis">
      <summary>
            Gets the y-axis on which the range changed event occurred.
            </summary>
    </member>
    <member name="P:NationalInstruments.UI.YAxisEventArgs.Action">
      <summary>
            Gets the action which raised the range changed event on the y-axis.
            </summary>
    </member>
    <member name="T:NationalInstruments.UI.YAxisCollection">
      <summary>
            Represents a strongly typed collection of YAxis objects.
            </summary>
    </member>
    <member name="M:NationalInstruments.UI.YAxisCollection.#ctor">
      <summary>
            Initializes a new instance of the YAxisCollection class.
            </summary>
    </member>
    <member name="M:NationalInstruments.UI.YAxisCollection.#ctor(NationalInstruments.UI.YAxis[])">
      <summary>
            Initializes a new instance of the YAxisCollection class
            from an array of YAxis objects.
            </summary>
      <param name="item">
            Array of YAxis objects to copy.
            </param>
      <exception cref="T:System.ArgumentNullException">item (parameter) is null.
            
            -or-
            
            An element in item (parameter) is null.
            </exception>
      <exception cref="T:System.NotSupportedException">
            		An element in item (parameter) has been disposed.
            
            -or-
            
            		An element in item (parameter) is in another YAxisCollection.
            
            -or-
            
            		An element in item (parameter) is already in this collection.
            </exception>
    </member>
    <member name="M:NationalInstruments.UI.YAxisCollection.#ctor(NationalInstruments.UI.YAxisCollection)">
      <summary>
            Initializes a new instance of the YAxisCollection class
            from an existing collection.
            </summary>
      <param name="item">
            The YAxisCollection to copy.
            </param>
      <exception cref="T:System.ArgumentNullException">item (parameter) is null.
            
            -or-
            
            An element in item (parameter) is null.
            </exception>
      <exception cref="T:System.NotSupportedException">
            		An element in item (parameter) has been disposed.
            
            -or-
            
            		An element in item (parameter) is in another YAxisCollection.
            
            -or-
            
            		An element in item (parameter) is already in this collection.
            </exception>
    </member>
    <member name="M:NationalInstruments.UI.YAxisCollection.ToString">
      <summary>
            Returns a string representation of the object.
            </summary>
      <returns>
            A string representation of the object.
            </returns>
    </member>
    <member name="M:NationalInstruments.UI.YAxisCollection.Add(NationalInstruments.UI.YAxis)">
      <summary>
            Adds an item to end of the collection.
            </summary>
      <param name="item">
            Item to add to the collection.
            </param>
      <returns>
            The array index of the added item.
            </returns>
      <exception cref="T:System.ArgumentNullException">item (parameter) is null.
            </exception>
      <exception cref="T:System.NotSupportedException">item (parameter) has been disposed.
            
            -or-
            item (parameter) is in another YAxisCollection.
            
            -or-
            item (parameter) is already in this collection.
            </exception>
    </member>
    <member name="M:NationalInstruments.UI.YAxisCollection.AddRange(NationalInstruments.UI.YAxis[])">
      <summary>
            Adds an array of YAxis objects to the end of the collection.
            </summary>
      <param name="item">
            Array of YAxis objects to add to the collection.
            </param>
      <exception cref="T:System.ArgumentNullException">item (parameter) is null.
            
            -or-
            
            An element in item (parameter) is null.
            </exception>
      <exception cref="T:System.NotSupportedException">
            		An element in item (parameter) has been disposed.
            
            -or-
            
            		An element in item (parameter) is in another YAxisCollection.
            
            -or-
            
            		An element in item (parameter) is already in this collection.
            </exception>
    </member>
    <member name="M:NationalInstruments.UI.YAxisCollection.AddRange(NationalInstruments.UI.YAxisCollection)">
      <summary>
            Adds a collection of YAxis objects to the end of the collection.
            </summary>
      <param name="item">
            Collection of YAxis objects to add to the collection.
            </param>
      <exception cref="T:System.ArgumentNullException">item (parameter) is null.
            
            -or-
            
            An element in item (parameter) is null.
            </exception>
      <exception cref="T:System.NotSupportedException">
            		An element in item (parameter) has been disposed.
            
            -or-
            
            		An element in item (parameter) is in another YAxisCollection.
            
            -or-
            
            		An element in item (parameter) is already in this collection.
            </exception>
    </member>
    <member name="M:NationalInstruments.UI.YAxisCollection.Clear">
      <summary>
            Removes all items from the collection.
            </summary>
    </member>
    <member name="M:NationalInstruments.UI.YAxisCollection.Contains(NationalInstruments.UI.YAxis)">
      <summary>
            Determines if the specified element is in the collection.
            </summary>
      <param name="item">Item to locate in the collection.</param>
      <returns>true if the collection contains item (parameter).
            </returns>
    </member>
    <member name="M:NationalInstruments.UI.YAxisCollection.CopyTo(NationalInstruments.UI.YAxis[],System.Int32)">
      <summary>
            Copies the collection to an array or a portion of an array.
            </summary>
      <param name="array">
            Destination array for the collection.
            </param>
      <param name="index">
            The index in the target array at which you want to begin copying the collection to.
            </param>
      <exception cref="T:System.ArgumentNullException">array (parameter) is null.
            </exception>
      <exception cref="T:System.ArgumentException">array (parameter) is multidimensional.
            
            - or -
            index (parameter) is equal to or greater than the length of array (parameter).
            
            -or-
            
            The number of elements in the collection is greater than the available space between
            index (parameter) and the end of array (parameter).
            </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">index (parameter) is less than the lower bound of array (parameter).
            </exception>
    </member>
    <member name="M:NationalInstruments.UI.YAxisCollection.IndexOf(NationalInstruments.UI.YAxis)">
      <summary>
            Returns the zero-based index of the first occurrence of an item in the collection.
            </summary>
      <param name="item">
            Item to search for.
            </param>
      <returns>
            Index of the item. If the item is not found, returns -1.
            </returns>
    </member>
    <member name="M:NationalInstruments.UI.YAxisCollection.Insert(System.Int32,NationalInstruments.UI.YAxis)">
      <summary>
            Inserts an item into the collection at the specified index.
            </summary>
      <param name="index">
            Index to insert the item at.
            </param>
      <param name="item">
            Item to insert into the collection.
            </param>
      <exception cref="T:System.ArgumentNullException">item (parameter) is null.
            </exception>
      <exception cref="T:System.NotSupportedException">item (parameter) has been disposed.
            
            -or-
            item (parameter) is in another YAxisCollection.
            
            -or-
            item (parameter) is already in this collection.
            </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">index (parameter) is less than zero.
            
            -or-
            

index (parameter) is greater than Count.
            


            -or-
            index (parameter) is greater than Count.
            </exception>
    </member>
    <member name="M:NationalInstruments.UI.YAxisCollection.GetEnumerator">
      <summary>
            Returns an enumerator that you can use to iterate through the collection.
            </summary>
      <returns>
            The enumerator for the collection.
            </returns>
    </member>
    <member name="M:NationalInstruments.UI.YAxisCollection.Remove(NationalInstruments.UI.YAxis)">
      <summary>
            Removes the first occurrence of the specified item.
            </summary>
      <param name="item">
            Item to remove from the collection.
            </param>
    </member>
    <member name="M:NationalInstruments.UI.YAxisCollection.RemoveAt(System.Int32)">
      <summary>
            Removes the item at the specified index.
            </summary>
      <param name="index">
            The zero-based index of the item to remove.
            </param>
      <exception cref="T:System.ArgumentOutOfRangeException">index (parameter) is less than zero.
            
            -or-
            

index (parameter) is greater than or equal to Count.
            


            -or-
            index (parameter) is greater than or equal to Count.
            </exception>
    </member>
    <member name="P:NationalInstruments.UI.YAxisCollection.Item(System.Int32)">
      <summary>
            Gets or sets YAxis at the specified index. 
            </summary>
      <param name="index">
            The zero-based index of the entry to locate in the collection.
            </param>
      <exception cref="T:System.ArgumentNullException">
            	The value is null.
            </exception>
      <exception cref="T:System.NotSupportedException">
            		The value has been disposed.
            
            -or-
            
            		The value is in another YAxisCollection.
            
            -or-
            
            		The value is already in this collection.
            </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">index (parameter) is less than zero.
            
            -or-
            

index (parameter) is greater than Count.
            


            -or-
            index (parameter) is greater than Count.
            </exception>
    </member>
    <member name="P:NationalInstruments.UI.YAxisCollection.Count">
      <summary>
            Gets the number of elements in the YAxisCollection.
            </summary>
    </member>
    <member name="P:NationalInstruments.UI.YAxisCollection.IsSynchronized">
      <summary>
            Gets a value indicating whether access to the collection is synchronized
            (thread-safe).
            </summary>
    </member>
    <member name="P:NationalInstruments.UI.YAxisCollection.IsFixedSize">
      <summary>
            Gets a value indicating whether the collection has a fixed size.
            </summary>
    </member>
    <member name="P:NationalInstruments.UI.YAxisCollection.IsReadOnly">
      <summary>
            Gets a value indicating whether the collection is read-only.
            </summary>
    </member>
    <member name="P:NationalInstruments.UI.YAxisCollection.SyncRoot">
      <summary>
            Gets an object that can be used to synchronize access to the collection.
            </summary>
    </member>
    <member name="T:NationalInstruments.UI.XAxis">
      <summary>
            Represents the horizontal axis on a graph.
            </summary>
    </member>
    <member name="T:NationalInstruments.UI.Axis">
      <summary>
            Provides an abstract base class for axes.
            </summary>
    </member>
    <member name="T:NationalInstruments.UI.Scale">
      <summary>
            Provides an abstract base class for all types of scales.
            </summary>
    </member>
    <member name="M:NationalInstruments.UI.Scale.#ctor">
      <summary>
            Initializes a new instance of the Scale class.
            </summary>
    </member>
    <member name="M:NationalInstruments.UI.Scale.ToString">
      <summary>
            Returns a string representation of the object.
            </summary>
      <returns>
            A string representation of the object.
            </returns>
      <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
    </member>
    <member name="M:NationalInstruments.UI.Scale.Dispose(System.Boolean)">
      <summary>
            Releases the resources used by Scale.
            </summary>
      <param name="disposing">
            If true, this method releases managed and unmanaged resources. If false, this method releases
            only unmanaged resources.
            </param>
    </member>
    <member name="M:NationalInstruments.UI.Scale.OnRangeChanged(System.EventArgs)">
      <summary>
            Raises the RangeChanged event.
            </summary>
      <param name="e">
            An EventArgs that contains the event data.
            </param>
      <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
    </member>
    <member name="P:NationalInstruments.UI.Scale.AutoSpacing">
      <summary>
            Gets or sets a value indicating if the scale automatically calculates the location of tick marks.
            </summary>
      <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
    </member>
    <member name="P:NationalInstruments.UI.Scale.BaseLineVisible">
      <summary>
            Gets or sets a value indicating if the base line connecting the tick marks is displayed.
            </summary>
      <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
    </member>
    <member name="P:NationalInstruments.UI.Scale.BaseLineColor">
      <summary>
            Gets or sets the color of the base line connecting the tick marks.
            </summary>
      <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
    </member>
    <member name="P:NationalInstruments.UI.Scale.AutoMinorDivisionFrequency">
      <summary>
            Gets or sets the number of minor ticks located between two major ticks when AutoSpacing is
            true.
            </summary>
      <exception cref="T:System.ArgumentOutOfRangeException">
            The specified value is less than or equal to zero.
            </exception>
    </member>
    <member name="P:NationalInstruments.UI.Scale.ScaleType">
      <summary>
            Gets or sets the type of scale to use.
            </summary>
      <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
      <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
            The specified value is not a ScaleType value.
            </exception>
    </member>
    <member name="P:NationalInstruments.UI.Scale.Range">
      <summary>
            Gets or sets the range of the scale.
            </summary>
      <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
      <exception cref="T:System.ArgumentNullException">
            The specified value is null.
            </exception>
      <exception cref="T:System.ArgumentException">
            The specified value is Empty.
            </exception>
    </member>
    <member name="P:NationalInstruments.UI.Scale.Inverted">
      <summary>
            Gets or sets a value indicating if the scale is inverted.
            </summary>
      <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
    </member>
    <member name="P:NationalInstruments.UI.Scale.LogBase">
      <summary>
            Gets or sets the base of the logarithm to use for a logarithmic scale.</summary>
      <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
            The specified value is less than or equal to 1.
            
            -or-
            
            The specified value is NaN, NegativeInfinity,
            or PositiveInfinity.
            </exception>
    </member>
    <member name="P:NationalInstruments.UI.Scale.InteractionMode">
      <summary>
            Gets or sets the user interactions that are supported by the scale.
            </summary>
      <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
      <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
            The specified value is not a ScaleInteractionMode value.
            </exception>
    </member>
    <member name="P:NationalInstruments.UI.Scale.EditRangeNumericFormatMode">
      <summary>
            Gets or sets the mode used to format the value that is displayed when you click an
            editable minimum or maximum value label on a scale.
            </summary>
      <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
      <exception cref="T:System.ArgumentNullException">
            The value is null.
            </exception>
    </member>
    <member name="P:NationalInstruments.UI.Scale.EditRangeDateTimeFormatMode">
      <summary>
            Gets or sets the mode used to format the value that is displayed when you click an
            editable minimum or maximum value label on a scale.
            </summary>
      <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
      <exception cref="T:System.ArgumentNullException">
            The value is null.
            </exception>
    </member>
    <member name="E:NationalInstruments.UI.Scale.RangeChanged">
      <summary>
            Occurs when the range of the scale changes.
            </summary>
      <exception cref="T:System.ObjectDisposedException">
            An event handler is added after the object has been disposed.
            </exception>
    </member>
    <member name="M:NationalInstruments.UI.Axis.#ctor">
      <summary>
            Initializes a new instance of the Axis class.
            </summary>
    </member>
    <member name="M:NationalInstruments.UI.Axis.ToString">
      <summary>
            Returns a string representation of the object.
            </summary>
      <returns>
            A string representation of the object.
            </returns>
      <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
    </member>
    <member name="P:NationalInstruments.UI.Axis.Caption">
      <summary>
            Gets or sets the text of the caption that is displayed by the axis.
            </summary>
      <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
    </member>
    <member name="P:NationalInstruments.UI.Axis.CaptionFont">
      <summary>
            Gets or sets the font of the caption that is displayed by the axis.
            </summary>
      <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
    </member>
    <member name="P:NationalInstruments.UI.Axis.AutoSpacingMajorInterval">
      <summary>
            Gets a value indicating the interval between the major divisions of the axis when AutoSpacing  is true.
            </summary>
      <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
    </member>
    <member name="P:NationalInstruments.UI.Axis.AutoSpacingMinorInterval">
      <summary>
            Gets a value indicating the interval between the minor divisions of the axis when AutoSpacing  is true.
            </summary>
      <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
    </member>
    <member name="P:NationalInstruments.UI.Axis.CaptionForeColor">
      <summary>
            Gets or sets the foreground color of the caption that is displayed by the axis.
            </summary>
      <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
    </member>
    <member name="P:NationalInstruments.UI.Axis.CaptionBackColor">
      <summary>
            Gets or sets the background color of the caption that is displayed by the axis.
            </summary>
      <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
    </member>
    <member name="P:NationalInstruments.UI.Axis.CaptionVisible">
      <summary>
            Gets or sets a value indicating whether the axis displays the caption.
            </summary>
      <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
    </member>
    <member name="P:NationalInstruments.UI.Axis.OriginLineVisible">
      <summary>
            Gets or sets a value indicating whether the line passing through the axis origin is visible.
            </summary>
      <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
    </member>
    <member name="P:NationalInstruments.UI.Axis.OriginLineStyle">
      <summary>
            Gets or sets the style of the line passing through the axis origin.
            </summary>
      <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
      <exception cref="T:System.ArgumentNullException">value (parameter) is null.
            </exception>
    </member>
    <member name="P:NationalInstruments.UI.Axis.OriginLineColor">
      <summary>
            Gets or sets the color of the line passing through the axis origin.
            </summary>
      <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
    </member>
    <member name="P:NationalInstruments.UI.Axis.OriginLineWidth">
      <summary>
            Gets or sets the width of the line passing through the origin.
            </summary>
      <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
            The specified value is less than or equal to zero.
            
            -or-
            
            The specified value is NaN, NegativeInfinity,
            or PositiveInfinity.
            </exception>
    </member>
    <member name="P:NationalInstruments.UI.Axis.EndLabelsAlwaysVisible">
      <summary>
            Gets or sets a value indicating whether the ticks and labels at the end of the axis are visible.
            </summary>
      <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
    </member>
    <member name="P:NationalInstruments.UI.Axis.Mode">
      <summary>
            Gets or sets the update mode for the range of the axis.
            </summary>
      <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
      <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
            The specified value is not an AxisMode value.
            </exception>
    </member>
    <member name="P:NationalInstruments.UI.Axis.MajorDivisions">
      <summary>
            Gets AxisLabeledDivisions on the axis.
            </summary>
      <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
    </member>
    <member name="P:NationalInstruments.UI.Axis.MinorDivisions">
      <summary>
            Gets the minor AxisDivisions on the axis.
            </summary>
      <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
    </member>
    <member name="P:NationalInstruments.UI.Axis.CustomDivisions">
      <summary>
            Gets the collection of AxisCustomDivision objects on the axis.
            </summary>
      <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
    </member>
    <member name="M:NationalInstruments.UI.XAxis.#ctor">
      <summary>
            Initializes a new instance of the XAxis class.
            </summary>
    </member>
    <member name="M:NationalInstruments.UI.XAxis.GetSize(NationalInstruments.UI.XAxisPosition)">
      <summary>
            Returns the size of the XAxis at the specified position.
            </summary>
      <param name="position">
            An XAxisPosition that indicates the position of the XAxis
            for which the size is returned.
            </param>
      <returns>
            The Size of the XAxis.
            </returns>
      <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
      <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">position (parameter) is an invalid XAxisPosition value.
            </exception>
      <exception cref="T:System.NotSupportedException">position (parameter) is TopBottom.
            	</exception>
    </member>
    <member name="M:NationalInstruments.UI.XAxis.GetBounds(NationalInstruments.UI.XAxisPosition)">
      <summary>
            Returns the bounds of the XAxis at the specified position.
            </summary>
      <param name="position">
            An XAxisPosition that indicates the position of the XAxis
             for which the bounds are returned.
            </param>
      <returns>
            A Rectangle that represents the bounds of the XAxis.
            </returns>
      <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
      <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">position (parameter) is an invalid XAxisPosition value.
            </exception>
      <exception cref="T:System.NotSupportedException">position (parameter) is TopBottom.
            	</exception>
    </member>
    <member name="M:NationalInstruments.UI.XAxis.GetBounds(System.Drawing.Graphics,System.Drawing.Rectangle)">
      <summary>
            Returns the bounds of the XAxis relative to a reference rectangle.
            </summary>
      <param name="graphics">
            The Graphics object that is used to calculate the bounds of the axis.
            </param>
      <param name="referenceRectangle">
            A Rectangle that provides a reference for the bounds of the XAxis.
            </param>
      <returns>
            A Rectangle that provides a reference for the bounds of the XAxis.
            </returns>
      <exception cref="T:System.ArgumentNullException">graphics (parameter) is null.
            	</exception>
      <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
    </member>
    <member name="M:NationalInstruments.UI.XAxis.GetBounds(System.Drawing.Graphics,System.Drawing.Rectangle,NationalInstruments.UI.XAxisPosition)">
      <summary>
            Returns the bounds of the XAxis relative to a reference rectangle at the specified position.
            </summary>
      <param name="graphics">
            The Graphics object that is used to calculate the bounds of the axis.
            </param>
      <param name="referenceRectangle">
            A Rectangle that provides a reference for the bounds of the XAxis.
            </param>
      <param name="position">
            An XAxisPosition that indicates the position of the XAxis
             for which the bounds are returned.
            </param>
      <returns>
            A Rectangle that represents the bounds of the XAxis.
            </returns>
      <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
      <exception cref="T:System.ArgumentNullException">graphics (parameter) is null.
            	</exception>
      <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">position (parameter) is an invalid XAxisPosition value.
            </exception>
      <exception cref="T:System.NotSupportedException">position (parameter) is TopBottom.
            	</exception>
    </member>
    <member name="M:NationalInstruments.UI.XAxis.Draw(NationalInstruments.UI.ComponentDrawArgs,NationalInstruments.UI.XAxisPosition)">
      <summary>
            Draws the XAxis with the specified axis position.
            </summary>
      <param name="args">
            A ComponentDrawArgs that contains the 
            drawing data.
            </param>
      <param name="position">
            The position of the axis.
            </param>
      <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
      <exception cref="T:System.ArgumentNullException">args (parameter) is null.
            </exception>
      <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">position (parameter) is not one of the XAxisPosition values.
            </exception>
      <exception cref="T:System.NotSupportedException">position (parameter) is TopBottom.
            	</exception>
    </member>
    <member name="M:NationalInstruments.UI.XAxis.Clone">
      <summary>
            Creates a new object that is a deep copy of this instance.
            </summary>
      <returns>
            A new object that is a deep copy of this instance.
            </returns>
    </member>
    <member name="M:NationalInstruments.UI.XAxis.GetService(System.Type)">
      <summary>
            Gets the service object of the specified type.
            </summary>
      <param name="service">
            A service provided by the component.
            </param>
      <returns>
            An Object that represents the service provided by the component or 
            null if the component does not provide the 
            specified service.
            </returns>
    </member>
    <member name="P:NationalInstruments.UI.XAxis.CaptionPosition">
      <summary>
            Gets or sets the position of the caption that is displayed for the axis.
            </summary>
      <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
      <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
            The specified value is not an XAxisPosition value.
            </exception>
    </member>
    <member name="P:NationalInstruments.UI.XAxis.Position">
      <summary>
            Gets or sets the position of the axis.
            </summary>
      <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
      <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
            The specified value is not an XAxisPosition value.
            </exception>
    </member>
    <member name="P:NationalInstruments.UI.XAxis.MinimumHeight">
      <summary>
            Gets or sets the minimum height required by XAxis,
            allowing you to customize the XAxis height. 
            </summary>
      <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
            The specified value is less than zero.
            </exception>
    </member>
    <member name="T:NationalInstruments.UI.ScrollBarStyle">
      <summary>
            Provides an abstract base class for specifying a scroll bar style
            and also provides a list of pre-defined scroll bar styles.
            </summary>
    </member>
    <member name="M:NationalInstruments.UI.ScrollBarStyle.DrawTrack(System.Object,NationalInstruments.UI.ScrollBarDrawArgs)">
      <summary>
            Draws the track of the scroll bar.
            </summary>
      <param name="context">
            An Object with additional context information.
            </param>
      <param name="args">
            A ScrollBarDrawArgs that contains
            the drawing data.
            </param>
      <exception cref="T:System.ArgumentNullException">args (parameter) is null.
            </exception>
    </member>
    <member name="M:NationalInstruments.UI.ScrollBarStyle.DrawArrowButton(System.Object,NationalInstruments.UI.ScrollBarButtonDrawArgs)">
      <summary>
            Draws the button of the scroll bar.
            </summary>
      <param name="context">
            An Object with additional context information.
            </param>
      <param name="args">
            A ScrollBarButtonDrawArgs that contains
            the drawing data.
            </param>
      <exception cref="T:System.ArgumentNullException">args (parameter) is null.
            </exception>
    </member>
    <member name="M:NationalInstruments.UI.ScrollBarStyle.DrawThumb(System.Object,NationalInstruments.UI.ScrollBarDrawArgs)">
      <summary>
            Draws the thumb of the scroll bar.
            </summary>
      <param name="context">
            An Object with additional context information.
            </param>
      <param name="args">
            A ScrollBarDrawArgs that contains
            the drawing data.
            </param>
      <exception cref="T:System.ArgumentNullException">args (parameter) is null.
            </exception>
    </member>
    <member name="P:NationalInstruments.UI.ScrollBarStyle.UnderlyingType">
      <summary>
            Gets the underlying type of an EnumObject value.
            </summary>
    </member>
    <member name="P:NationalInstruments.UI.ScrollBarStyle.Flat">
      <summary>
            Gets a flat scroll bar style.
            </summary>
    </member>
    <member name="P:NationalInstruments.UI.ScrollBarStyle.Classic">
      <summary>
            Gets a classic scroll bar style.
            </summary>
    </member>
    <member name="P:NationalInstruments.UI.ScrollBarStyle.Themed">
      <summary>
            Gets a scroll bar style based on the operating system theme.
            </summary>
    </member>
    <member name="P:NationalInstruments.UI.ScrollBarStyle.OperatingSystem">
      <summary>
            Gets an operating system scroll bar style.
            </summary>
    </member>
    <member name="T:NationalInstruments.UI.ScaleRangeFillStyle">
      <summary>
            Provides an abstract base class for specifying the style used to draw a fill over the 
            range of a scale.
            </summary>
    </member>
    <member name="M:NationalInstruments.UI.ScaleRangeFillStyle.CreateSolidStyle(System.Drawing.Color)">
      <summary>
            Creates a solid fill style that is drawn with the specified color.
            </summary>
      <param name="color">
            The Color used to draw the fill.
            </param>
      <returns>
            A ScaleRangeFillStyle that draws a solid fill style using 
            color (parameter).
            </returns>
    </member>
    <member name="M:NationalInstruments.UI.ScaleRangeFillStyle.CreateGradientStyle(System.Drawing.Color,System.Drawing.Color)">
      <summary>
            Creates a fill style drawn as a gradient from the specified minimum color to the specified maximum color.
            </summary>
      <param name="minimumColor">
            The Color at the minimum value of the range.
            </param>
      <param name="maximumColor">
            The Color at the maximum value of the range.
            </param>
      <returns>
            A ScaleRangeFillStyle drawn as a gradient from 
            minimumColor (parameter) to maximumColor (parameter) that
            blends at the center of the range.
            </returns>
    </member>
    <member name="M:NationalInstruments.UI.ScaleRangeFillStyle.CreateGradientStyle(System.Drawing.Color,System.Drawing.Color,System.Double)">
      <summary>
            Creates a fill style drawn as a gradient from the specified minimum color to the specified maximum color, 
            using the specified gradient offset.
            </summary>
      <param name="minimumColor">
            The Color at the minimum value of the range.
            </param>
      <param name="maximumColor">
            The Color at the maximum value of the range.
            </param>
      <param name="gradientOffset">
            A value between 0 and 1 that indicates the location of the blend.
            </param>
      <returns>
            A ScaleRangeFillStyle drawn as a gradient from 
            minimumColor (parameter) to maximumColor (parameter). 
            </returns>
      <exception cref="T:System.ArgumentOutOfRangeException">gradientOffset (parameter) is less than 0.
            
            -or-
            

gradientOffset (parameter) is greater than 1.
            


            -or-
            

gradientOffset (parameter) is NaN, PositiveInfinity,
            or NegativeInfinity.
            


            -or-
            gradientOffset (parameter) is greater than 1.
            
            -or-
            gradientOffset (parameter) is NaN, PositiveInfinity,
            or NegativeInfinity.
            </exception>
    </member>
    <member name="M:NationalInstruments.UI.ScaleRangeFillStyle.CreateStyleFromFillStyle(NationalInstruments.UI.FillStyle,System.Drawing.Color)">
      <summary>
            Creates a fill style that is drawn using the specified fill style with the specified color.
            </summary>
      <param name="fillStyle">
            The FillStyle used to draw the fill.
            </param>
      <param name="color">
            The Color used to draw the fill.
            </param>
      <returns>
            A ScaleRangeFillStyle that is drawn using
            fillStyle (parameter) with color (parameter).
            </returns>
      <exception cref="T:System.ArgumentNullException">fillStyle (parameter) is null.
            </exception>
    </member>
    <member name="M:NationalInstruments.UI.ScaleRangeFillStyle.GetHashCode">
      <summary>
            Returns a hash code for this object.
            </summary>
      <returns>
            A 32-bit signed integer hash code.
            </returns>
    </member>
    <member name="M:NationalInstruments.UI.ScaleRangeFillStyle.ToString">
      <summary>
            Returns a string representation of the object.
            </summary>
      <returns>
            A string representation of the object.
            </returns>
    </member>
    <member name="M:NationalInstruments.UI.ScaleRangeFillStyle.GetService(System.Type)">
      <summary>
            Gets the service object of the specified type.
            </summary>
      <param name="serviceType">
            An Object that specifies the type of service object to get.
            </param>
      <returns>
            A service of type serviceType (parameter), or null
            if there is no object of type serviceType (parameter).
            </returns>
    </member>
    <member name="T:NationalInstruments.UI.PropertyEditorRenderMode">
      <summary>
            Specifies the drawing style of a property editor control.
            </summary>
    </member>
    <member name="F:NationalInstruments.UI.PropertyEditorRenderMode.Standard">
      <summary>
            Indicates the use of standard style for drawing the property editor control.
            </summary>
    </member>
    <member name="F:NationalInstruments.UI.PropertyEditorRenderMode.Inherit">
      <summary>
            Indicates the use of the style of the property editor control's parent for drawing
            the property editor control.
            </summary>
    </member>
    <member name="F:NationalInstruments.UI.PropertyEditorRenderMode.Professional">
      <summary>
            Indicates the use of a professional renderer for drawing the property editor. 
            for drawing the property editor control.
            </summary>
    </member>
    <member name="F:NationalInstruments.UI.PropertyEditorRenderMode.System">
      <summary>
            Indicates the use of a system renderer for drawing the property editor.
            for drawing the property editor control.
            </summary>
    </member>
    <member name="T:NationalInstruments.UI.PropertyEditorInteractionMode">
      <summary>
            Defines the set of user interactions supported by the property editor.
            </summary>
    </member>
    <member name="F:NationalInstruments.UI.PropertyEditorInteractionMode.Indicator">
      <summary>
            No interaction.
            </summary>
    </member>
    <member name="F:NationalInstruments.UI.PropertyEditorInteractionMode.EditValue">
      <summary>
            The property value can be edited.
            </summary>
    </member>
    <member name="T:NationalInstruments.UI.NumericEditWebInteractionMode">
      <summary>
            Specifies how the numeric edit server control responds to keyboard and mouse input on the client.
            </summary>
    </member>
    <member name="F:NationalInstruments.UI.NumericEditWebInteractionMode.Indicator">
      <summary>
            The control is a static display and does not respond when mouse or keyboard input is detected.
            </summary>
    </member>
    <member name="F:NationalInstruments.UI.NumericEditWebInteractionMode.Text">
      <summary>
            Keyboard text entry changes the value of the control.
            </summary>
    </member>
    <member name="T:NationalInstruments.UI.NumericEditInteractionModes">
      <summary>
            Specifies how the numeric edit control responds to keyboard and mouse input.
            </summary>
    </member>
    <member name="F:NationalInstruments.UI.NumericEditInteractionModes.Indicator">
      <summary>
            The control does not change state when mouse or keyboard input is detected.
            </summary>
    </member>
    <member name="F:NationalInstruments.UI.NumericEditInteractionModes.Buttons">
      <summary>
            The up and down buttons and the mouse wheel change the value of the control.
            </summary>
    </member>
    <member name="F:NationalInstruments.UI.NumericEditInteractionModes.Text">
      <summary>
            Keyboard text entry changes the value of the control.
            </summary>
    </member>
    <member name="F:NationalInstruments.UI.NumericEditInteractionModes.ArrowKeys">
      <summary>
            The up and down arrow keys change the value of the control.
            </summary>
    </member>
    <member name="T:NationalInstruments.UI.MagnitudePhaseRangeAnnotation">
      <summary>
            Represents an annotation that highlights a set of complex numbers that are within a range of magnitude-phase values on the complex plane.
            </summary>
    </member>
    <member name="T:NationalInstruments.UI.ComplexAnnotation">
      <summary>
            Provides an abstract base class for annotations that are displayed with 
            respect to an XAxis and a 
            YAxis.
            </summary>
    </member>
    <member name="T:NationalInstruments.UI.Annotation">
      <summary>
            Provides an abstract base class for an annotation.  
            </summary>
    </member>
    <member name="M:NationalInstruments.UI.Annotation.#ctor">
      <summary>
            Initializes a new instance of the Annotation class.
            </summary>
    </member>
    <member name="M:NationalInstruments.UI.Annotation.ToString">
      <summary>
            Returns a string representation of the object.
            </summary>
      <returns>
            A string representation of the object.
            </returns>
    </member>
    <member name="M:NationalInstruments.UI.Annotation.GetService(System.Type)">
      <summary>
            Gets the service object of the specified type.
            </summary>
      <param name="service">
            A service provided by the component.
            </param>
      <returns>
            An Object that represents the service provided by the component or 
            null if the component does not provide the 
            specified service.
            </returns>
    </member>
    <member name="P:NationalInstruments.UI.Annotation.ArrowColor">
      <summary>
            Gets or sets the color of the arrow.
            </summary>
      <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
    </member>
    <member name="P:NationalInstruments.UI.Annotation.ArrowHeadSize">
      <summary>
            Gets or sets the size of the arrow head.
            </summary>
      <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
            The specified value is Empty.
            
            -or-
            
            The Width is negative.
            
            -or-
            
            The Height is negative.
            </exception>
    </member>
    <member name="P:NationalInstruments.UI.Annotation.ArrowHeadStyle">
      <summary>
            Gets or sets the style of the arrow head.
            </summary>
      <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
      <exception cref="T:System.ArgumentNullException">value (parameter) is null.
            </exception>
    </member>
    <member name="P:NationalInstruments.UI.Annotation.ArrowLineStyle">
      <summary>
            Gets or sets the style of the arrow line.
            </summary>
      <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
      <exception cref="T:System.ArgumentNullException">value (parameter) is null.
            </exception>
    </member>
    <member name="P:NationalInstruments.UI.Annotation.ArrowLineWidth">
      <summary>
            Gets or sets the width of the arrow line.
            </summary>
      <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
            The specified value is less than or equal to zero.
            
            -or-
            
            The specified value is NaN, NegativeInfinity,
            or PositiveInfinity.
            </exception>
    </member>
    <member name="P:NationalInstruments.UI.Annotation.ArrowTailAlignment">
      <summary>
            Gets or sets the alignment of the arrow tail around the annotation caption.
            </summary>
      <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
      <exception cref="T:System.ArgumentNullException">value (parameter) is null.
            </exception>
    </member>
    <member name="P:NationalInstruments.UI.Annotation.ArrowTailSize">
      <summary>
            Gets or sets the size of the arrow tail.
            </summary>
      <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
            The specified value is Empty.
            
            -or-
            
            The Width is negative.
            
            -or-
            
            The Height is negative.
            </exception>
    </member>
    <member name="P:NationalInstruments.UI.Annotation.ArrowTailStyle">
      <summary>
            Gets or sets the style of the arrow tail.
            </summary>
      <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
      <exception cref="T:System.ArgumentNullException">value (parameter) is null.
            </exception>
    </member>
    <member name="P:NationalInstruments.UI.Annotation.ArrowVisible">
      <summary>
            Gets or sets a value indicating if the arrow is visible.
            </summary>
      <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
    </member>
    <member name="P:NationalInstruments.UI.Annotation.ArrowZOrder">
      <summary>
            Gets or sets a value indicating if the arrow is drawn above or below all plots.
            </summary>
      <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
      <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
            The specified value is not an AnnotationZOrder value.
            </exception>
    </member>
    <member name="P:NationalInstruments.UI.Annotation.Caption">
      <summary>
            Gets or sets the text of the caption that is displayed by the annotation.
            </summary>
      <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
      <exception cref="T:System.ArgumentNullException">value (parameter) is null.
            </exception>
    </member>
    <member name="P:NationalInstruments.UI.Annotation.CaptionAlignment">
      <summary>
            Gets or sets the alignment of the annotation caption in relation to the annotation or plot area boundary.
            </summary>
      <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
      <exception cref="T:System.ArgumentNullException">value (parameter) is null.
            </exception>
    </member>
    <member name="P:NationalInstruments.UI.Annotation.CaptionAngle">
      <summary>
            Gets or sets the angle at which the caption text is drawn.
            </summary>
      <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
            The specified value is NaN, NegativeInfinity,
            or PositiveInfinity.
            </exception>
    </member>
    <member name="P:NationalInstruments.UI.Annotation.CaptionBackColor">
      <summary>
            Gets or sets the background color of the caption that is displayed by the annotation.
            </summary>
      <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
    </member>
    <member name="P:NationalInstruments.UI.Annotation.CaptionFont">
      <summary>
            Gets or sets the font of the caption that is displayed by the annotation.
            </summary>
      <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
      <exception cref="T:System.ArgumentNullException">value (parameter) is null.
            </exception>
    </member>
    <member name="P:NationalInstruments.UI.Annotation.CaptionForeColor">
      <summary>
            Gets or sets the foreground color of the caption that is displayed by the annotation.
            </summary>
      <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
    </member>
    <member name="P:NationalInstruments.UI.Annotation.CaptionZOrder">
      <summary>
            Gets or sets a value indicating if the caption that is displayed by the annotation is drawn above or below all plots.
            </summary>
      <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
      <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
            The specified value is not an AnnotationZOrder value.
            </exception>
    </member>
    <member name="P:NationalInstruments.UI.Annotation.CaptionVisible">
      <summary>
            Gets or sets a value indicating if the annotation caption is displayed.
            </summary>
      <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
    </member>
    <member name="P:NationalInstruments.UI.Annotation.InteractionMode">
      <summary>
            Gets or sets a value indicating if the annotation caption can be interactively moved at run time.
            </summary>
      <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
      <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
            The specified value is not an AnnotationInteractionMode value.
            </exception>
    </member>
    <member name="P:NationalInstruments.UI.Annotation.ToolTipMode">
      <summary>
            Gets or sets a value that specifies the text to display as the tooltip.
            </summary>
      <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
      <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
            The specified value is not an AnnotationToolTipMode value.
            </exception>
    </member>
    <member name="P:NationalInstruments.UI.Annotation.ToolTip">
      <summary>
            Gets or sets the custom text of the tooltip.
            </summary>
      <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
    </member>
    <member name="M:NationalInstruments.UI.ComplexAnnotation.Dispose(System.Boolean)">
      <summary>
            Releases the resources used by ComplexAnnotation.
            </summary>
      <param name="disposing">
            If true, this method releases managed and unmanaged resources. If false, this method releases
            only unmanaged resources.
            </param>
    </member>
    <member name="M:NationalInstruments.UI.ComplexAnnotation.SetCaptionPosition(NationalInstruments.ComplexDouble)">
      <summary>
            Sets the location of the caption based on a value relative to the annotation axis.
            </summary>
      <param name="position">
            The location on the XAxis and YAxis to position the caption, in data coordinates.
            </param>
      <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
    </member>
    <member name="M:NationalInstruments.UI.ComplexAnnotation.OnBeforeDragCaption(NationalInstruments.UI.BeforeDragComplexAnnotationCaptionEventArgs)">
      <summary>
            Raises the BeforeDragCaption event.
            </summary>
      <param name="e">
            An BeforeDragComplexAnnotationCaptionEventArgs 
            that contains the event data.
            </param>
      <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
    </member>
    <member name="M:NationalInstruments.UI.ComplexAnnotation.OnAfterDragCaption(NationalInstruments.UI.AfterDragComplexAnnotationCaptionEventArgs)">
      <summary>
            Raises the AfterDragCaption event.
            </summary>
      <param name="e">
            An AfterDragComplexAnnotationCaptionEventArgs 
            that contains the event data.
            </param>
      <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
    </member>
    <member name="P:NationalInstruments.UI.ComplexAnnotation.XAxis">
      <summary>
            Gets or sets the x-axis that determines where to draw the annotation.
            </summary>
      <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
    </member>
    <member name="P:NationalInstruments.UI.ComplexAnnotation.YAxis">
      <summary>
            Gets or sets the y-axis that determines where to draw the annotation.
            </summary>
      <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
    </member>
    <member name="E:NationalInstruments.UI.ComplexAnnotation.BeforeDragCaption">
      <summary>
            Occurs before Caption is dragged.
            </summary>
      <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
    </member>
    <member name="E:NationalInstruments.UI.ComplexAnnotation.AfterDragCaption">
      <summary>
            Occurs after Caption is dragged.
            </summary>
      <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
    </member>
    <member name="M:NationalInstruments.UI.MagnitudePhaseRangeAnnotation.#ctor">
      <summary>
            Initializes a new instance of the MagnitudePhaseRangeAnnotation class.
            </summary>
    </member>
    <member name="M:NationalInstruments.UI.MagnitudePhaseRangeAnnotation.#ctor(NationalInstruments.UI.ComplexXAxis,NationalInstruments.UI.ComplexYAxis)">
      <summary>
            Initializes a new instance of the MagnitudePhaseRangeAnnotation class with the specified
            ComplexXAxis and ComplexYAxis.
            </summary>
      <param name="complexXAxis">
            The ComplexXAxis of the annotation.
            </param>
      <param name="complexYAxis">
            The ComplexYAxis of the annotation.
            </param>
    </member>
    <member name="M:NationalInstruments.UI.MagnitudePhaseRangeAnnotation.#ctor(NationalInstruments.UI.ComplexXAxis,NationalInstruments.UI.ComplexYAxis,System.Double,System.Double,NationalInstruments.UI.Arc)">
      <summary>
            Initializes a new instance of the MagnitudePhaseRangeAnnotation class with the specified
            ComplexXAxis, ComplexYAxis, start magnitude, magnitude, and phase.
            </summary>
      <param name="complexXAxis">
            The ComplexXAxis of the annotation.
            </param>
      <param name="complexYAxis">
            The ComplexYAxis of the annotation.
            </param>
      <param name="startMagnitude">
            The start magnitude of the annotation.
            </param>
      <param name="magnitude">
            The magnitude of the annotation.
            </param>
      <param name="phase">
            The phase of the annotation.
            </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
            The specified startMagnitude (parameter) or magnitude (parameter) is less than 0.
            
            -or-
            
            The specified startMagnitude (parameter) or magnitude (parameter)   is NaN, NegativeInfinity,
            or PositiveInfinity.
            </exception>
      <exception cref="T:System.ArgumentNullException">
            The specified phase (parameter) is null.
            </exception>
    </member>
    <member name="M:NationalInstruments.UI.MagnitudePhaseRangeAnnotation.Clone">
      <summary>
            Creates a new object that is a copy of this instance.
            </summary>
      <returns>
            A new object that is a copy of this instance.
            </returns>
      <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
    </member>
    <member name="M:NationalInstruments.UI.MagnitudePhaseRangeAnnotation.FormatDataToolTip(System.Double,System.Double,NationalInstruments.UI.Arc)">
      <summary>
            Formats start magnitude, magnitude, and phase data values as a MagnitudePhaseRangeAnnotation data tooltip.
            </summary>
      <param name="startMagnitude">
            The start magnitude data value to format.
            </param>
      <param name="magnitude">
            The magnitude data value to format.
            </param>
      <param name="phase">
            The phase value to format.
            </param>
      <returns>
            A String that contains the specified start magnitude, magnitude, and phase data values formatted as
            a data tooltip. The tooltip format is specified by the current value of the 
            ToolTipMagnitudeFormat and ToolTipPhaseFormat properties.
            </returns>
      <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
    </member>
    <member name="M:NationalInstruments.UI.MagnitudePhaseRangeAnnotation.Dispose(System.Boolean)">
      <summary>
            Releases the resources used by the MagnitudePhaseRangeAnnotation.
            </summary>
      <param name="disposing">
            If true, this method releases managed and unmanaged resources. If false, this method releases
            only unmanaged resources.
            </param>
    </member>
    <member name="M:NationalInstruments.UI.MagnitudePhaseRangeAnnotation.OnBeforeDraw(NationalInstruments.UI.BeforeDrawMagnitudePhaseRangeAnnotationEventArgs)">
      <summary>
            Raises the BeforeDraw event.
            </summary>
      <param name="e">
            A BeforeDrawMagnitudePhaseRangeAnnotationEventArgs that contains the event data.
            </param>
      <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
    </member>
    <member name="M:NationalInstruments.UI.MagnitudePhaseRangeAnnotation.OnAfterDraw(NationalInstruments.UI.AfterDrawMagnitudePhaseRangeAnnotationEventArgs)">
      <summary>
            Raises the AfterDraw event.
            </summary>
      <param name="e">
            An AfterDrawMagnitudePhaseRangeAnnotationEventArgs that contains the event data.
            </param>
      <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
    </member>
    <member name="P:NationalInstruments.UI.MagnitudePhaseRangeAnnotation.Center">
      <summary>
            Gets or sets the center of the phase range annotation.
            </summary>
      <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
    </member>
    <member name="P:NationalInstruments.UI.MagnitudePhaseRangeAnnotation.StartMagnitude">
      <summary>
            Gets or sets the start magnitude of the magnitude range of the annotation.
            </summary>
      <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
            The specified value is lesser than 0.
            
            -or-
            
            The specified value is NaN, NegativeInfinity,
            or PositiveInfinity.
            </exception>
    </member>
    <member name="P:NationalInstruments.UI.MagnitudePhaseRangeAnnotation.Magnitude">
      <summary>
            Gets or sets the magnitude range of the annotation.
            </summary>
      <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
            The specified value is lesser than 0.
            
            -or-
            
            The specified value is NaN, NegativeInfinity,
            or PositiveInfinity.
            </exception>
    </member>
    <member name="P:NationalInstruments.UI.MagnitudePhaseRangeAnnotation.ArrowHeadMagnitude">
      <summary>
            Gets or sets the magnitude of the arrow head data point.
            </summary>
      <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
            The specified value is lesser than 0.
            
            -or-
            
            The specified value is NaN, NegativeInfinity,
            or PositiveInfinity.
            </exception>
    </member>
    <member name="P:NationalInstruments.UI.MagnitudePhaseRangeAnnotation.ArrowHeadPhase">
      <summary>
            Gets or sets the phase of the arrow head data point in degrees.
            </summary>
      <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
            The specified value is lesser than 0 or more than 360.
            
            -or-
            
            The specified value is NaN, NegativeInfinity,
            or PositiveInfinity.
            </exception>
    </member>
    <member name="P:NationalInstruments.UI.MagnitudePhaseRangeAnnotation.Phase">
      <summary>
            Gets or sets the Arc that represents the phase range of the annotation.
            </summary>
      <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
      <exception cref="T:System.ArgumentNullException">
            The specified value is null.
            </exception>
    </member>
    <member name="P:NationalInstruments.UI.MagnitudePhaseRangeAnnotation.AutoHide">
      <summary>
            Gets or sets a value indicating if the annotation is hidden when the range of interest is not located
            inside the plot area bounds. 
            </summary>
      <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
    </member>
    <member name="P:NationalInstruments.UI.MagnitudePhaseRangeAnnotation.RangeFillColor">
      <summary>
            Gets or sets the color used to fill the range area.
            </summary>
      <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
    </member>
    <member name="P:NationalInstruments.UI.MagnitudePhaseRangeAnnotation.RangeFillStyle">
      <summary>
            Gets or sets the style used to draw the fill color of the range area.
            </summary>
      <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
      <exception cref="T:System.ArgumentNullException">value (parameter) is null.
            </exception>
    </member>
    <member name="P:NationalInstruments.UI.MagnitudePhaseRangeAnnotation.RangeLineColor">
      <summary>
            Gets or sets the color of the line that borders the range area.
            </summary>
      <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
    </member>
    <member name="P:NationalInstruments.UI.MagnitudePhaseRangeAnnotation.RangeLineStyle">
      <summary>
            Gets or sets the style of the line that borders the range area.
            </summary>
      <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
      <exception cref="T:System.ArgumentNullException">value (parameter) is null.
            </exception>
    </member>
    <member name="P:NationalInstruments.UI.MagnitudePhaseRangeAnnotation.RangeLineWidth">
      <summary>
            Gets or sets the width of the line that borders the range area.
            </summary>
      <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
            The specified value is less than or equal to zero.
            
            -or-
            
            The specified value is NaN, NegativeInfinity,
            or PositiveInfinity.
            </exception>
    </member>
    <member name="P:NationalInstruments.UI.MagnitudePhaseRangeAnnotation.RangeZOrder">
      <summary>
            Gets or sets a value indicating if the range area is drawn above or below all plots.
            </summary>
      <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
      <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
            The specified value is not an AnnotationZOrder value.
            </exception>
    </member>
    <member name="P:NationalInstruments.UI.MagnitudePhaseRangeAnnotation.ArrowHeadPosition">
      <summary>
            Gets or sets the position of the arrow head.
            </summary>
      <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
      <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
            The specified value is not an ComplexArrowHeadPosition value.
            </exception>
    </member>
    <member name="P:NationalInstruments.UI.MagnitudePhaseRangeAnnotation.ToolTipMagnitudeFormat">
      <summary>
            Gets or sets the format string used to format the magnitude data value displayed in the tooltip.
            </summary>
      <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
      <exception cref="T:System.ArgumentNullException">
            The specified value is null.
            </exception>
    </member>
    <member name="P:NationalInstruments.UI.MagnitudePhaseRangeAnnotation.ToolTipPhaseFormat">
      <summary>
            Gets or sets the format string used to format the phase data value displayed in the tooltip.
            </summary>
      <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
      <exception cref="T:System.ArgumentNullException">
            The specified value is null.
            </exception>
    </member>
    <member name="E:NationalInstruments.UI.MagnitudePhaseRangeAnnotation.BeforeDraw">
      <summary>
            Occurs before the range annotation is drawn.
            </summary>
      <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
    </member>
    <member name="E:NationalInstruments.UI.MagnitudePhaseRangeAnnotation.AfterDraw">
      <summary>
            Occurs after the range annotation has been drawn.
            </summary>
      <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
    </member>
    <member name="T:NationalInstruments.UI.LineStyle">
      <summary>
            Provides an abstract base class for specifying a line style 
            and also provides a list of pre-defined line styles.
            </summary>
    </member>
    <member name="M:NationalInstruments.UI.LineStyle.#ctor">
      <summary>
            Initializes a new instance of the LineStyle class.</summary>
    </member>
    <member name="M:NationalInstruments.UI.LineStyle.CreatePen(System.Object,NationalInstruments.UI.LineStyleDrawArgs)">
      <summary>
            Creates a pen with the specified LineStyleDrawArgs.
            </summary>
      <param name="context">
            An Object with additional context information.
            </param>
      <param name="args">
            A LineStyleDrawArgs that contains the 
            drawing data.
            </param>
      <returns>
            A Pen to use to draw the line style.  If null is returned, a NotSupportedException
            is thrown at the time this method is called.
            </returns>
    </member>
    <member name="P:NationalInstruments.UI.LineStyle.UnderlyingType">
      <summary>
            Gets the underlying type of an EnumObject value.
            </summary>
    </member>
    <member name="P:NationalInstruments.UI.LineStyle.None">
      <summary>
            Gets a value that indicates that there is no line.
            </summary>
    </member>
    <member name="P:NationalInstruments.UI.LineStyle.DashDotDot">
      <summary>
            Gets a line with a dash-dot-dot line style.
            </summary>
    </member>
    <member name="P:NationalInstruments.UI.LineStyle.DashDot">
      <summary>
            Gets a line with a dash-dot line style.
            </summary>
    </member>
    <member name="P:NationalInstruments.UI.LineStyle.Dash">
      <summary>
            Gets a line with a dashed line style.
            </summary>
    </member>
    <member name="P:NationalInstruments.UI.LineStyle.Dot">
      <summary>
            Gets a line with a dotted line style.
            </summary>
    </member>
    <member name="P:NationalInstruments.UI.LineStyle.Solid">
      <summary>
            Gets a line with a solid line style.
            </summary>
    </member>
    <member name="P:NationalInstruments.UI.LineStyle.IsContextDependent">
      <summary>
            Gets a value indicating if the line style is sensitive to changes in the context.
            </summary>
    </member>
    <member name="T:NationalInstruments.UI.LegendItem">
      <summary>
            Represents an item in a legend control.
            </summary>
    </member>
    <member name="M:NationalInstruments.UI.LegendItem.#ctor">
      <summary>
            Initializes a new instance of the LegendItem class.
            </summary>
    </member>
    <member name="M:NationalInstruments.UI.LegendItem.#ctor(NationalInstruments.UI.ILegendItemSource,System.String)">
      <summary>
            Initializes a new instance of the LegendItem class with
            the specified legend item source and text.
            </summary>
      <param name="source">
            A value to initialize the Source property with.
            </param>
      <param name="text">
            A value to initialize the Text property with.
            </param>
    </member>
    <member name="M:NationalInstruments.UI.LegendItem.Dispose(System.Boolean)">
      <summary>
            Releases the unmanaged resources used by the LegendItem 
            and optionally releases the managed resources.
            </summary>
      <param name="disposing">true to release both managed and unmanaged resources; false to release only
            unmanaged resources.
            </param>
    </member>
    <member name="M:NationalInstruments.UI.LegendItem.ToString">
      <summary>
            Returns a string representation of the object.
            </summary>
      <returns>
            A string representation of the object.
            </returns>
      <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
    </member>
    <member name="M:NationalInstruments.UI.LegendItem.Clone">
      <summary>
            Creates a new object that is a copy of this instance.
            </summary>
      <returns>
            A new object that is a copy of this instance.
            </returns>
      <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
    </member>
    <member name="M:NationalInstruments.UI.LegendItem.DrawItem(NationalInstruments.UI.ComponentDrawArgs)">
      <summary>
            Draws the legend item.
            </summary>
      <param name="args">
            A ComponentDrawArgs that contains the 
            drawing data.
            </param>
      <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
      <exception cref="T:System.ArgumentNullException">args (parameter) is null.
            </exception>
    </member>
    <member name="M:NationalInstruments.UI.LegendItem.DrawText(NationalInstruments.UI.ComponentDrawArgs)">
      <summary>
            Draws the legend text.
            </summary>
      <param name="args">
            A ComponentDrawArgs that contains the 
            drawing data.
            </param>
      <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
      <exception cref="T:System.ArgumentNullException">args (parameter) is null.
            </exception>
    </member>
    <member name="M:NationalInstruments.UI.LegendItem.OnBeforeDraw(NationalInstruments.UI.BeforeDrawLegendItemEventArgs)">
      <summary>
            Raises the BeforeDraw event.
            </summary>
      <param name="e">
            An BeforeDrawLegendItemEventArgs that contains the 
            event data.
            </param>
      <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
    </member>
    <member name="M:NationalInstruments.UI.LegendItem.OnAfterDraw(NationalInstruments.UI.AfterDrawLegendItemEventArgs)">
      <summary>
            Raises the AfterDraw event.
            </summary>
      <param name="e">
            An AfterDrawLegendItemEventArgs that contains the
            event data.
            </param>
      <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
    </member>
    <member name="P:NationalInstruments.UI.LegendItem.Text">
      <summary>
            Gets or sets the description of the legend item.
            </summary>
    </member>
    <member name="P:NationalInstruments.UI.LegendItem.Source">
      <summary>
            Gets or sets the object to display for the legend item.
            </summary>
    </member>
    <member name="E:NationalInstruments.UI.LegendItem.BeforeDraw">
      <summary>
            Occurs before the legend item is drawn.
            </summary>
      <exception cref="T:System.ObjectDisposedException">
            An event handler is added after the object has been disposed.
            </exception>
    </member>
    <member name="E:NationalInstruments.UI.LegendItem.AfterDraw">
      <summary>
            Occurs after the legend item has been drawn.
            </summary>
      <exception cref="T:System.ObjectDisposedException">
            An event handler is added after the object has been disposed.
            </exception>
    </member>
    <member name="T:NationalInstruments.UI.LedStyle">
      <summary>
            Provides an abstract base class for specifying an LED style.
            </summary>
    </member>
    <member name="M:NationalInstruments.UI.LedStyle.#ctor">
      <summary>
            Initializes a new instance of the LedStyle class.
            </summary>
    </member>
    <member name="M:NationalInstruments.UI.LedStyle.Draw(System.Object,NationalInstruments.UI.LedStyleDrawArgs)">
      <summary>
            Draws an LED with the specified LedStyleDrawArgs.
            </summary>
      <param name="context">
            The object that specifies the context in which Draw is called.</param>
      <param name="args">
            An LedStyleDrawArgs that contains the
            drawing data.
            </param>
    </member>
    <member name="P:NationalInstruments.UI.LedStyle.Is3D">
      <summary>
            Gets a value indicating whether the LedStyle is drawn as a 3D style.
            </summary>
    </member>
    <member name="P:NationalInstruments.UI.LedStyle.UnderlyingType">
      <summary>
            Gets the underlying type of an EnumObject value.
            </summary>
    </member>
    <member name="P:NationalInstruments.UI.LedStyle.Round">
      <summary>
            Gets a round LED style.
            </summary>
    </member>
    <member name="P:NationalInstruments.UI.LedStyle.Round3D">
      <summary>
            Gets a 3D, round LED style.
            </summary>
    </member>
    <member name="P:NationalInstruments.UI.LedStyle.Square">
      <summary>
            Gets a square LED style.
            </summary>
    </member>
    <member name="P:NationalInstruments.UI.LedStyle.Square3D">
      <summary>
            Gets a 3D, square LED style.
            </summary>
    </member>
    <member name="T:NationalInstruments.UI.KnobStyle">
      <summary>
            Provides an abstract base class for specifying a knob style
            and also provides a list of pre-defined knob styles.
            </summary>
    </member>
    <member name="M:NationalInstruments.UI.KnobStyle.#ctor">
      <summary>
            Initializes a new instance of the KnobStyle class.
            </summary>
    </member>
    <member name="P:NationalInstruments.UI.KnobStyle.UnderlyingType">
      <summary>
            Gets the underlying type of an EnumObject value.
            </summary>
    </member>
    <member name="P:NationalInstruments.UI.KnobStyle.RaisedWithThumb">
      <summary>
            Gets a knob with a raised look and a thumb.
            </summary>
    </member>
    <member name="P:NationalInstruments.UI.KnobStyle.RaisedWithThinNeedle">
      <summary>
            Gets a knob with a raised look and a thin needle.
            </summary>
    </member>
    <member name="P:NationalInstruments.UI.KnobStyle.RaisedWithThumb3D">
      <summary>
            Gets a 3D knob with a raised look and a thumb.
            </summary>
    </member>
    <member name="P:NationalInstruments.UI.KnobStyle.RaisedWithThinNeedle3D">
      <summary>
            Gets a 3D knob with a raised look and a thin needle.
            </summary>
    </member>
    <member name="P:NationalInstruments.UI.KnobStyle.FlatWithThinNeedle">
      <summary>
            Gets a knob with a flat look and a thin needle.
            </summary>
    </member>
    <member name="T:NationalInstruments.UI.IKnob">
      <summary>
            Defines an interface for the knob control.
            </summary>
    </member>
    <member name="T:NationalInstruments.UI.IRadialNumericPointer">
      <summary>
            Defines the interface for Measurement Studio Windows Forms controls that display
            a numeric value in a radial scale.
            </summary>
    </member>
    <member name="T:NationalInstruments.UI.INumericPointer">
      <summary>
            Defines the interface for all Measurement Studio Windows Forms numeric controls that display a numeric value
            with a pointer and a scale.
            </summary>
    </member>
    <member name="T:NationalInstruments.UI.INumericControl">
      <summary>
            Defines the interface for all Measurement Studio .NET controls that display a numeric value.
            </summary>
    </member>
    <member name="M:NationalInstruments.UI.INumericControl.MovePrevious">
      <summary>
            Changes the value to the previous value as specified by the 
            CoercionMode.
            </summary>
      <returns>true if the value changed to the previous value.
            </returns>
      <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
    </member>
    <member name="M:NationalInstruments.UI.INumericControl.MoveNext">
      <summary>
            Changes the value to the next value as specified by the 
            CoercionMode.
            </summary>
      <returns>true if the value changed to the next value.
            </returns>
      <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
    </member>
    <member name="P:NationalInstruments.UI.INumericControl.Value">
      <summary>
            Gets or sets the value of the control.
            </summary>
      <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
            The value is NaN, NegativeInfinity,
            or PositiveInfinity.
            
            -or-
            

OutOfRangeMode is 
            ThrowException, and the value is less 
            than Minimum
            or the value is greater than Maximum.
            


            -or-
            OutOfRangeMode is 
            ThrowException, and the value is less 
            than Minimum
            or the value is greater than Maximum.
            </exception>
    </member>
    <member name="P:NationalInstruments.UI.INumericControl.OutOfRangeMode">
      <summary>
            Gets or sets the behavior of the control when the value is set to a value out of range.
            </summary>
      <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
            The value is not a NumericOutOfRangeMode value.
            </exception>
    </member>
    <member name="P:NationalInstruments.UI.INumericControl.Range">
      <summary>
            Gets or sets the minimum and maximum value of the control.
            </summary>
      <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
      <exception cref="T:System.ArgumentNullException">
            The value is null.
            </exception>
      <exception cref="T:System.ArgumentException">
            The value is Empty.
            
            -or-
            


            The Minimum of the specified
            value is NegativeInfinity.
            
            -or-
            


            The Maximum of the specified
            value is PositiveInfinity.
            
            -or-
            
            -or-
            </exception>
    </member>
    <member name="P:NationalInstruments.UI.INumericControl.CoercionIntervalBase">
      <summary>
            Gets or sets the base of the interval used for coercing the value.
            </summary>
      <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
            The value is NegativeInfinity or
            PositiveInfinity.
            </exception>
    </member>
    <member name="P:NationalInstruments.UI.INumericControl.CoercionInterval">
      <summary>
            Gets or sets the interval used for coercing the value.
            </summary>
      <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
            The value is NaN, NegativeInfinity, 
            or PositiveInfinity.
            </exception>
    </member>
    <member name="P:NationalInstruments.UI.INumericControl.CoercionMode">
      <summary>
            Gets or sets the mode used to coerce the value of the control.
            </summary>
      <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
      <exception cref="T:System.ArgumentNullException">
            The value is null.
            </exception>
    </member>
    <member name="E:NationalInstruments.UI.INumericControl.AfterChangeValue">
      <summary>
            Occurs after the value of Value 
            has changed.
            </summary>
      <exception cref="T:System.ObjectDisposedException">
            An event handler is added after the object has been disposed.
            </exception>
    </member>
    <member name="E:NationalInstruments.UI.INumericControl.BeforeChangeValue">
      <summary>
            Occurs before the value of Value 
            changes, allowing for the change event to be canceled.
            </summary>
      <exception cref="T:System.ObjectDisposedException">
            An event handler is added after the object has been disposed.
            </exception>
    </member>
    <member name="M:NationalInstruments.UI.INumericPointer.GetStyle">
      <summary>
            Gets the style that determines the appearance of the control.
            </summary>
      <returns>
            A NumericPointerStyle that determines
            the appearance of the control.
            </returns>
      <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
    </member>
    <member name="P:NationalInstruments.UI.INumericPointer.AntiAliased">
      <summary>
            Gets or sets a value indicating if the control draws anti-aliased.
            </summary>
      <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
    </member>
    <member name="P:NationalInstruments.UI.INumericPointer.AutoDivisionSpacing">
      <summary>
            Gets or sets a value indicating if the scale automatically calculates the location of tick marks.
            </summary>
      <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
    </member>
    <member name="P:NationalInstruments.UI.INumericPointer.RangeFills">
      <summary>
            Gets the collection of fills drawn on the scale.
            </summary>
      <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
    </member>
    <member name="P:NationalInstruments.UI.INumericPointer.CustomDivisions">
      <summary>
            Gets the collection of custom divisions on the scale.
            </summary>
      <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
    </member>
    <member name="P:NationalInstruments.UI.INumericPointer.MajorDivisions">
      <summary>
            Gets the major divisions on the scale.
            </summary>
      <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
    </member>
    <member name="P:NationalInstruments.UI.INumericPointer.MinorDivisions">
      <summary>
            Gets the minor divisions on the scale.
            </summary>
      <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
    </member>
    <member name="P:NationalInstruments.UI.INumericPointer.ScaleLogBase">
      <summary>
            Gets or sets the base of the logarithm to use for a logarithmic scale.
            </summary>
      <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
            The value is less than or equal to 1.
            
            -or-
            


            The value is NaN, NegativeInfinity, or
            PositiveInfinity.
            


            -or-
            
            The value is NaN, NegativeInfinity, or
            PositiveInfinity.
            </exception>
    </member>
    <member name="P:NationalInstruments.UI.INumericPointer.ScaleType">
      <summary>
            Gets or sets the type of the scale.
            </summary>
      <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
      <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
            The value is not a ScaleType value.
            </exception>
    </member>
    <member name="P:NationalInstruments.UI.INumericPointer.ScaleBaseLineVisible">
      <summary>
            Gets or sets a value indicating if the base line connecting the tick marks is displayed.
            </summary>
      <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
    </member>
    <member name="P:NationalInstruments.UI.INumericPointer.ScaleBaseLineColor">
      <summary>
            Gets or sets the color of the base line connecting the tick marks.
            </summary>
      <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
    </member>
    <member name="P:NationalInstruments.UI.INumericPointer.ScaleVisible">
      <summary>
            Gets or sets a value indicating if the scale is displayed.
            </summary>
      <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
    </member>
    <member name="P:NationalInstruments.UI.INumericPointer.PointerColor">
      <summary>
            Gets or sets the color of the pointer on the control.
            </summary>
      <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
    </member>
    <member name="P:NationalInstruments.UI.INumericPointer.ToolTipsEnabled">
      <summary>
            Gets or sets a value indicating if the value of the control is shown in a tooltip 
            when the mouse hovers over the pointer.
            </summary>
      <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
    </member>
    <member name="P:NationalInstruments.UI.INumericPointer.ToolTipFormat">
      <summary>
            Gets or sets the format string used to format the value displayed in the tooltip.
            </summary>
      <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
    </member>
    <member name="E:NationalInstruments.UI.INumericPointer.CustomDivisionsChanged">
      <summary>
            Occurs when the content of the CustomDivisions 
            collection changes.
            </summary>
      <exception cref="T:System.ObjectDisposedException">
            An event handler is added after the object has been disposed.
            </exception>
    </member>
    <member name="E:NationalInstruments.UI.INumericPointer.RangeFillsChanged">
      <summary>
            Occurs when the content of the RangeFills 
            collection changes.
            </summary>
      <exception cref="T:System.ObjectDisposedException">
            An event handler is added after the object has been disposed.
            </exception>
    </member>
    <member name="E:NationalInstruments.UI.INumericPointer.ValueEnterRange">
      <summary>
            Occurs when the value of Value 
            changes such that the value enters the range of a ScaleRangeFill
            in RangeFills.
            </summary>
      <exception cref="T:System.ObjectDisposedException">
            An event handler is added after the object has been disposed.</exception>
    </member>
    <member name="E:NationalInstruments.UI.INumericPointer.ValueLeaveRange">
      <summary>
            Occurs when the value of Value 
            changes such that the value leaves the range of a ScaleRangeFill
            in RangeFills.
            </summary>
      <exception cref="T:System.ObjectDisposedException">
            An event handler is added after the object has been disposed.</exception>
    </member>
    <member name="P:NationalInstruments.UI.IRadialNumericPointer.DialColor">
      <summary>
            Gets or sets the color of the circular area containing the pointer.
            </summary>
      <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
    </member>
    <member name="P:NationalInstruments.UI.IRadialNumericPointer.ScaleArc">
      <summary>
            Gets or sets the arc on which the scale is drawn.
            </summary>
      <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
      <exception cref="T:System.ArgumentNullException">
            The value is null.
            </exception>
    </member>
    <member name="P:NationalInstruments.UI.IKnob.KnobStyle">
      <summary>
            Gets or sets the style that determines the appearance of the knob.
            </summary>
      <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
      <exception cref="T:System.ArgumentNullException">
            The value is null.
            </exception>
    </member>
    <member name="T:NationalInstruments.UI.GraphInteractionModes">
      <summary>
            Defines the set of possible user interactions within the plot area of a graph.
            </summary>
    </member>
    <member name="F:NationalInstruments.UI.GraphInteractionModes.None">
      <summary>
            No interaction.
            </summary>
    </member>
    <member name="F:NationalInstruments.UI.GraphInteractionModes.ZoomX">
      <summary>
            The plot area can be zoomed with a horizontal selection.
            </summary>
    </member>
    <member name="F:NationalInstruments.UI.GraphInteractionModes.ZoomY">
      <summary>
            The plot area can be zoomed with a vertical selection.
            </summary>
    </member>
    <member name="F:NationalInstruments.UI.GraphInteractionModes.ZoomAroundPoint">
      <summary>
            The plot area can be zoomed around a particular point.
            </summary>
    </member>
    <member name="F:NationalInstruments.UI.GraphInteractionModes.PanX">
      <summary>
            The plot area can be panned horizontally.
            </summary>
    </member>
    <member name="F:NationalInstruments.UI.GraphInteractionModes.PanY">
      <summary>
            The plot area can be panned vertically.
            </summary>
    </member>
    <member name="F:NationalInstruments.UI.GraphInteractionModes.DragCursor">
      <summary>
            The cursor can be dragged.
            </summary>
    </member>
    <member name="F:NationalInstruments.UI.GraphInteractionModes.DragAnnotationCaption">
      <summary>
            The annotation caption can be dragged.
            </summary>
    </member>
    <member name="F:NationalInstruments.UI.GraphInteractionModes.EditRange">
      <summary>
            Interactively edit the minimum and maximum values for the axes can at run time.
            </summary>
    </member>
    <member name="T:NationalInstruments.UI.DigitalWaveformPlot">
      <summary>
            Defines a class that represents a plot for a digital waveform.
            </summary>
    </member>
    <member name="T:NationalInstruments.UI.DigitalPlot">
      <summary>
            Provides an abstract base class for plots in a digital waveform graph, such as a 
            digital waveform plot or a digital waveform sample plot.
            </summary>
    </member>
    <member name="M:NationalInstruments.UI.DigitalPlot.#ctor">
      <summary>
            Initializes a new instance of the DigitalPlot class.
            </summary>
    </member>
    <member name="M:NationalInstruments.UI.DigitalPlot.ToString">
      <summary>
            Returns a string representation of the object.
            </summary>
      <returns>
            A string representation of the object.
            </returns>
      <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
    </member>
    <member name="M:NationalInstruments.UI.DigitalPlot.Dispose(System.Boolean)">
      <summary>
            Releases the unmanaged resources used by the DigitalPlot 
            and optionally releases the managed resources.
            </summary>
      <param name="disposing">true to release both managed and unmanaged resources; false to release only
            unmanaged resources.
            </param>
    </member>
    <member name="M:NationalInstruments.UI.DigitalPlot.DrawLegendItem(NationalInstruments.UI.ComponentDrawArgs)">
      <summary>
            Draws the symbol of a DigitalPlot.
            </summary>
      <param name="args">
            A ComponentDrawArgs that contains the graphics surface to
            draw the legend item on and the bounds in which to draw the legend item.
            </param>
      <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
      <exception cref="T:System.ArgumentNullException">args (parameter) is null.
            </exception>
    </member>
    <member name="M:NationalInstruments.UI.DigitalPlot.OnLegendItemChanged(System.EventArgs)">
      <summary>
            Raises the LegendItemChanged event.
            </summary>
      <param name="e">
            An EventArgs that contains the event data.
            </param>
      <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
    </member>
    <member name="M:NationalInstruments.UI.DigitalPlot.GetService(System.Type)">
      <summary>
            Gets the service object of the specified type.
            </summary>
      <param name="service">
            A service provided by the component.
            </param>
      <returns>
            An Object that represents the service provided by the component or 
            null if the component does not provide the 
            specified service.
            </returns>
    </member>
    <member name="P:NationalInstruments.UI.DigitalPlot.LineColor">
      <summary>
            Gets or sets the color of the digital line.
            </summary>
      <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
    </member>
    <member name="P:NationalInstruments.UI.DigitalPlot.Label">
      <summary>
            Gets or sets the value of the label that is displayed in the y-axis of the digital plot.
            </summary>
      <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
      <exception cref="T:System.ArgumentNullException">
            The specified value is null.
            </exception>
    </member>
    <member name="P:NationalInstruments.UI.DigitalPlot.LineWidth">
      <summary>
            Gets or sets a value indicating the width of the digital line.
            </summary>
      <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
            The specified value is less than or equal to zero.
            
            -or-
            
            The specified value is NaN, NegativeInfinity,
            or PositiveInfinity.
            </exception>
    </member>
    <member name="P:NationalInstruments.UI.DigitalPlot.AntiAliased">
      <summary>
            Gets or sets a value indicating if the digital plot line draws anti-aliased.
            </summary>
      <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
    </member>
    <member name="P:NationalInstruments.UI.DigitalPlot.TransitionLocation">
      <summary>
            Gets or sets the location at which the digital states transition. 
            </summary>
      <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
      <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
            The specified value is not a DigitalTransitionLocation value.
            </exception>
    </member>
    <member name="P:NationalInstruments.UI.DigitalPlot.LabelForeColor">
      <summary>
            Gets or sets the foreground color of the label that is displayed in the y-axis of the digital plot.
            </summary>
      <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
    </member>
    <member name="P:NationalInstruments.UI.DigitalPlot.LabelBackColor">
      <summary>
            Gets or sets the background color of the label that is displayed in the y-axis of the digital plot.
            </summary>
      <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
    </member>
    <member name="P:NationalInstruments.UI.DigitalPlot.LabelVisible">
      <summary>
            Gets or sets a value indicating if a label is displayed in the y-axis of the digital plot.
            </summary>
      <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
    </member>
    <member name="E:NationalInstruments.UI.DigitalPlot.LegendItemChanged">
      <summary>
            Occurs when the DigitalPlot has changed such
            that its appearance in a legend control must be updated.
            </summary>
    </member>
    <member name="M:NationalInstruments.UI.DigitalWaveformPlot.#ctor">
      <summary>
            Initializes a new instance of the DigitalWaveformPlot class.
            </summary>
    </member>
    <member name="M:NationalInstruments.UI.DigitalWaveformPlot.FormatDataToolTip(NationalInstruments.DigitalWaveformSample)">
      <summary>
            Gets the bus value label for the given DigitalWaveformSample.
            </summary>
      <param name="data">
            A DigitalWaveformSample that contains the sample
            data.
            </param>
      <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
      <exception cref="T:System.ArgumentNullException">
            The value passed for data (parameter) is null.
            </exception>
      <returns>
            A String representation of the bus value for the given 
            DigitalWaveformSample.
            </returns>
    </member>
    <member name="M:NationalInstruments.UI.DigitalWaveformPlot.Clone">
      <summary>
            Creates a new object that is a copy of this instance.
            </summary>
      <returns>
            A new object that is a copy of this instance.
            </returns>
    </member>
    <member name="M:NationalInstruments.UI.DigitalWaveformPlot.Dispose(System.Boolean)">
      <summary>
            Releases the unmanaged resources used by the DigitalWaveformPlot 
            and optionally releases the managed resources.
            </summary>
      <param name="disposing">true to release both managed and unmanaged resources; false to release only
            unmanaged resources.
            </param>
    </member>
    <member name="M:NationalInstruments.UI.DigitalWaveformPlot.OnBeforeCollapse(NationalInstruments.UI.BeforeDigitalWaveformPlotEventArgs)">
      <summary>
            Raises the BeforeCollapse event.
            </summary>
      <param name="e">
            A BeforeDigitalWaveformPlotEventArgs that contains the event
            data.
            </param>
      <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
    </member>
    <member name="M:NationalInstruments.UI.DigitalWaveformPlot.OnBeforeExpand(NationalInstruments.UI.BeforeDigitalWaveformPlotEventArgs)">
      <summary>
            Raises the BeforeExpand event.
            </summary>
      <param name="e">
            A BeforeDigitalWaveformPlotEventArgs that contains the event
            data.
            </param>
      <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
    </member>
    <member name="M:NationalInstruments.UI.DigitalWaveformPlot.OnAfterCollapse(NationalInstruments.UI.AfterDigitalWaveformPlotEventArgs)">
      <summary>
            Raises the AfterCollapse event.
            </summary>
      <param name="e">
            An AfterDigitalWaveformPlotEventArgs that contains the event
            data.
            </param>
      <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
    </member>
    <member name="M:NationalInstruments.UI.DigitalWaveformPlot.OnAfterExpand(NationalInstruments.UI.AfterDigitalWaveformPlotEventArgs)">
      <summary>
            Raises the AfterExpand event.
            </summary>
      <param name="e">
            An AfterDigitalWaveformPlotEventArgs that contains the event
            data.
            </param>
      <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
    </member>
    <member name="P:NationalInstruments.UI.DigitalWaveformPlot.SignalPlots">
      <summary>
            Gets the collection of signal plots.
            </summary>
      <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
    </member>
    <member name="P:NationalInstruments.UI.DigitalWaveformPlot.CollapseSignals">
      <summary>
            Gets or sets whether the digital signals are collapsed.
            </summary>
      <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
    </member>
    <member name="P:NationalInstruments.UI.DigitalWaveformPlot.SampleLabelForeColor">
      <summary>
            Gets or sets the foreground color of the label that is displayed by the sample.
            </summary>
      <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
    </member>
    <member name="P:NationalInstruments.UI.DigitalWaveformPlot.SampleLabelBackColor">
      <summary>
            Gets or sets the background color of the label that is displayed by the sample.
            </summary>
      <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
    </member>
    <member name="P:NationalInstruments.UI.DigitalWaveformPlot.ToolTipsEnabled">
      <summary>
            Gets or sets a value indicating if a Plot tooltip is shown when the mouse hovers over a data point
            in the Plot.
            </summary>
      <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
    </member>
    <member name="P:NationalInstruments.UI.DigitalWaveformPlot.SampleLabelFormat">
      <summary>
            Gets or sets the format of the label that is displayed in each sample of the digital waveform plot.
            </summary>
      <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
      <exception cref="T:System.ArgumentNullException">
            The specified value is null.
            </exception>
    </member>
    <member name="P:NationalInstruments.UI.DigitalWaveformPlot.SampleLabelFont">
      <summary>
            Gets or sets the font of the label that is displayed by the sample.
            </summary>
      <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
    </member>
    <member name="P:NationalInstruments.UI.DigitalWaveformPlot.SampleLabelDisplayMode">
      <summary>
            Gets or sets whether the sample labels are displayed for every state or if only one label is displayed 
            per transition.
            </summary>
      <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
      <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
            The specified value is not a DigitalLabelDisplayMode value.
            </exception>
    </member>
    <member name="P:NationalInstruments.UI.DigitalWaveformPlot.TransitionStyle">
      <summary>
            Gets or sets how the transitions are drawn on the plot.
            </summary>
      <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
      <exception cref="T:System.ArgumentNullException">
            The specified value is null.
            </exception>
    </member>
    <member name="P:NationalInstruments.UI.DigitalWaveformPlot.SampleStyle">
      <summary>
            Gets or sets how the samples are drawn on the plot.
            </summary>
      <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
      <exception cref="T:System.ArgumentNullException">
            The specified value is null.
            </exception>
    </member>
    <member name="P:NationalInstruments.UI.DigitalWaveformPlot.DefaultTiming">
      <summary>
            Gets or sets the default timing of the digital waveform.
            </summary>
      <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
      <exception cref="T:System.ArgumentNullException">
            The specified value is null.
            </exception>
      <exception cref="T:System.InvalidOperationException">
            The specified SampleIntervalMode value is not 
            Regular.
            
            -or-
            
            The specified HasTimeStamp value is false.
            </exception>
    </member>
    <member name="E:NationalInstruments.UI.DigitalWaveformPlot.BeforeCollapse">
      <summary>
            Occurs before the signals are collapsed.
            </summary>
      <exception cref="T:System.ObjectDisposedException">
            An event handler is added after the object has been disposed.
            </exception>
    </member>
    <member name="E:NationalInstruments.UI.DigitalWaveformPlot.BeforeExpand">
      <summary>
            Occurs before the signals are expanded.
            </summary>
      <exception cref="T:System.ObjectDisposedException">
            An event handler is added after the object has been disposed.
            </exception>
    </member>
    <member name="E:NationalInstruments.UI.DigitalWaveformPlot.AfterCollapse">
      <summary>
            Occurs after the signals have been collapsed.
            </summary>
      <exception cref="T:System.ObjectDisposedException">
            An event handler is added after the object has been disposed.
            </exception>
    </member>
    <member name="E:NationalInstruments.UI.DigitalWaveformPlot.AfterExpand">
      <summary>
            Occurs after the signals have been expanded.
            </summary>
      <exception cref="T:System.ObjectDisposedException">
            An event handler is added after the object has been disposed.
            </exception>
    </member>
    <member name="T:NationalInstruments.UI.DigitalStyleDrawArgs">
      <summary>
            Provides data for drawing digital styles.
            </summary>
    </member>
    <member name="M:NationalInstruments.UI.DigitalStyleDrawArgs.#ctor(System.Drawing.Graphics,System.Drawing.Rectangle,System.Drawing.Rectangle,NationalInstruments.DigitalWaveformSample,System.Int32)">
      <summary>
            Initializes a new instance of the DigitalStyleDrawArgs class with the specified graphics,
            state bounds, label bounds, sample, and sample count.
            </summary>
      <param name="graphics">
            The Graphics used to draw the style.
            </param>
      <param name="stateBounds">
            The Rectangle that represents the bounds in which to draw the state.
            </param>
      <param name="labelBounds">
            The Rectangle that represents the bounds in which to draw the label.
            </param>
      <param name="sample">
            The DigitalWaveformSample containing sample information.
            </param>
      <param name="sampleCount">
            The number of continuous samples with the same value.
            </param>
      <exception cref="T:System.ArgumentNullException">sample (parameter) is null.
            
            -or-
            graphics (parameter) is null.
            </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">sampleCount (parameter) is less than or equal to zero.
            </exception>
    </member>
    <member name="M:NationalInstruments.UI.DigitalStyleDrawArgs.SetTransitionInfo(System.Drawing.PointF[],System.Drawing.PointF[])">
      <summary>
            Sets the previous and next points used to draw the state style.
            </summary>
      <param name="previousPoints">
            A PointF array that contains the points before the transition.
            </param>
      <param name="nextPoints">
            A PointF array that contains the points after the transition.
            </param>
      <exception cref="T:System.ArgumentNullException">previousPoints (parameter) is null.
            
            -or-
            nextPoints (parameter) is null.
            </exception>
    </member>
    <member name="M:NationalInstruments.UI.DigitalStyleDrawArgs.SetTransitionInfo(System.Drawing.PointF[],System.Drawing.PointF[],System.Object)">
      <summary>
            Sets the previous and next points used to draw the state style with the specified tag.
            </summary>
      <param name="previousPoints">
            A PointF array that contains the points before the transition.
            </param>
      <param name="nextPoints">
            A PointF array that contains the points after the transition.
            </param>
      <param name="tag">
            An Object value that represents the tag.
            </param>
      <exception cref="T:System.ArgumentNullException">previousPoints (parameter) is null.
            
            -or-
            nextPoints (parameter) is null.
            </exception>
    </member>
    <member name="P:NationalInstruments.UI.DigitalStyleDrawArgs.StateBounds">
      <summary>
            Gets the rectangle that represents the bounds of the state.
            </summary>
    </member>
    <member name="P:NationalInstruments.UI.DigitalStyleDrawArgs.LabelBounds">
      <summary>
            Gets the rectangle that represents the bounds of the label.
            </summary>
    </member>
    <member name="P:NationalInstruments.UI.DigitalStyleDrawArgs.Sample">
      <summary>
            Gets the digital waveform sample.
            </summary>
    </member>
    <member name="P:NationalInstruments.UI.DigitalStyleDrawArgs.SampleCount">
      <summary>
            Gets the number of continuous samples.
            </summary>
    </member>
    <member name="T:NationalInstruments.UI.DigitalSignalPlot">
      <summary>
            Defines a class that represents a plot for a signal in a digital waveform.
            </summary>
    </member>
    <member name="M:NationalInstruments.UI.DigitalSignalPlot.#ctor">
      <summary>
            Initializes a new instance of the DigitalSignalPlot class.
            </summary>
    </member>
    <member name="M:NationalInstruments.UI.DigitalSignalPlot.GetService(System.Type)">
      <summary>
            Gets the service object of the specified type.
            </summary>
      <param name="service">
            A service provided by the component.
            </param>
      <returns>
            An Object that represents the service provided by the component or 
            null if the component does not provide the 
            specified service.
            </returns>
    </member>
    <member name="M:NationalInstruments.UI.DigitalSignalPlot.Clone">
      <summary>
            Creates a new object that is a copy of this instance.
            </summary>
      <returns>
            A new object that is a copy of this instance.
            </returns>
    </member>
    <member name="P:NationalInstruments.UI.DigitalSignalPlot.StateLabelForeColor">
      <summary>
            Gets or sets the foreground color of the label that is displayed by the digital state.
            </summary>
      <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
    </member>
    <member name="P:NationalInstruments.UI.DigitalSignalPlot.StateLabelBackColor">
      <summary>
            Gets or sets the background color of the label that is displayed by the digital state.
            </summary>
      <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
    </member>
    <member name="P:NationalInstruments.UI.DigitalSignalPlot.StateLabelVisible">
      <summary>
            Gets or sets a value indicating if a label is displayed by the digital state.
            </summary>
      <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
    </member>
    <member name="P:NationalInstruments.UI.DigitalSignalPlot.StateLabelFont">
      <summary>
            Gets or sets the font of the label that is displayed by the digital state.
            </summary>
      <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
    </member>
    <member name="P:NationalInstruments.UI.DigitalSignalPlot.StateLabelDisplayMode">
      <summary>
            Gets or sets whether the digital state labels are displayed for every state or if only one label is 
            displayed per transition.
            </summary>
      <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
      <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
            The specified value is not a DigitalLabelDisplayMode value.
            </exception>
    </member>
    <member name="P:NationalInstruments.UI.DigitalSignalPlot.WaveformPlot">
      <summary>
            Gets the waveform plot.
            </summary>
      <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
    </member>
    <member name="P:NationalInstruments.UI.DigitalSignalPlot.EmphasisLocation">
      <summary>
            Gets or sets where the emphasized digital state line is drawn.
            </summary>
      <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
    </member>
    <member name="P:NationalInstruments.UI.DigitalSignalPlot.EmphasisWidth">
      <summary>
            Gets or sets the width of the emphasized digital state line.
            </summary>
      <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
            The specified value is less than or equal to zero.
            
            -or-
            
            The specified value is NaN, NegativeInfinity,
            or PositiveInfinity.
            </exception>
    </member>
    <member name="P:NationalInstruments.UI.DigitalSignalPlot.TransitionStyle">
      <summary>
            Gets or sets a style that specifies how the transition of digital states is drawn.
            </summary>
      <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
      <exception cref="T:System.ArgumentNullException">
            The specified value is null.
            </exception>
    </member>
    <member name="P:NationalInstruments.UI.DigitalSignalPlot.StateStyle">
      <summary>
            Gets or sets a style that specifies how the digital states are drawn on a digital signal plot.
            </summary>
      <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
      <exception cref="T:System.ArgumentNullException">
            The specified value is null.
            </exception>
    </member>
    <member name="T:NationalInstruments.UI.ComplexYAxis">
      <summary>
            Represents the vertical axis on a complex graph. 
            </summary>
    </member>
    <member name="T:NationalInstruments.UI.ComplexAxis">
      <summary>
            Provides an abstract base class for axes on a complex graph.
            </summary>
    </member>
    <member name="M:NationalInstruments.UI.ComplexAxis.#ctor">
      <summary>
            Initializes a new instance of the ComplexAxis class.
            </summary>
    </member>
    <member name="M:NationalInstruments.UI.ComplexAxis.ToString">
      <summary>
            Returns a string representation of the object.
            </summary>
      <returns>
            A string representation of the object.
            </returns>
      <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
    </member>
    <member name="M:NationalInstruments.UI.ComplexAxis.Dispose(System.Boolean)">
      <summary>
            Releases the resources used by ComplexAxis.
            </summary>
      <param name="disposing">
            If true, this method releases managed and unmanaged resources. If false, this method releases
            only unmanaged resources.
            </param>
    </member>
    <member name="M:NationalInstruments.UI.ComplexAxis.OnRangeChanged(System.EventArgs)">
      <summary>
            Raises the RangeChanged event.
            </summary>
      <param name="e">
            An EventArgs that contains the event data.
            </param>
      <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
    </member>
    <member name="P:NationalInstruments.UI.ComplexAxis.AutoSpacing">
      <summary>
            Gets or sets a value indicating if the axis automatically calculates the location of tick marks.
            </summary>
      <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
    </member>
    <member name="P:NationalInstruments.UI.ComplexAxis.AutoSpacingMajorInterval">
      <summary>
            Gets a value indicating the interval between the major divisions of the axis when AutoSpacing  is true.
            </summary>
      <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
    </member>
    <member name="P:NationalInstruments.UI.ComplexAxis.AutoSpacingMinorInterval">
      <summary>
            Gets a value indicating the interval between the minor divisions of the axis when AutoSpacing  is true.
            </summary>
      <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
    </member>
    <member name="P:NationalInstruments.UI.ComplexAxis.BaseLineVisible">
      <summary>
            Gets or sets a value indicating if the base line connecting the tick marks is displayed.
            </summary>
      <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
    </member>
    <member name="P:NationalInstruments.UI.ComplexAxis.BaseLineColor">
      <summary>
            Gets or sets the color of the base line connecting the tick marks.
            </summary>
      <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
    </member>
    <member name="P:NationalInstruments.UI.ComplexAxis.AutoMinorDivisionFrequency">
      <summary>
            Gets or sets the number of minor ticks located between two major ticks.
            </summary>
      <exception cref="T:System.ArgumentOutOfRangeException">
            The specified value is less than or equal to zero.
            </exception>
    </member>
    <member name="P:NationalInstruments.UI.ComplexAxis.Range">
      <summary>
            Gets or sets the range of the axis.
            </summary>
      <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
      <exception cref="T:System.ArgumentNullException">
            The specified value is null.
            </exception>
      <exception cref="T:System.ArgumentException">
            The specified value is Empty.
            </exception>
    </member>
    <member name="P:NationalInstruments.UI.ComplexAxis.Inverted">
      <summary>
            Gets or sets a value indicating if the axis is inverted.
            </summary>
      <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
    </member>
    <member name="P:NationalInstruments.UI.ComplexAxis.InteractionMode">
      <summary>
            Gets or sets the user interactions that are supported by the axis.
            </summary>
      <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
      <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
            The specified value is not a ScaleInteractionMode value.
            </exception>
    </member>
    <member name="P:NationalInstruments.UI.ComplexAxis.EditRangeNumericFormatMode">
      <summary>
            Gets or sets the mode used to format the value that is displayed when you click an
            editable minimum or maximum value label on an axis.
            </summary>
      <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
      <exception cref="T:System.ArgumentNullException">
            The value is null.
            </exception>
    </member>
    <member name="P:NationalInstruments.UI.ComplexAxis.Caption">
      <summary>
            Gets or sets the text of the caption that is displayed by the axis.
            </summary>
      <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
    </member>
    <member name="P:NationalInstruments.UI.ComplexAxis.CaptionFont">
      <summary>
            Gets or sets the font of the caption that is displayed by the axis.
            </summary>
      <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
    </member>
    <member name="P:NationalInstruments.UI.ComplexAxis.CaptionForeColor">
      <summary>
            Gets or sets the foreground color of the caption that is displayed by the axis.
            </summary>
      <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
    </member>
    <member name="P:NationalInstruments.UI.ComplexAxis.CaptionBackColor">
      <summary>
            Gets or sets the background color of the caption that is displayed by the axis.
            </summary>
      <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
    </member>
    <member name="P:NationalInstruments.UI.ComplexAxis.CaptionVisible">
      <summary>
            Gets or sets a value indicating if the caption is displayed by the axis.
            </summary>
      <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
    </member>
    <member name="P:NationalInstruments.UI.ComplexAxis.OriginLineVisible">
      <summary>
            Gets or sets a value indicating if the line passing through the origin is visible.
            </summary>
      <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
    </member>
    <member name="P:NationalInstruments.UI.ComplexAxis.OriginLineStyle">
      <summary>
            Gets or sets the style of the line passing through the origin.
            </summary>
      <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
      <exception cref="T:System.ArgumentNullException">value (parameter) is null.
            </exception>
    </member>
    <member name="P:NationalInstruments.UI.ComplexAxis.OriginLineColor">
      <summary>
            Gets or sets the color of the line passing through the origin.
            </summary>
      <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
    </member>
    <member name="P:NationalInstruments.UI.ComplexAxis.OriginLineWidth">
      <summary>
            Gets or sets the width of the line passing through the origin.
            </summary>
      <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
            The specified value is less than or equal to zero.
            
            -or-
            
            The specified value is NaN, NegativeInfinity,
            or PositiveInfinity.
            </exception>
    </member>
    <member name="P:NationalInstruments.UI.ComplexAxis.EndLabelsAlwaysVisible">
      <summary>
            Gets or sets a value indicating whether the ticks and labels at the end of the axis are visible.
            </summary>
      <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
    </member>
    <member name="P:NationalInstruments.UI.ComplexAxis.Mode">
      <summary>
            Gets or sets the update mode for the range of the axis.
            </summary>
      <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
      <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
            The specified value is not an AxisMode value.
            </exception>
    </member>
    <member name="P:NationalInstruments.UI.ComplexAxis.MajorDivisions">
      <summary>
            Gets AxisLabeledDivisions on the axis.
            </summary>
      <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
    </member>
    <member name="P:NationalInstruments.UI.ComplexAxis.MinorDivisions">
      <summary>
            Gets the minor AxisDivisions on the axis.
            </summary>
      <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
    </member>
    <member name="P:NationalInstruments.UI.ComplexAxis.CustomDivisions">
      <summary>
            Gets the collection of AxisCustomDivision objects on the axis.
            </summary>
      <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
    </member>
    <member name="E:NationalInstruments.UI.ComplexAxis.RangeChanged">
      <summary>
            Occurs when the Range of the axis changes.
            </summary>
      <exception cref="T:System.ObjectDisposedException">
            An event handler is added after the object has been disposed.
            </exception>
    </member>
    <member name="M:NationalInstruments.UI.ComplexYAxis.#ctor">
      <summary>
            Initializes a new instance of the ComplexYAxis class.
            </summary>
    </member>
    <member name="M:NationalInstruments.UI.ComplexYAxis.GetSize(NationalInstruments.UI.YAxisPosition)">
      <summary>
            Returns the size of the ComplexYAxis at the specified position.
            </summary>
      <param name="position">
            A YAxisPosition that indicates the position of the ComplexYAxis
            for which the size is returned.
            </param>
      <returns>
            The Size of the ComplexYAxis.
            </returns>
      <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
      <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">position (parameter) is an invalid YAxisPosition value.
            </exception>
      <exception cref="T:System.NotSupportedException">position (parameter) is LeftRight.
            	</exception>
    </member>
    <member name="M:NationalInstruments.UI.ComplexYAxis.GetBounds(NationalInstruments.UI.YAxisPosition)">
      <summary>
            Returns the bounds of the ComplexYAxis at the specified position.
            </summary>
      <param name="position">
            A YAxisPosition that indicates the position of the ComplexYAxis
             for which the bounds are returned.
            </param>
      <returns>
            A Rectangle that represents the bounds of the ComplexYAxis.
            </returns>
      <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
      <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">position (parameter) is an invalid YAxisPosition value.
            </exception>
      <exception cref="T:System.NotSupportedException">position (parameter) is LeftRight.
            	</exception>
    </member>
    <member name="M:NationalInstruments.UI.ComplexYAxis.GetBounds(System.Drawing.Graphics,System.Drawing.Rectangle)">
      <summary>
            Returns the bounds of the ComplexYAxis relative to a reference rectangle.
            </summary>
      <param name="graphics">
            The Graphics object that is used to calculate the bounds of the axis.
            </param>
      <param name="referenceRectangle">
            A Rectangle that provides a reference for the bounds of the ComplexYAxis.
            </param>
      <returns>
            A Rectangle that represents the bounds of the ComplexYAxis.
            </returns>
      <exception cref="T:System.ArgumentNullException">graphics (parameter) is null.
            	</exception>
      <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
    </member>
    <member name="M:NationalInstruments.UI.ComplexYAxis.GetBounds(System.Drawing.Graphics,System.Drawing.Rectangle,NationalInstruments.UI.YAxisPosition)">
      <summary>
            Returns the bounds of the ComplexYAxis relative to a reference rectangle at the specified position.
            </summary>
      <param name="graphics">
            The Graphics object that is used to calculate the bounds of the axis.
            </param>
      <param name="referenceRectangle">
            A Rectangle that provides a reference for the bounds of the ComplexYAxis.
            </param>
      <param name="position">
            A YAxisPosition that indicates the position of the ComplexYAxis
             for which the bounds are returned.
            </param>
      <returns>
            A Rectangle that represents the bounds of the ComplexYAxis.
            </returns>
      <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
      <exception cref="T:System.ArgumentNullException">graphics (parameter) is null.
            	</exception>
      <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">position (parameter) is an invalid YAxisPosition value.
            </exception>
      <exception cref="T:System.NotSupportedException">position (parameter) is LeftRight.
            	</exception>
    </member>
    <member name="M:NationalInstruments.UI.ComplexYAxis.Draw(NationalInstruments.UI.ComponentDrawArgs,NationalInstruments.UI.YAxisPosition)">
      <summary>
            Draws the ComplexYAxis with the specified axis position.
            </summary>
      <param name="args">
            A ComponentDrawArgs that contains the 
            drawing data.
            </param>
      <param name="position">
            The position of the axis.
            </param>
      <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
      <exception cref="T:System.ArgumentNullException">args (parameter) is null.
            </exception>
      <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">position (parameter) is an invalid YAxisPosition value.
            </exception>
      <exception cref="T:System.NotSupportedException">position (parameter) is LeftRight.
            	</exception>
    </member>
    <member name="M:NationalInstruments.UI.ComplexYAxis.Clone">
      <summary>
            Creates a new object that is a deep copy of this instance.
            </summary>
      <returns>
            A new object that is a deep copy of this instance.
            </returns>
    </member>
    <member name="M:NationalInstruments.UI.ComplexYAxis.GetService(System.Type)">
      <summary>
            Gets the service object of the specified type.
            </summary>
      <param name="service">
            A service provided by the component.
            </param>
      <returns>
            An Object that represents the service provided by the component or 
            null if the component does not provide the 
            specified service.
            </returns>
    </member>
    <member name="P:NationalInstruments.UI.ComplexYAxis.CaptionPosition">
      <summary>
            Gets or sets the position of the caption that is displayed for the axis.
            </summary>
      <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
      <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
            The specified value is not a YAxisPosition value.
            </exception>
    </member>
    <member name="P:NationalInstruments.UI.ComplexYAxis.LeftCaptionOrientation">
      <summary>
            Gets or sets the orientation of the caption displayed by the y-axis to the left of the complex graph.
            </summary>
      <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
      <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
            The specified value is not a VerticalCaptionOrientation value.
            </exception>
    </member>
    <member name="P:NationalInstruments.UI.ComplexYAxis.RightCaptionOrientation">
      <summary>
            Gets or sets the orientation of the caption displayed by the y-axis to the right of the complex graph.
            </summary>
      <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
      <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
            The specified value is not a VerticalCaptionOrientation value.
            </exception>
    </member>
    <member name="P:NationalInstruments.UI.ComplexYAxis.Position">
      <summary>
            Gets or sets the position of the axis.
            </summary>
      <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
      <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
            The specified value is not a YAxisPosition value.
            </exception>
    </member>
    <member name="P:NationalInstruments.UI.ComplexYAxis.MinimumWidth">
      <summary>
            Gets or sets the minimum width required by ComplexYAxis,
            allowing you to customize the ComplexYAxis width. 
            </summary>
      <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
            The specified value is less than zero.
            </exception>
    </member>
    <member name="T:NationalInstruments.UI.BooleanWebInteractionMouseCursors">
      <summary>
            Represents the mouse cursor used for interaction with a Boolean Web control.
            </summary>
    </member>
    <member name="F:NationalInstruments.UI.BooleanWebInteractionMouseCursors.DefaultIndicator">
      <summary>
            Gets the default mouse cursor used when BooleanWebInteractionMode is set to Indicator.
            </summary>
    </member>
    <member name="F:NationalInstruments.UI.BooleanWebInteractionMouseCursors.DefaultSwitchWhenPressed">
      <summary>
            The default mouse cursor when the interaction mode is SwitchWhenPressed.
            </summary>
    </member>
    <member name="M:NationalInstruments.UI.BooleanWebInteractionMouseCursors.#ctor">
      <summary>
            Initializes a new instance of the BooleanWebInteractionMouseCursors class.
            </summary>
    </member>
    <member name="M:NationalInstruments.UI.BooleanWebInteractionMouseCursors.ToString">
      <summary>
            Returns a string representation of the object.
            </summary>
      <returns>
            A string representation of the object.
            </returns>
    </member>
    <member name="M:NationalInstruments.UI.BooleanWebInteractionMouseCursors.ResetAllToDefault">
      <summary>
            Resets all properties of BooleanWebInteractionMouseCursors to default values.
            </summary>
    </member>
    <member name="P:NationalInstruments.UI.BooleanWebInteractionMouseCursors.Indicator">
      <summary>
            Gets or sets the mouse cursor when the interaction mode of the Boolean control is Indicator.
            </summary>
    </member>
    <member name="P:NationalInstruments.UI.BooleanWebInteractionMouseCursors.SwitchWhenPressed">
      <summary>
            Gets or sets the mouse cursor when the interaction mode of the Boolean control is SwitchWhenPressed.
            </summary>
    </member>
    <member name="T:NationalInstruments.UI.BeforeMoveIntensityCursorEventHandler">
      <summary>
            Represents the method that handles events that occur before the cursor moves.
            </summary>
      <param name="sender">
            The source of the event.
            </param>
      <param name="e">
            A BeforeMoveIntensityCursorEventArgs that contains the event data.
            </param>
    </member>
    <member name="T:NationalInstruments.UI.BeforeDrawLegendItemEventHandler">
      <summary>
            Represents the method that handles the BeforeDrawItem
            event.
            </summary>
      <param name="sender">
            The source of the event.
            </param>
      <param name="e">
            A BeforeDrawLegendItemEventArgs that contains the event data.
            </param>
    </member>
    <member name="T:NationalInstruments.UI.BeforeChangeNumericValueEventHandler">
      <summary>
            Represents the method that handles the BeforeChangeValue
            event.
            </summary>
      <param name="sender">
            The source of the event.
            </param>
      <param name="e">
            An BeforeChangeNumericValueEventArgs that contains
            the event data.
            </param>
    </member>
    <member name="T:NationalInstruments.UI.AxisCustomDivision">
      <summary>
            Represents a custom value and its associated tick mark, label, and grid line.
            </summary>
    </member>
    <member name="T:NationalInstruments.UI.ScaleCustomDivision">
      <summary>
            Represents a custom value and its associated tick mark and label on a scale.
            </summary>
    </member>
    <member name="M:NationalInstruments.UI.ScaleCustomDivision.#ctor">
      <summary>
            Initializes a new instance of the ScaleCustomDivision class.
            </summary>
    </member>
    <member name="M:NationalInstruments.UI.ScaleCustomDivision.#ctor(System.Double)">
      <summary>
            Initializes a new instance of the ScaleCustomDivision class with the specified division value.
            </summary>
      <param name="divisionValue">
            The value at which to place the custom division.
            </param>
    </member>
    <member name="M:NationalInstruments.UI.ScaleCustomDivision.#ctor(System.Double,System.String)">
      <summary>
            Initializes a new instance of the ScaleCustomDivision class with the specified division value
            and text.
            </summary>
      <param name="divisionValue">
            The value at which to place the custom division.
            </param>
      <param name="text">
            The String to display as the custom division label.
            </param>
    </member>
    <member name="M:NationalInstruments.UI.ScaleCustomDivision.#ctor(System.Double,System.String,NationalInstruments.UI.CustomDivisionDisplayStyle)">
      <summary>
            Initializes a new instance of the ScaleCustomDivision class with the specified division value,
            text, and display style.
            </summary>
      <param name="divisionValue">
            The value at which to place the custom division.
            </param>
      <param name="text">
            The String to display as the custom division label.
            </param>
      <param name="displayStyle">
            The CustomDivisionDisplayStyle that specifies if text (parameter) or the custom division 
            value is displayed as the custom division label.
            </param>
      <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
            The specified value is not a CustomDivisionDisplayStyle value.
            </exception>
    </member>
    <member name="M:NationalInstruments.UI.ScaleCustomDivision.GetService(System.Type)">
      <summary>
            Gets the service object of the specified type.
            </summary>
      <param name="serviceType">
            An Object that specifies the type of service object to get.
            </param>
      <returns>
            A service of type serviceType (parameter), or null
            if there is no object of type serviceType (parameter).
            </returns>
    </member>
    <member name="M:NationalInstruments.UI.ScaleCustomDivision.ToString">
      <summary>
            Returns a string representation of the object.
            </summary>
      <returns>
            A string representation of the object.
            </returns>
    </member>
    <member name="M:NationalInstruments.UI.ScaleCustomDivision.Clone">
      <summary>
            Creates a new object that is a deep copy of this instance.
            </summary>
      <returns>
            A new object that is a deep copy of this instance.
            </returns>
    </member>
    <member name="M:NationalInstruments.UI.ScaleCustomDivision.OnPropertyChanged(System.ComponentModel.PropertyChangedEventArgs)">
      <summary>
            Raises the PropertyChanged event.
            </summary>
      <param name="e">
            A PropertyChangedEventArgs that contains the event data.
            </param>
    </member>
    <member name="P:NationalInstruments.UI.ScaleCustomDivision.Owner">
      <summary>
            Gets the control that owns this ScaleCustomDivision.
            </summary>
    </member>
    <member name="P:NationalInstruments.UI.ScaleCustomDivision.LineWidth">
      <summary>
            Gets or sets the width of the custom division tick mark.
            </summary>
      <exception cref="T:System.ArgumentOutOfRangeException">
            The specified value is less than or equal to zero.
            
            -or-
            
            The specified value is NaN, NegativeInfinity,
            or PositiveInfinity.
            </exception>
    </member>
    <member name="P:NationalInstruments.UI.ScaleCustomDivision.TickLength">
      <summary>
            Gets or sets the length of the custom division tick mark.
            </summary>
      <exception cref="T:System.ArgumentOutOfRangeException">
            The specified value is less than or equal to zero.
            
            -or-
            
            The specified value is NaN, NegativeInfinity,
            or PositiveInfinity.
            </exception>
    </member>
    <member name="P:NationalInstruments.UI.ScaleCustomDivision.TickColor">
      <summary>
            Gets or sets the color of the custom division tick mark.
            </summary>
    </member>
    <member name="P:NationalInstruments.UI.ScaleCustomDivision.TickVisible">
      <summary>
            Gets or sets a value indicating if the custom division tick mark is displayed.
            </summary>
    </member>
    <member name="P:NationalInstruments.UI.ScaleCustomDivision.LabelFormat">
      <summary>
            Gets or sets the FormatString used to format the custom division label text.
            </summary>
      <exception cref="T:System.ArgumentNullException">
            The specified value is null.
            </exception>
      <exception cref="T:System.FormatException">
            The Format is invalid.
            </exception>
    </member>
    <member name="P:NationalInstruments.UI.ScaleCustomDivision.LabelForeColor">
      <summary>
            Gets or sets the foreground color of the custom division label.
            </summary>
    </member>
    <member name="P:NationalInstruments.UI.ScaleCustomDivision.LabelBackColor">
      <summary>
            Gets or sets the background color of the custom division label.
            </summary>
    </member>
    <member name="P:NationalInstruments.UI.ScaleCustomDivision.LabelFont">
      <summary>
            Gets or sets the font of the custom division label.
            </summary>
    </member>
    <member name="P:NationalInstruments.UI.ScaleCustomDivision.LabelVisible">
      <summary>
            Gets or sets a value indicating if the label is displayed.
            </summary>
    </member>
    <member name="P:NationalInstruments.UI.ScaleCustomDivision.Value">
      <summary>
            Gets or sets the value of the custom division tick mark.
            </summary>
      <exception cref="T:System.ArgumentOutOfRangeException">
            The specified value is NaN, NegativeInfinity,
            or PositiveInfinity.
            </exception>
    </member>
    <member name="P:NationalInstruments.UI.ScaleCustomDivision.Text">
      <summary>
            Gets or sets the custom division label text.
            </summary>
    </member>
    <member name="P:NationalInstruments.UI.ScaleCustomDivision.DisplayStyle">
      <summary>
            Gets or sets the display style of the label.
            </summary>
      <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
            The specified value is not a CustomDivisionDisplayStyle
            value.
            </exception>
    </member>
    <member name="E:NationalInstruments.UI.ScaleCustomDivision.PropertyChanged">
      <summary>
            Occurs when the value of a property changes.
            </summary>
      <exception cref="T:System.ObjectDisposedException">
            An event handler is added after the object has been disposed.</exception>
    </member>
    <member name="M:NationalInstruments.UI.AxisCustomDivision.#ctor">
      <summary>
            Initializes a new instance of the AxisCustomDivision class.
            </summary>
    </member>
    <member name="M:NationalInstruments.UI.AxisCustomDivision.#ctor(System.Double)">
      <summary>
            Initializes a new instance of the AxisCustomDivision class with the specified 
            custom division value.
            </summary>
      <param name="divisionValue">
            The value at which to place the custom division.
            </param>
    </member>
    <member name="M:NationalInstruments.UI.AxisCustomDivision.#ctor(System.Double,System.String)">
      <summary>
            Initializes a new instance of the AxisCustomDivision class with the specified 
            custom division value and text.
            </summary>
      <param name="divisionValue">
            The value at which to place the custom division.
            </param>
      <param name="text">
            The String to display as the custom division label.
            </param>
    </member>
    <member name="M:NationalInstruments.UI.AxisCustomDivision.#ctor(System.Double,System.String,NationalInstruments.UI.CustomDivisionDisplayStyle)">
      <summary>
            Initializes a new instance of the AxisCustomDivision class with the specified custom 
            division value, text, and display style.
            </summary>
      <param name="divisionValue">
            The value at which to place the custom division.
            </param>
      <param name="text">
            The String to display as the custom division label.
            </param>
      <param name="displayStyle">
            The CustomDivisionDisplayStyle that specifies if text (parameter) or the custom division value
             is displayed as the custom division label.</param>
      <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
            The specified value is not a CustomDivisionDisplayStyle value.
            </exception>
    </member>
    <member name="M:NationalInstruments.UI.AxisCustomDivision.Clone">
      <summary>
            Creates a new object that is a deep copy of this instance.
            </summary>
      <returns>
            A new object that is a deep copy of this instance.
            </returns>
    </member>
    <member name="P:NationalInstruments.UI.AxisCustomDivision.GridVisible">
      <summary>
            Gets or sets a value indicating if the grid is displayed.
            </summary>
    </member>
    <member name="P:NationalInstruments.UI.AxisCustomDivision.GridColor">
      <summary>
            Gets or sets the color of the grid.
            </summary>
    </member>
    <member name="P:NationalInstruments.UI.AxisCustomDivision.GridLineStyle">
      <summary>
            Gets or sets the line style of the grid.
            </summary>
      <exception cref="T:System.ArgumentNullException">
            The specified value is null.
            </exception>
    </member>
    <member name="T:NationalInstruments.UI.AnnotationToolTipMode">
      <summary>
            Specifies the text that is displayed in the tooltip when the mouse hovers over an annotation.
            </summary>
    </member>
    <member name="F:NationalInstruments.UI.AnnotationToolTipMode.None">
      <summary>
            No tooltip is displayed.
            </summary>
    </member>
    <member name="F:NationalInstruments.UI.AnnotationToolTipMode.Data">
      <summary>
            The tooltip displays a formatted text that represents the data being annotated.
            </summary>
    </member>
    <member name="F:NationalInstruments.UI.AnnotationToolTipMode.Caption">
      <summary>
            The tooltip displays the text specified in the Caption property of the annotation.
            </summary>
    </member>
    <member name="F:NationalInstruments.UI.AnnotationToolTipMode.Custom">
      <summary>
            The tooltip displays the text specified in the ToolTip  property of the annotation.
            </summary>
    </member>
    <member name="T:NationalInstruments.UI.AfterMoveIntensityCursorEventArgs">
      <summary>
            Provides data for the events that occur after the cursor moves.
            </summary>
    </member>
    <member name="M:NationalInstruments.UI.AfterMoveIntensityCursorEventArgs.#ctor(NationalInstruments.UI.IntensityCursor,System.Double,System.Double,NationalInstruments.UI.Action)">
      <summary>
            Initializes a new instance of the AfterMoveIntensityCursorEventArgs
            class with the specified cursor, the specified x-coordinate and y-coordinate of the
            IntensityCursor, and the action that caused the event. 
            </summary>
      <param name="cursor">
            The IntensityCursor for which the event is occurring.
            </param>
      <param name="xPosition">
            The x-coordinate of the IntensityCursor.
            </param>
      <param name="yPosition">
            The y-coordinate of the IntensityCursor.
            </param>
      <param name="action">
            The source of the Action that caused the event.
            </param>
      <exception cref="T:System.ArgumentNullException">cursor (parameter) is null.
            </exception>
    </member>
    <member name="M:NationalInstruments.UI.AfterMoveIntensityCursorEventArgs.ToString">
      <summary>
            Returns a string representation of the object.
            </summary>
      <returns>
            A string representation of the object.
            </returns>
    </member>
    <member name="P:NationalInstruments.UI.AfterMoveIntensityCursorEventArgs.Cursor">
      <summary>
            Gets the IntensityCursor that has moved. 
            </summary>
    </member>
    <member name="P:NationalInstruments.UI.AfterMoveIntensityCursorEventArgs.XPosition">
      <summary>
            Gets the new x-coordinate of the
            IntensityCursor.
            </summary>
    </member>
    <member name="P:NationalInstruments.UI.AfterMoveIntensityCursorEventArgs.YPosition">
      <summary>
            Gets the new y-coordinate of the
            IntensityCursor.
            </summary>
    </member>
    <member name="T:NationalInstruments.UI.AfterDrawMagnitudeCircleAnnotationEventHandler">
      <summary>
            Represents the method that handles the events that occur after a magnitude circle range annotation draws.
            </summary>
      <param name="sender">
            The source of the event.
            </param>
      <param name="e">
            An AfterDrawMagnitudeCircleAnnotationEventArgs that contains the event data.
            </param>
    </member>
    <member name="T:NationalInstruments.UI.XYAnnotation">
      <summary>
            Provides an abstract base class for annotations that are displayed with 
            respect to an XAxis and a 
            YAxis.
            </summary>
    </member>
    <member name="M:NationalInstruments.UI.XYAnnotation.#ctor">
      <summary>
            Initializes a new instance of the XYAnnotation class.
            </summary>
    </member>
    <member name="M:NationalInstruments.UI.XYAnnotation.#ctor(NationalInstruments.UI.XAxis,NationalInstruments.UI.YAxis)">
      <summary>
            Initializes a new instance of the XYAnnotation class with the specified
            XAxis and YAxis.
            </summary>
      <param name="xAxis">
            The XAxis of the annotation.
            </param>
      <param name="yAxis">
            The YAxis of the annotation.
            </param>
    </member>
    <member name="M:NationalInstruments.UI.XYAnnotation.Dispose(System.Boolean)">
      <summary>
            Releases the resources used by XYAnnotation.
            </summary>
      <param name="disposing">
            If true, this method releases managed and unmanaged resources. If false, this method releases
            only unmanaged resources.
            </param>
    </member>
    <member name="M:NationalInstruments.UI.XYAnnotation.SetCaptionPosition(System.Double,System.Double)">
      <summary>
            Sets the location of the caption based on a value relative to the annotation axis.
            </summary>
      <param name="x">
            The location on the XAxis to position the caption, in data coordinates.
            </param>
      <param name="y">
            The location on the YAxis to position the caption, in data coordinates.
            </param>
      <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
    </member>
    <member name="M:NationalInstruments.UI.XYAnnotation.OnBeforeDragCaption(NationalInstruments.UI.BeforeDragXYAnnotationCaptionEventArgs)">
      <summary>
            Raises the BeforeDragCaption event.
            </summary>
      <param name="e">
            An BeforeDragXYAnnotationCaptionEventArgs 
            that contains the event data.
            </param>
      <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
    </member>
    <member name="M:NationalInstruments.UI.XYAnnotation.OnAfterDragCaption(NationalInstruments.UI.AfterDragXYAnnotationCaptionEventArgs)">
      <summary>
            Raises the AfterDragCaption event.
            </summary>
      <param name="e">
            An AfterDragXYAnnotationCaptionEventArgs 
            that contains the event data.
            </param>
      <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
    </member>
    <member name="P:NationalInstruments.UI.XYAnnotation.XAxis">
      <summary>
            Gets or sets the x-axis that determines where to draw the annotation.
            </summary>
      <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
    </member>
    <member name="P:NationalInstruments.UI.XYAnnotation.YAxis">
      <summary>
            Gets or sets the y-axis that determines where to draw the annotation.
            </summary>
      <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
    </member>
    <member name="E:NationalInstruments.UI.XYAnnotation.BeforeDragCaption">
      <summary>
            Occurs before Caption is dragged.
            </summary>
      <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
    </member>
    <member name="E:NationalInstruments.UI.XYAnnotation.AfterDragCaption">
      <summary>
            Occurs after Caption is dragged.
            </summary>
      <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
    </member>
    <member name="T:NationalInstruments.UI.ScrollBarButtonDrawArgs">
      <summary>
            Provides data for drawing scroll bar buttons.
            </summary>
    </member>
    <member name="T:NationalInstruments.UI.ScrollBarDrawArgs">
      <summary>
            Provides data for drawing scroll bars.
            </summary>
    </member>
    <member name="M:NationalInstruments.UI.ScrollBarDrawArgs.#ctor(System.Drawing.Graphics,System.Drawing.Rectangle,System.Drawing.Color,System.Drawing.Color,NationalInstruments.UI.ScrollBarState,NationalInstruments.UI.ScrollBarOrientation)">
      <summary>
            Initializes a new instance of the ScrollBarDrawArgs class with the specified graphics,
            bounds, background color, foreground color, state, and orientation.
            </summary>
      <param name="graphics">
            The Graphics used to draw the scroll bar.
            </param>
      <param name="bounds">
            The Rectangle that represents the bounds in which to draw the scroll bar.
            </param>
      <param name="backColor">
            The background Color of the scroll bar.
            </param>
      <param name="foreColor">
            The foreground Color of the scroll bar.
            </param>
      <param name="state">
            The ScrollBarState of the scroll bar.
            </param>
      <param name="orientation">
            The ScrollBarOrientation of the scroll bar.
            </param>
      <exception cref="T:System.ArgumentNullException">graphics (parameter) is null.
            </exception>
      <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">state (parameter) is an invalid ScrollBarState value.
            
            -or-
            orientation (parameter) is an invalid ScrollBarOrientation value.
            </exception>
    </member>
    <member name="P:NationalInstruments.UI.ScrollBarDrawArgs.Bounds">
      <summary>
            Gets the bounds in which to draw the scroll bar.
            </summary>
    </member>
    <member name="P:NationalInstruments.UI.ScrollBarDrawArgs.BackColor">
      <summary>
            Gets the background color of the scroll bar.
            </summary>
    </member>
    <member name="P:NationalInstruments.UI.ScrollBarDrawArgs.ForeColor">
      <summary>
            Gets the foreground color of the scroll bar.
            </summary>
    </member>
    <member name="P:NationalInstruments.UI.ScrollBarDrawArgs.State">
      <summary>
            Gets the state of the scroll bar.
            </summary>
    </member>
    <member name="P:NationalInstruments.UI.ScrollBarDrawArgs.Orientation">
      <summary>
            Gets the orientation of the scroll bar.
            </summary>
    </member>
    <member name="M:NationalInstruments.UI.ScrollBarButtonDrawArgs.#ctor(System.Drawing.Graphics,System.Drawing.Rectangle,System.Drawing.Color,System.Drawing.Color,NationalInstruments.UI.ScrollBarState,NationalInstruments.UI.ScrollBarOrientation,NationalInstruments.UI.ScrollBarButton)">
      <summary>
            Initializes a new instance of the ScrollBarButtonDrawArgs class with the specified graphics,
            bounds, background color, foreground color, state, orientation, and button.
            </summary>
      <param name="graphics">
            The Graphics used to draw the scroll bar.
            </param>
      <param name="bounds">
            The Rectangle that represents the bounds in which to draw the scroll bar.
            </param>
      <param name="backColor">
            The background Color of the scroll bar.
            </param>
      <param name="foreColor">
            The foreground Color of the scroll bar.
            </param>
      <param name="state">
            The ScrollBarState of the scroll bar.
            </param>
      <param name="orientation">
            The ScrollBarOrientation of the scroll bar.
            </param>
      <param name="button">
            The ScrollBarButton of the scroll bar.
            </param>
      <exception cref="T:System.ArgumentNullException">graphics (parameter) is null.
            </exception>
      <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">state (parameter) is an invalid ScrollBarState value.
            
            -or-
            orientation (parameter) is an invalid ScrollBarOrientation value.
            
            -or-
            button (parameter) is an invalid ScrollBarButton value.
            </exception>
    </member>
    <member name="P:NationalInstruments.UI.ScrollBarButtonDrawArgs.Button">
      <summary>
            Gets the scroll bar button.
            </summary>
    </member>
    <member name="T:NationalInstruments.UI.ScatterPlotCollection">
      <summary>
            Represents a strongly typed collection of ScatterPlot objects.
            </summary>
    </member>
    <member name="M:NationalInstruments.UI.ScatterPlotCollection.#ctor">
      <summary>
            Initializes a new instance of the ScatterPlotCollection class.
            </summary>
    </member>
    <member name="M:NationalInstruments.UI.ScatterPlotCollection.#ctor(NationalInstruments.UI.ScatterPlot[])">
      <summary>
            Initializes a new instance of the ScatterPlotCollection class
            from an array of items.
            </summary>
      <param name="item">
            The array of ScatterPlot objects to copy.
            </param>
      <exception cref="T:System.ArgumentNullException">item (parameter) is null.
            
            -or-
            
            An element in item (parameter) is null.
            </exception>
      <exception cref="T:System.NotSupportedException">
            		An element in item (parameter) has been disposed.
            
            -or-
            
            		An element in item (parameter) is in another ScatterPlotCollection.
            
            -or-
            
            		An element in item (parameter) is already in this collection.
            </exception>
    </member>
    <member name="M:NationalInstruments.UI.ScatterPlotCollection.#ctor(NationalInstruments.UI.ScatterPlotCollection)">
      <summary>
            Initializes a new instance of the ScatterPlotCollection class
            from an existing collection.
            </summary>
      <param name="item">
            The ScatterPlotCollection to copy.
            </param>
      <exception cref="T:System.ArgumentNullException">item (parameter) is null.
            
            -or-
            
            An element in item (parameter) is null.
            </exception>
      <exception cref="T:System.NotSupportedException">
            		An element in item (parameter) has been disposed.
            
            -or-
            
            		An element in item (parameter) is in another ScatterPlotCollection.
            
            -or-
            
            		An element in item (parameter) is already in this collection.
            </exception>
    </member>
    <member name="M:NationalInstruments.UI.ScatterPlotCollection.ToString">
      <summary>
            Returns a string representation of the object.
            </summary>
      <returns>
            A string representation of the object.
            </returns>
    </member>
    <member name="M:NationalInstruments.UI.ScatterPlotCollection.Add(NationalInstruments.UI.ScatterPlot)">
      <summary>
            Adds an item to end of the collection.
            </summary>
      <param name="item">
            Item to add to the collection.
            </param>
      <returns>
            The array index of the added item.
            </returns>
      <exception cref="T:System.ArgumentNullException">item (parameter) is null.
            </exception>
      <exception cref="T:System.NotSupportedException">item (parameter) has been disposed.
            
            -or-
            item (parameter) is in another ScatterPlotCollection.
            
            -or-
            item (parameter) is already in this collection.
            </exception>
    </member>
    <member name="M:NationalInstruments.UI.ScatterPlotCollection.AddRange(NationalInstruments.UI.ScatterPlot[])">
      <summary>
            Adds an array of ScatterPlot objects to the end of the collection.
            </summary>
      <param name="item">
            Array of ScatterPlot objects to add to the collection.
            </param>
      <exception cref="T:System.ArgumentNullException">item (parameter) is null.
            
            -or-
            
            An element in item (parameter) is null.
            </exception>
      <exception cref="T:System.NotSupportedException">
            		An element in item (parameter) has been disposed.
            
            -or-
            
            		An element in item (parameter) is in another ScatterPlotCollection.
            
            -or-
            
            		An element in item (parameter) is already in this collection.
            </exception>
    </member>
    <member name="M:NationalInstruments.UI.ScatterPlotCollection.AddRange(NationalInstruments.UI.ScatterPlotCollection)">
      <summary>
            Adds a collection of ScatterPlot objects to the end of the collection.
            </summary>
      <param name="item">
            Collection of ScatterPlot objects to add to the collection.
            </param>
      <exception cref="T:System.ArgumentNullException">item (parameter) is null.
            
            -or-
            
            An element in item (parameter) is null.
            </exception>
      <exception cref="T:System.NotSupportedException">
            		An element in item (parameter) has been disposed.
            
            -or-
            
            		An element in item (parameter) is in another ScatterPlotCollection.
            
            -or-
            
            		An element in item (parameter) is already in this collection.
            </exception>
    </member>
    <member name="M:NationalInstruments.UI.ScatterPlotCollection.Clear">
      <summary>
            Removes all items from the collection.
            </summary>
    </member>
    <member name="M:NationalInstruments.UI.ScatterPlotCollection.Contains(NationalInstruments.UI.ScatterPlot)">
      <summary>
            Determines if the specified element is in the collection.
            </summary>
      <param name="item">Item to locate in the collection.</param>
      <returns>true if the collection contains item (parameter).
            </returns>
    </member>
    <member name="M:NationalInstruments.UI.ScatterPlotCollection.CopyTo(NationalInstruments.UI.ScatterPlot[],System.Int32)">
      <summary>
            Copies the collection to an array or a portion of an array.
            </summary>
      <param name="array">
            Destination array for the collection.
            </param>
      <param name="index">
            The index in the target array at which you want to begin copying the collection to.
            </param>
      <exception cref="T:System.ArgumentNullException">array (parameter) is null.
            </exception>
      <exception cref="T:System.ArgumentException">array (parameter) is multidimensional.
            
            - or -
            index (parameter) is equal to or greater than the length of array (parameter).
            
            -or-
            
            The number of elements in the collection is greater than the available space between
            index (parameter) and the end of array (parameter).
            </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">index (parameter) is less than the lower bound of array (parameter).
            </exception>
    </member>
    <member name="M:NationalInstruments.UI.ScatterPlotCollection.IndexOf(NationalInstruments.UI.ScatterPlot)">
      <summary>
            Returns the zero-based index of the first occurrence of an item in the collection.
            </summary>
      <param name="item">
            Item to search for.
            </param>
      <returns>
            Index of the item. If the item is not found, returns -1.
            </returns>
    </member>
    <member name="M:NationalInstruments.UI.ScatterPlotCollection.Insert(System.Int32,NationalInstruments.UI.ScatterPlot)">
      <summary>
            Inserts an item into the collection at the specified index.
            </summary>
      <param name="index">
            Index to insert the item at.
            </param>
      <param name="item">
            Item to insert into the collection.
            </param>
      <exception cref="T:System.ArgumentNullException">item (parameter) is null.
            </exception>
      <exception cref="T:System.NotSupportedException">item (parameter) has been disposed.
            
            -or-
            item (parameter) is in another ScatterPlotCollection.
            
            -or-
            item (parameter) is already in this collection.
            </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">index (parameter) is less than zero.
            
            -or-
            

index (parameter) is greater than Count.
            


            -or-
            index (parameter) is greater than Count.
            </exception>
    </member>
    <member name="M:NationalInstruments.UI.ScatterPlotCollection.GetEnumerator">
      <summary>
            Returns an enumerator that you can use to iterate through the collection.
            </summary>
      <returns>
            The enumerator for the collection.
            </returns>
    </member>
    <member name="M:NationalInstruments.UI.ScatterPlotCollection.Remove(NationalInstruments.UI.ScatterPlot)">
      <summary>
            Removes the first occurrence of the specified item.
            </summary>
      <param name="item">
            Item to remove from the collection.
            </param>
    </member>
    <member name="M:NationalInstruments.UI.ScatterPlotCollection.RemoveAt(System.Int32)">
      <summary>
            Removes the item at the specified index.
            </summary>
      <param name="index">
            The zero-based index of the item to remove.
            </param>
      <exception cref="T:System.ArgumentOutOfRangeException">index (parameter) is less than zero.
            
            -or-
            

index (parameter) is greater than or equal to Count.
            


            -or-
            index (parameter) is greater than or equal to Count.
            </exception>
    </member>
    <member name="P:NationalInstruments.UI.ScatterPlotCollection.Item(System.Int32)">
      <summary>
            Gets or sets the ScatterPlot at the specified index. 
            </summary>
      <param name="index">
            The zero-based index of the entry to locate in the collection.
            </param>
      <exception cref="T:System.ArgumentNullException">
            	The value is null.
            </exception>
      <exception cref="T:System.NotSupportedException">
            		The value has been disposed.
            
            -or-
            
            		The value is in another ScatterPlotCollection.
            
            -or-
            
            		The value is already in this collection.
            </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">index (parameter) is less than zero.
            
            -or-
            

index (parameter) is greater than Count.
            


            -or-
            index (parameter) is greater than Count.
            </exception>
    </member>
    <member name="P:NationalInstruments.UI.ScatterPlotCollection.Count">
      <summary>
            Gets the number of elements in the ScatterPlotCollection.
            </summary>
    </member>
    <member name="P:NationalInstruments.UI.ScatterPlotCollection.IsSynchronized">
      <summary>
            Gets a value indicating whether access to the collection is synchronized
            (thread-safe).
            </summary>
    </member>
    <member name="P:NationalInstruments.UI.ScatterPlotCollection.IsFixedSize">
      <summary>
            Gets a value indicating whether the collection has a fixed size.
            </summary>
    </member>
    <member name="P:NationalInstruments.UI.ScatterPlotCollection.IsReadOnly">
      <summary>
            Gets a value indicating whether the collection is read-only.
            </summary>
    </member>
    <member name="P:NationalInstruments.UI.ScatterPlotCollection.SyncRoot">
      <summary>
            Gets an object that can be used to synchronize access to the collection.
            </summary>
    </member>
    <member name="T:NationalInstruments.UI.ScatterPlot">
      <summary>
            Defines a class for plotting y values against x values.
            </summary>
    </member>
    <member name="T:NationalInstruments.UI.XYPlot">
      <summary>
            Provides a base class for plots that display data with
            respect to an x-axis and y-axis.
            </summary>
    </member>
    <member name="T:NationalInstruments.UI.CartesianPlot">
      <summary>
            Provides an abstract base class for plots that display data on a two-dimensional (2D) surface.
            </summary>
    </member>
    <member name="T:NationalInstruments.UI.Plot">
      <summary>
            Provides an abstract base class for a plot.
            </summary>
    </member>
    <member name="M:NationalInstruments.UI.Plot.#ctor">
      <summary>
            Initializes a new instance of the Plot class.
            </summary>
    </member>
    <member name="M:NationalInstruments.UI.Plot.Dispose(System.Boolean)">
      <summary>
            Releases the unmanaged resources used by the Plot 
            and optionally releases the managed resources.
            </summary>
      <param name="disposing">true to release both managed and unmanaged resources; false to release only
            unmanaged resources.
            </param>
    </member>
    <member name="M:NationalInstruments.UI.Plot.ClearData">
      <summary>
            Removes all data from the history.
            </summary>
      <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
    </member>
    <member name="M:NationalInstruments.UI.Plot.OnDataChanged(System.EventArgs)">
      <summary>
            Raises the DataChanged event.
            </summary>
      <param name="e">
            An EventArgs that contains the event data.
            </param>
      <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
    </member>
    <member name="M:NationalInstruments.UI.Plot.OnLegendItemChanged(System.EventArgs)">
      <summary>
            Raises the LegendItemChanged event.
            </summary>
      <param name="e">
            An EventArgs that contains the event data.
            </param>
      <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
    </member>
    <member name="M:NationalInstruments.UI.Plot.DrawLegendItem(NationalInstruments.UI.ComponentDrawArgs)">
      <summary>
            Draws the symbol of a Plot.
            </summary>
      <param name="args">
            A ComponentDrawArgs that contains the graphics surface to
            draw the legend item on and the bounds in which to draw the legend item.
            </param>
      <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
      <exception cref="T:System.ArgumentNullException">args (parameter) is null.
            </exception>
    </member>
    <member name="M:NationalInstruments.UI.Plot.DrawPoints(NationalInstruments.UI.ComponentDrawArgs)">
      <summary>
            Draws the plot points.
            </summary>
      <param name="args">
            A ComponentDrawArgs that contains the 
            drawing data.
            </param>
      <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
      <exception cref="T:System.ArgumentNullException">args (parameter) is null.
            </exception>
      <exception cref="T:System.InvalidOperationException">
            The plot does not have the required scales.
            </exception>
      <exception cref="T:System.NotSupportedException">
            The Owner of the plot is different from the 
            Owner of the scale.
            </exception>
    </member>
    <member name="M:NationalInstruments.UI.Plot.DrawLines(NationalInstruments.UI.ComponentDrawArgs)">
      <summary>
            Draws the plot lines.
            </summary>
      <param name="args">
            A ComponentDrawArgs that contains the 
            drawing data.
            </param>
      <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
      <exception cref="T:System.ArgumentNullException">args (parameter) is null.
            </exception>
      <exception cref="T:System.InvalidOperationException">
            The plot does not have the required scales.
            </exception>
      <exception cref="T:System.NotSupportedException">
            The Owner of the plot is different from the 
            Owner of the scale.
            </exception>
    </member>
    <member name="M:NationalInstruments.UI.Plot.ToString">
      <summary>
            Returns a string representation of the object.
            </summary>
      <returns>
            A string representation of the object.
            </returns>
      <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
    </member>
    <member name="P:NationalInstruments.UI.Plot.HistoryCapacity">
      <summary>
            Gets or sets the maximum number of data points stored in the history
            when appending data.
            </summary>
      <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
            The value is less than or equal to zero.
            </exception>
    </member>
    <member name="P:NationalInstruments.UI.Plot.HistoryCount">
      <summary>
            Gets the number of data points in the history.
            </summary>
      <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
    </member>
    <member name="P:NationalInstruments.UI.Plot.LineStyle">
      <summary>
            Gets or sets the style of the line connecting the data points of the plot.
            </summary>
      <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
      <exception cref="T:System.ArgumentNullException">
            The specified value is null.
            </exception>
    </member>
    <member name="P:NationalInstruments.UI.Plot.LineColor">
      <summary>
            Gets or sets the color of the line connecting the data points of the plot.
            </summary>
      <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
    </member>
    <member name="P:NationalInstruments.UI.Plot.LineColorPrecedence">
      <summary>
            Gets or sets the ColorPrecedence of the plot.
            </summary>
      <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
    </member>
    <member name="P:NationalInstruments.UI.Plot.LineWidth">
      <summary>
            Gets or sets the width of the line connecting the data points of the plot.
            </summary>
      <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
            The specified value is less than or equal to zero.
            
            -or-
            
            The specified value is NaN, NegativeInfinity,
            or PositiveInfinity.
            </exception>
    </member>
    <member name="P:NationalInstruments.UI.Plot.PointStyle">
      <summary>
            Gets or sets the style for displaying a data point on the plot.
            </summary>
      <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
      <exception cref="T:System.ArgumentNullException">
            The specified value is null.
            </exception>
    </member>
    <member name="P:NationalInstruments.UI.Plot.PointColor">
      <summary>
            Gets or sets the color for displaying a data point on the plot.
            </summary>
      <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
    </member>
    <member name="P:NationalInstruments.UI.Plot.PointSize">
      <summary>
            Gets or sets the size of the point style used to display a data point on the plot.
            </summary>
      <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
            The value has negative width.
            
            -or-
            
            The value has negative height.
            </exception>
    </member>
    <member name="P:NationalInstruments.UI.Plot.SmoothUpdates">
      <summary>
            Gets or sets the value which specifies whether the plot is drawn to an off-screen buffer before drawing to the screen.
            </summary>
      <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
    </member>
    <member name="E:NationalInstruments.UI.Plot.DataChanged">
      <summary>
            Occurs when a new set of data is plotted.
            </summary>
      <exception cref="T:System.ObjectDisposedException">
            An event handler is added after the object has been disposed.
            </exception>
    </member>
    <member name="E:NationalInstruments.UI.Plot.LegendItemChanged">
      <summary>
            Occurs when the Plot has changed such
            that its appearance in a legend control must be updated.
            </summary>
    </member>
    <member name="M:NationalInstruments.UI.CartesianPlot.#ctor">
      <summary>
            Initializes a new instance of the CartesianPlot class.
            </summary>
    </member>
    <member name="M:NationalInstruments.UI.CartesianPlot.DrawLinesToBase(NationalInstruments.UI.ComponentDrawArgs)">
      <summary>
            Draws lines to the base with the specified ComponentDrawArgs.
            </summary>
      <param name="args">
            A ComponentDrawArgs that contains the 
            drawing data.
            </param>
      <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
      <exception cref="T:System.ArgumentNullException">args (parameter) is null.
            </exception>
      <exception cref="T:System.InvalidOperationException">
                    The x-axis of the plot is null.
            
            -or-
            
                    The y-axis of the plot is null.
            </exception>
      <exception cref="T:System.NotSupportedException">
            The Owner of the plot is not null,
            and the Owner of the plot is
            different from the Owner of x-axis.
            
            -or-
            
            The Owner of the plot is not null,
            and the Owner of the plot is
            different from the Owner of y-axis.
            </exception>
    </member>
    <member name="M:NationalInstruments.UI.CartesianPlot.DrawFillToBase(NationalInstruments.UI.ComponentDrawArgs)">
      <summary>
            Draws a fill to the base with the specified ComponentDrawArgs.
            </summary>
      <param name="args">
            A ComponentDrawArgs that contains the 
            drawing data.
            </param>
      <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
      <exception cref="T:System.ArgumentNullException">args (parameter) is null.
            </exception>
      <exception cref="T:System.InvalidOperationException">
                    The x-axis of the plot is null.
            
            -or-
            
                    The y-axis of the plot is null.
            </exception>
      <exception cref="T:System.NotSupportedException">
            The Owner of the plot is not null,
            and the Owner of the plot is
            different from the Owner of x-axis.
            
            -or-
            
            The Owner of the plot is not null,
            and the Owner of the plot is
            different from the Owner of y-axis.
            </exception>
    </member>
    <member name="M:NationalInstruments.UI.CartesianPlot.MapDataPoints(System.Drawing.Rectangle)">
      <summary>
            Transforms the x-data and y-data in the plot data history to an array of points using the 
            specified bounds and the current x-axis and y-axis ranges.  The data is also
            clipped with respect to the current x-axis and y-axis ranges.
            </summary>
      <param name="bounds">
            The reference Rectangle.
            </param>
      <returns>
            A PointF array that represents the transformation of
            the x-data and y-data in the history with respect to
            bounds (parameter) and the current x-axis
            and y-axis ranges.
            </returns>
      <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
      <exception cref="T:System.InvalidOperationException">
                    The x-axis of the plot is null.
            
            -or-
            
                    The y-axis of the plot is null.
            </exception>
      <exception cref="T:System.NotSupportedException">
            The Owner of the plot is not null,
            and the Owner of the plot is
            different from the Owner of x-axis.
            
            -or-
            
            The Owner of the plot is not null,
            and the Owner of the plot is
            different from the Owner of y-axis.
            </exception>
    </member>
    <member name="M:NationalInstruments.UI.CartesianPlot.MapDataPoints(System.Drawing.Rectangle,System.Boolean)">
      <summary>
            Transforms the x-data and y-data in the plot data history to an array of points using the 
            specified bounds and the current x-axis and y-axis ranges.
            </summary>
      <param name="bounds">
            The reference Rectangle.
            </param>
      <param name="clipData">
            Specifies if the data is clipped with respect to the current x-axis and
            y-axis ranges.
            </param>
      <returns>
            A PointF array that represents the transformation of
            the x-data and y-data in the history with respect to
            bounds (parameter) and the current x-axis
            and y-axis ranges.
            </returns>
      <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
      <exception cref="T:System.InvalidOperationException">
                    The x-axis of the plot is null.
            
            -or-
            
                    The y-axis of the plot is null.
            </exception>
      <exception cref="T:System.NotSupportedException">
            The Owner of the plot is not null,
            and the Owner of the plot is
            different from the Owner of x-axis.
            
            -or-
            
            The Owner of the plot is not null,
            and the Owner of the plot is
            different from the Owner of y-axis.
            </exception>
    </member>
    <member name="M:NationalInstruments.UI.CartesianPlot.MapRange(System.Drawing.Rectangle,NationalInstruments.UI.Range,NationalInstruments.UI.Range)">
      <summary>
            Transforms an x-range and a y-range to a rectangle using the specified bounds
            and the current x-axis and y-axis ranges.
            </summary>
      <param name="bounds">
            The reference Rectangle.
            </param>
      <param name="xRange">
            The x-range to map.
            </param>
      <param name="yRange">
            The y-range to map.
            </param>
      <returns>
            A RectangleF that represents the transformation of
            xRange (parameter) and yRange (parameter) and the current
            x-axis and y-axis ranges.
            </returns>
      <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
      <exception cref="T:System.InvalidOperationException">
                    The x-axis of the plot is null.
            
            -or-
            
                    The y-axis of the plot is null.
            </exception>
      <exception cref="T:System.NotSupportedException">
            The Owner of the plot is not null,
            and the Owner of the plot is
            different from the Owner of x-axis.
            
            -or-
            
            The Owner of the plot is not null,
            and the Owner of the plot is
            different from the Owner of y-axis.
            </exception>
      <exception cref="T:System.ArgumentNullException">xRange (parameter) is null.
            
            -or-
            yRange (parameter) is null.
            </exception>
    </member>
    <member name="M:NationalInstruments.UI.CartesianPlot.InverseMapRange(System.Drawing.Rectangle,System.Drawing.RectangleF,NationalInstruments.UI.Range@,NationalInstruments.UI.Range@)">
      <summary>
            Transforms a rectangle to an x range and a y range using the specified bounds
            and the current x-axis and y-axis ranges.
            </summary>
      <param name="bounds">
            The reference Rectangle.
            </param>
      <param name="rectangle">
            The Rectangle to map.
            </param>
      <param name="xRange">
            Upon return, contains an x-axis Range 
            that represents the transformation of the width
            rectangle (parameter) with respect to bounds (parameter) and the 
            current x-axis
            and y-axis ranges.
            </param>
      <param name="yRange">
            Upon return, contains a y-axis Range 
            that represents the transformation of the height
            rectangle (parameter) with respect to bounds (parameter) and the 
            current x-axis
            and y-axis ranges.
            </param>
      <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
      <exception cref="T:System.InvalidOperationException">
                    The x-axis of the plot is null.
            
            -or-
            
                    The y-axis of the plot is null.
            </exception>
      <exception cref="T:System.NotSupportedException">
            The Owner of the plot is not null,
            and the Owner of the plot is
            different from the Owner of x-axis.
            
            -or-
            
            The Owner of the plot is not null,
            and the Owner of the plot is
            different from the Owner of y-axis.
            </exception>
    </member>
    <member name="P:NationalInstruments.UI.CartesianPlot.CanScaleXAxis">
      <summary>
            Gets or sets a value indicating whether the plot data is used to calculate the range of the x-axis.
            </summary>
      <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
    </member>
    <member name="P:NationalInstruments.UI.CartesianPlot.CanScaleYAxis">
      <summary>
            Gets or sets a value indicating whether the plot data is used to calculate the range of the y-axis.
            </summary>
      <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
    </member>
    <member name="P:NationalInstruments.UI.CartesianPlot.LineToBaseColor">
      <summary>
            Gets or sets the color to use for lines to base.
            </summary>
      <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
    </member>
    <member name="P:NationalInstruments.UI.CartesianPlot.LineToBaseWidth">
      <summary>
            Gets or sets the width of the lines to base.
            </summary>
      <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
            The specified value is less than or equal to zero.
            
            -or-
            
            The specified value is NaN, NegativeInfinity,
            or PositiveInfinity.
            </exception>
    </member>
    <member name="P:NationalInstruments.UI.CartesianPlot.LineToBaseStyle">
      <summary>
            Gets or sets the style for the lines between 
            CartesianPlot and the configured fill base value.
            </summary>
      <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
      <exception cref="T:System.ArgumentNullException">
            The specified value is null.
            </exception>
    </member>
    <member name="P:NationalInstruments.UI.CartesianPlot.FillToBaseColor">
      <summary>
            Gets or sets the color to use for fill to base.
            </summary>
      <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
    </member>
    <member name="P:NationalInstruments.UI.CartesianPlot.FillToBaseStyle">
      <summary>
            Gets or sets the style for the fill area.
            </summary>
      <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
      <exception cref="T:System.ArgumentNullException">
            The specified value is null.
            </exception>
    </member>
    <member name="P:NationalInstruments.UI.CartesianPlot.BaseXValue">
      <summary>
            Gets or sets the base x value from which you draw fills, lines, or bins to.
            </summary>
      <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
            The specified value is NaN.
            </exception>
    </member>
    <member name="P:NationalInstruments.UI.CartesianPlot.BaseYValue">
      <summary>
            Gets or set the base y value from which you draw fills, lines, or bins to. 
            </summary>
      <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
            The specified value is NaN.
            </exception>
    </member>
    <member name="P:NationalInstruments.UI.CartesianPlot.FillMode">
      <summary>
            Gets or sets a value indicating if the plot draws lines, bins, or fills or a combination of them.
            </summary>
      <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
      <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
            The specified value is not a PlotFillMode value.
            </exception>
    </member>
    <member name="P:NationalInstruments.UI.CartesianPlot.ProcessSpecialValues">
      <summary>
            Gets or sets a value indicating if the plot processes special values.
            </summary>
      <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
    </member>
    <member name="P:NationalInstruments.UI.CartesianPlot.AntiAliased">
      <summary>
            Gets or sets a value indicating if the plot line draws anti-aliased.
            </summary>
      <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
    </member>
    <member name="M:NationalInstruments.UI.XYPlot.#ctor">
      <summary>
            Initializes a new instance of the XYPlot class.
            </summary>
    </member>
    <member name="M:NationalInstruments.UI.XYPlot.#ctor(NationalInstruments.UI.XAxis,NationalInstruments.UI.YAxis)">
      <summary>
            Initializes a new instance of the XYPlot class with
            the specified XAxis and
            YAxis.
            </summary>
      <param name="xAxis">
            The XAxis to use for the plot.
            </param>
      <param name="yAxis">
            The YAxis to use for the plot.
            </param>
      <exception cref="T:System.ArgumentNullException">xAxis (parameter) is null
            -or-
            yAxis (parameter) is null</exception>
    </member>
    <member name="M:NationalInstruments.UI.XYPlot.Dispose(System.Boolean)">
      <summary>
            Releases the unmanaged resources used by the XYPlot 
            and optionally releases the managed resources.
            </summary>
      <param name="disposing">true to release both managed and unmanaged resources; false to release only
            unmanaged resources.
            </param>
    </member>
    <member name="M:NationalInstruments.UI.XYPlot.GetService(System.Type)">
      <summary>
            Gets the service object of the specified type.
            </summary>
      <param name="service">
            A service provided by the component.
            </param>
      <returns>
            An Object that represents the service provided by the component or 
            null if the component does not provide the 
            specified service.
            </returns>
    </member>
    <member name="M:NationalInstruments.UI.XYPlot.GetXData">
      <summary>
            Gets the x-data values in the plot history.
            </summary>
      <returns>
            A Double array that represents the x-data values
            in the plot history.
            </returns>
      <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
    </member>
    <member name="M:NationalInstruments.UI.XYPlot.GetYData">
      <summary>
            Gets the y-data values in the plot history.
            </summary>
      <returns>
            A Double array that represents the y-data values in the plot history. 
            </returns>
      <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
    </member>
    <member name="M:NationalInstruments.UI.XYPlot.GetXErrorHighData(System.Double[]@,System.Double[]@)">
      <summary>
            Gets the x and y coordinates of the high x error points for the source data points in the plot history.
            </summary>
      <param name="xData">
            A Double array that represents the x coordinates of the high x error data points.
            </param>
      <param name="yData">
            A Double array that represents the y coordinates of the high x error data points.
            </param>
      <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
    </member>
    <member name="M:NationalInstruments.UI.XYPlot.GetXErrorLowData(System.Double[]@,System.Double[]@)">
      <summary>
            Gets the x and y coordinates of the low x error points for the source data points in the plot history.
            </summary>
      <param name="xData">
            A Double array that represents the x coordinates of the low x error data points.
            </param>
      <param name="yData">
            A Double array that represents the y coordinates of the low x error data points.
            </param>
      <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
    </member>
    <member name="M:NationalInstruments.UI.XYPlot.GetYErrorHighData(System.Double[]@,System.Double[]@)">
      <summary>
            Gets the x and y coordinates of the high y error points for the source data points in the plot history.
            </summary>
      <param name="xData">
            A Double array that represents the x coordinates of the high y error data points.
            </param>
      <param name="yData">
            A Double array that represents the y coordinates of the high y error data points.
            </param>
      <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
    </member>
    <member name="M:NationalInstruments.UI.XYPlot.GetYErrorLowData(System.Double[]@,System.Double[]@)">
      <summary>
            Gets the x and y coordinates of the low y error points for the source data points in the plot history.
            </summary>
      <param name="xData">
            A Double array that represents the x coordinates of the low y error data points.
            </param>
      <param name="yData">
            A Double array that represents the y coordinates of the low y error data points.
            </param>
      <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
    </member>
    <member name="M:NationalInstruments.UI.XYPlot.DrawErrorBands(NationalInstruments.UI.ComponentDrawArgs)">
      <summary>
            Draws plot error data with the specified ComponentDrawArgs.
            </summary>
      <param name="args">
            A ComponentDrawArgs that contains the drawing data.
            </param>
      <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
      <exception cref="T:System.ArgumentNullException">args (parameter) is null.
            </exception>
      <exception cref="T:System.InvalidOperationException">
              The x-axis of the plot is null.
              
              -or-
              
              The y-axis of the plot is null.
              </exception>
      <exception cref="T:System.NotSupportedException">
              The Owner of the plot is not null,
              and the Owner of the plot is
              different from the Owner of x-axis.
              
              -or-
              
              The Owner of the plot is not null,
              and the Owner of the plot is
              different from the Owner of y-axis.
              </exception>
    </member>
    <member name="M:NationalInstruments.UI.XYPlot.GetDataPoint(System.Int32,System.Double@,System.Double@)">
      <summary>
            Gets the x and y data values at the specified index in the history.
            </summary>
      <param name="index">
            The index used to get the data value from the history.
            </param>
      <param name="xData">
            Upon return, contains the x data value at index (parameter).
            </param>
      <param name="yData">
            Upon return, contains the y data value at index (parameter).
            </param>
      <exception cref="T:System.ArgumentOutOfRangeException">index (parameter) is less than 0.
            
            -or-
            index (parameter) is greater than or equal to 
            HistoryCount.
            </exception>
    </member>
    <member name="M:NationalInstruments.UI.XYPlot.InverseMapDataPoint(System.Drawing.Rectangle,System.Drawing.PointF,System.Double@,System.Double@)">
      <summary>
            Transforms a point to an x and y data value using the specified bounds
            and the current x-axis and y-axis ranges.
            </summary>
      <param name="bounds">
            The reference Rectangle.
            </param>
      <param name="point">
            The Point to inversely map.
            </param>
      <param name="xData">
            Upon return, contains the x-data value that represents the transformation of
            point (parameter) with respect to bounds (parameter) and the 
            current XAxis
            and YAxis ranges.
            </param>
      <param name="yData">
            Upon return, contains the y-data value that represents the transformation of
            point (parameter) with respect to bounds (parameter) and the 
            current XAxis
            and YAxis ranges.
            </param>
      <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
      <exception cref="T:System.InvalidOperationException">
                    The XAxis of the plot is null.
            
            -or-
            
                    The YAxis of the plot is null.
            </exception>
      <exception cref="T:System.NotSupportedException">
            The Owner of the plot is not null,
            and the Owner of the plot is
            different from the Owner of XAxis.
            
            -or-
            
            The Owner of the plot is not null,
            and the Owner of the plot is
            different from the Owner of YAxis.
            </exception>
    </member>
    <member name="M:NationalInstruments.UI.XYPlot.InverseMapDataPoints(System.Drawing.Rectangle,System.Drawing.PointF[],System.Double[]@,System.Double[]@)">
      <summary>
            Transforms an array of points to x and y data values using the 
            specified bounds and the current x-axis and y-axis ranges.
            </summary>
      <param name="bounds">
            The reference Rectangle.
            </param>
      <param name="points">
            The Point array to inversely map.
            </param>
      <param name="xData">
            Upon return, contains x-data values that represent the transformation of
            points (parameter) with respect to bounds (parameter) and the 
            current XAxis
            and YAxis ranges.
            </param>
      <param name="yData">
            Upon return, contains y-data values that represent the transformation of
            points (parameter) with respect to bounds (parameter) and the 
            current XAxis
            and YAxis ranges.
            </param>
      <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
      <exception cref="T:System.InvalidOperationException">
                    The XAxis of the plot is null.
            
            -or-
            
                    The YAxis of the plot is null.
            </exception>
      <exception cref="T:System.NotSupportedException">
            The Owner of the plot is not null,
            and the Owner of the plot is
            different from the Owner of XAxis.
            
            -or-
            
            The Owner of the plot is not null,
            and the Owner of the plot is
            different from the Owner of YAxis.
            </exception>
      <exception cref="T:System.ArgumentNullException">points (parameter) is null.
            </exception>
    </member>
    <member name="M:NationalInstruments.UI.XYPlot.MapDataPoint(System.Drawing.Rectangle,System.Double,System.Double)">
      <summary>
            Transforms a single x and y value to a point using the specified bounds
            and the current x-axis and y-axis ranges.
            </summary>
      <param name="bounds">
            The reference Rectangle.
            </param>
      <param name="xData">
            The x value to map.
            </param>
      <param name="yData">
            The y value to map.
            </param>
      <returns>
            A PointF that represents the transformation of
            xData (parameter) and yData (parameter) with respect to
            bounds (parameter) and the current XAxis
            and YAxis ranges.
            </returns>
      <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
      <exception cref="T:System.InvalidOperationException">
                    The XAxis of the plot is null.
            
            -or-
            
                    The YAxis of the plot is null.
            </exception>
      <exception cref="T:System.NotSupportedException">
            The Owner of the plot is not null,
            and the Owner of the plot is
            different from the Owner of XAxis.
            
            -or-
            
            The Owner of the plot is not null,
            and the Owner of the plot is
            different from the Owner of YAxis.
            </exception>
    </member>
    <member name="M:NationalInstruments.UI.XYPlot.MapPoint(System.Drawing.Rectangle,System.Double,System.Double)">
      <summary>
            This member is obsolete. Use the MapDataPoint 
            method to achieve the same functionality.
            </summary>
      <param name="bounds">
            This parameter is not documented because the member is obsolete.
            </param>
      <param name="xData">
            This parameter is not documented because the member is obsolete.
            </param>
      <param name="yData">
            This parameter is not documented because the member is obsolete.
            </param>
      <returns>
            This return value is not documented because the member is obsolete.
            </returns>
    </member>
    <member name="M:NationalInstruments.UI.XYPlot.MapData(System.Drawing.Rectangle)">
      <summary>
            This member is obsolete. Use the MapDataPoints 
            method to achieve the same functionality.
            </summary>
      <param name="bounds">
            This parameter is not documented because the member is obsolete.
            </param>
      <returns>
            This return value is not documented because the member is obsolete.
            </returns>
    </member>
    <member name="M:NationalInstruments.UI.XYPlot.MapData(System.Drawing.Rectangle,System.Boolean)">
      <summary>
            This member is obsolete. Use the MapDataPoints
            method to achieve the same functionality.
            </summary>
      <param name="bounds">
            This parameter is not documented because the member is obsolete.
            </param>
      <param name="clipData">
            This parameter is not documented because the member is obsolete.
            </param>
      <returns>
            This return value is not documented because the member is obsolete.
            </returns>
    </member>
    <member name="M:NationalInstruments.UI.XYPlot.MapDataPoints(System.Drawing.Rectangle,System.Double[],System.Double[])">
      <summary>
            Transforms an array of x and y values to an array of points using the 
            specified bounds and the current x-axis and y-axis ranges.  The data is also
            clipped with respect to the current x-axis and y-axis ranges.
            </summary>
      <param name="bounds">
            The reference Rectangle.
            </param>
      <param name="xData">
            The x values to map.
            </param>
      <param name="yData">
            The y values to map.
            </param>
      <returns>
            A PointF array that represents the transformation of
            xData (parameter) and yData (parameter) with respect to
            bounds (parameter) and the current XAxis
            and YAxis ranges.
            </returns>
      <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
      <exception cref="T:System.InvalidOperationException">
                    The XAxis of the plot is null.
            
            -or-
            
                    The YAxis of the plot is null.
            </exception>
      <exception cref="T:System.NotSupportedException">
            The Owner of the plot is not null,
            and the Owner of the plot is
            different from the Owner of XAxis.
            
            -or-
            
            The Owner of the plot is not null,
            and the Owner of the plot is
            different from the Owner of YAxis.
            </exception>
      <exception cref="T:System.ArgumentNullException">xData (parameter) is null.
                
            -or-
            yData (parameter) is null.
            </exception>
      <exception cref="T:System.ArgumentException">xData (parameter) and yData (parameter) have different lengths.
            </exception>
    </member>
    <member name="M:NationalInstruments.UI.XYPlot.MapData(System.Drawing.Rectangle,System.Double[],System.Double[])">
      <summary>
            This member is obsolete. Use the MapDataPoints
            method to achieve the same functionality.
            </summary>
      <param name="bounds">
            This parameter is not documented because the member is obsolete.
            </param>
      <param name="xData">
            This parameter is not documented because the member is obsolete.
            </param>
      <param name="yData">
            This parameter is not documented because the member is obsolete.
            </param>
      <returns>
            This return value is not documented because the member is obsolete.
            </returns>
    </member>
    <member name="M:NationalInstruments.UI.XYPlot.MapDataPoints(System.Drawing.Rectangle,System.Double[],System.Double[],System.Boolean)">
      <summary>
            Transforms an array of x and y values to an array of points using the 
            specified bounds and the current x-axis and y-axis ranges.
            </summary>
      <param name="bounds">
            The reference Rectangle.
            </param>
      <param name="xData">
            The x values to map.
            </param>
      <param name="yData">
            The y values to map.
            </param>
      <param name="clipData">
            Specifies if the data is clipped with respect to the current x-axis and
            y-axis ranges.
            </param>
      <returns>
            A PointF array that represents the transformation of
            xData (parameter) and yData (parameter) with respect to
            bounds (parameter) and the current XAxis
            and YAxis ranges.
            </returns>
      <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
      <exception cref="T:System.InvalidOperationException">
                    The XAxis of the plot is null.
            
            -or-
            
                    The YAxis of the plot is null.
            </exception>
      <exception cref="T:System.NotSupportedException">
            The Owner of the plot is not null,
            and the Owner of the plot is
            different from the Owner of XAxis.
            
            -or-
            
            The Owner of the plot is not null,
            and the Owner of the plot is
            different from the Owner of YAxis.
            </exception>
      <exception cref="T:System.ArgumentNullException">xData (parameter) is null.
                
            -or-
            yData (parameter) is null.
            </exception>
      <exception cref="T:System.ArgumentException">xData (parameter) and yData (parameter) have different lengths.
            </exception>
    </member>
    <member name="M:NationalInstruments.UI.XYPlot.MapData(System.Drawing.Rectangle,System.Double[],System.Double[],System.Boolean)">
      <summary>
            This member is obsolete. Use the MapDataPoints
            method to achieve the same functionality.
            </summary>
      <param name="bounds">
            This parameter is not documented because the member is obsolete.
            </param>
      <param name="xData">
            This parameter is not documented because the member is obsolete.
            </param>
      <param name="yData">
            This parameter is not documented because the member is obsolete.
            </param>
      <param name="clipData">
            This parameter is not documented because the member is obsolete.
            </param>
      <returns>
            This return value is not documented because the member is obsolete.
            </returns>
    </member>
    <member name="M:NationalInstruments.UI.XYPlot.MapXErrorHighData(System.Drawing.Rectangle)">
      <summary>
            Transforms the high x error points for the source points in the plot data history to an 
            array of points using the specified bounds and the current x-axis and y-axis ranges.
            </summary>
      <param name="bounds">
            The reference Rectangle.
            </param>
      <returns>
            A PointF array that represents the transformation of
            the high x error data points for the source data points in the history with respect to
            the bounds (parameter) and the current x-axis and y-axis ranges.
            </returns>
      <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
      <exception cref="T:System.InvalidOperationException">
              The x-axis of the plot is null.
              
              -or-
              
              The y-axis of the plot is null.
              </exception>
      <exception cref="T:System.NotSupportedException">
              The Owner of the plot is not null,
              and the Owner of the plot is
              different from the Owner of x-axis.
              
              -or-
              
              The Owner of the plot is not null,
              and the Owner of the plot is
              different from the Owner of y-axis.
              </exception>
    </member>
    <member name="M:NationalInstruments.UI.XYPlot.MapXErrorLowData(System.Drawing.Rectangle)">
      <summary>
            Transforms the low x error points for the source points in the plot data history to an 
            array of points using the specified bounds and the current x-axis and y-axis ranges.
            </summary>
      <param name="bounds">
            The reference Rectangle.
            </param>
      <returns>
            A PointF array that represents the transformation of
            the low x error data points for the source data points in the history with respect to
            the bounds (parameter) and the current x-axis and y-axis ranges.
            </returns>
      <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
      <exception cref="T:System.InvalidOperationException">
              The x-axis of the plot is null.
              
              -or-
              
              The y-axis of the plot is null.
              </exception>
      <exception cref="T:System.NotSupportedException">
              The Owner of the plot is not null,
              and the Owner of the plot is
              different from the Owner of x-axis.
              
              -or-
              
              The Owner of the plot is not null,
              and the Owner of the plot is
              different from the Owner of y-axis.
              </exception>
    </member>
    <member name="M:NationalInstruments.UI.XYPlot.MapYErrorHighData(System.Drawing.Rectangle)">
      <summary>
            Transforms the high y error points for the source points in the plot data history to an 
            array of points using the specified bounds and the current x-axis and y-axis ranges.
            </summary>
      <param name="bounds">
            The reference Rectangle.
            </param>
      <returns>
            A PointF array that represents the transformation of
            the high y error data points for the source data points in the history with respect to
            the bounds (parameter) and the current x-axis and y-axis ranges.
            </returns>
      <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
      <exception cref="T:System.InvalidOperationException">
              The x-axis of the plot is null.
              
              -or-
              
              The y-axis of the plot is null.
              </exception>
      <exception cref="T:System.NotSupportedException">
              The Owner of the plot is not null,
              and the Owner of the plot is
              different from the Owner of x-axis.
              
              -or-
              
              The Owner of the plot is not null,
              and the Owner of the plot is
              different from the Owner of y-axis.
              </exception>
    </member>
    <member name="M:NationalInstruments.UI.XYPlot.MapYErrorLowData(System.Drawing.Rectangle)">
      <summary>
            Transforms the low y error points for the source points in the plot data history to an 
            array of points using the specified bounds and the current x-axis and y-axis ranges.
            </summary>
      <param name="bounds">
            The reference Rectangle.
            </param>
      <returns>
            A PointF array that represents the transformation of
            the low y error data points for the source data points in the history with respect to
            the bounds (parameter) and the current x-axis and y-axis ranges.
            </returns>
      <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
      <exception cref="T:System.InvalidOperationException">
              The x-axis of the plot is null.
              
              -or-
              
              The y-axis of the plot is null.
              </exception>
      <exception cref="T:System.NotSupportedException">
              The Owner of the plot is not null,
              and the Owner of the plot is
              different from the Owner of x-axis.
              
              -or-
              
              The Owner of the plot is not null,
              and the Owner of the plot is
              different from the Owner of y-axis.
              </exception>
    </member>
    <member name="M:NationalInstruments.UI.XYPlot.ClipDataPoints(System.Double[]@,System.Double[]@)">
      <summary>
            Clips the x-data and y-data arrays in the history with respect to the current
            x-axis and y-axis ranges.
            </summary>
      <param name="clippedXData">
            The clipped x-data array.
            </param>
      <param name="clippedYData">
            The clipped y-data array.
            </param>
      <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
      <exception cref="T:System.InvalidOperationException">
                    The XAxis of the plot is null.
            
            -or-
            
                    The YAxis of the plot is null.
            </exception>
      <exception cref="T:System.NotSupportedException">
            The Owner of the plot is not null,
            and the Owner of the plot is
            different from the Owner of XAxis.
            
            -or-
            
            The Owner of the plot is not null,
            and the Owner of the plot is
            different from the Owner of YAxis.
            </exception>
    </member>
    <member name="M:NationalInstruments.UI.XYPlot.ClipData(System.Double[]@,System.Double[]@)">
      <summary>
            This member is obsolete. Use the ClipDataPoints
            method to achieve the same functionality.
            </summary>
      <param name="clippedXData">
            This parameter is not documented because the member is obsolete. 
            </param>
      <param name="clippedYData">
            This parameter is not documented because the member is obsolete. 
            </param>
    </member>
    <member name="M:NationalInstruments.UI.XYPlot.ClipDataPoints(System.Double[],System.Double[],System.Double[]@,System.Double[]@)">
      <summary>
            Clips the data in the x-data and y-data arrays with respect to the current
            x-axis and y-axis ranges.
            </summary>
      <param name="xData">
            The x-data array to clip.
            </param>
      <param name="yData">
            The y-data array to clip.
            </param>
      <param name="clippedXData">
            The clipped x-data array.
            </param>
      <param name="clippedYData">
            The clipped y-data array.
            </param>
      <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
      <exception cref="T:System.InvalidOperationException">
                    The XAxis of the plot is null.
            
            -or-
            
                    The YAxis of the plot is null.
            </exception>
      <exception cref="T:System.NotSupportedException">
            The Owner of the plot is not null,
            and the Owner of the plot is
            different from the Owner of XAxis.
            
            -or-
            
            The Owner of the plot is not null,
            and the Owner of the plot is
            different from the Owner of YAxis.
            </exception>
      <exception cref="T:System.ArgumentNullException">xData (parameter) is null.
                
            -or-
            yData (parameter) is null.
            </exception>
      <exception cref="T:System.ArgumentException">xData (parameter) and yData (parameter) have different lengths.
            
            -or-
            
            The length of xData (parameter) is zero.
            </exception>
    </member>
    <member name="M:NationalInstruments.UI.XYPlot.ClipData(System.Double[],System.Double[],System.Double[]@,System.Double[]@)">
      <summary>
            This member is obsolete. Use the ClipDataPoints
            method to achieve the same functionality.
            </summary>
      <param name="xData">
            This parameter is not documented because the member is obsolete.
            </param>
      <param name="yData">
            This parameter is not documented because the member is obsolete.
            </param>
      <param name="clippedXData">
            This parameter is not documented because the member is obsolete.
            </param>
      <param name="clippedYData">
            This parameter is not documented because the member is obsolete.
            </param>
    </member>
    <member name="M:NationalInstruments.UI.XYPlot.GetLineStepPoints(System.Drawing.PointF[])">
      <summary>
            Transforms an array of points representing mapped data by applying 
            LineStep.
            </summary>
      <param name="mappedData">
            A PointF array representing mapped data.
            </param>
      <returns>
            A PointF array representing mapped data after applying 
            LineStep.
            </returns>
      <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
      <exception cref="T:System.ArgumentNullException">mappedData (parameter) is null.
            </exception>
    </member>
    <member name="M:NationalInstruments.UI.XYPlot.FormatDataToolTip(System.Double,System.Double)">
      <summary>
            Formats an x and y data value pair as a plot data tooltip.
            </summary>
      <param name="xData">
            The x-data value to format.
            </param>
      <param name="yData">
            The y-data value to format.
            </param>
      <returns>
            A String that contains the specified x and y data values formatted as
            a data tooltip. The tooltip format is specified by the current values of
            ToolTipXFormat and
            ToolTipYFormat.
            </returns>
      <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
    </member>
    <member name="M:NationalInstruments.UI.XYPlot.OnBeforeDraw(NationalInstruments.UI.BeforeDrawXYPlotEventArgs)">
      <summary>
            Raises the BeforeDraw event.
            </summary>
      <param name="e">
            An BeforeDrawXYPlotEventArgs that contains the 
            event data.
            </param>
      <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
    </member>
    <member name="M:NationalInstruments.UI.XYPlot.OnAfterDraw(NationalInstruments.UI.AfterDrawXYPlotEventArgs)">
      <summary>
            Raises the AfterDraw event.
            </summary>
      <param name="e">
            An AfterDrawXYPlotEventArgs that contains the
            event data.
            </param>
      <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
    </member>
    <member name="P:NationalInstruments.UI.XYPlot.XAxis">
      <summary>
            Gets or sets the x-axis for the plot.
            </summary>
      <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
    </member>
    <member name="P:NationalInstruments.UI.XYPlot.YAxis">
      <summary>
            Gets or sets the y-axis for the plot.
            </summary>
      <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
    </member>
    <member name="P:NationalInstruments.UI.XYPlot.LineStep">
      <summary>
            Gets or sets the style for connecting two consecutive data points on the 
            plot.
            </summary>
      <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
      <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
            The specified value is not one of the LineStep
            values.
            </exception>
    </member>
    <member name="P:NationalInstruments.UI.XYPlot.FillBase">
      <summary>
            Gets or sets the base that the plot draws or fills to.
            </summary>
      <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
      <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
            The specified value is not a XYPlotFillBase value.
            </exception>
    </member>
    <member name="P:NationalInstruments.UI.XYPlot.BasePlot">
      <summary>
            Gets or sets the base plot used for fill or lines to base.
            </summary>
      <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
      <exception cref="T:System.NotSupportedException">
            The specified value is equal to this XYPlot. 
            </exception>
    </member>
    <member name="P:NationalInstruments.UI.XYPlot.ToolTipsEnabled">
      <summary>
            Gets or sets a value indicating if a plot data tooltip is shown when the mouse hovers over a data point
            in the plot.
            </summary>
      <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
    </member>
    <member name="P:NationalInstruments.UI.XYPlot.ToolTipXFormat">
      <summary>
            Gets or sets the format string used to format the x data value displayed in the tooltip.
            </summary>
      <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
    </member>
    <member name="P:NationalInstruments.UI.XYPlot.ToolTipYFormat">
      <summary>
            Gets or sets the format string used to format the y data value displayed in the tooltip.
            </summary>
      <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
    </member>
    <member name="P:NationalInstruments.UI.XYPlot.DataStateManagement">
      <summary>
            Gets or sets a value that specifies how data is saved and restored across HTTP requests.
            </summary>
      <exception cref="T:System.ArgumentNullException">
            The specified value is null.
            </exception>
      <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
    </member>
    <member name="P:NationalInstruments.UI.XYPlot.XErrorDataMode">
      <summary>
            Gets or sets the mode used to generate x error data on plotted data points.
            </summary>
      <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
      <exception cref="T:System.ArgumentNullException">
            The specified value is null.
            </exception>
    </member>
    <member name="P:NationalInstruments.UI.XYPlot.XErrorDisplayMode">
      <summary>
            Gets or sets the mode controlling how x error data is displayed on the plot.
            </summary>
      <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
      <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
            The specified value is not one of the ErrorBandDisplayModes values.
            </exception>
    </member>
    <member name="P:NationalInstruments.UI.XYPlot.XErrorHighLineStyle">
      <summary>
            Gets or sets the style of the line connecting a high x error point with a source point on the plot.
            </summary>
      <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
      <exception cref="T:System.ArgumentNullException">
            The specified value is null.
            </exception>
    </member>
    <member name="P:NationalInstruments.UI.XYPlot.XErrorHighLineColor">
      <summary>
            Gets or sets the color of the line connecting a high x error point with a source point on the plot.
            </summary>
      <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
    </member>
    <member name="P:NationalInstruments.UI.XYPlot.XErrorHighLineWidth">
      <summary>
            Gets or sets the width of the line connecting a high x error point with a source point on the plot.
            </summary>
      <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
              The specified value is less than or equal to zero.
              
              -or-
              
              The specified value is NaN, NegativeInfinity,
              or PositiveInfinity.
              </exception>
    </member>
    <member name="P:NationalInstruments.UI.XYPlot.XErrorHighPointStyle">
      <summary>
            Gets or sets the style for displaying a high x error point on the plot.
            </summary>
      <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
      <exception cref="T:System.ArgumentNullException">
            The specified value is null.
            </exception>
    </member>
    <member name="P:NationalInstruments.UI.XYPlot.XErrorHighPointColor">
      <summary>
            Gets or sets the color for displaying a high x error point on the plot.
            </summary>
      <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
    </member>
    <member name="P:NationalInstruments.UI.XYPlot.XErrorHighPointSize">
      <summary>
            Gets or sets the size of the point style used to display a high x error point on the plot.
            </summary>
      <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
              The value has negative width.
              
              -or-
              
              The value has negative height.
              </exception>
    </member>
    <member name="P:NationalInstruments.UI.XYPlot.XErrorLowLineStyle">
      <summary>
            Gets or sets the style of the line connecting a low x error point with a source point on the plot.
            </summary>
      <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
      <exception cref="T:System.ArgumentNullException">
            The specified value is null.
            </exception>
    </member>
    <member name="P:NationalInstruments.UI.XYPlot.XErrorLowLineColor">
      <summary>
            Gets or sets the color of the line connecting a low x error point with a source point on the plot.
            </summary>
      <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
    </member>
    <member name="P:NationalInstruments.UI.XYPlot.XErrorLowLineWidth">
      <summary>
            Gets or sets the width of the line connecting a low x error point with a source point on the plot.
            </summary>
      <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
              The specified value is less than or equal to zero.
              
              -or-
              
              The specified value is NaN, NegativeInfinity,
              or PositiveInfinity.
              </exception>
    </member>
    <member name="P:NationalInstruments.UI.XYPlot.XErrorLowPointStyle">
      <summary>
            Gets or sets the style for displaying a low x error point on the plot.
            </summary>
      <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
      <exception cref="T:System.ArgumentNullException">
            The specified value is null.
            </exception>
    </member>
    <member name="P:NationalInstruments.UI.XYPlot.XErrorLowPointColor">
      <summary>
            Gets or sets the color for displaying a low x error point on the plot.
            </summary>
      <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
    </member>
    <member name="P:NationalInstruments.UI.XYPlot.XErrorLowPointSize">
      <summary>
            Gets or sets the size of the point style used to display a low x error point on the plot.
            </summary>
      <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
              The value has negative width.
              
              -or-
              
              The value has negative height.
              </exception>
    </member>
    <member name="P:NationalInstruments.UI.XYPlot.YErrorDataMode">
      <summary>
            Gets or sets the mode used to generate y error data on plotted data points.
            </summary>
      <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
      <exception cref="T:System.ArgumentNullException">
            The specified value is null.
            </exception>
    </member>
    <member name="P:NationalInstruments.UI.XYPlot.YErrorDisplayMode">
      <summary>
            Gets or sets the mode controlling how y error data is displayed on the plot.
            </summary>
      <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
      <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
            The specified value is not one of the ErrorBandDisplayModes values.
            </exception>
    </member>
    <member name="P:NationalInstruments.UI.XYPlot.YErrorHighLineStyle">
      <summary>
            Gets or sets the style of the line connecting a high y error point with a source point on the plot.
            </summary>
      <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
      <exception cref="T:System.ArgumentNullException">
            The specified value is null.
            </exception>
    </member>
    <member name="P:NationalInstruments.UI.XYPlot.YErrorHighLineColor">
      <summary>
            Gets or sets the color of the line connecting a high y error point with a source point on the plot.
            </summary>
      <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
    </member>
    <member name="P:NationalInstruments.UI.XYPlot.YErrorHighLineWidth">
      <summary>
            Gets or sets the width of the line connecting a high y error point with a source point on the plot.
            </summary>
      <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
              The specified value is less than or equal to zero.
              
              -or-
              
              The specified value is NaN, NegativeInfinity,
              or PositiveInfinity.
              </exception>
    </member>
    <member name="P:NationalInstruments.UI.XYPlot.YErrorHighPointStyle">
      <summary>
            Gets or sets the style for displaying a high y error point on the plot.
            </summary>
      <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
      <exception cref="T:System.ArgumentNullException">
            The specified value is null.
            </exception>
    </member>
    <member name="P:NationalInstruments.UI.XYPlot.YErrorHighPointColor">
      <summary>
            Gets or sets the color for displaying a high y error point on the plot.
            </summary>
      <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
    </member>
    <member name="P:NationalInstruments.UI.XYPlot.YErrorHighPointSize">
      <summary>
            Gets or sets the size of the point style used to display a high y error point on the plot.
            </summary>
      <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
              The value has negative width.
              
              -or-
              
              The value has negative height.
              </exception>
    </member>
    <member name="P:NationalInstruments.UI.XYPlot.YErrorLowLineStyle">
      <summary>
            Gets or sets the style of the line connecting a low y error point with a source point on the plot.
            </summary>
      <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
      <exception cref="T:System.ArgumentNullException">
            The specified value is null.
            </exception>
    </member>
    <member name="P:NationalInstruments.UI.XYPlot.YErrorLowLineColor">
      <summary>
            Gets or sets the color of the line connecting a low y error point with a source point on the plot.
            </summary>
      <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
    </member>
    <member name="P:NationalInstruments.UI.XYPlot.YErrorLowLineWidth">
      <summary>
            Gets or sets the width of the line connecting a low y error point with a source point on the plot.
            </summary>
      <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
              The specified value is less than or equal to zero.
              
              -or-
              
              The specified value is NaN, NegativeInfinity,
              or PositiveInfinity.
              </exception>
    </member>
    <member name="P:NationalInstruments.UI.XYPlot.YErrorLowPointStyle">
      <summary>
            Gets or sets the style for displaying a low y error point on the plot.
            </summary>
      <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
      <exception cref="T:System.ArgumentNullException">
            The specified value is null.
            </exception>
    </member>
    <member name="P:NationalInstruments.UI.XYPlot.YErrorLowPointColor">
      <summary>
            Gets or sets the color for displaying a low y error point on the plot.
            </summary>
      <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
    </member>
    <member name="P:NationalInstruments.UI.XYPlot.YErrorLowPointSize">
      <summary>
            Gets or sets the size of the point style used to display a low y error point on the plot.
            </summary>
      <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
              The value has negative width.
              
              -or-
              
              The value has negative height.
              </exception>
    </member>
    <member name="P:NationalInstruments.UI.XYPlot.Snappable">
      <summary>
            Gets or sets a value indicating whether cursors can snap to this plot.
            </summary>
      <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
    </member>
    <member name="E:NationalInstruments.UI.XYPlot.BeforeDraw">
      <summary>
            Occurs before the plot is drawn.
            </summary>
      <exception cref="T:System.ObjectDisposedException">
            An event handler is added after the object has been disposed.
            </exception>
    </member>
    <member name="E:NationalInstruments.UI.XYPlot.AfterDraw">
      <summary>
            Occurs after the plot has been drawn.
            </summary>
      <exception cref="T:System.ObjectDisposedException">
            An event handler is added after the object has been disposed.
            </exception>
    </member>
    <member name="M:NationalInstruments.UI.ScatterPlot.#ctor">
      <summary>
            Initializes a new instance of the ScatterPlot class.
            </summary>
    </member>
    <member name="M:NationalInstruments.UI.ScatterPlot.#ctor(NationalInstruments.UI.XAxis,NationalInstruments.UI.YAxis)">
      <summary>
            Initializes a new instance of the ScatterPlot class
            with the specified XAxis and
            YAxis.
            </summary>
      <param name="xAxis">
            The XAxis to use for the plot.
            </param>
      <param name="yAxis">
            The YAxis to use for the plot.
            </param>
      <exception cref="T:System.ArgumentNullException">xAxis (parameter) is null
            -or-
            yAxis (parameter) is null</exception>
    </member>
    <member name="M:NationalInstruments.UI.ScatterPlot.PlotXYAppend(System.Double,System.Double)">
      <summary>
            Plots a single y value against a single x value by appending the x and y value to the
            existing data.
            </summary>
      <param name="xData">
            The x value to append.
            </param>
      <param name="yData">
            The y value to append.
            </param>
      <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
      <exception cref="T:System.InvalidOperationException">
            		The XAxis of the plot is null.
            
            -or-
            
            		The YAxis of the plot is null.
            </exception>
      <exception cref="T:System.NotSupportedException">
            The Owner of the plot is not null,
            and the Owner of the plot is
            different from the Owner of XAxis.
            
            -or-
            
            The Owner of the plot is not null,
            and the Owner of the plot is
            different from the Owner of YAxis.
            </exception>
      <exception cref="T:System.ArgumentException">ProcessSpecialValues is true,
            and xData (parameter) and yData (parameter) are special values.
            </exception>
    </member>
    <member name="M:NationalInstruments.UI.ScatterPlot.PlotXYAppend(System.Double[],System.Double[])">
      <summary>
            Plots an array of y values against an array of x values by appending the x and y values to 
            the existing data.
            </summary>
      <param name="xData">
            The x values to append.
            </param>
      <param name="yData">
            The y values to append.
            </param>
      <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
      <exception cref="T:System.ArgumentNullException">xData (parameter) is null.
            
            -or-
            yData (parameter) is null.
            </exception>
      <exception cref="T:System.ArgumentException">xData (parameter) and yData (parameter) arrays have different lengths.
            
            -or-
            

ProcessSpecialValues is true
            and xData (parameter) and yData (parameter) contain special values
            at the same index.
            


            -or-
            ProcessSpecialValues is true
            and xData (parameter) and yData (parameter) contain special values
            at the same index.
            </exception>
      <exception cref="T:System.InvalidOperationException">
            		The XAxis of the plot is null.
            
            -or-
            
            		The YAxis of the plot is null.
            </exception>
      <exception cref="T:System.NotSupportedException">
            The Owner of the plot is not null,
            and the Owner of the plot is
            different from the Owner of XAxis.
            
            -or-
            
            The Owner of the plot is not null,
            and the Owner of the plot is
            different from the Owner of YAxis.
            </exception>
    </member>
    <member name="M:NationalInstruments.UI.ScatterPlot.PlotXYAppend(System.Double[],System.Double[],System.Int32,System.Int32)">
      <summary>
            Plots a subset of an array of y values against an array of x values by appending the x and y values to 
            the existing data.
            </summary>
      <param name="xData">
            The x values to append.
            </param>
      <param name="yData">
            The y values to append.
            </param>
      <param name="startIndex">
            The index in xData (parameter) and yData (parameter) at which the plot data begins.
            </param>
      <param name="length">
            The number of elements, beginning at startIndex (parameter) in xData (parameter)
            and yData (parameter), to plot.
            </param>
      <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
      <exception cref="T:System.ArgumentNullException">xData (parameter) is null.
            
            -or-
            yData (parameter) is null.
            </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">startIndex (parameter) is less than 0.
            
            -or-
            startIndex (parameter) is greater than or equal to the
            number of elements in xData (parameter) or yData (parameter).
            
            -or-
            length (parameter) is less than 0.
            
            -or-
            length (parameter) is greater than the number of elements
            from startIndex (parameter) to the end of xData (parameter) or yData (parameter).
            </exception>
      <exception cref="T:System.ArgumentException">xData (parameter) and yData (parameter) arrays have different lengths.
            
            -or-
            

ProcessSpecialValues is true,
            and xData (parameter) and yData (parameter) contain special values
            at the same index.
            


            -or-
            ProcessSpecialValues is true,
            and xData (parameter) and yData (parameter) contain special values
            at the same index.
            </exception>
      <exception cref="T:System.InvalidOperationException">
            		The XAxis of the plot is null.
            
            -or-
            
            		The YAxis of the plot is null.
            </exception>
      <exception cref="T:System.NotSupportedException">
            The Owner of the plot is not null,
            and the Owner of the plot is
            different from the Owner of XAxis.
            
            -or-
            
            The Owner of the plot is not null,
            and the Owner of the plot is
            different from the Owner of YAxis.
            </exception>
    </member>
    <member name="M:NationalInstruments.UI.ScatterPlot.PlotXY(System.Double,System.Double)">
      <summary>
            Plots a single y value against a single x value.
            </summary>
      <param name="xData">
            The x value to plot.
            </param>
      <param name="yData">
            The y value to plot.
            </param>
      <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
      <exception cref="T:System.InvalidOperationException">
            		The XAxis of the plot is null.
            
            -or-
            
            		The YAxis of the plot is null.
            </exception>
      <exception cref="T:System.NotSupportedException">
            The Owner of the plot is not null,
            and the Owner of the plot is
            different from the Owner of XAxis.
            
            -or-
            
            The Owner of the plot is not null,
            and the Owner of the plot is
            different from the Owner of YAxis.
            </exception>
      <exception cref="T:System.ArgumentException">ProcessSpecialValues is true,
            and xData (parameter) and yData (parameter) are special values.
            </exception>
    </member>
    <member name="M:NationalInstruments.UI.ScatterPlot.PlotXY(System.Double[],System.Double[])">
      <summary>
            Plots an array of y values against an array of x values.
            </summary>
      <param name="xData">
            The array of x values to plot.
            </param>
      <param name="yData">
            The array of y values to plot.
            </param>
      <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
      <exception cref="T:System.ArgumentNullException">xData (parameter) is null.
            
            -or-
            yData (parameter) is null.
            </exception>
      <exception cref="T:System.ArgumentException">xData (parameter) and yData (parameter) arrays have different lengths.
            
            -or-
            

ProcessSpecialValues is true,
            and xData (parameter) and yData (parameter) contain special values
            at the same index.
            


            -or-
            ProcessSpecialValues is true,
            and xData (parameter) and yData (parameter) contain special values
            at the same index.
            </exception>
      <exception cref="T:System.InvalidOperationException">
            		The XAxis of the plot is null.
            
            -or-
            
            		The YAxis of the plot is null.
            </exception>
      <exception cref="T:System.NotSupportedException">
            The Owner of the plot is not null,
            and the Owner of the plot is
            different from the Owner of XAxis.
            
            -or-
            
            The Owner of the plot is not null,
            and the Owner of the plot is
            different from the Owner of YAxis.
            </exception>
    </member>
    <member name="M:NationalInstruments.UI.ScatterPlot.PlotXY(System.Double[],System.Double[],System.Int32,System.Int32)">
      <summary>
            Plots a subset of an array of y values against a subset of an array of x values.
            </summary>
      <param name="xData">
            The array of x values to plot.
            </param>
      <param name="yData">
            The array of y values to plot.
            </param>
      <param name="startIndex">
            The index in xData (parameter) and yData (parameter) at which the plot data begins.
            </param>
      <param name="length">
            The number of elements, beginning at startIndex (parameter) in xData (parameter)
            and yData (parameter), to plot.
            </param>
      <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
      <exception cref="T:System.ArgumentNullException">xData (parameter) is null.
            
            -or-
            yData (parameter) is null.
            </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">startIndex (parameter) is less than 0.
            
            -or-
            startIndex (parameter) is greater than or equal to the
            number of elements in xData (parameter) or yData (parameter).
            
            -or-
            length (parameter) is less than 0.
            
            -or-
            length (parameter) is greater than the number of elements
            from startIndex (parameter) to the end of xData (parameter) or yData (parameter).
            </exception>
      <exception cref="T:System.InvalidOperationException">
            		The XAxis of the plot is null.
            
            -or-
            
            		The YAxis of the plot is null.
            </exception>
      <exception cref="T:System.ArgumentException">xData (parameter) and yData (parameter) arrays have different lengths.
            
            -or-
            

ProcessSpecialValues is true,
            and xData (parameter) and yData (parameter) contain special values
            at the same index.
            


            -or-
            ProcessSpecialValues is true,
            and xData (parameter) and yData (parameter) contain special values
            at the same index.
            </exception>
      <exception cref="T:System.InvalidOperationException">
            		The XAxis of the plot is null.
            
            -or-
            
            		The YAxis of the plot is null.
            </exception>
      <exception cref="T:System.NotSupportedException">
            The Owner of the plot is not null,
            and the Owner of the plot is
            different from the Owner of XAxis.
            
            -or-
            
            The Owner of the plot is not null,
            and the Owner of the plot is
            different from the Owner of YAxis.
            </exception>
    </member>
    <member name="M:NationalInstruments.UI.ScatterPlot.Clone">
      <summary>
            Creates a new object that is a copy of this instance.
            </summary>
      <returns>
            A new object that is a copy of this instance.
            </returns>
      <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
    </member>
    <member name="T:NationalInstruments.UI.RefreshEventArgs">
      <summary>
            Provides data for refresh management control refresh events.
            </summary>
    </member>
    <member name="M:NationalInstruments.UI.RefreshEventArgs.#ctor(NationalInstruments.UI.RefreshItemCollection)">
      <summary>
            Creates a new instance of the RefreshEventArgs class
            with the specified items.
            </summary>
      <param name="defaultItems">
            The default collection of RefreshItem objects.
            </param>
    </member>
    <member name="P:NationalInstruments.UI.RefreshEventArgs.RefreshItems">
      <summary>
            Gets the controls that are updated on the server and whose associated renderings on the
            client are updated.
            </summary>
    </member>
    <member name="T:NationalInstruments.UI.RadialNumericPointerInteractionModes">
      <summary>
            Defines the set of user interactions that are possible within a radial numeric pointer.
            </summary>
    </member>
    <member name="F:NationalInstruments.UI.RadialNumericPointerInteractionModes.Indicator">
      <summary>
            No interaction.
            </summary>
    </member>
    <member name="F:NationalInstruments.UI.RadialNumericPointerInteractionModes.DragPointer">
      <summary>
            The pointer can be dragged.
            </summary>
    </member>
    <member name="F:NationalInstruments.UI.RadialNumericPointerInteractionModes.SnapPointer">
      <summary>
            The pointer can be snapped to a value.
            </summary>
    </member>
    <member name="F:NationalInstruments.UI.RadialNumericPointerInteractionModes.WrapPointer">
      <summary>
            The pointer is interactive outside the scale arc.
            The pointer can be wrapped from the minimum
            of the scale's range to the maximum of the scale's
            range and vice versa.
            </summary>
    </member>
    <member name="F:NationalInstruments.UI.RadialNumericPointerInteractionModes.EditRange">
      <summary>
            Interactively edit the minimum and maximum values of the scale at run time.
            </summary>
    </member>
    <member name="T:NationalInstruments.UI.NumericEditWebInteractionMouseCursors">
      <summary>
            Represents the mouse cursor for interaction with the Web Forms numeric edit control.
            </summary>
    </member>
    <member name="F:NationalInstruments.UI.NumericEditWebInteractionMouseCursors.DefaultIndicator">
      <summary>
            Gets the default mouse cursor used when NumericEditWebInteractionMode is set to Indicator.
            </summary>
    </member>
    <member name="F:NationalInstruments.UI.NumericEditWebInteractionMouseCursors.DefaultText">
      <summary>
            Gets the default mouse cursor used when NumericEditWebInteractionMode is set to Text.
            </summary>
    </member>
    <member name="M:NationalInstruments.UI.NumericEditWebInteractionMouseCursors.#ctor">
      <summary>
            Initializes a new instance of the NumericEditWebInteractionMouseCursors class.
            </summary>
    </member>
    <member name="M:NationalInstruments.UI.NumericEditWebInteractionMouseCursors.ToString">
      <summary>
            Creates a new object that is a copy of this instance.
            </summary>
      <returns>
            A new object that is a copy of this instance.
            </returns>
    </member>
    <member name="M:NationalInstruments.UI.NumericEditWebInteractionMouseCursors.ResetAllToDefault">
      <summary>
            Resets all the properties of NumericEditWebInteractionMouseCursors to default values.
            </summary>
    </member>
    <member name="P:NationalInstruments.UI.NumericEditWebInteractionMouseCursors.Indicator">
      <summary>
            Gets or sets the mouse cursor used when NumericEditWebInteractionMode is Indicator.
            </summary>
    </member>
    <member name="P:NationalInstruments.UI.NumericEditWebInteractionMouseCursors.Text">
      <summary>
            Gets or sets the mouse cursor used when NumericEditWebInteractionMode is set to Text.
            </summary>
    </member>
    <member name="T:NationalInstruments.UI.MouseCursors">
      <summary>
            Provides a collection of Cursor objects for use in a Windows Forms application.
            </summary>
    </member>
    <member name="P:NationalInstruments.UI.MouseCursors.ZoomX">
      <summary>
            Gets the mouse cursor you use to indicate that the end user can zoom within the area in the horizontal direction.
            </summary>
    </member>
    <member name="P:NationalInstruments.UI.MouseCursors.ZoomY">
      <summary>
            Gets the mouse cursor you use to indicate that the end user can zoom within the area in the vertical direction.
            </summary>
    </member>
    <member name="P:NationalInstruments.UI.MouseCursors.ZoomXY">
      <summary>
            Gets the mouse cursor you use to indicate that the end user can zoom within the area in horizontal and vertical directions.
            </summary>
    </member>
    <member name="P:NationalInstruments.UI.MouseCursors.ZoomPoint">
      <summary>
            Gets the mouse cursor that you use to indicate that the end user can zoom around a point within the area.
            </summary>
    </member>
    <member name="P:NationalInstruments.UI.MouseCursors.ZoomPointZoomX">
      <summary>
            Gets the mouse cursor you use to indicate that the end user can zoom around a point within the area and zoom in the horizontal direction.
            </summary>
    </member>
    <member name="P:NationalInstruments.UI.MouseCursors.ZoomPointZoomY">
      <summary>
            Gets the mouse cursor you use to indicate that the end user can zoom around a point within the area and zoom in the vertical direction.
            </summary>
    </member>
    <member name="P:NationalInstruments.UI.MouseCursors.ZoomPointZoomXY">
      <summary>
            Gets the mouse cursor you use to indicate that the end user can zoom around a point within the area and zoom in horizontal and vertical directions.
            </summary>
    </member>
    <member name="P:NationalInstruments.UI.MouseCursors.Pan">
      <summary>
            Gets the mouse cursor that looks like a hand that you typically use to indicate that the end user can pan within the area.
            </summary>
    </member>
    <member name="P:NationalInstruments.UI.MouseCursors.Panning">
      <summary>
            Gets the mouse cursor that looks like a hand which is pressed that you typically use to indicate panning.
            </summary>
    </member>
    <member name="P:NationalInstruments.UI.MouseCursors.HandOpen">
      <summary>
            Gets the mouse cursor that looks like a hand that you typically use to indicate a clickable area.
            </summary>
    </member>
    <member name="P:NationalInstruments.UI.MouseCursors.HandPressed">
      <summary>
            Gets the mouse cursor that looks like a hand with the finger pressed that you typically use to indicate that the mouse is clicked.
            </summary>
    </member>
    <member name="T:NationalInstruments.UI.LinearNumericPointerHitTestInfo">
      <summary>
            Specifies the parts of a linear numeric pointer control that can be hit-tested.
            </summary>
    </member>
    <member name="F:NationalInstruments.UI.LinearNumericPointerHitTestInfo.None">
      <summary>
            The portion of the linear numeric pointer outside the fill, pointer, and scale area.
            </summary>
    </member>
    <member name="F:NationalInstruments.UI.LinearNumericPointerHitTestInfo.Pointer">
      <summary>
            The pointer, if any, of the linear numeric control.
            </summary>
    </member>
    <member name="F:NationalInstruments.UI.LinearNumericPointerHitTestInfo.Fill">
      <summary>
            The filled portion of the fill area.
            </summary>
    </member>
    <member name="F:NationalInstruments.UI.LinearNumericPointerHitTestInfo.FillBackground">
      <summary>
            The empty (non-filled) portion of the fill area.
            </summary>
    </member>
    <member name="F:NationalInstruments.UI.LinearNumericPointerHitTestInfo.ScaleArea">
      <summary>
            The area containing the scale.
            </summary>
    </member>
    <member name="T:NationalInstruments.UI.IntensityPlotCollection">
      <summary>
            Represents a strongly typed collection of IntensityPlot objects.
            </summary>
    </member>
    <member name="M:NationalInstruments.UI.IntensityPlotCollection.#ctor">
      <summary>
            Initializes a new instance of the IntensityPlotCollection class.
            </summary>
    </member>
    <member name="M:NationalInstruments.UI.IntensityPlotCollection.#ctor(NationalInstruments.UI.IntensityPlot[])">
      <summary>
            Initializes a new instance of the IntensityPlotCollection class
            from an array of IntensityPlot objects.
            </summary>
      <param name="item">
            Array of IntensityPlot objects to copy.
            </param>
      <exception cref="T:System.ArgumentNullException">item (parameter) is null.
            
            -or-
            
            An element in item (parameter) is null.
            </exception>
      <exception cref="T:System.NotSupportedException">
            		An element in item (parameter) has been disposed.
            
            -or-
            
            		An element in item (parameter) is in another IntensityPlotCollection.
            
            -or-
            
            		An element in item (parameter) is already in this collection.
            </exception>
    </member>
    <member name="M:NationalInstruments.UI.IntensityPlotCollection.#ctor(NationalInstruments.UI.IntensityPlotCollection)">
      <summary>
            Initializes a new instance of IntensityPlotCollection
            from an existing collection.
            </summary>
      <param name="item">
            The IntensityPlotCollection to copy.
            </param>
      <exception cref="T:System.ArgumentNullException">item (parameter) is null.
            
            -or-
            
            An element in item (parameter) is null.
            </exception>
      <exception cref="T:System.NotSupportedException">
            		An element in item (parameter) has been disposed.
            
            -or-
            
            		An element in item (parameter) is in another IntensityPlotCollection.
            
            -or-
            
            		An element in item (parameter) is already in this collection.
            </exception>
    </member>
    <member name="M:NationalInstruments.UI.IntensityPlotCollection.ToString">
      <summary>
            Returns a string representation of the object.
            </summary>
      <returns>
            A string representation of the object.
            </returns>
    </member>
    <member name="M:NationalInstruments.UI.IntensityPlotCollection.Add(NationalInstruments.UI.IntensityPlot)">
      <summary>
            Adds an item to the end of the collection.
            </summary>
      <param name="item">
            Item to add to the collection.
            </param>
      <returns>
            The array index of the added item.
            </returns>
      <exception cref="T:System.ArgumentNullException">item (parameter) is null.
            </exception>
      <exception cref="T:System.NotSupportedException">item (parameter) has been disposed.
            
            -or-
            item (parameter) is in another IntensityPlotCollection.
            
            -or-
            item (parameter) is already in this collection.
            </exception>
    </member>
    <member name="M:NationalInstruments.UI.IntensityPlotCollection.AddRange(NationalInstruments.UI.IntensityPlot[])">
      <summary>
            Adds an array of IntensityPlot objects to the end of the collection.
            </summary>
      <param name="item">
            Array of IntensityPlot objects to add to the collection.
            </param>
      <exception cref="T:System.ArgumentNullException">item (parameter) is null.
            
            -or-
            
            An element in item (parameter) is null.
            </exception>
      <exception cref="T:System.NotSupportedException">
            		An element in item (parameter) has been disposed.
            
            -or-
            
            		An element in item (parameter) is in another IntensityPlotCollection.
            
            -or-
            
            		An element in item (parameter) is already in this collection.
            </exception>
    </member>
    <member name="M:NationalInstruments.UI.IntensityPlotCollection.AddRange(NationalInstruments.UI.IntensityPlotCollection)">
      <summary>
            Adds a collection of IntensityPlot objects to the end of the collection.
            </summary>
      <param name="item">
            Collection of IntensityPlot objects to add to the collection.
            </param>
      <exception cref="T:System.ArgumentNullException">item (parameter) is null.
            
            -or-
            
            An element in item (parameter) is null.
            </exception>
      <exception cref="T:System.NotSupportedException">
            		An element in item (parameter) has been disposed.
            
            -or-
            
            		An element in item (parameter) is in another IntensityPlotCollection.
            
            -or-
            
            		An element in item (parameter) is already in this collection.
            </exception>
    </member>
    <member name="M:NationalInstruments.UI.IntensityPlotCollection.Clear">
      <summary>
            Removes all items from the collection.
            </summary>
    </member>
    <member name="M:NationalInstruments.UI.IntensityPlotCollection.Contains(NationalInstruments.UI.IntensityPlot)">
      <summary>
            Determines if the specified element is in the collection.
            </summary>
      <param name="item">Item to locate in the collection.</param>
      <returns>true if the collection contains item (parameter).
            </returns>
    </member>
    <member name="M:NationalInstruments.UI.IntensityPlotCollection.CopyTo(NationalInstruments.UI.IntensityPlot[],System.Int32)">
      <summary>
            Copies the collection to an array or a portion of an array.
            </summary>
      <param name="array">
            Destination array for the collection.
            </param>
      <param name="index">
            The index in the target array at which you want to begin copying the collection to.
            </param>
      <exception cref="T:System.ArgumentNullException">array (parameter) is null.
            </exception>
      <exception cref="T:System.ArgumentException">array (parameter) is multidimensional.
            
            -or-
            index (parameter) is equal to or greater than the length of array (parameter).
            
            -or-
            
            The number of elements in the collection is greater than the available space between
            index (parameter) and the end of array (parameter).
            </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">index (parameter) is less than the lower bound of array (parameter).
            </exception>
    </member>
    <member name="M:NationalInstruments.UI.IntensityPlotCollection.IndexOf(NationalInstruments.UI.IntensityPlot)">
      <summary>
            Returns the zero-based index of the first occurrence of an item in the collection.
            </summary>
      <param name="item">
            Item to search for.
            </param>
      <returns>
            Index of the item. If the item is not found, returns -1.
            </returns>
    </member>
    <member name="M:NationalInstruments.UI.IntensityPlotCollection.Insert(System.Int32,NationalInstruments.UI.IntensityPlot)">
      <summary>
            Inserts an item into the collection at the specified index.
            </summary>
      <param name="index">
            Index to insert the item at.
            </param>
      <param name="item">
            Item to insert into the collection.
            </param>
      <exception cref="T:System.ArgumentNullException">item (parameter) is null.
            </exception>
      <exception cref="T:System.NotSupportedException">item (parameter) has been disposed.
            
            -or-
            item (parameter) is in another IntensityPlotCollection.
            
            -or-
            item (parameter) is already in this collection.
            </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">index (parameter) is less than zero.
            
            -or-
            

index (parameter) is greater than Count.
            


            -or-
            index (parameter) is greater than Count.
            </exception>
    </member>
    <member name="M:NationalInstruments.UI.IntensityPlotCollection.GetEnumerator">
      <summary>
            Returns an enumerator that you can use to iterate through the collection.
            </summary>
      <returns>
            The enumerator for the collection.
            </returns>
    </member>
    <member name="M:NationalInstruments.UI.IntensityPlotCollection.Remove(NationalInstruments.UI.IntensityPlot)">
      <summary>
            Removes the first occurrence of the specified item.
            </summary>
      <param name="item">
            Item to remove from the collection.
            </param>
    </member>
    <member name="M:NationalInstruments.UI.IntensityPlotCollection.RemoveAt(System.Int32)">
      <summary>
            Removes the item at the specified index.
            </summary>
      <param name="index">
            The zero-based index of the item to remove.
            </param>
      <exception cref="T:System.ArgumentOutOfRangeException">index (parameter) is less than zero.
            
            -or-
            

index (parameter) is greater than or equal to Count.
            


            -or-
            index (parameter) is greater than or equal to Count.
            </exception>
    </member>
    <member name="P:NationalInstruments.UI.IntensityPlotCollection.Item(System.Int32)">
      <summary>
            Gets or sets the IntensityPlot at the specified index. 
            </summary>
      <param name="index">
            The zero-based index of the entry to locate in the collection.
            </param>
      <exception cref="T:System.ArgumentNullException">
            	The value is null.
            </exception>
      <exception cref="T:System.NotSupportedException">
            		The value has been disposed.
            
            -or-
            
            		The value is in another IntensityPlotCollection.
            
            -or-
            
            		The value is already in this collection.
            </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">index (parameter) is less than zero.
            
            -or-
            

index (parameter) is greater than Count.
            


            -or-
            index (parameter) is greater than Count.
            </exception>
    </member>
    <member name="P:NationalInstruments.UI.IntensityPlotCollection.Count">
      <summary>
            Gets the number of elements in the IntensityPlotCollection.
            </summary>
    </member>
    <member name="P:NationalInstruments.UI.IntensityPlotCollection.IsSynchronized">
      <summary>
            Gets a value indicating whether access to the collection is synchronized
            (thread-safe).
            </summary>
    </member>
    <member name="P:NationalInstruments.UI.IntensityPlotCollection.IsFixedSize">
      <summary>
            Gets a value indicating whether the collection has a fixed size.
            </summary>
    </member>
    <member name="P:NationalInstruments.UI.IntensityPlotCollection.IsReadOnly">
      <summary>
            Gets a value indicating whether the collection is read-only.
            </summary>
    </member>
    <member name="P:NationalInstruments.UI.IntensityPlotCollection.SyncRoot">
      <summary>
            Gets an object that can be used to synchronize access to the collection.
            </summary>
    </member>
    <member name="T:NationalInstruments.UI.FormatString">
      <summary>
            Represents the format specifier and format provider to use to create a formatted string for a numeric value.
            </summary>
    </member>
    <member name="M:NationalInstruments.UI.FormatString.#ctor">
      <summary>
            Initializes a new instance of the FormatString class.
            </summary>
    </member>
    <member name="M:NationalInstruments.UI.FormatString.#ctor(System.IFormatProvider,NationalInstruments.UI.FormatStringMode,System.String)">
      <summary>
            Initializes a new instance of the FormatString class with
            the specified format provider, format specifier, and format mode.
            </summary>
      <param name="provider">
            An IFormatProvider that supplies culture-specific formatting information.
            </param>
      <param name="format">
            A string that contains a standard or custom format specifier.
            </param>
      <param name="mode">
            A FormatStringMode that specifies the format provider to use with 
            format (parameter) to format a value.
            </param>
      <exception cref="T:System.FormatException">
            The format (parameter) is invalid.
            </exception>
    </member>
    <member name="M:NationalInstruments.UI.FormatString.#ctor(NationalInstruments.UI.FormatStringMode,System.String)">
      <summary>
            Initializes a new instance of the FormatString class with
            the specified format specifier and format mode.
            </summary>
      <param name="format">
            A string that contains a standard or custom format specifier.
            </param>
      <param name="mode">
            A FormatStringMode that specifies the format provider to use with 
            format (parameter) to format a value.
            </param>
      <exception cref="T:System.FormatException">
            The format (parameter) is invalid.
            </exception>
    </member>
    <member name="M:NationalInstruments.UI.FormatString.ToString">
      <summary>
            Returns a string representation of the object.
            </summary>
      <returns>
            A string representation of the object.
            </returns>
    </member>
    <member name="M:NationalInstruments.UI.FormatString.Equals(System.Object)">
      <summary>
            Returns a value indicating if this instance is equal to the specified
            FormatString.
            </summary>
      <param name="obj">
            The FormatString to compare with this instance.
            </param>
      <returns>true if obj (parameter) is a FormatString
            that is equal to this instance.
            </returns>
    </member>
    <member name="M:NationalInstruments.UI.FormatString.GetHashCode">
      <summary>
            Returns a hash code for this object.
            </summary>
      <returns>
            A 32-bit signed integer hash code.
            </returns>
    </member>
    <member name="M:NationalInstruments.UI.FormatString.FormatDouble(System.Double)">
      <summary>
            Formats a double value with the specified Mode
            and Format.
            </summary>
      <param name="value">
            The Double value to format.
            </param>
      <returns>
            The string representation of value (parameter) as specified by the
            Mode and
            Format.
            </returns>
    </member>
    <member name="P:NationalInstruments.UI.FormatString.Mode">
      <summary>
            Gets a value that indicates the format provider to use with the format specifier.
            </summary>
    </member>
    <member name="P:NationalInstruments.UI.FormatString.Format">
      <summary>
            Gets a string that contains a standard or custom format specifier to use to format a value.
            </summary>
    </member>
    <member name="T:NationalInstruments.UI.DigitalWaveformSampleStyleDrawArgs">
      <summary>
            Provides data for drawing digital waveform samples with the DigitalWaveformSampleStyle class.
            </summary>
    </member>
    <member name="M:NationalInstruments.UI.DigitalWaveformSampleStyleDrawArgs.#ctor(System.Drawing.Graphics,System.Drawing.Rectangle,System.Drawing.Rectangle,NationalInstruments.DigitalWaveformSample,System.Int32,NationalInstruments.UI.DigitalWaveformPlot)">
      <summary>
            Initializes a new instance of the DigitalWaveformSampleStyleDrawArgs class with the specified graphics,
            state bounds, label bounds, sample, sample count, and waveform plot.
            </summary>
      <param name="graphics">
            The Graphics used to draw the style.
            </param>
      <param name="stateBounds">
            The Rectangle that represents the bounds in which to draw the state.
            </param>
      <param name="labelBounds">
            The Rectangle that represents the bounds in which to draw the label.
            </param>
      <param name="sample">
            The DigitalWaveformSample containing sample information.
            </param>
      <param name="sampleCount">
            The number of samples.
            </param>
      <param name="waveformPlot">
            The DigitalWaveformPlot that represents the waveform plot being drawn.
            </param>
      <exception cref="T:System.ArgumentNullException">sample (parameter) is null.
            
            -or-
            waveformPlot (parameter) is null.
            </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">sampleCount (parameter) is less than or equal to zero.
            </exception>
    </member>
    <member name="P:NationalInstruments.UI.DigitalWaveformSampleStyleDrawArgs.WaveformPlot">
      <summary>
            Gets the DigitalWaveformPlot that is being drawn.
            </summary>
    </member>
    <member name="T:NationalInstruments.UI.DigitalAxisDisplayMode">
      <summary>
            Specifies how labels are displayed in the axis for the waveform samples.
            </summary>
    </member>
    <member name="F:NationalInstruments.UI.DigitalAxisDisplayMode.Time">
      <summary>
            The digital axis is displayed using increments of time.
            </summary>
    </member>
    <member name="F:NationalInstruments.UI.DigitalAxisDisplayMode.Samples">
      <summary>
            The digital axis is displayed using samples.
            </summary>
    </member>
    <member name="T:NationalInstruments.UI.ComplexXAxisEventArgs">
      <summary>
            Provides data for the 
            XAxisRangeChanged event.
            </summary>
    </member>
    <member name="M:NationalInstruments.UI.ComplexXAxisEventArgs.#ctor(NationalInstruments.UI.ComplexXAxis)">
      <summary>
            Initializes a new instance of the ComplexXAxisEventArgs class
            with the specified complex x-axis.
            </summary>
      <param name="complexXAxis">
            The ComplexXAxis on which the range changed event occurred.
            </param>
      <exception cref="T:System.ArgumentNullException">complexXAxis (parameter) is null.
            </exception>
    </member>
    <member name="M:NationalInstruments.UI.ComplexXAxisEventArgs.#ctor(NationalInstruments.UI.ComplexXAxis,NationalInstruments.UI.GraphAction)">
      <summary>
            Initializes a new instance of the ComplexXAxisEventArgs class
            with the specified complex x-axis and the action on the graph.
            </summary>
      <param name="complexXAxis">
            The ComplexXAxis on which the range changed event occurred.
            </param>
      <param name="action">
            The GraphAction that caused the range changed event.
            </param>
      <exception cref="T:System.ArgumentNullException">complexXAxis (parameter) is null.
            </exception>
    </member>
    <member name="M:NationalInstruments.UI.ComplexXAxisEventArgs.ToString">
      <summary>
            Returns a string representation of the object.
            </summary>
      <returns>
            A string representation of the object.
            </returns>
    </member>
    <member name="P:NationalInstruments.UI.ComplexXAxisEventArgs.XAxis">
      <summary>
            Gets the x-axis on which the range changed event occurred.
            </summary>
    </member>
    <member name="P:NationalInstruments.UI.ComplexXAxisEventArgs.Action">
      <summary>
            Gets the action which raised the range changed event on the complex x-axis.
            </summary>
    </member>
    <member name="T:NationalInstruments.UI.ColorMapEntry">
      <summary>
            Represents the value and color pairs on an intensity graph.
            </summary>
    </member>
    <member name="M:NationalInstruments.UI.ColorMapEntry.#ctor(System.Double,System.Drawing.Color)">
      <summary>
            Initializes a new instance of ColorMapEntry.
            </summary>
      <param name="value">
            The value of the new ColorMapEntry.
            </param>
      <param name="color">
            The Color of the new ColorMapEntry.
            </param>
      <exception cref="T:System.ArgumentException">value (parameter) is NegativeInfinity or PositiveInfinity or NaN.
            </exception>
    </member>
    <member name="P:NationalInstruments.UI.ColorMapEntry.Value">
      <summary>
            Gets the value of the color map entry on the intensity graph.
            </summary>
    </member>
    <member name="P:NationalInstruments.UI.ColorMapEntry.Color">
      <summary>
            Gets the color of the color map entry on an intensity graph.
            </summary>
    </member>
    <member name="T:NationalInstruments.UI.ColorScaleEventHandler">
      <summary>
            Represents the method that handles the 
            ColorScaleRangeChanged event.
            </summary>
      <param name="sender">
            The source of the event.
            </param>
      <param name="e">
            A ColorScaleEventArgs that contains the event
            data.
            </param>
    </member>
    <member name="T:NationalInstruments.UI.BeforeDrawMagnitudeCircleAnnotationEventArgs">
      <summary>
            Provides data for events that occur before the range annotation draws.
            </summary>
    </member>
    <member name="T:NationalInstruments.UI.BeforeDrawEventArgs">
      <summary>
            Provides data for custom draw events that occur before a control or control sub-object is drawn.
            </summary>
    </member>
    <member name="M:NationalInstruments.UI.BeforeDrawEventArgs.#ctor(System.Drawing.Graphics,System.Drawing.Rectangle,System.Boolean)">
      <summary>
            Initializes a new instance of the BeforeDrawEventArgs
            class with the specified graphics, bounds, and cancel value.
            </summary>
      <param name="graphics">
            The Graphics that is used to draw the item.
            </param>
      <param name="bounds">
            The Rectangle that represents the bounds in which to draw.
            </param>
      <param name="cancel">
            A value that indicates if the event is cancelled.
            </param>
    </member>
    <member name="M:NationalInstruments.UI.BeforeDrawEventArgs.ToString">
      <summary>
            Returns a string representation of the object.
            </summary>
      <returns>
            A string representation of the object.
            </returns>
    </member>
    <member name="P:NationalInstruments.UI.BeforeDrawEventArgs.Graphics">
      <summary>
            Gets the graphics used to draw the item.
            </summary>
    </member>
    <member name="P:NationalInstruments.UI.BeforeDrawEventArgs.Bounds">
      <summary>
            Gets the rectangle in which to draw.
            </summary>
    </member>
    <member name="M:NationalInstruments.UI.BeforeDrawMagnitudeCircleAnnotationEventArgs.#ctor(System.Drawing.Graphics,System.Drawing.Rectangle,System.Boolean,NationalInstruments.UI.MagnitudeCircleAnnotation,NationalInstruments.UI.MagnitudeCircleAnnotationPart,System.Drawing.PointF,System.Drawing.PointF,System.Drawing.PointF,System.Drawing.Size,System.Single)">
      <summary>
            Initializes a new instance of BeforeDrawMagnitudeCircleAnnotationEventArgs 
            with the specified graphics, bounds, annotation, annotation part, arrow head point, arrow tail point, 
            caption point, caption size, and caption angle.
            </summary>
      <param name="graphics">
            The Graphics used to draw the item.
            </param>
      <param name="bounds">
            The Rectangle that represents the bounds in which to draw.
            </param>
      <param name="cancel">
            A value that indicates if the event is cancelled.
            </param>
      <param name="annotation">
            The MagnitudeCircleAnnotation for which the event is occurring.
            </param>
      <param name="annotationPart">
            The MagnitudeCircleAnnotationPart of the annotation to draw.
            </param>
      <param name="arrowHeadPoint">
            The Point at which to draw the arrow head.
            </param>
      <param name="arrowTailPoint">
            The Point at which the arrow tail is located.
            </param>
      <param name="captionPoint">
            The Point at which to draw the caption.
            </param>
      <param name="captionSize">
            The Size of the Rectangle in which to draw the caption.
            </param>
      <param name="captionAngle">
            The angle at which to draw the caption.
            </param>
      <exception cref="T:System.ArgumentNullException">annotation (parameter) is null.
            	-or-graphics (parameter) is null.
            	</exception>
    </member>
    <member name="P:NationalInstruments.UI.BeforeDrawMagnitudeCircleAnnotationEventArgs.Annotation">
      <summary>
            Gets the ComplexPointAnnotation to draw.
            </summary>
    </member>
    <member name="P:NationalInstruments.UI.BeforeDrawMagnitudeCircleAnnotationEventArgs.Part">
      <summary>
            Gets the part of the annotation to draw.
            </summary>
    </member>
    <member name="P:NationalInstruments.UI.BeforeDrawMagnitudeCircleAnnotationEventArgs.CaptionSize">
      <summary>
            Gets the size of the rectangle in which to draw the caption.
            </summary>
    </member>
    <member name="P:NationalInstruments.UI.BeforeDrawMagnitudeCircleAnnotationEventArgs.CaptionAngle">
      <summary>
            Gets the angle at which to draw the caption.
            </summary>
    </member>
    <member name="P:NationalInstruments.UI.BeforeDrawMagnitudeCircleAnnotationEventArgs.ArrowHeadPoint">
      <summary>
            Gets the point at which to draw the arrow head.
            </summary>
    </member>
    <member name="P:NationalInstruments.UI.BeforeDrawMagnitudeCircleAnnotationEventArgs.ArrowTailPoint">
      <summary>
            Gets the point at which the arrow tail is located.
            </summary>
    </member>
    <member name="P:NationalInstruments.UI.BeforeDrawMagnitudeCircleAnnotationEventArgs.CaptionPoint">
      <summary>
            Gets the point at which to draw the caption.
            </summary>
    </member>
    <member name="T:NationalInstruments.UI.AfterDrawEventHandler">
      <summary>
            Represents the method that handles custom draw events that occur after a control or control sub-object is drawn.
            </summary>
      <param name="sender">
            The source of the event.
            </param>
      <param name="e">
            An AfterDrawEventArgs that contains the event data.
            </param>
    </member>
    <member name="T:NationalInstruments.UI.XYGraphHitTestInfo">
      <summary>
            Specifies the parts of an x-y graph control that can be hit-tested.
            </summary>
    </member>
    <member name="F:NationalInstruments.UI.XYGraphHitTestInfo.None">
      <summary>
            The portion of an x-y graph outside the axes, cursors, plots, and annotations.
            </summary>
    </member>
    <member name="F:NationalInstruments.UI.XYGraphHitTestInfo.Plot">
      <summary>
            The plot of an x-y graph.
            </summary>
    </member>
    <member name="F:NationalInstruments.UI.XYGraphHitTestInfo.XAxis">
      <summary>
            The x-axis of an x-y graph.
            </summary>
    </member>
    <member name="F:NationalInstruments.UI.XYGraphHitTestInfo.YAxis">
      <summary>
            The y-axis of an x-y graph.
            </summary>
    </member>
    <member name="F:NationalInstruments.UI.XYGraphHitTestInfo.Cursor">
      <summary>
            The cursor of an x-y graph.
            </summary>
    </member>
    <member name="F:NationalInstruments.UI.XYGraphHitTestInfo.Annotation">
      <summary>
            The annotation of an x-y graph.
            </summary>
    </member>
    <member name="F:NationalInstruments.UI.XYGraphHitTestInfo.PlotArea">
      <summary>
            The plot area of an x-y graph.
            </summary>
    </member>
    <member name="F:NationalInstruments.UI.XYGraphHitTestInfo.ErrorBand">
      <summary>
            The error band of an x-y graph.
            </summary>
    </member>
    <member name="T:NationalInstruments.UI.NumericCoercionMode">
      <summary>
            Provides an abstract base class for specifying the algorithm used
            to coerce a value and also provides a list of pre-defined coercion modes.
            </summary>
    </member>
    <member name="M:NationalInstruments.UI.NumericCoercionMode.#ctor">
      <summary>
            Initializes a new instance of the NumericCoercionMode class.
            </summary>
    </member>
    <member name="M:NationalInstruments.UI.NumericCoercionMode.GetPreviousValue(NationalInstruments.UI.INumericControl,NationalInstruments.UI.NumericCoercionModeArgs)">
      <summary>
            Gets the previous value in the sequence of coerced values.
            </summary>
      <param name="context">
            An INumericControl implementation that
            specifies the context in which GetPreviousValue
            is called.
            </param>
      <param name="args">
            A NumericCoercionModeArgs that contains
            the coercion data.
            </param>
      <returns>
            A value representing the previous value in the sequence of coerced values.
            
            When implementing a derived class of NumericCoercionMode,
            return the pervious value in the sequence of coerced values in your coercion mode. 
            GetPreviousValue
            does not need to take into consideration the bounds of the valid range of values.
            	</returns>
    </member>
    <member name="M:NationalInstruments.UI.NumericCoercionMode.GetNextValue(NationalInstruments.UI.INumericControl,NationalInstruments.UI.NumericCoercionModeArgs)">
      <summary>
            Gets the next value in the sequence of coerced values.
            </summary>
      <param name="context">
            An INumericControl implementation that
            specifies the context in which GetNextValue
            is called.
            </param>
      <param name="args">
            A NumericCoercionModeArgs that contains
            the coercion data.
            </param>
      <returns>
            A value representing the next value in the sequence of coerced values.
            
            When implementing a derived class of NumericCoercionMode,
            return the next value in the sequence of coerced values in your coercion mode. 
            GetNextValue
            does not need to take into consideration the bounds of the valid range of values.
            	</returns>
    </member>
    <member name="M:NationalInstruments.UI.NumericCoercionMode.CoerceValue(NationalInstruments.UI.INumericControl,NationalInstruments.UI.NumericCoercionModeArgs)">
      <summary>
            Coerces the specified value with respect to the specified context.
            </summary>
      <param name="context">
            An INumericControl implementation that
            specifies the context in which CoerceValue
            is called.
            </param>
      <param name="args">
            A NumericCoercionModeArgs that contains
            the coercion data.
            </param>
      <returns>
            A value representing the result of applying the coercion to the specified value 
            with respect to the specified context.
            
            When implementing a derived class of NumericCoercionMode,
            return a value that is within the range of valid coerced values in your coercion mode.
            	</returns>
    </member>
    <member name="P:NationalInstruments.UI.NumericCoercionMode.UnderlyingType">
      <summary>
            Gets the underlying type of an EnumObject value.
            </summary>
    </member>
    <member name="P:NationalInstruments.UI.NumericCoercionMode.None">
      <summary>
            Gets a value indicating that no coercion is applied.
            </summary>
    </member>
    <member name="P:NationalInstruments.UI.NumericCoercionMode.ToInterval">
      <summary>
            Gets a coercion mode that coerces values to discrete intervals.
            </summary>
    </member>
    <member name="P:NationalInstruments.UI.NumericCoercionMode.ToDivisions">
      <summary>
            Gets a coercion mode that coerces values to the divisions visible on
            a control.
            </summary>
    </member>
    <member name="T:NationalInstruments.UI.LinearNumericPointerStyleDrawArgs">
      <summary>
            Provides the data to draw a LinearNumericPointerStyle.
            </summary>
    </member>
    <member name="M:NationalInstruments.UI.LinearNumericPointerStyleDrawArgs.#ctor(System.Drawing.Graphics,System.Drawing.Rectangle)">
      <summary>
            Initializes a new instance of the LinearNumericPointerStyleDrawArgs class with the specified
            graphics and bounds.
            </summary>
      <param name="graphics">
            The Graphics with which to draw.
            </param>
      <param name="bounds">
            The Rectangle in which the LinearNumericPointerStyle is drawn.
            </param>
      <exception cref="T:System.ArgumentNullException">graphics (parameter)	is null.
            </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
            The	Width of bounds (parameter) is less than zero.
            
            -or-
            
            The	Height of bounds (parameter) is less than zero.
            </exception>
    </member>
    <member name="T:NationalInstruments.UI.LegendHitTestInfo">
      <summary>
            Specifies the parts of a legend control that can be hit-tested.
            </summary>
    </member>
    <member name="F:NationalInstruments.UI.LegendHitTestInfo.None">
      <summary>
            The portion of a legend outside the items and descriptions.
            </summary>
    </member>
    <member name="F:NationalInstruments.UI.LegendHitTestInfo.Item">
      <summary>
            An item part of a legend.
            </summary>
    </member>
    <member name="F:NationalInstruments.UI.LegendHitTestInfo.Text">
      <summary>
            A text part of the legend.
            </summary>
    </member>
    <member name="F:NationalInstruments.UI.LegendHitTestInfo.HorizontalScrollBar">
      <summary>
            The horizontal scroll bar of a legend.
            </summary>
    </member>
    <member name="F:NationalInstruments.UI.LegendHitTestInfo.VerticalScrollBar">
      <summary>
            The vertical scroll bar of a legend.
            </summary>
    </member>
    <member name="T:NationalInstruments.UI.ImageAlignment">
      <summary>
            Specifies the alignment of an image within an enclosed bounds.
            </summary>
    </member>
    <member name="F:NationalInstruments.UI.ImageAlignment.Center">
      <summary>
            The image is centered within the bounds.
            </summary>
    </member>
    <member name="F:NationalInstruments.UI.ImageAlignment.Tile">
      <summary>
            The image is repeated within the bounds.
            </summary>
    </member>
    <member name="F:NationalInstruments.UI.ImageAlignment.Stretch">
      <summary>
            The image is stretched to fit the bounds.
            </summary>
    </member>
    <member name="T:NationalInstruments.UI.IBoolean">
      <summary>
            Defines the interface for all Boolean controls.
            </summary>
    </member>
    <member name="P:NationalInstruments.UI.IBoolean.OffColor">
      <summary>
            Gets or sets the off color of the Boolean control.
            </summary>
      <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
    </member>
    <member name="P:NationalInstruments.UI.IBoolean.OnColor">
      <summary>
            Gets or sets the on color of the Boolean control.
            </summary>
      <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
    </member>
    <member name="P:NationalInstruments.UI.IBoolean.Value">
      <summary>
            Gets or sets the value of the Boolean control.
            </summary>
      <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
    </member>
    <member name="E:NationalInstruments.UI.IBoolean.ValueChanged">
      <summary>
            Occurs after the Value changes.
            </summary>
      <exception cref="T:System.ObjectDisposedException">
            An event handler is added after the object has been disposed.
            </exception>
    </member>
    <member name="E:NationalInstruments.UI.IBoolean.StateChanging">
      <summary>
            Occurs before the value of Value changes, allowing for the change event to be canceled.
            </summary>
      <exception cref="T:System.ObjectDisposedException">
            An event handler is added after the object has been disposed.
            </exception>
    </member>
    <member name="E:NationalInstruments.UI.IBoolean.StateChanged">
      <summary>
            Occurs after the value of Value has changed.
            </summary>
      <exception cref="T:System.ObjectDisposedException">
            An event handler is added after the object has been disposed.
            </exception>
    </member>
    <member name="T:NationalInstruments.UI.DigitalWaveformSampleFormat">
      <summary>
            Provides an abstract base class for specifying a format for digital waveform samples 
            and also provides a list of pre-defined formats.
            </summary>
    </member>
    <member name="M:NationalInstruments.UI.DigitalWaveformSampleFormat.#ctor">
      <summary>
            Initializes a new instance of the DigitalWaveformSampleFormat class.
            </summary>
    </member>
    <member name="M:NationalInstruments.UI.DigitalWaveformSampleFormat.FormatSample(System.Object,NationalInstruments.DigitalWaveformSample)">
      <summary>
            Returns a String representation of a DigitalWaveformSample.
            </summary>
      <param name="context">
            An Object with additional context information.
            </param>
      <param name="sample">
            A DigitalWaveformSample that contains information
            about the digital sample.
            </param>
      <returns>
            A String that is used for the label.
            If null is returned, a NotSupportedException
            is thrown at the time this method is called.
            </returns>
    </member>
    <member name="P:NationalInstruments.UI.DigitalWaveformSampleFormat.UnderlyingType">
      <summary>
            Gets the underlying type of an EnumObject value.
            </summary>
    </member>
    <member name="P:NationalInstruments.UI.DigitalWaveformSampleFormat.Hexadecimal">
      <summary>
            Gets a value that formats a digital waveform sample into a hexadecimal string representation.
            </summary>
    </member>
    <member name="P:NationalInstruments.UI.DigitalWaveformSampleFormat.Octal">
      <summary>
            Gets a value that formats a digital waveform sample into an octal string representation.
            </summary>
    </member>
    <member name="P:NationalInstruments.UI.DigitalWaveformSampleFormat.Decimal">
      <summary>
            Gets a value that formats a digital waveform sample into a decimal string representation.
            </summary>
    </member>
    <member name="P:NationalInstruments.UI.DigitalWaveformSampleFormat.Binary">
      <summary>
            Gets a value that formats a digital waveform sample into a binary string representation.
            </summary>
    </member>
    <member name="P:NationalInstruments.UI.DigitalWaveformSampleFormat.Ascii">
      <summary>
            Gets a value that formats a digital waveform sample into an ASCII string representation.
            </summary>
    </member>
    <member name="P:NationalInstruments.UI.DigitalWaveformSampleFormat.None">
      <summary>
            Gets a value that formats a digital waveform sample into an empty string representation.
            </summary>
    </member>
    <member name="T:NationalInstruments.UI.DigitalStateTransitionStyle">
      <summary>
            Provides an abstract base class for specifying how to connect neighboring states of a digital signal together 
            and also provides a list of pre-defined transition styles.
            </summary>
    </member>
    <member name="M:NationalInstruments.UI.DigitalStateTransitionStyle.#ctor">
      <summary>
            Initializes a new instance of the DigitalStateTransitionStyle class.
            </summary>
    </member>
    <member name="M:NationalInstruments.UI.DigitalStateTransitionStyle.Draw(System.Object,NationalInstruments.UI.DigitalStateTransitionStyleDrawArgs)">
      <summary>
            Draws the transition of digital states with the specified DigitalStateTransitionStyleDrawArgs.
            </summary>
      <param name="context">
            An Object that specifies the context in which Draw is called.
            </param>
      <param name="args">
            A DigitalStateTransitionStyleDrawArgs that contains
            the drawing data.
            </param>
      <exception cref="T:System.ArgumentNullException">args (parameter) is null.
            </exception>
    </member>
    <member name="P:NationalInstruments.UI.DigitalStateTransitionStyle.TransitionWidth">
      <summary>
            Gets the width between neighboring states of the digital signal.
            </summary>
      <exception cref="T:System.ArgumentOutOfRangeException">
            The returned value is less than zero.
            </exception>
    </member>
    <member name="P:NationalInstruments.UI.DigitalStateTransitionStyle.UnderlyingType">
      <summary>
            Gets the underlying type of an EnumObject value.
            </summary>
    </member>
    <member name="P:NationalInstruments.UI.DigitalStateTransitionStyle.StraightEdge">
      <summary>
            Gets a style that draws the transition of digital states using straight edges.
            </summary>
    </member>
    <member name="T:NationalInstruments.UI.DigitalPlotLabelModeArgs">
      <summary>
            Provides data for determining a digital plot label. 
            </summary>
    </member>
    <member name="M:NationalInstruments.UI.DigitalPlotLabelModeArgs.#ctor(NationalInstruments.DigitalWaveform,System.Int32)">
      <summary>
            Initializes a new instance of the DigitalPlotLabelModeArgs with the specified
            waveform and waveform index.
            </summary>
      <param name="waveform">
            The DigitalWaveform.
            </param>
      <param name="waveformIndex">
            The DigitalWaveform index.
            </param>
      <exception cref="T:System.ArgumentNullException">waveform (parameter) is null.
            </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">waveformIndex (parameter) is less than zero.
            </exception>
    </member>
    <member name="M:NationalInstruments.UI.DigitalPlotLabelModeArgs.#ctor(NationalInstruments.DigitalWaveform,System.Int32,System.Int32)">
      <summary>
            Initializes a new instance of the DigitalPlotLabelModeArgs with the specified
            waveform, waveform index, and signal index.
            </summary>
      <param name="waveform">
            The DigitalWaveform.
            </param>
      <param name="waveformIndex">
            The DigitalWaveform index.
            </param>
      <param name="signalIndex">
            The DigitalWaveformSignal index.
            </param>
      <exception cref="T:System.ArgumentNullException">waveform (parameter) is null.
            </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">waveformIndex (parameter) is less than zero.
            
            -or-
            signalIndex (parameter) is less than -1.
            </exception>
    </member>
    <member name="P:NationalInstruments.UI.DigitalPlotLabelModeArgs.Waveform">
      <summary>
            Gets the DigitalWaveform of the graph.
            </summary>
    </member>
    <member name="P:NationalInstruments.UI.DigitalPlotLabelModeArgs.WaveformIndex">
      <summary>
            The waveform index of either the waveform plot or the waveform index into the digital waveforms.
            </summary>
    </member>
    <member name="P:NationalInstruments.UI.DigitalPlotLabelModeArgs.SignalIndex">
      <summary>
            Gets the signal index of either the signal plot or the signal index into the digital waveform.
            </summary>
    </member>
    <member name="T:NationalInstruments.UI.DigitalLabelDisplayMode">
      <summary>
            Specifies how the label of a digital state or digital waveform sample is displayed.
            </summary>
    </member>
    <member name="F:NationalInstruments.UI.DigitalLabelDisplayMode.PerState">
      <summary>
            A label is displayed per state or per sample, regardless of equivalent neighboring values.
            </summary>
    </member>
    <member name="F:NationalInstruments.UI.DigitalLabelDisplayMode.PerTransition">
      <summary>
            Equivalent neighboring states or samples are combined to show only one label.
            </summary>
    </member>
    <member name="T:NationalInstruments.UI.ComplexYAxisCollection">
      <summary>
            Represents a strongly typed collection of ComplexYAxis objects.
            </summary>
    </member>
    <member name="M:NationalInstruments.UI.ComplexYAxisCollection.#ctor">
      <summary>
            Initializes a new instance of the ComplexYAxisCollection class.
            </summary>
    </member>
    <member name="M:NationalInstruments.UI.ComplexYAxisCollection.#ctor(NationalInstruments.UI.ComplexYAxis[])">
      <summary>
            Initializes a new instance of the ComplexYAxisCollection class
            from an array of ComplexYAxis objects.
            </summary>
      <param name="item">
            Array of ComplexYAxis objects to copy.
            </param>
      <exception cref="T:System.ArgumentNullException">item (parameter) is null.
            
            -or-
            
            An element in item (parameter) is null.
            </exception>
      <exception cref="T:System.NotSupportedException">
            		An element in item (parameter) has been disposed.
            
            -or-
            
            		An element in item (parameter) is in another ComplexYAxisCollection.
            
            -or-
            
            		An element in item (parameter) is already in this collection.
            </exception>
    </member>
    <member name="M:NationalInstruments.UI.ComplexYAxisCollection.#ctor(NationalInstruments.UI.ComplexYAxisCollection)">
      <summary>
            Initializes a new instance of the ComplexYAxisCollection class
            from an existing collection.
            </summary>
      <param name="item">
            The ComplexYAxisCollection to copy.
            </param>
      <exception cref="T:System.ArgumentNullException">item (parameter) is null.
            
            -or-
            
            An element in item (parameter) is null.
            </exception>
      <exception cref="T:System.NotSupportedException">
            		An element in item (parameter) has been disposed.
            
            -or-
            
            		An element in item (parameter) is in another ComplexYAxisCollection.
            
            -or-
            
            		An element in item (parameter) is already in this collection.
            </exception>
    </member>
    <member name="M:NationalInstruments.UI.ComplexYAxisCollection.ToString">
      <summary>
            Returns a string representation of the object.
            </summary>
      <returns>
            A string representation of the object.
            </returns>
    </member>
    <member name="M:NationalInstruments.UI.ComplexYAxisCollection.Add(NationalInstruments.UI.ComplexYAxis)">
      <summary>
            Adds an item to the end of the collection.
            </summary>
      <param name="item">
            Item to add to the collection.
            </param>
      <returns>
            The array index of the added item.
            </returns>
      <exception cref="T:System.ArgumentNullException">item (parameter) is null.
            </exception>
      <exception cref="T:System.NotSupportedException">item (parameter) has been disposed.
            
            -or-
            item (parameter) is in another ComplexYAxisCollection.
            
            -or-
            item (parameter) is already in this collection.
            </exception>
    </member>
    <member name="M:NationalInstruments.UI.ComplexYAxisCollection.AddRange(NationalInstruments.UI.ComplexYAxis[])">
      <summary>
            Adds an array of ComplexYAxis objects to the end of the collection.
            </summary>
      <param name="item">
            Array of ComplexYAxis objects to add to the collection.
            </param>
      <exception cref="T:System.ArgumentNullException">item (parameter) is null.
            
            -or-
            
            An element in item (parameter) is null.
            </exception>
      <exception cref="T:System.NotSupportedException">
            		An element in item (parameter) has been disposed.
            
            -or-
            
            		An element in item (parameter) is in another ComplexYAxisCollection.
            
            -or-
            
            		An element in item (parameter) is already in this collection.
            </exception>
    </member>
    <member name="M:NationalInstruments.UI.ComplexYAxisCollection.AddRange(NationalInstruments.UI.ComplexYAxisCollection)">
      <summary>
            Adds a collection of ComplexYAxis objects to the end of the collection.
            </summary>
      <param name="item">
            Collection of ComplexYAxis objects to add to the collection.
            </param>
      <exception cref="T:System.ArgumentNullException">item (parameter) is null.
            
            -or-
            
            An element in item (parameter) is null.
            </exception>
      <exception cref="T:System.NotSupportedException">
            		An element in item (parameter) has been disposed.
            
            -or-
            
            		An element in item (parameter) is in another ComplexYAxisCollection.
            
            -or-
            
            		An element in item (parameter) is already in this collection.
            </exception>
    </member>
    <member name="M:NationalInstruments.UI.ComplexYAxisCollection.Clear">
      <summary>
            Removes all items from the collection.
            </summary>
    </member>
    <member name="M:NationalInstruments.UI.ComplexYAxisCollection.Contains(NationalInstruments.UI.ComplexYAxis)">
      <summary>
            Determines if the specified element is in the collection.
            </summary>
      <param name="item">Item to locate in the collection.</param>
      <returns>true if the collection contains item (parameter).
            </returns>
    </member>
    <member name="M:NationalInstruments.UI.ComplexYAxisCollection.CopyTo(NationalInstruments.UI.ComplexYAxis[],System.Int32)">
      <summary>
            Copies the collection to an array or a portion of an array.
            </summary>
      <param name="array">
            Destination array for the collection.
            </param>
      <param name="index">
            The index in the target array at which you want to begin copying the collection to.
            </param>
      <exception cref="T:System.ArgumentNullException">array (parameter) is null.
            </exception>
      <exception cref="T:System.ArgumentException">array (parameter) is multidimensional.
            
            -or-
            index (parameter) is equal to or greater than the length of array (parameter).
            
            -or-
            
            The number of elements in the collection is greater than the available space between
            index (parameter) and the end of array (parameter).
            </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">index (parameter) is less than the lower bound of array (parameter).
            </exception>
    </member>
    <member name="M:NationalInstruments.UI.ComplexYAxisCollection.IndexOf(NationalInstruments.UI.ComplexYAxis)">
      <summary>
            Returns the zero-based index of the first occurrence of an item in the collection.
            </summary>
      <param name="item">
            Item to search for.
            </param>
      <returns>
            Index of the item. If the item is not found, returns -1.
            </returns>
    </member>
    <member name="M:NationalInstruments.UI.ComplexYAxisCollection.Insert(System.Int32,NationalInstruments.UI.ComplexYAxis)">
      <summary>
            Inserts an item into the collection at the specified index.
            </summary>
      <param name="index">
            Index to insert the item at.
            </param>
      <param name="item">
            Item to insert into the collection.
            </param>
      <exception cref="T:System.ArgumentNullException">item (parameter) is null.
            </exception>
      <exception cref="T:System.NotSupportedException">item (parameter) has been disposed.
            
            -or-
            item (parameter) is in another ComplexYAxisCollection.
            
            -or-
            item (parameter) is already in this collection.
            </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">index (parameter) is less than zero.
            
            -or-
            

index (parameter) is greater than Count.
            


            -or-
            index (parameter) is greater than Count.
            </exception>
    </member>
    <member name="M:NationalInstruments.UI.ComplexYAxisCollection.GetEnumerator">
      <summary>
            Returns an enumerator that you can use to iterate through the collection.
            </summary>
      <returns>
            The enumerator for the collection.
            </returns>
    </member>
    <member name="M:NationalInstruments.UI.ComplexYAxisCollection.Remove(NationalInstruments.UI.ComplexYAxis)">
      <summary>
            Removes the first occurrence of the specified item.
            </summary>
      <param name="item">
            Item to remove from the collection.
            </param>
    </member>
    <member name="M:NationalInstruments.UI.ComplexYAxisCollection.RemoveAt(System.Int32)">
      <summary>
            Removes the item at the specified index.
            </summary>
      <param name="index">
            The zero-based index of the item to remove.
            </param>
      <exception cref="T:System.ArgumentOutOfRangeException">index (parameter) is less than zero.
            
            -or-
            

index (parameter) is greater than or equal to Count.
            


            -or-
            index (parameter) is greater than or equal to Count.
            </exception>
    </member>
    <member name="P:NationalInstruments.UI.ComplexYAxisCollection.Item(System.Int32)">
      <summary>
            Gets or sets ComplexYAxis at the specified index. 
            </summary>
      <param name="index">
            The zero-based index of the entry to locate in the collection.
            </param>
      <exception cref="T:System.ArgumentNullException">
            	The value is null.
            </exception>
      <exception cref="T:System.NotSupportedException">
            		The value has been disposed.
            
            -or-
            
            		The value is in another ComplexYAxisCollection.
            
            -or-
            
            		The value is already in this collection.
            </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">index (parameter) is less than zero.
            
            -or-
            

index (parameter) is greater than Count.
            


            -or-
            index (parameter) is greater than Count.
            </exception>
    </member>
    <member name="P:NationalInstruments.UI.ComplexYAxisCollection.Count">
      <summary>
            Gets the number of elements in the ComplexYAxisCollection.
            </summary>
    </member>
    <member name="P:NationalInstruments.UI.ComplexYAxisCollection.IsSynchronized">
      <summary>
            Gets a value indicating whether access to the collection is synchronized
            (thread-safe).
            </summary>
    </member>
    <member name="P:NationalInstruments.UI.ComplexYAxisCollection.IsFixedSize">
      <summary>
            Gets a value indicating whether the collection has a fixed size.
            </summary>
    </member>
    <member name="P:NationalInstruments.UI.ComplexYAxisCollection.IsReadOnly">
      <summary>
            Gets a value indicating whether the collection is read-only.
            </summary>
    </member>
    <member name="P:NationalInstruments.UI.ComplexYAxisCollection.SyncRoot">
      <summary>
            Gets an object that can be used to synchronize access to the collection.
            </summary>
    </member>
    <member name="T:NationalInstruments.UI.ComplexPlotDataChangedEventArgs">
      <summary>
            Provides data for the PlotDataChanged event.
            </summary>
    </member>
    <member name="M:NationalInstruments.UI.ComplexPlotDataChangedEventArgs.#ctor(NationalInstruments.UI.ComplexPlot)">
      <summary>
            Initializes a new instance of the ComplexPlotDataChangedEventArgs class
            with the specified plot.
            </summary>
      <param name="plot">
            The ComplexPlot on which data is plotted.
            </param>
    </member>
    <member name="M:NationalInstruments.UI.ComplexPlotDataChangedEventArgs.ToString">
      <summary>
            Returns a string representation of the object.
            </summary>
      <returns>
            A string representation of the object.
            </returns>
    </member>
    <member name="P:NationalInstruments.UI.ComplexPlotDataChangedEventArgs.Plot">
      <summary>
            Gets the plot on which data is plotted.
            </summary>
    </member>
    <member name="T:NationalInstruments.UI.BeforeMoveComplexCursorEventHandler">
      <summary>
            Represents the method that handles events that occur before the cursor moves.
            </summary>
      <param name="sender">
            The source of the event.
            </param>
      <param name="e">
            A BeforeMoveComplexCursorEventArgs that contains the event data.
            </param>
    </member>
    <member name="T:NationalInstruments.UI.BeforeDrawLegendItemEventArgs">
      <summary>
            Provides data for the BeforeDrawItem event.
            </summary>
    </member>
    <member name="M:NationalInstruments.UI.BeforeDrawLegendItemEventArgs.#ctor(NationalInstruments.UI.LegendItem,System.Drawing.Graphics,System.Drawing.Rectangle,System.Boolean)">
      <summary>
            Initializes a new instance of the BeforeDrawLegendItemEventArgs
            class with the specified legend item, graphics, bounds, and cancel value.
            </summary>
      <param name="item">
            The LegendItem for which the event is occurring.
            </param>
      <param name="graphics">
            The Graphics used to draw the item.
            </param>
      <param name="bounds">
            The Rectangle that represents the bounds in which to draw.
            </param>
      <param name="cancel">
            A value that indicates if the event is cancelled.
            </param>
      <exception cref="T:System.ArgumentNullException">item (parameter) is null.
            	-or-graphics (parameter) is null.
            	</exception>
    </member>
    <member name="M:NationalInstruments.UI.BeforeDrawLegendItemEventArgs.ToString">
      <summary>
            Returns a string representation of the object.
            </summary>
      <returns>
            A string representation of the object.
            </returns>
    </member>
    <member name="P:NationalInstruments.UI.BeforeDrawLegendItemEventArgs.Item">
      <summary>
            Gets the LegendItem to draw.
            </summary>
    </member>
    <member name="P:NationalInstruments.UI.BeforeDrawLegendItemEventArgs.ItemBounds">
      <summary>
            Gets the bounds of the legend item.
            </summary>
    </member>
    <member name="T:NationalInstruments.UI.BeforeDrawIntensityCursorEventHandler">
      <summary>
            Represents the method that handles the events that occur before a cursor draws.
            </summary>
      <param name="sender">
            The source of the event.
            </param>
      <param name="e">
            A BeforeDrawIntensityCursorEventArgs that contains the event data.
            </param>
    </member>
    <member name="T:NationalInstruments.UI.BeforeDragComplexAnnotationCaptionEventHandler">
      <summary>
            Represents the method that handles the events that occur before an annotation caption is dragged.
            </summary>
      <param name="sender">
            The source of the event.
            </param>
      <param name="e">
            A BeforeDragComplexAnnotationCaptionEventArgs that contains the event data.
            </param>
    </member>
    <member name="T:NationalInstruments.UI.AnalogWaveformPlotDisplayMode">
      <summary> 
            Specifies whether the AnalogWaveform or AnalogWaveform&lt;T&gt;  is plotted against the samples or increments of time on the WaveformPlot.
            
            Specifies whether the AnalogWaveform&lt;T&gt;  is plotted against the samples or increments of time on the WaveformPlot.
             </summary>
    </member>
    <member name="F:NationalInstruments.UI.AnalogWaveformPlotDisplayMode.Samples">
      <summary>
            The analog waveform is plotted against the samples.
            </summary>
    </member>
    <member name="F:NationalInstruments.UI.AnalogWaveformPlotDisplayMode.Time">
      <summary>
            The analog waveform is plotted against increments of time.
            </summary>
    </member>
    <member name="T:NationalInstruments.UI.AfterMoveIntensityCursorEventHandler">
      <summary>
            Represents the method that handles the events that occur after a cursor moves.
            </summary>
      <param name="sender">
            The source of the event.
            </param>
      <param name="e">
            An AfterMoveIntensityCursorEventArgs that contains the event data.
            </param>
    </member>
    <member name="T:NationalInstruments.UI.XYCursorCollection">
      <summary>
            Represents a strongly typed collection of XYCursor objects.
            </summary>
    </member>
    <member name="M:NationalInstruments.UI.XYCursorCollection.#ctor">
      <summary>
            Initializes a new instance of the XYCursorCollection class.
            </summary>
    </member>
    <member name="M:NationalInstruments.UI.XYCursorCollection.#ctor(NationalInstruments.UI.XYCursor[])">
      <summary>
            Initializes a new instance of the XYCursorCollection class
            from an array of XYCursor objects.
            </summary>
      <param name="item">
            Array of XYCursor objects to copy.
            </param>
      <exception cref="T:System.ArgumentNullException">item (parameter) is null.
            
            -or-
            
            An element in item (parameter) is null.
            </exception>
      <exception cref="T:System.NotSupportedException">
            		An element in item (parameter) has been disposed.
            
            -or-
            
            		An element in item (parameter) is in another XYCursorCollection.
            
            -or-
            
            		An element in item (parameter) is already in this collection.
            </exception>
    </member>
    <member name="M:NationalInstruments.UI.XYCursorCollection.#ctor(NationalInstruments.UI.XYCursorCollection)">
      <summary>
            Initializes a new instance of the XYCursorCollection class
            from an existing collection.
            </summary>
      <param name="item">
            The XYCursorCollection to copy.
            </param>
      <exception cref="T:System.ArgumentNullException">item (parameter) is null.
            
            -or-
            
            An element in item (parameter) is null.
            </exception>
      <exception cref="T:System.NotSupportedException">
            		An element in item (parameter) has been disposed.
            
            -or-
            
            		An element in item (parameter) is in another XYCursorCollection.
            
            -or-
            
            		An element in item (parameter) is already in this collection.
            </exception>
    </member>
    <member name="M:NationalInstruments.UI.XYCursorCollection.ToString">
      <summary>
            Returns a string representation of the object.
            </summary>
      <returns>
            A string representation of the object.
            </returns>
    </member>
    <member name="M:NationalInstruments.UI.XYCursorCollection.Add(NationalInstruments.UI.XYCursor)">
      <summary>
            Adds an item to end of the collection.
            </summary>
      <param name="item">
            Item to add to the collection.
            </param>
      <returns>
            The array index of the added item.
            </returns>
      <exception cref="T:System.ArgumentNullException">item (parameter) is null.
            </exception>
      <exception cref="T:System.NotSupportedException">item (parameter) has been disposed.
            
            -or-
            item (parameter) is in another XYCursorCollection.
            
            -or-
            item (parameter) is already in this collection.
            </exception>
    </member>
    <member name="M:NationalInstruments.UI.XYCursorCollection.AddRange(NationalInstruments.UI.XYCursor[])">
      <summary>
            Adds an array of XYCursor objects to the end of the collection.
            </summary>
      <param name="item">
            Array of XYCursor objects to add to the collection.
            </param>
      <exception cref="T:System.ArgumentNullException">item (parameter) is null.
            
            -or-
            
            An element in item (parameter) is null.
            </exception>
      <exception cref="T:System.NotSupportedException">
            		An element in item (parameter) has been disposed.
            
            -or-
            
            		An element in item (parameter) is in another XYCursorCollection.
            
            -or-
            
            		An element in item (parameter) is already in this collection.
            </exception>
    </member>
    <member name="M:NationalInstruments.UI.XYCursorCollection.AddRange(NationalInstruments.UI.XYCursorCollection)">
      <summary>
            Adds a collection of XYCursor objects to the end of the collection.
            </summary>
      <param name="item">
            Collection of XYCursor objects to add to the collection.
            </param>
      <exception cref="T:System.ArgumentNullException">item (parameter) is null.
            
            -or-
            
            An element in item (parameter) is null.
            </exception>
      <exception cref="T:System.NotSupportedException">
            		An element in item (parameter) has been disposed.
            
            -or-
            
            		An element in item (parameter) is in another XYCursorCollection.
            
            -or-
            
            		An element in item (parameter) is already in this collection.
            </exception>
    </member>
    <member name="M:NationalInstruments.UI.XYCursorCollection.Clear">
      <summary>
            Removes all items from the collection.
            </summary>
    </member>
    <member name="M:NationalInstruments.UI.XYCursorCollection.Contains(NationalInstruments.UI.XYCursor)">
      <summary>
            Determines if the specified element is in the collection.
            </summary>
      <param name="item">Item to locate in the collection.</param>
      <returns>true if the collection contains item (parameter).
            </returns>
    </member>
    <member name="M:NationalInstruments.UI.XYCursorCollection.CopyTo(NationalInstruments.UI.XYCursor[],System.Int32)">
      <summary>
            Copies the collection to an array or a portion of an array.
            </summary>
      <param name="array">
            Destination array for the collection.
            </param>
      <param name="index">
            The index in the target array at which you want to begin copying the collection to.
            </param>
      <exception cref="T:System.ArgumentNullException">array (parameter) is null.
            </exception>
      <exception cref="T:System.ArgumentException">array (parameter) is multidimensional.
            
            - or -
            index (parameter) is equal to or greater than the length of array (parameter).
            
            -or-
            
            The number of elements in the collection is greater than the available space between
            index (parameter) and the end of array (parameter).
            </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">index (parameter) is less than the lower bound of array (parameter).
            </exception>
    </member>
    <member name="M:NationalInstruments.UI.XYCursorCollection.IndexOf(NationalInstruments.UI.XYCursor)">
      <summary>
            Returns the zero-based index of the first occurrence of an item in the collection.
            </summary>
      <param name="item">
            Item to search for.
            </param>
      <returns>
            Index of the item. If the item is not found, returns -1.
            </returns>
    </member>
    <member name="M:NationalInstruments.UI.XYCursorCollection.Insert(System.Int32,NationalInstruments.UI.XYCursor)">
      <summary>
            Inserts an item into the collection at the specified index.
            </summary>
      <param name="index">
            Index to insert the item at.
            </param>
      <param name="item">
            Item to insert into the collection.
            </param>
      <exception cref="T:System.ArgumentNullException">item (parameter) is null.
            </exception>
      <exception cref="T:System.NotSupportedException">item (parameter) has been disposed.
            
            -or-
            item (parameter) is in another XYCursorCollection.
            
            -or-
            item (parameter) is already in this collection.
            </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">index (parameter) is less than zero.
            
            -or-
            

index (parameter) is greater than Count.
            


            -or-
            index (parameter) is greater than Count.
            </exception>
    </member>
    <member name="M:NationalInstruments.UI.XYCursorCollection.GetEnumerator">
      <summary>
            Returns an enumerator that you can use to iterate through the collection.
            </summary>
      <returns>
            The enumerator for the collection.
            </returns>
    </member>
    <member name="M:NationalInstruments.UI.XYCursorCollection.Remove(NationalInstruments.UI.XYCursor)">
      <summary>
            Removes the first occurrence of the specified item.
            </summary>
      <param name="item">
            Item to remove from the collection.
            </param>
    </member>
    <member name="M:NationalInstruments.UI.XYCursorCollection.RemoveAt(System.Int32)">
      <summary>
            Removes the item at the specified index.
            </summary>
      <param name="index">
            The zero-based index of the item to remove.
            </param>
      <exception cref="T:System.ArgumentOutOfRangeException">index (parameter) is less than zero.
            
            -or-
            

index (parameter) is greater than or equal to Count.
            


            -or-
            index (parameter) is greater than or equal to Count.
            </exception>
    </member>
    <member name="P:NationalInstruments.UI.XYCursorCollection.Item(System.Int32)">
      <summary>
            Gets or sets XYCursor at the specified index. 
            </summary>
      <param name="index">
            The zero-based index of the entry to locate in the collection.
            </param>
      <exception cref="T:System.ArgumentNullException">
            	The value is null.
            </exception>
      <exception cref="T:System.NotSupportedException">
            		The value has been disposed.
            
            -or-
            
            		The value is in another XYCursorCollection.
            
            -or-
            
            		The value is already in this collection.
            </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">index (parameter) is less than zero.
            
            -or-
            

index (parameter) is greater than Count.
            


            -or-
            index (parameter) is greater than Count.
            </exception>
    </member>
    <member name="P:NationalInstruments.UI.XYCursorCollection.Count">
      <summary>
            Gets the number of elements in the XYCursorCollection.
            </summary>
    </member>
    <member name="P:NationalInstruments.UI.XYCursorCollection.IsSynchronized">
      <summary>
            Gets a value indicating whether access to the collection is synchronized
            (thread-safe).
            </summary>
    </member>
    <member name="P:NationalInstruments.UI.XYCursorCollection.IsFixedSize">
      <summary>
            Gets a value indicating whether the collection has a fixed size.
            </summary>
    </member>
    <member name="P:NationalInstruments.UI.XYCursorCollection.IsReadOnly">
      <summary>
            Gets a value indicating whether the collection is read-only.
            </summary>
    </member>
    <member name="P:NationalInstruments.UI.XYCursorCollection.SyncRoot">
      <summary>
            Gets an object that can be used to synchronize access to the collection.
            </summary>
    </member>
    <member name="T:NationalInstruments.UI.XAxisPosition">
      <summary>
            Specifies the position of an x-axis with respect to the plot area.
            </summary>
    </member>
    <member name="F:NationalInstruments.UI.XAxisPosition.Top">
      <summary>
            The x-axis is positioned at the top of the plot area.
            </summary>
    </member>
    <member name="F:NationalInstruments.UI.XAxisPosition.Bottom">
      <summary>
            The x-axis is positioned at the bottom of the plot area.
            </summary>
    </member>
    <member name="F:NationalInstruments.UI.XAxisPosition.TopBottom">
      <summary>
            The x-axis is positioned at the top and bottom of the plot area.
            </summary>
    </member>
    <member name="T:NationalInstruments.UI.VerticalScrollPosition">
      <summary>
            Specifies the position of a vertical scroll bar.
            </summary>
    </member>
    <member name="F:NationalInstruments.UI.VerticalScrollPosition.Left">
      <summary>
            Positions the scroll bar to the left of the plot area.
            </summary>
    </member>
    <member name="F:NationalInstruments.UI.VerticalScrollPosition.Right">
      <summary>
            Positions the scroll bar to the right of the plot area.
            </summary>
    </member>
    <member name="T:NationalInstruments.UI.ScaleRangeFillEventArgs">
      <summary>
            Provides data for the ValueEnterRange 
            and ValueLeaveRange events.
            </summary>
    </member>
    <member name="M:NationalInstruments.UI.ScaleRangeFillEventArgs.#ctor(System.Double,NationalInstruments.UI.ScaleRangeFill[],NationalInstruments.UI.Action)">
      <summary>
            Initializes a new instance of the ScaleRangeFillEventArgs
            class with the specified value, range fills, and the action used
            to change the value.
            </summary>
      <param name="value">
            The value of the control.
            </param>
      <param name="rangeFills">
            A ScaleRangeFill array containing
            the range fills whose range was entered or exited.
            </param>
      <param name="action">
            The Action that caused the event.
            </param>
      <exception cref="T:System.ArgumentNullException">rangeFills (parameter) is null.
            </exception>
      <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">action (parameter) is not one of the Action
            values.
            </exception>
    </member>
    <member name="M:NationalInstruments.UI.ScaleRangeFillEventArgs.GetScaleRangeFills">
      <summary>
            Gets the array of range fills whose range was entered or exited by the value.
            </summary>
      <returns>
            An array of ScaleRangeFill objects
            whose range was entered or exited by value.
            </returns>
    </member>
    <member name="M:NationalInstruments.UI.ScaleRangeFillEventArgs.ToString">
      <summary>
            Returns a string representation of the object.        
            </summary>
      <returns>
            A string representation of the object.
            </returns>
    </member>
    <member name="P:NationalInstruments.UI.ScaleRangeFillEventArgs.Value">
      <summary>
            Gets the value of the control.
            </summary>
    </member>
    <member name="P:NationalInstruments.UI.ScaleRangeFillEventArgs.ScaleRangeFill">
      <summary>
            Gets the range fill whose range was entered or exited by the value.
            </summary>
    </member>
    <member name="P:NationalInstruments.UI.ScaleRangeFillEventArgs.IsMultipleRangeAction">
      <summary>
            Gets a value indicating if the Value
            entered or exited multiple range fills.
            </summary>
    </member>
    <member name="T:NationalInstruments.UI.ScaleRangeFill">
      <summary>
            Represents a fill drawn over the range of a scale.
            </summary>
    </member>
    <member name="M:NationalInstruments.UI.ScaleRangeFill.#ctor">
      <summary>
            Initializes a new instance of the ScaleRangeFill class.
            </summary>
    </member>
    <member name="M:NationalInstruments.UI.ScaleRangeFill.#ctor(NationalInstruments.UI.Range)">
      <summary>
            Initializes a new instance of the ScaleRangeFill class
            with the specified range.
            </summary>
      <param name="range">The Range that represents the minimum and maximum values of the scale over which the fill is drawn.
            </param>
      <exception cref="T:System.ArgumentNullException">range (parameter) is null.
            </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">range (parameter) is Empty.
            </exception>
    </member>
    <member name="M:NationalInstruments.UI.ScaleRangeFill.#ctor(NationalInstruments.UI.Range,NationalInstruments.UI.ScaleRangeFillStyle)">
      <summary>
            Initializes a new instance of the ScaleRangeFill class
            with the specified range and the specified style.
            </summary>
      <param name="range">The Range that represents the minimum and maximum values.
            </param>
      <param name="style">A ScaleRangeFillStyle that represents the style used to draw the fill.</param>
      <exception cref="T:System.ArgumentNullException">range (parameter) is null.
            </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">range (parameter) is Empty.
            </exception>
    </member>
    <member name="M:NationalInstruments.UI.ScaleRangeFill.Clone">
      <summary>
            Creates a new object that is a deep copy of this instance.
            </summary>
      <returns>
            A new object that is a deep copy of this instance.
            </returns>
    </member>
    <member name="M:NationalInstruments.UI.ScaleRangeFill.ToString">
      <summary>
            Returns a string representation of the object.
            </summary>
      <returns>
            A string representation of the object.
            </returns>
    </member>
    <member name="M:NationalInstruments.UI.ScaleRangeFill.OnPropertyChanged(System.ComponentModel.PropertyChangedEventArgs)">
      <summary>
            Raises the PropertyChanged event.
            </summary>
      <param name="e">
            An PropertyChangedEventArgs that contains the event data.
            </param>
    </member>
    <member name="P:NationalInstruments.UI.ScaleRangeFill.Range">
      <summary>
            Gets or sets the range over which the fill is drawn.
            </summary>
      <exception cref="T:System.ArgumentNullException">
            The value is null.
            </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
            The value is Empty.
            </exception>
    </member>
    <member name="P:NationalInstruments.UI.ScaleRangeFill.Style">
      <summary>
            Gets or sets the style used to the draw the fill.
            </summary>
      <exception cref="T:System.ArgumentNullException">
            The value is null.
            </exception>
    </member>
    <member name="P:NationalInstruments.UI.ScaleRangeFill.Distance">
      <summary>
            Gets or sets a value indicating the distance of the fill from the base line of the scale.
            </summary>
      <exception cref="T:System.ArgumentOutOfRangeException">
            The value is NaN, NegativeInfinity, or
            PositiveInfinity.
            </exception>
    </member>
    <member name="P:NationalInstruments.UI.ScaleRangeFill.Width">
      <summary>
            Gets or sets a value indicating the width of the fill.
            </summary>
      <exception cref="T:System.ArgumentOutOfRangeException">
            The value is less than 0.
            
            -or-
            


            The value is NegativeInfinity or PositiveInfinity.
            


            -or-
            
            The value is NegativeInfinity or PositiveInfinity.
            </exception>
    </member>
    <member name="P:NationalInstruments.UI.ScaleRangeFill.Visible">
      <summary>
            Gets or sets a value indicating if the fill is displayed.
            </summary>
    </member>
    <member name="P:NationalInstruments.UI.ScaleRangeFill.Owner">
      <summary>
            Gets the control that this ScaleRangeFill belongs to.
            </summary>
    </member>
    <member name="E:NationalInstruments.UI.ScaleRangeFill.PropertyChanged">
      <summary>
            Occurs when the value of a property changes.
            </summary>
      <exception cref="T:System.ObjectDisposedException">
            An event handler is added after the object has been disposed.</exception>
    </member>
    <member name="T:NationalInstruments.UI.ScaleInteractionMode">
      <summary>
            Defines the set of user interactions that are possible within a scale.
            </summary>
    </member>
    <member name="F:NationalInstruments.UI.ScaleInteractionMode.None">
      <summary>
            No interaction.
            </summary>
    </member>
    <member name="F:NationalInstruments.UI.ScaleInteractionMode.EditRange">
      <summary>
            Interactively edit the minimum and maximum values of the scale at run time.
            </summary>
    </member>
    <member name="T:NationalInstruments.UI.Range">
      <summary>
            Represents an ordered pair of minimum and maximum values, such as the
            range of a scale or an axis.
            </summary>
    </member>
    <member name="F:NationalInstruments.UI.Range.Empty">
      <summary>
            Represents an empty Range.
            </summary>
    </member>
    <member name="F:NationalInstruments.UI.Range.All">
      <summary>
            Represents a range from NegativeInfinity to
            PositiveInfinity.
            </summary>
    </member>
    <member name="M:NationalInstruments.UI.Range.#ctor(System.Double,System.Double)">
      <summary>
            Initializes a new instance of the Range class
            with the specified minimum and maximum values.
            </summary>
      <param name="minimum">
            The minimum value of the range.
            </param>
      <param name="maximum">
            The maximum value of the range.
            </param>
      <exception cref="T:System.ArgumentException">minimum (parameter) is equal to maximum (parameter).
            </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">minimum (parameter) is greater than maximum (parameter).
            
            -or-
            

minimum (parameter) is PositiveInfinity
            or NaN.
            


            -or-
            

maximum (parameter) is NegativeInfinity
            or NaN.
            


            -or-
            minimum (parameter) is PositiveInfinity
            or NaN.
            
            -or-
            maximum (parameter) is NegativeInfinity
            or NaN.
            </exception>
    </member>
    <member name="M:NationalInstruments.UI.Range.#ctor(System.DateTime,System.DateTime)">
      <summary>
            Initializes a new instance of the Range class
            with the specified minimum and maximum DateTime values.
            </summary>
      <param name="minimum">
            The minimum DateTime value of the range.
            </param>
      <param name="maximum">
            The maximum DateTime value of the range.
            </param>
      <exception cref="T:System.ArgumentException">minimum (parameter) is equal to maximum (parameter).
            </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">minimum (parameter) is greater than maximum (parameter).
            </exception>
    </member>
    <member name="M:NationalInstruments.UI.Range.#ctor(System.DateTime,System.TimeSpan)">
      <summary>
            Initializes a new instance of the Range class
            with the specified minimum DateTime value and
            TimeSpan increment value.
            </summary>
      <param name="minimum">
            The minimum DateTime value of the range.
            </param>
      <param name="increment">
            The TimeSpan increment value to add to minimum (parameter).
            </param>
      <exception cref="T:System.ArgumentOutOfRangeException">increment (parameter) represents a non-positive TimeSpan.
            </exception>
    </member>
    <member name="M:NationalInstruments.UI.Range.GetHashCode">
      <summary>
            Returns a hash code for this object.
            </summary>
      <returns>
            A 32-bit signed integer hash code.
            </returns>
    </member>
    <member name="M:NationalInstruments.UI.Range.ToString">
      <summary>
            Returns a string representation of the object.
            </summary>
      <returns>
            A string representation of the object.
            </returns>
    </member>
    <member name="M:NationalInstruments.UI.Range.Equals(System.Object)">
      <summary>
            Returns a value indicating if this instance is equal to the specified Range.
            </summary>
      <param name="obj">
            The Range to compare with this
            instance.
            </param>
      <returns>true if obj (parameter) is a Range  that is equal 
            to this instance.
            </returns>
    </member>
    <member name="M:NationalInstruments.UI.Range.Equals(NationalInstruments.UI.Range)">
      <summary>
            Returns a value indicating if this instance is equal to the specified Range.
            </summary>
      <param name="range">
            A Range to compare with this instance.
            </param>
      <returns>true if range (parameter) is a Range  that is equal 
            to this instance.
            </returns>
    </member>
    <member name="M:NationalInstruments.UI.Range.Clone">
      <summary>
            Creates a new object that is an exact copy of this instance.
            </summary>
      <returns>
            A new object that is an exact copy of this instance.
            </returns>
    </member>
    <member name="M:NationalInstruments.UI.Range.Contains(NationalInstruments.UI.Range)">
      <summary>
            Determines if this Range entirely contains 
            the specified Range.
            </summary>
      <param name="range">
            The Range to compare with 
            this instance.
            </param>
      <returns>true if this Range entirely 
            contains range (parameter).
            </returns>
    </member>
    <member name="M:NationalInstruments.UI.Range.Contains(System.Double)">
      <summary>
            Determines if this Range contains 
            the specified value.
            </summary>
      <param name="value">
            The value to compare with this instance.
            </param>
      <returns>true if this Range 
            contains value (parameter).
            </returns>
    </member>
    <member name="M:NationalInstruments.UI.Range.Intersects(NationalInstruments.UI.Range)">
      <summary>
            Determines if this range intersects with the specified range.
            </summary>
      <param name="range">
            The Range to compare with this
            instance.
            </param>
      <returns>true if this Range intersects
            with range (parameter).
            </returns>
      <exception cref="T:System.ArgumentNullException">range (parameter) is null.
            </exception>
    </member>
    <member name="M:NationalInstruments.UI.Range.Union(NationalInstruments.UI.Range,NationalInstruments.UI.Range)">
      <summary>
            Gets a Range that represents the union of two ranges.
            </summary>
      <param name="range1">
            A Range.
            </param>
      <param name="range2">
            A Range.
            </param>
      <returns>
            A Range that represents the union of two ranges.
            </returns>
      <exception cref="T:System.ArgumentNullException">range1 (parameter) or range2 (parameter) is null.
            </exception>
    </member>
    <member name="M:NationalInstruments.UI.Range.op_Equality(NationalInstruments.UI.Range,NationalInstruments.UI.Range)">
      <summary>
            Returns whether two Range objects are equal.
            </summary>
      <param name="range1">
            A Range.
            </param>
      <param name="range2">
            A Range.
            </param>
      <returns>true if the values of range1 (parameter) and range2 (parameter) are equal. 
            </returns>
    </member>
    <member name="M:NationalInstruments.UI.Range.op_Inequality(NationalInstruments.UI.Range,NationalInstruments.UI.Range)">
      <summary>
            Returns whether two Range objects are 
            not equal.
            </summary>
      <param name="range1">
            A Range.
            </param>
      <param name="range2">
            A Range.
            </param>
      <returns>true if the values of range1 (parameter) and range2 (parameter) are not equal. 
            </returns>
    </member>
    <member name="M:NationalInstruments.UI.Range.Parse(System.String)">
      <summary>
            Converts the string representation of a range of values to its Range equivalent.
            </summary>
      <param name="value">
            A string containing the range to convert. The string must be a string returned by ToString or a string in the following format:
            [ws]Double,[ws]Double[ws], where [ws] is an optional series of white space characters,
            Double is a parseable Double value, and ',' is a culture-specific list separator symbol. The following strings are value (parameter) examples:  "0,10", "40,50", and "Range: Minimum=10,Maximum=100".
            </param>
      <returns>
            A Range equivalent to the string specified in 
            value (parameter).
            </returns>
      <exception cref="T:System.ArgumentNullException">value (parameter) is null.
            </exception>
      <exception cref="T:System.FormatException">value (parameter) is an empty string.
            
            -or-
            value (parameter) is not in [ws]Double,[ws]Double[ws] format or is not a string returned by ToString. </exception>
    </member>
    <member name="M:NationalInstruments.UI.Range.Parse(System.String,System.IFormatProvider,System.Globalization.CultureInfo)">
      <summary>
            Converts the string representation of a range of values to its Range equivalent
            using the specified format and culture.
            </summary>
      <param name="value">
            A string containing the range to convert. The string must be a string returned by ToString or a string in the following format:
            [ws]Double,[ws]Double[ws], where [ws] is an optional series of white space characters,
            Double is a parseable Double value, and ',' is a culture-specific list separator symbol. The following strings are value (parameter) examples:  "0,10", "40,50", and "Range: Minimum=10,Maximum=100".
            </param>
      <param name="formatProvider">
            A format provider that supplies culture-specific formatting information about the string.
            </param>
      <param name="culture">
            The culture to use for converting the string. If value (parameter)  is a string returned by ToString, you must pass in the same CultureInfo object that you used with ToString. 
            </param>
      <returns>
            A Range equivalent to the string specified in 
            value (parameter).
            </returns>
      <exception cref="T:System.ArgumentNullException">value (parameter) is null.
            
            -or-
            formatProvider (parameter) is null.
            
            -or-
            culture (parameter) is null.
            </exception>
      <exception cref="T:System.FormatException">value (parameter) is an empty string.
            
            -or-
            value (parameter) is not in [ws]Double,[ws]Double[ws] format or is not a string returned by ToString. 
            </exception>
    </member>
    <member name="P:NationalInstruments.UI.Range.Minimum">
      <summary>
            Gets the minimum value of the range. To set the minimum value, use the constructor.
            </summary>
    </member>
    <member name="P:NationalInstruments.UI.Range.MinimumDateTime">
      <summary>
            Gets the minimum value of the range as a DateTime.
            To set the minimum value, use the constructor.
            </summary>
    </member>
    <member name="P:NationalInstruments.UI.Range.Maximum">
      <summary>
            Gets the maximum value of the range. To set the maximum value, use the constructor.
            </summary>
    </member>
    <member name="P:NationalInstruments.UI.Range.MaximumDateTime">
      <summary>
            Gets the maximum value of the range as a DateTime. 
            To set the maximum value, use the constructor.
            </summary>
    </member>
    <member name="P:NationalInstruments.UI.Range.Interval">
      <summary>
            Gets the interval of the range.
            </summary>
    </member>
    <member name="P:NationalInstruments.UI.Range.IntervalDateTime">
      <summary>
            Gets the interval of the range as a TimeSpan.
            </summary>
    </member>
    <member name="T:NationalInstruments.UI.PlotDateTimePrecisionMode">
      <summary>
            Specifies the degree of precision on the graph 
            when plotting values against time with a fixed start time and an increment.
            </summary>
    </member>
    <member name="F:NationalInstruments.UI.PlotDateTimePrecisionMode.Default">
      <summary>
            Plots x or y values against time, with plotting faster than Precise.
            However, this enumeration value  might lead to loss of precision in some cases.
            </summary>
    </member>
    <member name="F:NationalInstruments.UI.PlotDateTimePrecisionMode.Precise">
      <summary>
            Plots x or y values against time with as much precision as possible. Precise leads to slower plotting performance compared to Default.
            </summary>
    </member>
    <member name="T:NationalInstruments.UI.LegendItemLayoutMode">
      <summary>
            Specifies the way in which the legend items are laid out.
            </summary>
    </member>
    <member name="F:NationalInstruments.UI.LegendItemLayoutMode.LeftToRight">
      <summary>
            The items will be laid out in a row from left to right.
            </summary>
    </member>
    <member name="F:NationalInstruments.UI.LegendItemLayoutMode.TopToBottom">
      <summary>
            The items will be laid out in a column from top to bottom.
            </summary>
    </member>
    <member name="T:NationalInstruments.UI.IntensityXAxisEventArgs">
      <summary>
            Provides data for the 
            XAxisRangeChanged event.
            </summary>
    </member>
    <member name="M:NationalInstruments.UI.IntensityXAxisEventArgs.#ctor(NationalInstruments.UI.IntensityXAxis)">
      <summary>
            Initializes a new instance of the IntensityXAxisEventArgs class
            with the specified intensity x-axis.
            </summary>
      <param name="intensityXAxis">
            The IntensityXAxis on which the range changed event occurred.
            </param>
      <exception cref="T:System.ArgumentNullException">intensityXAxis (parameter) is null.
            </exception>
    </member>
    <member name="M:NationalInstruments.UI.IntensityXAxisEventArgs.#ctor(NationalInstruments.UI.IntensityXAxis,NationalInstruments.UI.GraphAction)">
      <summary>
            Initializes a new instance of the IntensityXAxisEventArgs class
            with the specified intensity x-axis and the action on the graph.
            </summary>
      <param name="intensityXAxis">
            The IntensityXAxis on which the range changed event occurred.
            </param>
      <param name="action">
            The GraphAction that caused the range changed event.
            </param>
      <exception cref="T:System.ArgumentNullException">intensityXAxis (parameter) is null.
            </exception>
    </member>
    <member name="M:NationalInstruments.UI.IntensityXAxisEventArgs.ToString">
      <summary>
            Returns a string representation of the object.
            </summary>
      <returns>
            A string representation of the object.
            </returns>
    </member>
    <member name="P:NationalInstruments.UI.IntensityXAxisEventArgs.IntensityXAxis">
      <summary>
            Gets the x-axis on which the range changed event occurred.
            </summary>
    </member>
    <member name="P:NationalInstruments.UI.IntensityXAxisEventArgs.Action">
      <summary>
            Gets the action which raised the range changed event on the intensity x-axis.
            </summary>
    </member>
    <member name="T:NationalInstruments.UI.ImageStateManagement">
      <summary>
            Provides an abstract base class for specifying a state management
            strategy for control image data and provides a pre-defined list of state management
            strategies.
            </summary>
    </member>
    <member name="M:NationalInstruments.UI.ImageStateManagement.Save(System.Object,NationalInstruments.UI.ImageStateManagementArgs)">
      <summary>
            Saves control image data as specified by the contextual information that is provided in
            the specified ImageStateManagementArgs.
            </summary>
      <param name="context">
            The Object that specifies the context in which
            Save is called.
            </param>
      <param name="args">
            An ImageStateManagementArgs that
            contains contextual data for the save operation.
            </param>
      <returns>
            A String that represents a URL from which the image can be retrieved.
            </returns>
    </member>
    <member name="M:NationalInstruments.UI.ImageStateManagement.#ctor">
      <summary>
            Initializes a new instance of the ImageStateManagement 
            class.
            </summary>
    </member>
    <member name="P:NationalInstruments.UI.ImageStateManagement.UnderlyingType">
      <summary>
            Gets the underlying type of an EnumObject value.
            </summary>
    </member>
    <member name="P:NationalInstruments.UI.ImageStateManagement.ServerCache">
      <summary>
            Gets an image state management strategy that uses the ASP.NET cache to save and load data.
            </summary>
    </member>
    <member name="P:NationalInstruments.UI.ImageStateManagement.SessionState">
      <summary>
            Gets an image state management strategy that uses the ASP.NET session state to save and load data.
            </summary>
    </member>
    <member name="T:NationalInstruments.UI.ILed">
      <summary>
            Defines an interface for all LED controls.
            </summary>
    </member>
    <member name="P:NationalInstruments.UI.ILed.LedStyle">
      <summary>
            Gets or sets the visual style of the LED.
            </summary>
      <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
    </member>
    <member name="T:NationalInstruments.UI.IGauge">
      <summary>Defines an interface for the gauge control.</summary>
    </member>
    <member name="P:NationalInstruments.UI.IGauge.SpindleColor">
      <summary>
            Gets or sets the color of the base that connects the pointer to the gauge.
            </summary>
      <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
    </member>
    <member name="P:NationalInstruments.UI.IGauge.SpindleVisible">
      <summary>
            Gets or sets a value indicating if the base that connects the pointer to the gauge is visible.
            </summary>
      <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
    </member>
    <member name="P:NationalInstruments.UI.IGauge.GaugeStyle">
      <summary>
            Gets or sets the style that determines the appearance of the gauge.
            </summary>
      <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
      <exception cref="T:System.ArgumentNullException">
            The value is null.
            </exception>
    </member>
    <member name="T:NationalInstruments.UI.FixedSetColorGenerator">
      <summary>
            Provides a set of colors that you can assign to multiple plots on a Windows Forms or Web Forms scatter, waveform, or complex graph. 
            This class derives from the abstract base class, ColorGenerator.
            </summary>
    </member>
    <member name="T:NationalInstruments.UI.ColorGenerator">
      <summary>Provides an abstract base class for assigning different colors to multiple plots in the Windows and Web Forms scatter, waveform, and complex graphs.
            </summary>
    </member>
    <member name="M:NationalInstruments.UI.ColorGenerator.GetColor(System.Int32)">
      <summary>
            Returns a color corresponding to the specified index.
            </summary>
      <param name="index">
            Specifies the index of the color to return.
            </param>
      <returns>
            Color corresponding to the specified index.
            </returns>
    </member>
    <member name="M:NationalInstruments.UI.FixedSetColorGenerator.#ctor(System.Collections.Generic.ICollection{System.Drawing.Color})">
      <summary>
            Creates an instance of the FixedSetColorGenerator with a specified color array or collection of colors.
            </summary>
      <param name="colors">
            A color array or a collection of colors that the FixedSetColorGenerator uses to generate colors.
            </param>
    </member>
    <member name="M:NationalInstruments.UI.FixedSetColorGenerator.GetColor(System.Int32)">
      <summary>
            Gets the Color at the specified index in the color set of the FixedSetColorGenerator.
            </summary>
      <param name="index">
            Index of the color that is returned.
            </param>
      <returns>Color corresponding to the specified index.
            </returns>
      <exception cref="T:System.ArgumentOutOfRangeException">index (parameter) is negative.
            </exception>
    </member>
    <member name="M:NationalInstruments.UI.FixedSetColorGenerator.GetAllColors">
      <summary>
            Gets all the colors that the FixedSetColorGenerator can generate as a Color array.
            </summary>
      <returns>
            A Color array which is a copy of all the colors that FixedSetColorGenerator can generate.
            </returns>
    </member>
    <member name="M:NationalInstruments.UI.FixedSetColorGenerator.ToString">
      <summary>
            Returns a string representation of the object.
            </summary>
      <returns>
            A string representation of the object.
            </returns>
    </member>
    <member name="P:NationalInstruments.UI.FixedSetColorGenerator.Standard">
      <summary>
            Gets an instance of FixedSetColorGenerator that provides standard colors.
            </summary>
    </member>
    <member name="P:NationalInstruments.UI.FixedSetColorGenerator.Light">
      <summary>
            Gets an instance of FixedSetColorGenerator that provides light shaded colors.
            </summary>
    </member>
    <member name="P:NationalInstruments.UI.FixedSetColorGenerator.Dark">
      <summary>
            Gets an instance of FixedSetColorGenerator that provides dark shaded colors.
            </summary>
    </member>
    <member name="P:NationalInstruments.UI.FixedSetColorGenerator.TotalColors">
      <summary>
            Gets the total number of colors that the FixedSetColorGenerator provides.
            </summary>
    </member>
    <member name="T:NationalInstruments.UI.FillStyleDrawArgs">
      <summary>
            Provides data to create a fill style.
            </summary>
    </member>
    <member name="M:NationalInstruments.UI.FillStyleDrawArgs.#ctor(System.Drawing.Rectangle,System.Drawing.Color,System.Drawing.Color)">
      <summary>
            Initializes a new instance of the FillStyleDrawArgs class with the
            the specified fill area, fore color, and back color.
            </summary>
      <param name="contextBounds">
            The fill bounds.
            </param>
      <param name="foreColor">
            The fore color of the fill.
            </param>
      <param name="backColor">
            The back color of the fill.
            </param>
    </member>
    <member name="M:NationalInstruments.UI.FillStyleDrawArgs.ToString">
      <summary>
            Returns a string representation of the object.
            </summary>
      <returns>
            A string representation of the object.
            </returns>
    </member>
    <member name="P:NationalInstruments.UI.FillStyleDrawArgs.ForeColor">
      <summary>
            Gets the fore color of the fill.
            </summary>
    </member>
    <member name="P:NationalInstruments.UI.FillStyleDrawArgs.BackColor">
      <summary>
            Gets the back color of the fill.
            </summary>
    </member>
    <member name="P:NationalInstruments.UI.FillStyleDrawArgs.ContextBounds">
      <summary>
            Gets a rectangle representing the bounds in which the fill is drawn.
            </summary>
    </member>
    <member name="T:NationalInstruments.UI.DigitalWaveformSampleStyle">
      <summary>
            Provides an abstract base class for specifying how digital waveform samples are drawn on a digital waveform plot  
            and also provides a list of pre-defined sample styles.
            </summary>
    </member>
    <member name="M:NationalInstruments.UI.DigitalWaveformSampleStyle.#ctor">
      <summary>
            Initializes a new instance of the DigitalWaveformSampleStyle class.
            </summary>
    </member>
    <member name="M:NationalInstruments.UI.DigitalWaveformSampleStyle.Draw(System.Object,NationalInstruments.UI.DigitalWaveformSampleStyleDrawArgs)">
      <summary>
            Draws the digital waveform sample and its label with the specified DigitalWaveformSampleStyleDrawArgs.
            </summary>
      <param name="context">
            An Object that specifies the context in which Draw is called.
            </param>
      <param name="args">
            A DigitalWaveformSampleStyleDrawArgs that contains
            the drawing data.
            </param>
      <exception cref="T:System.ArgumentNullException">args (parameter) is null.
            </exception>
    </member>
    <member name="M:NationalInstruments.UI.DigitalWaveformSampleStyle.DrawSample(System.Object,NationalInstruments.UI.DigitalWaveformSampleStyleDrawArgs)">
      <summary>
            Draws the digital waveform sample with the specified DigitalWaveformSampleStyleDrawArgs.
            </summary>
      <param name="context">
            An Object that specifies the context in which DrawSample is called.
            </param>
      <param name="args">
            A DigitalWaveformSampleStyleDrawArgs that contains
            the drawing data.
            </param>
      <exception cref="T:System.ArgumentNullException">args (parameter) is null.
            </exception>
    </member>
    <member name="M:NationalInstruments.UI.DigitalWaveformSampleStyle.DrawLabel(System.Object,NationalInstruments.UI.DigitalWaveformSampleStyleDrawArgs)">
      <summary>
            Draws the label of the digital waveform sample with the specified DigitalWaveformSampleStyleDrawArgs.
            </summary>
      <param name="context">
            An Object that specifies the context in which DrawLabel is called.
            </param>
      <param name="args">
            A DigitalWaveformSampleStyleDrawArgs that contains
            the drawing data.
            </param>
      <exception cref="T:System.ArgumentNullException">args (parameter) is null.
            </exception>
    </member>
    <member name="M:NationalInstruments.UI.DigitalWaveformSampleStyle.GetSamplePoints(System.Drawing.Rectangle,NationalInstruments.DigitalWaveformSample,System.Single,System.Drawing.PointF[]@,System.Drawing.PointF[]@)">
      <summary>
            Gets the array of previous and next points that defines a digital waveform sample.
            </summary>
      <param name="stateBounds">
            A Rectangle representing the bounds of the state.
            </param>
      <param name="sample">
            The DigitalWaveformSample containing the digital sample.
            </param>
      <param name="lineWidth">
            The width of the line.
            </param>
      <param name="previousPoints">
            Upon return, contains the points of the sample to the left of the transition.
            </param>
      <param name="nextPoints">
            Upon return, contains the points of the sample to the right of the transition.
            </param>
      <exception cref="T:System.ArgumentNullException">sample (parameter) is null.
            </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">lineWidth (parameter) is less than zero.
            </exception>
    </member>
    <member name="P:NationalInstruments.UI.DigitalWaveformSampleStyle.UnderlyingType">
      <summary>
            Gets the underlying type of an EnumObject value.
            </summary>
    </member>
    <member name="P:NationalInstruments.UI.DigitalWaveformSampleStyle.Simple">
      <summary>
            Gets a style that draws the sample.
            </summary>
    </member>
    <member name="T:NationalInstruments.UI.DigitalStateStyleDrawArgs">
      <summary>
            Provides data for drawing digital states with the DigitalStateStyle class.
            </summary>
    </member>
    <member name="M:NationalInstruments.UI.DigitalStateStyleDrawArgs.#ctor(System.Drawing.Graphics,System.Drawing.Rectangle,System.Drawing.Rectangle,NationalInstruments.DigitalWaveformSample,System.Int32,System.Int32,NationalInstruments.DigitalState,NationalInstruments.UI.DigitalSignalPlot)">
      <summary>
            Initializes a new instance of the DigitalStateStyleDrawArgs class with the specified graphics,
            state bounds, label bounds, sample, sample count, signal index, signal state, and signal plot.
            </summary>
      <param name="graphics">
            The Graphics used to draw the style.
            </param>
      <param name="stateBounds">
            The Rectangle that represents the bounds in which to draw the state.
            </param>
      <param name="labelBounds">
            The Rectangle that represents the bounds in which to draw the label.
            </param>
      <param name="sample">
            The DigitalWaveformSample that contains the state that is being drawn.
            </param>
      <param name="sampleCount">
            The number of continuous samples with the same value.
            </param>
      <param name="signalIndex">
            The index of the signal that contains the state that is 
            being drawn.
            </param>
      <param name="signalState">
            The DigitalState value to draw.
            </param>
      <param name="signalPlot">
            The DigitalSignalPlot that represents the signal being drawn.
            </param>
      <exception cref="T:System.ArgumentNullException">sample (parameter) is null.
            
            -or-
            signalPlot (parameter) is null.
            </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">sampleCount (parameter) is less than or equal to zero.
            
            -or-
            signalIndex (parameter) is less than zero.
            </exception>
      <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">signalState (parameter) is an invalid DigitalState value.
            </exception>
    </member>
    <member name="P:NationalInstruments.UI.DigitalStateStyleDrawArgs.SignalPlot">
      <summary>
            Gets the digital signal plot that is being drawn.
            </summary>
    </member>
    <member name="P:NationalInstruments.UI.DigitalStateStyleDrawArgs.SignalState">
      <summary>
            Gets the digital state of the signal being drawn.
            </summary>
    </member>
    <member name="P:NationalInstruments.UI.DigitalStateStyleDrawArgs.SignalIndex">
      <summary>
            Gets the signal index of the signal being drawn.
            </summary>
    </member>
    <member name="T:NationalInstruments.UI.CustomDivisionDisplayStyle">
      <summary>
            Specifies the text to use for the custom division label on the axis.
            </summary>
    </member>
    <member name="F:NationalInstruments.UI.CustomDivisionDisplayStyle.ShowValue">
      <summary>
            Displays the axis division value.
            </summary>
    </member>
    <member name="F:NationalInstruments.UI.CustomDivisionDisplayStyle.ShowText">
      <summary>
            Displays the Text.
            </summary>
    </member>
    <member name="T:NationalInstruments.UI.ComplexErrorDataMode">
      <summary>
            Provides an abstract class that defines a set of methods used for generating 
            error data for a ComplexPlot.
            </summary>
    </member>
    <member name="M:NationalInstruments.UI.ComplexErrorDataMode.#ctor">
      <summary>
            Initializes a new instance of the ComplexErrorDataMode class.
            </summary>
    </member>
    <member name="M:NationalInstruments.UI.ComplexErrorDataMode.GetErrorData(NationalInstruments.UI.ComplexErrorDataArgs,System.Double[]@,System.Double[]@)">
      <summary>
            Generates error data for a subset of the points in a ComplexPlot.
            </summary>
      <param name="args">
            A ComplexErrorDataArgs instance containing information about 
            the plot data points for which error data should be generated.
            </param>
      <param name="highErrorData">
            Upon return, contains high offset values for the plot data points, or an empty array if no error data was generated.
            </param>
      <param name="lowErrorData">
            Upon return, contains low offset values for the plot data points, or an empty array if no error data was generated.
            </param>
      <exception cref="T:System.ArgumentNullException">args (parameter) is null.
            </exception>
    </member>
    <member name="M:NationalInstruments.UI.ComplexErrorDataMode.CreateNoneMode">
      <summary>
            Returns a ComplexErrorDataMode that does not generate any error data.
            </summary>
      <returns>
            A ComplexErrorDataMode that does not generate any error data.
            </returns>
    </member>
    <member name="M:NationalInstruments.UI.ComplexErrorDataMode.CreateConstantErrorMode(System.Double)">
      <summary>
            Creates a ComplexErrorDataMode that generates symmetric constant error data.
            </summary>
      <param name="symmetricOffset">
            The value to use for generating constant error data.
            </param>
      <returns>
            A ComplexErrorDataMode that generates identical high and low constant error data 
            according to symmetricOffset (parameter).
            </returns>
    </member>
    <member name="M:NationalInstruments.UI.ComplexErrorDataMode.CreateConstantErrorMode(System.Double,System.Double)">
      <summary>
            Creates a ComplexErrorDataMode that generates constant error data.
            </summary>
      <param name="highOffset">
            The value to use for generating high constant error data.
            </param>
      <param name="lowOffset">
            The value to use for generating low constant error data.
            </param>
      <returns>
            A ComplexErrorDataMode that generates high and low constant error data 
            according to highOffset (parameter) and lowOffset (parameter).
            The highOffset (parameter) is used to calculate error values that are greater than the
            data values specified in GetErrorData. 
            lowOffset (parameter) is used to calculate error values that are less than the data values
            specified in GetErrorData. The primary
            error data specified in ComplexErrorDataArgs is typically
            used to specify whether the error values are being calculated for the real data or for the imaginary data.
            </returns>
    </member>
    <member name="M:NationalInstruments.UI.ComplexErrorDataMode.CreatePercentErrorMode(System.Double)">
      <summary>
            Creates a ComplexErrorDataMode that generates symmetric percent error data.
            </summary>
      <param name="symmetricOffset">
            The value to use for generating percent error data.
            A value of 1.0 indicates 1% of the source value.
            </param>
      <returns>
            A ComplexErrorDataMode that generates identical high and low percent error data 
            according to symmetricOffset (parameter), and the primary error data of the 
            ComplexErrorDataArgs passed to GetErrorData.
            </returns>
    </member>
    <member name="M:NationalInstruments.UI.ComplexErrorDataMode.CreatePercentErrorMode(System.Double,System.Double)">
      <summary>
            Creates a ComplexErrorDataMode that generates percent error data.
            </summary>
      <param name="highOffset">
            The value to use for generating high percent error data.
            A value of 1.0 indicates 1% of the source value.
            </param>
      <param name="lowOffset">
            The value to use for generating low percent error data.
            A value of 1.0 indicates 1% of the source value.
            </param>
      <returns>
            A ComplexErrorDataMode that generates high and low percent error data 
            according to highOffset (parameter), lowOffset (parameter), and the primary error data of the 
            ComplexErrorDataArgs passed to GetErrorData.
            The highOffset (parameter) is used to calculate error values that are greater than the
            data values specified in GetErrorData. 
            lowOffset (parameter) is used to calculate error values that are less than the data values
            specified in GetErrorData. The primary
            error data specified in ComplexErrorDataArgs is typically
            used to specify whether the error values are being calculated for the real data or for the imaginary data.
            </returns>
    </member>
    <member name="M:NationalInstruments.UI.ComplexErrorDataMode.GetService(System.Type)">
      <summary>
            Gets the service object of the specified type.
            </summary>
      <param name="serviceType">
            A Type that specifies the type of service object to get.
            </param>
      <returns>
            A service object of type serviceType (parameter), or null
            if there is no service object of type serviceType (parameter).
            </returns>
    </member>
    <member name="T:NationalInstruments.UI.BeforeMoveXYCursorEventHandler">
      <summary>
            Represents the method that handles events that occur before the cursor moves.
            </summary>
      <param name="sender">
            The source of the event.
            </param>
      <param name="e">
            A BeforeMoveXYCursorEventArgs that contains the event data.
            </param>
    </member>
    <member name="T:NationalInstruments.UI.BeforeDragXYAnnotationCaptionEventHandler">
      <summary>
            Represents the method that handles the events that occur before an annotation caption is dragged.
            </summary>
      <param name="sender">
            The source of the event.
            </param>
      <param name="e">
            A BeforeDragXYAnnotationCaptionEventArgs that contains the event data.
            </param>
    </member>
    <member name="T:NationalInstruments.UI.BeforeDigitalWaveformPlotEventHandler">
      <summary>
            Represents the method that handles events that occur before interactive or programmatic
            user actions on the digital waveform plot.
            </summary>
      <param name="sender">
            The source of the event.
            </param>
      <param name="e">
            An BeforeDigitalWaveformPlotEventArgs that contains the event data.
            </param>
    </member>
    <member name="T:NationalInstruments.UI.AnalogWaveformPlotTimingMode">
      <summary>
            Specifies whether WaveformPlot uses Timing or PrecisionTiming
            to get the timing information from AnalogWaveform&lt;T&gt;, when WaveformPlot  is configured to plot against time.
            </summary>
    </member>
    <member name="F:NationalInstruments.UI.AnalogWaveformPlotTimingMode.Auto">
      <summary>
            Specifies whether WaveformPlot uses PrecisionTiming or Timing depending on the timing information contained in AnalogWaveform&lt;T&gt;. 
            </summary>
    </member>
    <member name="F:NationalInstruments.UI.AnalogWaveformPlotTimingMode.Timing">
      <summary>
            Specifies that WaveformPlot uses Timing to get the timing information from the AnalogWaveform&lt;T&gt;.
            </summary>
    </member>
    <member name="F:NationalInstruments.UI.AnalogWaveformPlotTimingMode.PrecisionTiming">
      <summary>
            Specifies that WaveformPlot uses PrecisionTiming to get the timing information from AnalogWaveform&lt;T&gt;.</summary>
    </member>
    <member name="T:NationalInstruments.UI.AnalogWaveformPlotOptions">
      <summary> 
            Provides scaling, display, and timing information used to plot AnalogWaveform or AnalogWaveform&lt;T&gt;
            data.
             
            Provides scaling, display, and timing information used to plot AnalogWaveform&lt;T&gt; 
            data.
            </summary>
    </member>
    <member name="M:NationalInstruments.UI.AnalogWaveformPlotOptions.#ctor(NationalInstruments.UI.AnalogWaveformPlotDisplayMode,NationalInstruments.UI.AnalogWaveformPlotScaleMode)">
      <summary>
            Initializes a new instance of the AnalogWaveformPlotOptions class
            with the specified display mode and scale mode.
            </summary>
      <param name="displayMode">  
            The AnalogWaveformPlotDisplayMode used while plotting 
            AnalogWaveform or AnalogWaveform&lt;T&gt;  data.
            
            The AnalogWaveformPlotDisplayMode used while plotting 
            AnalogWaveform&lt;T&gt;  data.
            </param>
      <param name="scaleMode"> 
            The AnalogWaveformPlotScaleMode used to get scaling information 
            while plotting AnalogWaveform or AnalogWaveform&lt;T&gt; data.
             
            The AnalogWaveformPlotScaleMode used to get scaling information 
            while plotting AnalogWaveform&lt;T&gt; data.
            </param>
      <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">displayMode (parameter) is not an AnalogWaveformPlotDisplayMode value.
            </exception>
      <exception cref="T:System.ArgumentNullException">scaleMode (parameter) is null.
            </exception>
    </member>
    <member name="M:NationalInstruments.UI.AnalogWaveformPlotOptions.#ctor(NationalInstruments.UI.AnalogWaveformPlotDisplayMode,NationalInstruments.UI.AnalogWaveformPlotScaleMode,NationalInstruments.UI.AnalogWaveformPlotTimingMode)">
      <summary>
            Initializes a new instance of the AnalogWaveformPlotOptions class
            with the specified display mode, scale mode, and timing mode.
            </summary>
      <param name="displayMode">  
            The AnalogWaveformPlotDisplayMode used while plotting 
            AnalogWaveform or AnalogWaveform&lt;T&gt;  data.
            
            The AnalogWaveformPlotDisplayMode used while plotting 
            AnalogWaveform&lt;T&gt;  data.
            </param>
      <param name="scaleMode"> 
            The AnalogWaveformPlotScaleMode used to get scaling information 
            while plotting AnalogWaveform or AnalogWaveform&lt;T&gt; data.
             
            The AnalogWaveformPlotScaleMode used to get scaling information 
            while plotting AnalogWaveform&lt;T&gt; data.
            </param>
      <param name="timingMode"> 
            The AnalogWaveformPlotTimingMode used while plotting 
            AnalogWaveform or AnalogWaveform&lt;T&gt; data against time.
             
            The AnalogWaveformPlotTimingMode used while plotting 
            AnalogWaveform&lt;T&gt; data against time.
            </param>
      <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">displayMode (parameter) is not an AnalogWaveformPlotDisplayMode value.
            </exception>
      <exception cref="T:System.ArgumentNullException">scaleMode (parameter) is null.
            </exception>
      <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">timingMode (parameter) is not an AnalogWaveformPlotTimingMode value.
            </exception>
    </member>
    <member name="M:NationalInstruments.UI.AnalogWaveformPlotOptions.Equals(System.Object)">
      <summary>
            Returns a value indicating if this instance is equal to the specified Object.
            </summary>
      <param name="obj">
            The Object to compare with this
            instance.
            </param>
      <returns>true if obj (parameter) is an Object that is equal 
            to this instance.
            </returns>
    </member>
    <member name="M:NationalInstruments.UI.AnalogWaveformPlotOptions.GetHashCode">
      <summary>
            Returns a hash code for this object.
            </summary>
      <returns>
            A 32-bit signed integer hash code.
            </returns>
    </member>
    <member name="M:NationalInstruments.UI.AnalogWaveformPlotOptions.op_Equality(NationalInstruments.UI.AnalogWaveformPlotOptions,NationalInstruments.UI.AnalogWaveformPlotOptions)">
      <summary>
            Returns whether two AnalogWaveformPlotOptions objects are equal.
            </summary>
      <param name="source">
            A AnalogWaveformPlotOptions.
            </param>
      <param name="destination">
            A AnalogWaveformPlotOptions.
            </param>
      <returns>true if the values of source (parameter) and destination (parameter) are equal. 
            </returns>
    </member>
    <member name="M:NationalInstruments.UI.AnalogWaveformPlotOptions.op_Inequality(NationalInstruments.UI.AnalogWaveformPlotOptions,NationalInstruments.UI.AnalogWaveformPlotOptions)">
      <summary>
            Returns whether two AnalogWaveformPlotOptions objects are 
            not equal.
            </summary>
      <param name="source">
            A AnalogWaveformPlotOptions.
            </param>
      <param name="destination">
            A AnalogWaveformPlotOptions.
            </param>
      <returns>true if the values of source (parameter) and destination (parameter) are not equal. 
            </returns>
    </member>
    <member name="P:NationalInstruments.UI.AnalogWaveformPlotOptions.DisplayMode">
      <summary> 
            Gets the mode used to display the AnalogWaveform or AnalogWaveform&lt;T&gt;  data.
             
            Gets the mode used to display the AnalogWaveform&lt;T&gt; data.
            </summary>
    </member>
    <member name="P:NationalInstruments.UI.AnalogWaveformPlotOptions.ScaleMode">
      <summary> 
            Gets the scaling information used to plot AnalogWaveform or AnalogWaveform&lt;T&gt; 
             data.
              
            Gets the scaling information used to plot AnalogWaveform&lt;T&gt; 
             data.
             </summary>
    </member>
    <member name="P:NationalInstruments.UI.AnalogWaveformPlotOptions.TimingMode">
      <summary>
            Gets the timing mode used to plot AnalogWaveform&lt;T&gt; data while plotting against time.
            </summary>
    </member>
    <member name="T:NationalInstruments.UI.AfterDrawXYRangeAnnotationEventArgs">
      <summary>
            Provides data for events that occur after the range annotation draws.
            </summary>
    </member>
    <member name="M:NationalInstruments.UI.AfterDrawXYRangeAnnotationEventArgs.#ctor(System.Drawing.Graphics,System.Drawing.Rectangle,NationalInstruments.UI.XYRangeAnnotation,NationalInstruments.UI.XYRangeAnnotationPart,System.Drawing.PointF,System.Drawing.PointF,System.Drawing.PointF,System.Drawing.Size,System.Single)">
      <summary>
            Initializes a new instance of the AfterDrawXYRangeAnnotationEventArgs class with the specified graphics, bounds, 
            annotation, annotation part, arrow head point, arrow tail point, caption point, caption size, and caption angle.
            </summary>
      <param name="graphics">
            The Graphics used to draw the item.
            </param>
      <param name="bounds">
            The Rectangle that represents the bounds in which to draw.
            </param>
      <param name="annotation">
            The XYRangeAnnotation for which the event is occurring.
            </param>
      <param name="annotationPart">
            The XYRangeAnnotationPart of the annotation that was drawn.
            </param>
      <param name="arrowHeadPoint">
            The Point at which the arrow head was drawn.
            </param>
      <param name="arrowTailPoint">
            The Point where the arrow tail is located.
            </param>
      <param name="captionPoint">
            The Point at which the caption was drawn.
            </param>
      <param name="captionSize">
            The Size of the Rectangle in which to draw the caption.
            </param>
      <param name="captionAngle">
            The angle at which to draw the caption.
            </param>
      <exception cref="T:System.ArgumentNullException">annotation (parameter) is null.
            	-or-graphics (parameter) is null.
            	</exception>
    </member>
    <member name="P:NationalInstruments.UI.AfterDrawXYRangeAnnotationEventArgs.Annotation">
      <summary>
            Gets the XYRangeAnnotation that was drawn.
            </summary>
    </member>
    <member name="P:NationalInstruments.UI.AfterDrawXYRangeAnnotationEventArgs.Part">
      <summary>
            Gets the part of the annotation that was drawn.
            </summary>
    </member>
    <member name="P:NationalInstruments.UI.AfterDrawXYRangeAnnotationEventArgs.ArrowHeadPoint">
      <summary>
            Gets the point at which the arrow head was drawn.
            </summary>
    </member>
    <member name="P:NationalInstruments.UI.AfterDrawXYRangeAnnotationEventArgs.ArrowTailPoint">
      <summary>
            Gets the point at which the arrow tail is located.
            </summary>
    </member>
    <member name="P:NationalInstruments.UI.AfterDrawXYRangeAnnotationEventArgs.CaptionPoint">
      <summary>
            Gets the point at which the caption was drawn.
            </summary>
    </member>
    <member name="P:NationalInstruments.UI.AfterDrawXYRangeAnnotationEventArgs.CaptionSize">
      <summary>
            Gets the size of the rectangle in which the caption was drawn.
            </summary>
    </member>
    <member name="P:NationalInstruments.UI.AfterDrawXYRangeAnnotationEventArgs.CaptionAngle">
      <summary>
            Gets the angle at which the caption was drawn.
            </summary>
    </member>
    <member name="T:NationalInstruments.UI.AfterDrawComplexCursorEventArgs">
      <summary>
            Provides data for events that occur after the cursor draws.
            </summary>
    </member>
    <member name="M:NationalInstruments.UI.AfterDrawComplexCursorEventArgs.#ctor(NationalInstruments.UI.ComplexCursor,System.Drawing.Rectangle,System.Drawing.Graphics,System.Drawing.Rectangle)">
      <summary>
            Initializes a new instance of AfterDrawComplexCursorEventArgs with the specified cursor, point bounds,
            graphics, and bounds.
            </summary>
      <param name="cursor">
            The ComplexCursor for which the event is occurring.
            </param>
      <param name="pointBounds">
            The Rectangle that represents the bounds of the cursor point.
            </param>
      <param name="graphics">
            The Graphics used to draw the item.
            </param>
      <param name="bounds">
            The Rectangle that represents the bounds in which to draw.
            </param>
      <exception cref="T:System.ArgumentNullException">cursor (parameter) is null.
            	-or-graphics (parameter) is null.
            	</exception>
    </member>
    <member name="M:NationalInstruments.UI.AfterDrawComplexCursorEventArgs.ToString">
      <summary>
            Returns a string representation of the object.
            </summary>
      <returns>
            A string representation of the object.
            </returns>
    </member>
    <member name="P:NationalInstruments.UI.AfterDrawComplexCursorEventArgs.Cursor">
      <summary>
            Gets the ComplexCursor that has been drawn.
            </summary>
    </member>
    <member name="P:NationalInstruments.UI.AfterDrawComplexCursorEventArgs.PointBounds">
      <summary>
            Gets the bounds of the cursor point.
            </summary>
    </member>
    <member name="T:NationalInstruments.UI.AfterDrawCaptionEventArgs">
      <summary>
            Provides data for the AfterDrawCaption event.
            </summary>
    </member>
    <member name="M:NationalInstruments.UI.AfterDrawCaptionEventArgs.#ctor(System.String,System.Drawing.Color,System.Drawing.Color,System.Drawing.Font,NationalInstruments.UI.CaptionPosition,System.Drawing.Graphics,System.Drawing.Rectangle)">
      <summary>
            Initializes a new instance of the AfterDrawCaptionEventArgs
            class with the specified caption and the background color, foreground color, font, and position of
            the caption along with the graphics and bounds.
            </summary>
      <param name="caption">
            A String that represent the caption text that has been drawn.
            </param>
      <param name="backColor">
            The background Color of the caption that has been drawn.
            </param>
      <param name="foreColor">
            The foreground Color of the caption that has been drawn.
            </param>
      <param name="font">
            The Font of the caption that has been drawn.
            </param>
      <param name="position">
            The CaptionPosition of the caption that has been drawn.
            </param>
      <param name="graphics">
            The Graphics used to draw the caption.
            </param>
      <param name="bounds">
            The Rectangle that represents the bounds in which to draw.
            </param>
      <exception cref="T:System.ArgumentNullException">graphics (parameter) is null.
            </exception>
      <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">position (parameter) is not one of the CaptionPosition
            values.
            </exception>
    </member>
    <member name="M:NationalInstruments.UI.AfterDrawCaptionEventArgs.ToString">
      <summary>
            Returns a string representation of the object.
            </summary>
      <returns>
            A string representation of the object.
            </returns>
    </member>
    <member name="P:NationalInstruments.UI.AfterDrawCaptionEventArgs.Caption">
      <summary>
            Gets the caption text that has been drawn.
            </summary>
    </member>
    <member name="P:NationalInstruments.UI.AfterDrawCaptionEventArgs.BackColor">
      <summary>
            Gets the background color of the caption that has been drawn.
            </summary>
    </member>
    <member name="P:NationalInstruments.UI.AfterDrawCaptionEventArgs.ForeColor">
      <summary>
            Gets the foreground color of the caption that has been drawn.
            </summary>
    </member>
    <member name="P:NationalInstruments.UI.AfterDrawCaptionEventArgs.Font">
      <summary>
            Gets the font of the caption that has been drawn.
            </summary>
    </member>
    <member name="P:NationalInstruments.UI.AfterDrawCaptionEventArgs.Position">
      <summary>
            Gets the position of the caption that has been drawn.
            </summary>
    </member>
    <member name="T:NationalInstruments.UI.VerticalCaptionOrientation">
      <summary>
            Specifies the orientation of the caption text.
            </summary>
    </member>
    <member name="F:NationalInstruments.UI.VerticalCaptionOrientation.TopToBottom">
      <summary>
            The caption text is displayed so that it reads from top to bottom.
            </summary>
    </member>
    <member name="F:NationalInstruments.UI.VerticalCaptionOrientation.BottomToTop">
      <summary>
            The caption text is displayed so that it reads from bottom to top.
            </summary>
    </member>
    <member name="T:NationalInstruments.UI.ThermometerStyle">
      <summary>
            Provides an abstract base class for specifying a thermometer style
            and also provides a list of pre-defined thermometer styles.
            </summary>
    </member>
    <member name="M:NationalInstruments.UI.ThermometerStyle.#ctor">
      <summary>
            Initializes a new instance of the ThermometerStyle class.
            </summary>
    </member>
    <member name="M:NationalInstruments.UI.ThermometerStyle.DrawPointer(NationalInstruments.UI.INumericPointer,NationalInstruments.UI.NumericPointerStyleDrawArgs,System.Double)">
      <summary>
            Draws the pointer of the style.
            </summary>
      <param name="context">
            An INumericPointer with additional context information. 
            </param>
      <param name="args">
            A NumericPointerStyleDrawArgs that contains the
            drawing data.
            </param>
      <param name="value">
            The value used to draw the pointer. 
            </param>
    </member>
    <member name="P:NationalInstruments.UI.ThermometerStyle.UnderlyingType">
      <summary>
            Gets the underlying type of an EnumObject value.
            </summary>
    </member>
    <member name="P:NationalInstruments.UI.ThermometerStyle.Raised3D">
      <summary>
            Gets a 3D thermometer with a raised look.
            </summary>
    </member>
    <member name="P:NationalInstruments.UI.ThermometerStyle.Raised">
      <summary>
            Gets the thermometer with a raised look.
            </summary>
    </member>
    <member name="P:NationalInstruments.UI.ThermometerStyle.Flat">
      <summary>
            Gets a thermometer with a flat look.
            </summary>
    </member>
    <member name="T:NationalInstruments.UI.ScrollMode">
      <summary>
            Specifies how the scroll bar displays.
            </summary>
    </member>
    <member name="F:NationalInstruments.UI.ScrollMode.Hidden">
      <summary>
            The scroll bar is never visible.
            </summary>
    </member>
    <member name="F:NationalInstruments.UI.ScrollMode.Visible">
      <summary>
            The scroll bar is always visible. 
            </summary>
    </member>
    <member name="F:NationalInstruments.UI.ScrollMode.Auto">
      <summary>
            The scroll bar is visible only when there is content to scroll.
            </summary>
    </member>
    <member name="T:NationalInstruments.UI.NumericCoercionModeArgs">
      <summary>
            Provides data for coercing a value.
            </summary>
    </member>
    <member name="M:NationalInstruments.UI.NumericCoercionModeArgs.#ctor(System.Double)">
      <summary>
            Initializes a new instance of the NumericCoercionModeArgs class.
            </summary>
      <param name="value">
            The value to be coerced.
            </param>
    </member>
    <member name="P:NationalInstruments.UI.NumericCoercionModeArgs.Value">
      <summary>
            Gets the value to be coerced.
            </summary>
    </member>
    <member name="T:NationalInstruments.UI.IRefreshCallbackEventHandler">
      <summary>
            Defines the interface that controls must implement to handle refresh management control
            refresh events.
            </summary>
    </member>
    <member name="M:NationalInstruments.UI.IRefreshCallbackEventHandler.RaiseRefreshCallbackEvent">
      <summary>
            Returns the result of the callback refresh event and specifies the updates to make on the client.
            </summary>
      <returns>
            A RefreshCallbackResult that specifies the updates to make on the client.
            </returns>
    </member>
    <member name="P:NationalInstruments.UI.IRefreshCallbackEventHandler.ID">
      <summary>
            Gets the ID of the server control.
            </summary>
    </member>
    <member name="T:NationalInstruments.UI.IntensityPlotDataChangedEventArgs">
      <summary>
            Provides data for the PlotDataChanged event.
            </summary>
    </member>
    <member name="M:NationalInstruments.UI.IntensityPlotDataChangedEventArgs.#ctor(NationalInstruments.UI.IntensityPlot)">
      <summary>
            Initializes a new instance of the IntensityPlotDataChangedEventArgs class
            with the specified plot.
            </summary>
      <param name="plot">
            The IntensityPlot on which data is plotted.
            </param>
    </member>
    <member name="M:NationalInstruments.UI.IntensityPlotDataChangedEventArgs.ToString">
      <summary>
            Returns a string representation of the object.
            </summary>
      <returns>
            A string representation of the object.
            </returns>
    </member>
    <member name="P:NationalInstruments.UI.IntensityPlotDataChangedEventArgs.Plot">
      <summary>
            Gets the plot on which data is plotted.
            </summary>
    </member>
    <member name="T:NationalInstruments.UI.IntensityPlot">
      <summary>
            Defines a class for plotting three-dimensional data on a two-dimensional surface where color represents the third dimension.
            </summary>
    </member>
    <member name="M:NationalInstruments.UI.IntensityPlot.#ctor">
      <summary>
            Initializes a new instance of the IntensityPlot class.
            </summary>
    </member>
    <member name="M:NationalInstruments.UI.IntensityPlot.#ctor(NationalInstruments.UI.IntensityXAxis,NationalInstruments.UI.IntensityYAxis,NationalInstruments.UI.ColorScale)">
      <summary>
            Initializes a new instance of the IntensityPlot class
            with the specified IntensityXAxis, IntensityYAxis
            and ColorScale.
            </summary>
      <param name="xAxis">
            The IntensityXAxis to use for the plot.
            </param>
      <param name="yAxis">
            The IntensityYAxis to use for the plot.
            </param>
      <param name="colorScale">
            The ColorScale to use for the plot.
            </param>
      <exception cref="T:System.ArgumentNullException">xAxis (parameter) is null
            -or-
            yAxis (parameter) is null
            -or-
            colorScale (parameter) is null</exception>
    </member>
    <member name="M:NationalInstruments.UI.IntensityPlot.ClearData">
      <summary>
            Removes all data from the history.
            </summary>
      <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
    </member>
    <member name="M:NationalInstruments.UI.IntensityPlot.MapDataPoint(System.Drawing.Rectangle,System.Double,System.Double)">
      <summary>
            Transforms a single x and y value to a point using the specified bounds
            and the current x-axis and y-axis ranges.
            </summary>
      <param name="bounds">
            The reference Rectangle.
            </param>
      <param name="xData">
            The x value to map.
            </param>
      <param name="yData">
            The y value to map.
            </param>
      <returns>
            A PointF that represents the transformation of
            xData (parameter) and yData (parameter) with respect to
            bounds (parameter) and the current XAxis
            and YAxis ranges.
            </returns>
      <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
      <exception cref="T:System.InvalidOperationException">
                    The XAxis of the plot is null.
            
            -or-
            
                    The YAxis of the plot is null.
            </exception>
      <exception cref="T:System.NotSupportedException">
            The Owner of the plot is not null,
            and the Owner of the plot is
            different from the Owner of XAxis.
            
            -or-
            
            The Owner of the plot is not null,
            and the Owner of the plot is
            different from the Owner of YAxis.
            </exception>
    </member>
    <member name="M:NationalInstruments.UI.IntensityPlot.MapDataPoints(System.Drawing.Rectangle,System.Double[]@,System.Double[]@,System.Double[0:,0:]@)">
      <summary>
            Transforms the x-data and y-data in the plot data history to client co-ordinates using the 
            specified bounds and the current x-axis and y-axis ranges.  The data is also
            clipped with respect to the current x-axis and y-axis ranges.
            </summary>
      <param name="bounds">
            The reference Rectangle.
            </param>
      <param name="mappedXData">
            Upon return, contains the mapped x-data.
            </param>
      <param name="mappedYData">
            Upon return, contains the mapped x-data.
            </param>
      <param name="clippedZData">
            Upon return, contains the clipped z-data.
            </param>
      <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
      <exception cref="T:System.InvalidOperationException">
                    The x-axis of the plot is null.
            
            -or-
            
                    The y-axis of the plot is null.
            </exception>
      <exception cref="T:System.NotSupportedException">
            The Owner of the plot is not null,
            and the Owner of the plot is
            different from the Owner of x-axis.
            
            -or-
            
            The Owner of the plot is not null,
            and the Owner of the plot is
            different from the Owner of y-axis.
            </exception>
    </member>
    <member name="M:NationalInstruments.UI.IntensityPlot.MapDataPoints(System.Drawing.Rectangle,System.Double[]@,System.Double[]@,System.Double[0:,0:]@,System.Boolean)">
      <summary>
            Transforms the x-data and y-data in the plot data history to client co-ordinates using the 
            specified bounds and the current x-axis and y-axis ranges.  This method includes an option to clip the data with respect to the current x-axis and y-axis ranges.
            </summary>
      <param name="bounds">
            The reference Rectangle.
            </param>
      <param name="mappedXData">
            Upon return, contains the mapped x-data.
            </param>
      <param name="mappedYData">
            Upon return, contains the mapped x-data.
            </param>
      <param name="clippedZData">
            Upon return, contains the clipped z-data.
            </param>
      <param name="clipData">
            Specifies if the data should be clipped with respect to the current x-axis and y-axis ranges.
            </param>
      <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
      <exception cref="T:System.InvalidOperationException">
                    The x-axis of the plot is null.
            
            -or-
            
                    The y-axis of the plot is null.
            </exception>
      <exception cref="T:System.NotSupportedException">
            The Owner of the plot is not null,
            and the Owner of the plot is
            different from the Owner of x-axis.
            
            -or-
            
            The Owner of the plot is not null,
            and the Owner of the plot is
            different from the Owner of y-axis.
            </exception>
    </member>
    <member name="M:NationalInstruments.UI.IntensityPlot.MapDataPoints(System.Drawing.Rectangle,System.Double[],System.Double[],System.Double[0:,0:],System.Double[]@,System.Double[]@,System.Double[0:,0:]@)">
      <summary>
            Transforms arrays of x and y data values to client co-ordinates using the 
            specified bounds and the current x-axis and y-axis ranges.  The data is also
            clipped with respect to the current x-axis and y-axis ranges.
            </summary>
      <param name="bounds">
            The reference Rectangle.
            </param>
      <param name="xData">
            The x values to map.
            </param>
      <param name="yData">
            The y values to map.
            </param>
      <param name="zData">
            The z values corresponding to the x and y values.
            </param>
      <param name="mappedXData">
            Upon return, contains the mapped x-data.
            </param>
      <param name="mappedYData">
            Upon return, contains the mapped x-data.
            </param>
      <param name="clippedZData">
            Upon return, contains the clipped z-data.
            </param>
      <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
      <exception cref="T:System.InvalidOperationException">
                    The x-axis of the plot is null.
            
            -or-
            
                    The y-axis of the plot is null.
            </exception>
      <exception cref="T:System.NotSupportedException">
            The Owner of the plot is not null,
            and the Owner of the plot is
            different from the Owner of x-axis.
            
            -or-
            
            The Owner of the plot is not null,
            and the Owner of the plot is
            different from the Owner of y-axis.
            </exception>
      <exception cref="T:System.ArgumentNullException">xData (parameter) is null.
                
            -or-
            yData (parameter) is null.
            
            -or-
            zData (parameter) is null.
            </exception>
      <exception cref="T:System.ArgumentException">
            		The lengths of xData (parameter) and zData (parameter) do not match.
            
            		-or-
            
            		The lengths of yData (parameter) and zData (parameter) do not match.
            </exception>
    </member>
    <member name="M:NationalInstruments.UI.IntensityPlot.MapDataPoints(System.Drawing.Rectangle,System.Double[],System.Double[],System.Double[0:,0:],System.Double[]@,System.Double[]@,System.Double[0:,0:]@,System.Boolean)">
      <summary>
            Transforms arrays of x and y data values to client co-ordinates using the 
            specified bounds and the current x-axis and y-axis ranges. This method includes an option to clip the data with respect to the current x-axis and y-axis ranges.
            </summary>
      <param name="bounds">
            The reference Rectangle.
            </param>
      <param name="xData">
            The x values to map.
            </param>
      <param name="yData">
            The y values to map.
            </param>
      <param name="zData">
            The z values corresponding to the x and y values.
            </param>
      <param name="mappedXData">
            Upon return, contains the mapped x-data.
            </param>
      <param name="mappedYData">
            Upon return, contains the mapped x-data.
            </param>
      <param name="clippedZData">
            Upon return, contains the clipped z-data.
            </param>
      <param name="clipData">
            Specifies if the data should be clipped with respect to the current x-axis and y-axis ranges.
            </param>
      <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
      <exception cref="T:System.InvalidOperationException">
                    The x-axis of the plot is null.
            
            -or-
            
                    The y-axis of the plot is null.
            </exception>
      <exception cref="T:System.NotSupportedException">
            The Owner of the plot is not null,
            and the Owner of the plot is
            different from the Owner of x-axis.
            
            -or-
            
            The Owner of the plot is not null,
            and the Owner of the plot is
            different from the Owner of y-axis.
            </exception>
      <exception cref="T:System.ArgumentNullException">xData (parameter) is null.
                
            -or-
            yData (parameter) is null.
            
            -or-
            zData (parameter) is null.
            </exception>
      <exception cref="T:System.ArgumentException">
            		The lengths of xData (parameter) and zData (parameter) do not match.
            
            		-or-
            
            		The lengths of yData (parameter) and zData (parameter) do not match.
            </exception>
    </member>
    <member name="M:NationalInstruments.UI.IntensityPlot.MapRange(System.Drawing.Rectangle,NationalInstruments.UI.Range,NationalInstruments.UI.Range)">
      <summary>
            Transforms an x-range and a y-range to a rectangle using the specified bounds
            and the current x-axis and y-axis ranges.
            </summary>
      <param name="bounds">
            The reference Rectangle.
            </param>
      <param name="xRange">
            The x-range to map.
            </param>
      <param name="yRange">
            The y-range to map.
            </param>
      <returns>
            A RectangleF that represents the transformation of
            xRange (parameter) and yRange (parameter) and the current
            x-axis and y-axis ranges.
            </returns>
      <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
      <exception cref="T:System.InvalidOperationException">
                    The x-axis of the plot is null.
            
            -or-
            
                    The y-axis of the plot is null.
            </exception>
      <exception cref="T:System.NotSupportedException">
            The Owner of the plot is not null,
            and the Owner of the plot is
            different from the Owner of x-axis.
            
            -or-
            
            The Owner of the plot is not null,
            and the Owner of the plot is
            different from the Owner of y-axis.
            </exception>
      <exception cref="T:System.ArgumentNullException">xRange (parameter) is null.
            
            -or-
            yRange (parameter) is null.
            </exception>
    </member>
    <member name="M:NationalInstruments.UI.IntensityPlot.InverseMapDataPoint(System.Drawing.Rectangle,System.Drawing.PointF,System.Double@,System.Double@)">
      <summary>
            Transforms a point to an x and y data value using the specified bounds
            and the current x-axis and y-axis ranges.
            </summary>
      <param name="bounds">
            The reference Rectangle.
            </param>
      <param name="point">
            The Point to inversely map.
            </param>
      <param name="xData">
            Upon return, contains the x-data value that represents the transformation of
            point (parameter) with respect to bounds (parameter) and the 
            current XAxis
            and YAxis ranges.
            </param>
      <param name="yData">
            Upon return, contains the y-data value that represents the transformation of
            point (parameter) with respect to bounds (parameter) and the 
            current XAxis
            and YAxis ranges.
            </param>
      <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
      <exception cref="T:System.InvalidOperationException">
                    The XAxis of the plot is null.
            
            -or-
            
                    The YAxis of the plot is null.
            </exception>
      <exception cref="T:System.NotSupportedException">
            The Owner of the plot is not null,
            and the Owner of the plot is
            different from the Owner of XAxis.
            
            -or-
            
            The Owner of the plot is not null,
            and the Owner of the plot is
            different from the Owner of YAxis.
            </exception>
    </member>
    <member name="M:NationalInstruments.UI.IntensityPlot.InverseMapDataPoints(System.Drawing.Rectangle,System.Double[],System.Double[],System.Double[]@,System.Double[]@)">
      <summary>
            Transforms arrays of x and y client co-ordinates to x and y data values using the 
            specified bounds and the current x-axis and y-axis ranges.
            </summary>
      <param name="bounds">
            The reference Rectangle.
            </param>
      <param name="mappedXData">
            The x values to inversely map.
            </param>
      <param name="mappedYData">
            The y values to inversely map.
            </param>
      <param name="xData">
            Upon return, contains x-data values that represent the transformation of
            mappedXData (parameter) with respect to bounds (parameter) and the 
            current XAxis
            and YAxis ranges.
            </param>
      <param name="yData">
            Upon return, contains y-data values that represent the transformation of
            mappedYData (parameter) with respect to bounds (parameter) and the 
            current XAxis
            and YAxis ranges.
            </param>
      <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
      <exception cref="T:System.InvalidOperationException">
                    The XAxis of the plot is null.
            
            -or-
            
                    The YAxis of the plot is null.
            </exception>
      <exception cref="T:System.NotSupportedException">
            The Owner of the plot is not null,
            and the Owner of the plot is
            different from the Owner of XAxis.
            
            -or-
            
            The Owner of the plot is not null,
            and the Owner of the plot is
            different from the Owner of YAxis.
            </exception>
      <exception cref="T:System.ArgumentNullException">mappedXData (parameter) is null.
            
            	-or-
            mappedYData (parameter) is null.
            </exception>
    </member>
    <member name="M:NationalInstruments.UI.IntensityPlot.InverseMapRange(System.Drawing.Rectangle,System.Drawing.RectangleF,NationalInstruments.UI.Range@,NationalInstruments.UI.Range@)">
      <summary>
            Transforms a rectangle to an x range and a y range using the specified bounds
            and the current x-axis and y-axis ranges.
            </summary>
      <param name="bounds">
            The reference Rectangle.
            </param>
      <param name="rectangle">
            The Rectangle to map.
            </param>
      <param name="xRange">
            Upon return, contains an x-axis Range 
            that represents the transformation of the width
            rectangle (parameter) with respect to bounds (parameter) and the 
            current x-axis
            and y-axis ranges.
            </param>
      <param name="yRange">
            Upon return, contains a y-axis Range 
            that represents the transformation of the height
            rectangle (parameter) with respect to bounds (parameter) and the 
            current x-axis
            and y-axis ranges.
            </param>
      <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
      <exception cref="T:System.InvalidOperationException">
                    The x-axis of the plot is null.
            
            -or-
            
                    The y-axis of the plot is null.
            </exception>
      <exception cref="T:System.NotSupportedException">
            The Owner of the plot is not null,
            and the Owner of the plot is
            different from the Owner of x-axis.
            
            -or-
            
            The Owner of the plot is not null,
            and the Owner of the plot is
            different from the Owner of y-axis.
            </exception>
    </member>
    <member name="M:NationalInstruments.UI.IntensityPlot.ClipDataPoints(System.Double[]@,System.Double[]@,System.Double[0:,0:]@)">
      <summary>
            Clips the x-data, y-data, and z-data arrays in the history with respect to the current visible values in the
            x-axis and y-axis ranges.
            </summary>
      <param name="clippedXData">
            Upon return, contains the clipped x-data values.
            </param>
      <param name="clippedYData">
            Upon return, contains the clipped y-data values.
            </param>
      <param name="clippedZData">
            Upon return, contains the clipped z-data values.
            </param>
      <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
      <exception cref="T:System.InvalidOperationException">
                    The XAxis of the plot is null.
            
            -or-
            
                    The YAxis of the plot is null.
            </exception>
      <exception cref="T:System.NotSupportedException">
            The Owner of the plot is not null,
            and the Owner of the plot is
            different from the Owner of XAxis.
            
            -or-
            
            The Owner of the plot is not null,
            and the Owner of the plot is
            different from the Owner of YAxis.
            </exception>
    </member>
    <member name="M:NationalInstruments.UI.IntensityPlot.ClipDataPoints(System.Double[],System.Double[],System.Double[0:,0:],System.Double[]@,System.Double[]@,System.Double[0:,0:]@)">
      <summary>
            Clips the x-data, y-data, and z-data arrays in the history with respect to the current visible values in the
            x-axis and y-axis ranges.
            </summary>
      <param name="xData">
            The x-data array to clip.
            </param>
      <param name="yData">
            The y-data array to clip.
            </param>
      <param name="zData">
            The z-data array to clip.
            </param>
      <param name="clippedXData">
            Upon return, contains the clipped x-data values.
            </param>
      <param name="clippedYData">
            Upon return, contains the clipped y-data values.
            </param>
      <param name="clippedZData">
            Upon return, contains the clipped z-data values.
            </param>
      <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
      <exception cref="T:System.InvalidOperationException">
                    The XAxis of the plot is null.
            
            -or-
            
                    The YAxis of the plot is null.
            </exception>
      <exception cref="T:System.NotSupportedException">
            The Owner of the plot is not null,
            and the Owner of the plot is
            different from the Owner of XAxis.
            
            -or-
            
            The Owner of the plot is not null,
            and the Owner of the plot is
            different from the Owner of YAxis.
            </exception>
      <exception cref="T:System.ArgumentNullException">xData (parameter) is null.
                
            -or-
            yData (parameter) is null.
            
            -or-
            zData (parameter) is null.
            </exception>
      <exception cref="T:System.ArgumentException">
            		The lengths of xData (parameter) and zData (parameter) do not match.
            
            		-or-
            
            		The lengths of yData (parameter) and zData (parameter) do not match.
            </exception>
    </member>
    <member name="M:NationalInstruments.UI.IntensityPlot.GetDataPoint(System.Int32,System.Int32,System.Double@,System.Double@,System.Double@)">
      <summary>
            Gets the x, y, and z data values at the specified indices in the history.
            </summary>
      <param name="xIndex">
            The index used to get the data value from the x-data in the history. 
            Also the first index to get the data value from z-data in the history.
            </param>
      <param name="yIndex">
            The index used to get the data value from the y-data in the history. 
            Also the second index to get the data value from z-data in the history.
            </param>
      <param name="xData">
            Upon return, contains the x data value at xIndex (parameter).
            </param>
      <param name="yData">
            Upon return, contains the y data value at yIndex (parameter).
            </param>
      <param name="zData">
            Upon return, contains the z data value at xIndex (parameter), yIndex (parameter).
            </param>
      <exception cref="T:System.ArgumentOutOfRangeException">xIndex (parameter) is less than 0.
            
            -or-
            xIndex (parameter) is greater than or equal to 
            HistoryCountX.
            
            -or-
            yIndex (parameter) is less than 0.
            
            -or-
            yIndex (parameter) is greater than or equal to 
            HistoryCountY.
            </exception>
    </member>
    <member name="M:NationalInstruments.UI.IntensityPlot.GetXData">
      <summary>
            Gets the x-data values in the plot history.
            </summary>
      <returns>
            A Double array that represents the x-data values
            in the plot history.
            </returns>
      <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
    </member>
    <member name="M:NationalInstruments.UI.IntensityPlot.GetYData">
      <summary>
            Gets the y-data values in the plot history.
            </summary>
      <returns>
            A Double array that represents the y-data values
            in the plot history.
            </returns>
      <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
    </member>
    <member name="M:NationalInstruments.UI.IntensityPlot.GetZData">
      <summary>
            Gets the z-data values in the plot history.
            </summary>
      <returns>
            A Double two-dimensional rectangular array that represents the z-data values
            in the plot history.
            </returns>
      <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
    </member>
    <member name="M:NationalInstruments.UI.IntensityPlot.TryGetZValue(System.Double,System.Double,System.Double@)">
      <summary>
            Gets the z-data value in the plot history for the given x-data and y-data values.
            </summary>
      <param name="xValue">
            The x-data value used to get the z-data value from history.
            </param>
      <param name="yValue">
            The y-data value used to get the z-data value from history.
            </param>
      <param name="zValue">
            Upon return, contains the z-data value
            in the plot for the given xValue (parameter) and yValue (parameter). 
            If the xValue (parameter) and yValue (parameter) values are outside the range of values in the plot history,
            then this value is set to NaN.
            </param>
      <returns>true if the given xValue (parameter) and yValue (parameter) values are within
            the range of values in the plot history and the zValue (parameter) returned is corresponding to the given
            xValue (parameter) and yValue (parameter) values; 
            otherwise, false.
            </returns>
      <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">xValue (parameter) is NaN, NegativeInfinity,
            or PositiveInfinity.
            
            -or-
            yValue (parameter) is NaN, NegativeInfinity,
            or PositiveInfinity.
            </exception>
    </member>
    <member name="M:NationalInstruments.UI.IntensityPlot.TryGetZValue(System.Double,System.Double,System.Boolean,System.Double@)">
      <summary>
            Gets the z-data value in the plot history for the given x-data and y-data values.
            </summary>
      <param name="xValue">
            The x-data value used to get the z-data value from history.
            </param>
      <param name="yValue">
            The y-data value used to get the z-data value from history.
            </param>
      <param name="pixelInterpolation">
            Specifies whether to get the nearest z-value or the pixel interpolated z-value.
            If pixelInterpolation (parameter) is true, then the interpolated pixel value for the given 
            xData and yData values is returned.
            </param>
      <param name="zValue">
            Upon return, contains the z-data value
            in the plot for the given xValue (parameter) and yValue (parameter). 
            If the xValue (parameter) and yValue (parameter) values are outside the range of values in the plot history,
            then it is set to NaN.
            </param>
      <returns>true if the given xValue (parameter) and yValue (parameter) values are within
            the range of values in the plot history and the zValue (parameter) returned is corresponding to the given
            xValue (parameter) and yValue (parameter) values.
            Otherwise, false.
            </returns>
      <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">xValue (parameter) is NaN, NegativeInfinity,
            or PositiveInfinity.
            
            -or-
            yValue (parameter) is NaN, NegativeInfinity,
            or PositiveInfinity.
            </exception>
    </member>
    <member name="M:NationalInstruments.UI.IntensityPlot.FormatDataToolTip(System.Double,System.Double,System.Double)">
      <summary>
            Formats an x, y, and z data value as a plot data tooltip.
            </summary>
      <param name="xData">
            The x-data value to format.
            </param>
      <param name="yData">
            The y-data value to format.
            </param>
      <param name="zData">
            The z-data value to format.
            </param>
      <returns>
            A String that contains the specified x, y, and z data values formatted as
            a data tooltip. The tooltip format is specified by the current values of
            ToolTipXFormat,
            ToolTipYFormat and ToolTipZFormat.
            </returns>
      <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
    </member>
    <member name="M:NationalInstruments.UI.IntensityPlot.Plot(System.Double[0:,0:])">
      <summary>
            Plots a two-dimensional rectangular array of values.
            </summary>
      <param name="zData">
            The array of values to plot.
            </param>
      <exception cref="T:System.ArgumentNullException">zData (parameter) is null.
            </exception>
      <exception cref="T:System.InvalidOperationException">
            		The XAxis of the plot is null.
            
            -or-
            
            		The YAxis of the plot is null.
            
            -or-
            
            		The ColorScale of the plot is null.
            </exception>
      <exception cref="T:System.NotSupportedException">
            The Owner of the plot is not null,
            and the Owner of the plot is
            different from the Owner of XAxis.
            
            -or-
            
            The Owner of the plot is not null,
            and the Owner of the plot is
            different from the Owner of YAxis.
            
            -or-
            
            The Owner of the plot is not null,
            and the Owner of the plot is
            different from the Owner of ColorScale.
            </exception>
      <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
    </member>
    <member name="M:NationalInstruments.UI.IntensityPlot.Plot(System.Double[0:,0:],System.Double,System.Double,System.Double,System.Double)">
      <summary>
            Plots a two-dimensional rectangular array of values against the specified start and increment values.
            </summary>
      <param name="zData">
            The array of values to plot.
            </param>
      <param name="xStart">
            The starting x value.
            </param>
      <param name="xIncrement">
            The value to use to increment x values.
            </param>
      <param name="yStart">
            The starting y value.
            </param>
      <param name="yIncrement">
            The value to use to increment y values.
            </param>
      <exception cref="T:System.ArgumentNullException">zData (parameter) is null.
            </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">xStart (parameter) is NaN, NegativeInfinity,
            or PositiveInfinity.
            
            -or-
            xIncrement (parameter) is NaN, NegativeInfinity,
            or PositiveInfinity.
            
            -or-
            xIncrement (parameter) is lesser than or equal to zero. 
            
            -or-
            yStart (parameter) is NaN, NegativeInfinity,
            or PositiveInfinity.
            
            -or-
            yIncrement (parameter) is NaN, NegativeInfinity,
            or PositiveInfinity.
            
            -or-
            yIncrement (parameter) is lesser than or equal to zero.
            </exception>
      <exception cref="T:System.InvalidOperationException">
            		The XAxis of the plot is null.
            
            -or-
            
            		The YAxis of the plot is null.
            
            -or-
            
            		The ColorScale of the plot is null.
            </exception>
      <exception cref="T:System.NotSupportedException">
            The Owner of the plot is not null,
            and the Owner of the plot is
            different from the Owner of XAxis.
            
            -or-
            
            The Owner of the plot is not null,
            and the Owner of the plot is
            different from the Owner of YAxis.
            
            -or-
            
            The Owner of the plot is not null,
            and the Owner of the plot is
            different from the Owner of ColorScale.
            </exception>
      <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
    </member>
    <member name="M:NationalInstruments.UI.IntensityPlot.Plot(System.Double[0:,0:],System.Boolean)">
      <summary>
            Plots a two-dimensional rectangular array of values with an option to transpose the input array before plotting.
            </summary>
      <param name="zData">
            The array of values to plot.
            </param>
      <param name="transposeZData">
            A Boolean value specifying whether to transpose the input two-dimensional array.
            </param>
      <exception cref="T:System.ArgumentNullException">zData (parameter) is null.
            </exception>
      <exception cref="T:System.InvalidOperationException">
            		The XAxis of the plot is null.
            
            -or-
            
            		The YAxis of the plot is null.
            
            -or-
            
            		The ColorScale of the plot is null.
            </exception>
      <exception cref="T:System.NotSupportedException">
            The Owner of the plot is not null,
            and the Owner of the plot is
            different from the Owner of XAxis.
            
            -or-
            
            The Owner of the plot is not null,
            and the Owner of the plot is
            different from the Owner of YAxis.
            
            -or-
            
            The Owner of the plot is not null,
            and the Owner of the plot is
            different from the Owner of ColorScale.
            </exception>
      <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
    </member>
    <member name="M:NationalInstruments.UI.IntensityPlot.Plot(System.Double[0:,0:],System.Double,System.Double,System.Double,System.Double,System.Boolean)">
      <summary>
            Plots a two-dimensional rectangular array of values against the specified start and increment values and
            with an option to transpose the input array before plotting.
            </summary>
      <param name="zData">
            The array of values to plot.
            </param>
      <param name="xStart">
            The starting x value.
            </param>
      <param name="xIncrement">
            The value to use to increment x values.
            </param>
      <param name="yStart">
            The starting y value.
            </param>
      <param name="yIncrement">
            The value to use to increment y values.
            </param>
      <param name="transposeZData">
            A Boolean value specifying whether to transpose the input two-dimensional array.
            </param>
      <exception cref="T:System.ArgumentNullException">zData (parameter) is null.
            </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">xStart (parameter) is NaN, NegativeInfinity,
            or PositiveInfinity.
            
            -or-
            xIncrement (parameter) is NaN, NegativeInfinity,
            or PositiveInfinity.
            
            -or-
            xIncrement (parameter) is lesser than or equal to zero. 
            
            -or-
            yStart (parameter) is NaN, NegativeInfinity,
            or PositiveInfinity.
            
            -or-
            yIncrement (parameter) is NaN, NegativeInfinity,
            or PositiveInfinity.
            
            -or-
            yIncrement (parameter) is lesser than or equal to zero.
            </exception>
      <exception cref="T:System.InvalidOperationException">
            		The XAxis of the plot is null.
            
            -or-
            
            		The YAxis of the plot is null.
            
            -or-
            
            		The ColorScale of the plot is null.
            </exception>
      <exception cref="T:System.NotSupportedException">
            The Owner of the plot is not null,
            and the Owner of the plot is
            different from the Owner of XAxis.
            
            -or-
            
            The Owner of the plot is not null,
            and the Owner of the plot is
            different from the Owner of YAxis.
            
            -or-
            
            The Owner of the plot is not null,
            and the Owner of the plot is
            different from the Owner of ColorScale.
            </exception>
      <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
    </member>
    <member name="M:NationalInstruments.UI.IntensityPlot.PlotXAppend(System.Double[0:,0:])">
      <summary>
            Plots a two-dimensional rectangular array of values by appending the array to the existing data in the horizontal direction.
            </summary>
      <param name="zData">
            The array of values to plot.
            </param>
      <exception cref="T:System.ArgumentNullException">zData (parameter) is null.
            </exception>
      <exception cref="T:System.ArgumentException">
            		The size of zData (parameter) does not match the size of existing data.
            </exception>
      <exception cref="T:System.InvalidOperationException">
            		The XAxis of the plot is null.
            
            -or-
            
            		The YAxis of the plot is null.
            
            -or-
            
            		The ColorScale of the plot is null.
            </exception>
      <exception cref="T:System.NotSupportedException">
            The Owner of the plot is not null,
            and the Owner of the plot is
            different from the Owner of XAxis.
            
            -or-
            
            The Owner of the plot is not null,
            and the Owner of the plot is
            different from the Owner of YAxis.
            
            -or-
            
            The Owner of the plot is not null,
            and the Owner of the plot is
            different from the Owner of ColorScale.
            </exception>
      <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
    </member>
    <member name="M:NationalInstruments.UI.IntensityPlot.PlotXAppend(System.Double[0:,0:],System.Boolean)">
      <summary>
             Plots a two-dimensional rectangular array of values by appending the array  to the existing data in the horizontal direction. 
             Provides an option to transpose the input array before plotting.
             </summary>
      <param name="zData">
             The array of values to plot.
             </param>
      <param name="transposeZData">
             A Boolean value specifying whether to transpose the input two-dimensional array.
             </param>
      <exception cref="T:System.ArgumentNullException">zData (parameter) is null.
             </exception>
      <exception cref="T:System.ArgumentException">
             		The size of zData (parameter) does not match the size of existing data.
             </exception>
      <exception cref="T:System.InvalidOperationException">
             		The XAxis of the plot is null.
             
             -or-
             
             		The YAxis of the plot is null.
             
             -or-
             
             		The ColorScale of the plot is null.
             </exception>
      <exception cref="T:System.NotSupportedException">
             The Owner of the plot is not null,
             and the Owner of the plot is
             different from the Owner of XAxis.
             
             -or-
             
             The Owner of the plot is not null,
             and the Owner of the plot is
             different from the Owner of YAxis.
             
             -or-
             
             The Owner of the plot is not null,
             and the Owner of the plot is
             different from the Owner of ColorScale.
             </exception>
      <exception cref="T:System.ObjectDisposedException">
             The object has been disposed.
             </exception>
    </member>
    <member name="M:NationalInstruments.UI.IntensityPlot.PlotYAppend(System.Double[0:,0:])">
      <summary>
            Plots a two-dimensional rectangular array of values by appending the array  to the existing data in the vertical direction.
            </summary>
      <param name="zData">
            The array of values to plot.
            </param>
      <exception cref="T:System.ArgumentNullException">zData (parameter) is null.
            </exception>
      <exception cref="T:System.ArgumentException">
            		The size of zData (parameter) does not match the size of existing data.
            </exception>
      <exception cref="T:System.InvalidOperationException">
            		The XAxis of the plot is null.
            
            -or-
            
            		The YAxis of the plot is null.
            
            -or-
            
            		The ColorScale of the plot is null.
            </exception>
      <exception cref="T:System.NotSupportedException">
            The Owner of the plot is not null,
            and the Owner of the plot is
            different from the Owner of XAxis.
            
            -or-
            
            The Owner of the plot is not null,
            and the Owner of the plot is
            different from the Owner of YAxis.
            
            -or-
            
            The Owner of the plot is not null,
            and the Owner of the plot is
            different from the Owner of ColorScale.
            </exception>
      <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
    </member>
    <member name="M:NationalInstruments.UI.IntensityPlot.PlotYAppend(System.Double[0:,0:],System.Boolean)">
      <summary>
            Plots a two-dimensional rectangular array of values by appending the array  to the existing data in the vertical direction.
            Provides an option to transpose the input array before plotting.
            </summary>
      <param name="zData">
            The array of values to plot.
            </param>
      <param name="transposeZData">
            A Boolean value specifying whether to transpose the input two-dimensional array.
            </param>
      <exception cref="T:System.ArgumentNullException">zData (parameter) is null.
            </exception>
      <exception cref="T:System.ArgumentException">
            		The size of zData (parameter) does not match the size of existing data.
            </exception>
      <exception cref="T:System.InvalidOperationException">
            		The XAxis of the plot is null.
            
            -or-
            
            		The YAxis of the plot is null.
            
            -or-
            
            		The ColorScale of the plot is null.
            </exception>
      <exception cref="T:System.NotSupportedException">
            The Owner of the plot is not null,
            and the Owner of the plot is
            different from the Owner of XAxis.
            
            -or-
            
            The Owner of the plot is not null,
            and the Owner of the plot is
            different from the Owner of YAxis.
            
            -or-
            
            The Owner of the plot is not null,
            and the Owner of the plot is
            different from the Owner of ColorScale.
            </exception>
      <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
    </member>
    <member name="M:NationalInstruments.UI.IntensityPlot.Clone">
      <summary>
            Creates a new object that is a copy of this instance.
            </summary>
      <returns>
            A new object that is a copy of this instance.
            </returns>
      <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
    </member>
    <member name="M:NationalInstruments.UI.IntensityPlot.DrawLegendItem(NationalInstruments.UI.ComponentDrawArgs)">
      <summary>
            Draws the symbol of a IntensityPlot.
            </summary>
      <param name="args">
            A ComponentDrawArgs that contains the graphics surface to
            draw the legend item on and the bounds in which to draw the legend item.
            </param>
      <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
      <exception cref="T:System.ArgumentNullException">args (parameter) is null.
            </exception>
    </member>
    <member name="M:NationalInstruments.UI.IntensityPlot.ToString">
      <summary>
            Returns a string representation of the object.
            </summary>
      <returns>
            A string representation of the object.
            </returns>
      <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
    </member>
    <member name="M:NationalInstruments.UI.IntensityPlot.OnBeforeDraw(NationalInstruments.UI.BeforeDrawIntensityPlotEventArgs)">
      <summary>
            Raises the BeforeDraw event.
            </summary>
      <param name="e">
            An BeforeDrawIntensityPlotEventArgs that contains the
            event data.
            </param>
      <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
    </member>
    <member name="M:NationalInstruments.UI.IntensityPlot.OnAfterDraw(NationalInstruments.UI.AfterDrawIntensityPlotEventArgs)">
      <summary>
            Raises the AfterDraw event.
            </summary>
      <param name="e">
            An AfterDrawIntensityPlotEventArgs that contains the
            event data.
            </param>
      <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
    </member>
    <member name="M:NationalInstruments.UI.IntensityPlot.OnDataChanged(System.EventArgs)">
      <summary>
            Raises the DataChanged event.
            </summary>
      <param name="e">
            An EventArgs that contains the event data.
            </param>
      <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
    </member>
    <member name="M:NationalInstruments.UI.IntensityPlot.OnLegendItemChanged(System.EventArgs)">
      <summary>
            Raises the LegendItemChanged event.
            </summary>
      <param name="e">
            An EventArgs that contains the event data.
            </param>
      <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
    </member>
    <member name="M:NationalInstruments.UI.IntensityPlot.Dispose(System.Boolean)">
      <summary>
            Releases the unmanaged resources used by the IntensityPlot
            and optionally releases the managed resources.
            </summary>
      <param name="disposing">true to release both managed and unmanaged resources; false to release only
            unmanaged resources.
            </param>
    </member>
    <member name="P:NationalInstruments.UI.IntensityPlot.XAxis">
      <summary>
            Gets or sets the x-axis for the plot.
            </summary>
      <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
    </member>
    <member name="P:NationalInstruments.UI.IntensityPlot.YAxis">
      <summary>
            Gets or sets the y-axis for the plot.
            </summary>
      <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
    </member>
    <member name="P:NationalInstruments.UI.IntensityPlot.ColorScale">
      <summary>
            Gets or sets the color scale for the plot.
            </summary>
      <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
    </member>
    <member name="P:NationalInstruments.UI.IntensityPlot.CanScaleXAxis">
      <summary>
            Gets or sets a value indicating whether the plot data is used to calculate the range of the x-axis.
            </summary>
      <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
    </member>
    <member name="P:NationalInstruments.UI.IntensityPlot.CanScaleYAxis">
      <summary>
            Gets or sets a value indicating whether the plot data is used to calculate the range of the y-axis.
            </summary>
      <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
    </member>
    <member name="P:NationalInstruments.UI.IntensityPlot.CanScaleColorScale">
      <summary>
            Gets or sets a value indicating whether the plot data is used to calculate the range of the color scale.
            </summary>
      <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
    </member>
    <member name="P:NationalInstruments.UI.IntensityPlot.HistoryCountX">
      <summary>
            Gets the number of data points in the horizontal direction in the history.
            </summary>
      <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
    </member>
    <member name="P:NationalInstruments.UI.IntensityPlot.HistoryCountY">
      <summary>
            Gets the number of data points in the vertical direction in the history.
            </summary>
      <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
    </member>
    <member name="P:NationalInstruments.UI.IntensityPlot.HistoryCapacityX">
      <summary>
            Gets or sets the maximum number of data points in the horizontal direction that can be stored in history
            when appending data.
            </summary>
      <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
            The value is less than or equal to zero.
            </exception>
    </member>
    <member name="P:NationalInstruments.UI.IntensityPlot.HistoryCapacityY">
      <summary>
            Gets or sets the maximum number of data points in the vertical direction that can be stored in the history
            when appending data.
            </summary>
      <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
            The value is less than or equal to zero.
            </exception>
    </member>
    <member name="P:NationalInstruments.UI.IntensityPlot.ToolTipsEnabled">
      <summary>
            Gets or sets a value indicating if a plot data tooltip is shown when the mouse hovers over a data point
            in the plot.
            </summary>
      <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
    </member>
    <member name="P:NationalInstruments.UI.IntensityPlot.ToolTipXFormat">
      <summary>
            Gets or sets the format string used to format the x data value displayed in the tooltip.
            </summary>
      <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
    </member>
    <member name="P:NationalInstruments.UI.IntensityPlot.ToolTipYFormat">
      <summary>
            Gets or sets the format string used to format the y data value displayed in the tooltip.
            </summary>
      <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
    </member>
    <member name="P:NationalInstruments.UI.IntensityPlot.ToolTipZFormat">
      <summary>
            Gets or sets the format string used to format the z data value displayed in the tooltip.
            </summary>
      <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
    </member>
    <member name="P:NationalInstruments.UI.IntensityPlot.DefaultXStart">
      <summary>
            Gets or sets the default value that is used for the starting x value.
            </summary>
      <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
            The specified value is NaN, NegativeInfinity,
            or PositiveInfinity.
            </exception>
    </member>
    <member name="P:NationalInstruments.UI.IntensityPlot.DefaultXIncrement">
      <summary>
            Gets or sets the default value to use to increment x values.
            </summary>
      <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
            The specified value is lesser than or equal to zero or is NaN, NegativeInfinity,
            or PositiveInfinity.
            </exception>
    </member>
    <member name="P:NationalInstruments.UI.IntensityPlot.DefaultYStart">
      <summary>
            Gets or sets the default value that is used for the starting y value.
            </summary>
      <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
            The specified value is NaN, NegativeInfinity,
            or PositiveInfinity.
            </exception>
    </member>
    <member name="P:NationalInstruments.UI.IntensityPlot.DefaultYIncrement">
      <summary>
            Gets or sets the default value to use to increment y values.
            </summary>
      <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
            The specified value is lesser than or equal to zero or is NaN, NegativeInfinity,
            or PositiveInfinity.
            </exception>
    </member>
    <member name="P:NationalInstruments.UI.IntensityPlot.PixelInterpolation">
      <summary>
            Gets or sets a value indicating if plot data is interpolated for each pixel and drawn pixel by pixel.
            </summary>
      <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
    </member>
    <member name="P:NationalInstruments.UI.IntensityPlot.SmoothUpdates">
      <summary>
            Gets or sets the value which specifies whether the plot is drawn to an off-screen buffer before drawing to the screen.
            </summary>
      <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
    </member>
    <member name="P:NationalInstruments.UI.IntensityPlot.Snappable">
      <summary>
            Gets or sets a value indicating whether cursors can snap to this plot.
            </summary>
      <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
    </member>
    <member name="E:NationalInstruments.UI.IntensityPlot.BeforeDraw">
      <summary>
            Occurs before the plot is drawn.
            </summary>
      <exception cref="T:System.ObjectDisposedException">
            An event handler is added after the object has been disposed.
            </exception>
    </member>
    <member name="E:NationalInstruments.UI.IntensityPlot.AfterDraw">
      <summary>
            Occurs after the plot has been drawn.
            </summary>
      <exception cref="T:System.ObjectDisposedException">
            An event handler is added after the object has been disposed.
            </exception>
    </member>
    <member name="E:NationalInstruments.UI.IntensityPlot.DataChanged">
      <summary>
            Occurs when a new set of data is plotted.
            </summary>
      <exception cref="T:System.ObjectDisposedException">
            An event handler is added after the object has been disposed.
            </exception>
    </member>
    <member name="E:NationalInstruments.UI.IntensityPlot.LegendItemChanged">
      <summary>
            Occurs when the IntensityPlot has changed such
            that its appearance in a legend control must be updated.
            </summary>
    </member>
    <member name="T:NationalInstruments.UI.IIntensityGraph">
      <summary>
                Defines the interface for graphs that plot three-dimensional data on a two-dimensional plot with color representing the third dimension.
            </summary>
    </member>
    <member name="M:NationalInstruments.UI.IIntensityGraph.DrawOriginLines(NationalInstruments.UI.ComponentDrawArgs)">
      <summary>
            Draws the origin lines in the plot area of the intensity graph.
            </summary>
      <param name="args">
            A ComponentDrawArgs that contains the drawing data.
            </param>
      <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
      <exception cref="T:System.ArgumentNullException">args (parameter) is null.
            </exception>
    </member>
    <member name="M:NationalInstruments.UI.IIntensityGraph.ZoomAroundPoint(System.Single,NationalInstruments.UI.IntensityPlot,System.Double,System.Double)">
      <summary>
            Zooms around the specified data point with the specified zoom factor and reference plot.
            </summary>
      <param name="zoomFactor">
            The percentage to zoom by.
            </param>
      <param name="referencePlot">
            An IntensityPlot to use as the context for xData (parameter)
            and yData (parameter).
            </param>
      <param name="xData">
            The x data value to zoom around.
            </param>
      <param name="yData">
            The y data value to zoom around.
            </param>
      <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
            The zoomFactor (parameter) is less than or equal to 0.0.
            
            -or-
            zoomFactor (parameter) is NaN,
            NegativeInfinity, or
            PositiveInfinity.
            </exception>
      <exception cref="T:System.ArgumentNullException">referencePlot (parameter) is null.
            </exception>
      <exception cref="T:System.NotSupportedException">IIntensityGraph is not the
            Owner of referencePlot (parameter).
            </exception>
    </member>
    <member name="M:NationalInstruments.UI.IIntensityGraph.ZoomXY(NationalInstruments.UI.IntensityPlot,System.Double,System.Double,System.Double,System.Double)">
      <summary>
            Zooms to the region of the plot area specified by the x location, y location, region width, region height, and
            reference plot.
            </summary>
      <param name="referencePlot">
            An IntensityPlot to use as the context for xData (parameter),
            yData (parameter), width (parameter) and height (parameter).
            </param>
      <param name="xData">
            The x data value of the corner of the plot area region to zoom.
            </param>
      <param name="yData">
            The y data value of the corner of the plot area region to zoom.
            </param>
      <param name="width">
            The width, in data units, of the plot area region to zoom.
            </param>
      <param name="height">
            The height, in data units, of the plot area region to zoom.
            </param>
      <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
      <exception cref="T:System.ArgumentNullException">referencePlot (parameter) is null.
            </exception>
      <exception cref="T:System.NotSupportedException">IIntensityGraph is not the
            Owner of referencePlot (parameter).
            </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">width (parameter) or height (parameter) is
            NaN,
            NegativeInfinity, or
            PositiveInfinity.
            </exception>
    </member>
    <member name="M:NationalInstruments.UI.IIntensityGraph.Plot(System.Double[0:,0:])">
      <summary>
            Plots a two-dimensional rectangular array of values.
            </summary>
      <param name="zData">
            The array of values to plot.
            </param>
      <exception cref="T:System.ArgumentNullException">zData (parameter) is null.
            </exception>
      <exception cref="T:System.InvalidOperationException">
            		The XAxis of the plot is null.
            
            -or-
            
            		The YAxis of the plot is null.
            
            -or-
            
            		The ColorScale of the plot is null.
            </exception>
      <exception cref="T:System.NotSupportedException">
            The Owner of the plot is not null,
            and the Owner of the plot is
            different from the Owner of XAxis.
            
            -or-
            
            The Owner of the plot is not null,
            and the Owner of the plot is
            different from the Owner of YAxis.
            
            -or-
            
            The Owner of the plot is not null,
            and the Owner of the plot is
            different from the Owner of ColorScale.
            </exception>
      <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
    </member>
    <member name="M:NationalInstruments.UI.IIntensityGraph.Plot(System.Double[0:,0:],System.Double,System.Double,System.Double,System.Double)">
      <summary>
            Plots a two-dimensional rectangular array of values against the specified start and increment values.
            </summary>
      <param name="zData">
            The array of values to plot.
            </param>
      <param name="xStart">
            The starting x value.
            </param>
      <param name="xIncrement">
            The value to use to increment x values.
            </param>
      <param name="yStart">
            The starting y value.
            </param>
      <param name="yIncrement">
            The value to use to increment y values.
            </param>
      <exception cref="T:System.ArgumentNullException">zData (parameter) is null.
            </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">xIncrement (parameter) is lesser than or equal to zero. 
            
                    -or-
                  yIncrement (parameter) is lesser than or equal to zero.
            </exception>
      <exception cref="T:System.InvalidOperationException">
            		The XAxis of the plot is null.
            
            -or-
            
            		The YAxis of the plot is null.
            
            -or-
            
            		The ColorScale of the plot is null.
            </exception>
      <exception cref="T:System.NotSupportedException">
            The Owner of the plot is not null,
            and the Owner of the plot is
            different from the Owner of XAxis.
            
            -or-
            
            The Owner of the plot is not null,
            and the Owner of the plot is
            different from the Owner of YAxis.
            
            -or-
            
            The Owner of the plot is not null,
            and the Owner of the plot is
            different from the Owner of ColorScale.
            </exception>
      <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
    </member>
    <member name="M:NationalInstruments.UI.IIntensityGraph.Plot(System.Double[0:,0:],System.Boolean)">
      <summary>
            Plots a two-dimensional rectangular array of values with an option to transpose the input array before plotting.
            </summary>
      <param name="zData">
            The array of values to plot.
            </param>
      <param name="transposeZData">
            A Boolean value specifying whether to transpose the input two-dimensional array.
            </param>
      <exception cref="T:System.ArgumentNullException">zData (parameter) is null.
            </exception>
      <exception cref="T:System.InvalidOperationException">
            		The XAxis of the plot is null.
            
            -or-
            
            		The YAxis of the plot is null.
            
            -or-
            
            		The ColorScale of the plot is null.
            </exception>
      <exception cref="T:System.NotSupportedException">
            The Owner of the plot is not null,
            and the Owner of the plot is
            different from the Owner of XAxis.
            
            -or-
            
            The Owner of the plot is not null,
            and the Owner of the plot is
            different from the Owner of YAxis.
            
            -or-
            
            The Owner of the plot is not null,
            and the Owner of the plot is
            different from the Owner of ColorScale.
            </exception>
      <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
    </member>
    <member name="M:NationalInstruments.UI.IIntensityGraph.Plot(System.Double[0:,0:],System.Double,System.Double,System.Double,System.Double,System.Boolean)">
      <summary>
            Plots a two-dimensional rectangular array of values against the specified start and increment values 
            with an option to transpose the input array before plotting.
            </summary>
      <param name="zData">
            The array of values to plot.
            </param>
      <param name="xStart">
            The starting x value.
            </param>
      <param name="xIncrement">
            The value to use to increment x values.
            </param>
      <param name="yStart">
            The starting y value.
            </param>
      <param name="yIncrement">
            The value to use to increment y values.
            </param>
      <param name="transposeZData">
            A Boolean value specifying whether to transpose the input two-dimensional array.
            </param>
      <exception cref="T:System.ArgumentNullException">zData (parameter) is null.
            </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">xIncrement (parameter) is lesser than or equal to zero. 
            
                    -or-
                  yIncrement (parameter) is lesser than or equal to zero.
            </exception>
      <exception cref="T:System.InvalidOperationException">
            		The XAxis of the plot is null.
            
            -or-
            
            		The YAxis of the plot is null.
            
            -or-
            
            		The ColorScale of the plot is null.
            </exception>
      <exception cref="T:System.NotSupportedException">
            The Owner of the plot is not null,
            and the Owner of the plot is
            different from the Owner of XAxis.
            
            -or-
            
            The Owner of the plot is not null,
            and the Owner of the plot is
            different from the Owner of YAxis.
            
            -or-
            
            The Owner of the plot is not null,
            and the Owner of the plot is
            different from the Owner of ColorScale.
            </exception>
      <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
    </member>
    <member name="M:NationalInstruments.UI.IIntensityGraph.PlotXAppend(System.Double[0:,0:])">
      <summary>
            Plots a two-dimensional rectangular array of values by appending the array 
             to the existing data in the horizontal direction.
            </summary>
      <param name="zData">
            The array of values to plot.
            </param>
      <exception cref="T:System.ArgumentNullException">zData (parameter) is null.
            </exception>
      <exception cref="T:System.ArgumentException">
            		The size of zData (parameter) does not match the size of existing data.
            </exception>
      <exception cref="T:System.InvalidOperationException">
            		The XAxis of the plot is null.
            
            -or-
            
            		The YAxis of the plot is null.
            
            -or-
            
            		The ColorScale of the plot is null.
            </exception>
      <exception cref="T:System.NotSupportedException">
            The Owner of the plot is not null,
            and the Owner of the plot is
            different from the Owner of XAxis.
            
            -or-
            
            The Owner of the plot is not null,
            and the Owner of the plot is
            different from the Owner of YAxis.
            
            -or-
            
            The Owner of the plot is not null,
            and the Owner of the plot is
            different from the Owner of ColorScale.
            </exception>
      <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
    </member>
    <member name="M:NationalInstruments.UI.IIntensityGraph.PlotXAppend(System.Double[0:,0:],System.Boolean)">
      <summary>
            Plots a two-dimensional rectangular array of values by appending the array  to the existing data in the horizontal direction. 
            Provides an option to transpose the input array before plotting.
            </summary>
      <param name="zData">
            The array of values to plot.
            </param>
      <param name="transposeZData">
            A Boolean value specifying whether to transpose the input two-dimensional array.
            </param>
      <exception cref="T:System.ArgumentNullException">zData (parameter) is null.
            </exception>
      <exception cref="T:System.ArgumentException">
            		The size of zData (parameter) does not match the size of existing data.
            </exception>
      <exception cref="T:System.InvalidOperationException">
            		The XAxis of the plot is null.
            
            -or-
            
            		The YAxis of the plot is null.
            
            -or-
            
            		The ColorScale of the plot is null.
            </exception>
      <exception cref="T:System.NotSupportedException">
            The Owner of the plot is not null,
            and the Owner of the plot is
            different from the Owner of XAxis.
            
            -or-
            
            The Owner of the plot is not null,
            and the Owner of the plot is
            different from the Owner of YAxis.
            
            -or-
            
            The Owner of the plot is not null,
            and the Owner of the plot is
            different from the Owner of ColorScale.
            </exception>
      <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
    </member>
    <member name="M:NationalInstruments.UI.IIntensityGraph.PlotYAppend(System.Double[0:,0:])">
      <summary>
            Plots a two-dimensional rectangular array of values by appending the array  to the existing data in the vertical direction.
            </summary>
      <param name="zData">
            The array of values to plot.
            </param>
      <exception cref="T:System.ArgumentNullException">zData (parameter) is null.
            </exception>
      <exception cref="T:System.ArgumentException">
            		The size of zData (parameter) does not match the size of existing data.
            </exception>
      <exception cref="T:System.InvalidOperationException">
            		The XAxis of the plot is null.
            
            -or-
            
            		The YAxis of the plot is null.
            
            -or-
            
            		The ColorScale of the plot is null.
            </exception>
      <exception cref="T:System.NotSupportedException">
            The Owner of the plot is not null,
            and the Owner of the plot is
            different from the Owner of XAxis.
            
            -or-
            
            The Owner of the plot is not null,
            and the Owner of the plot is
            different from the Owner of YAxis.
            
            -or-
            
            The Owner of the plot is not null,
            and the Owner of the plot is
            different from the Owner of ColorScale.
            </exception>
      <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
    </member>
    <member name="M:NationalInstruments.UI.IIntensityGraph.PlotYAppend(System.Double[0:,0:],System.Boolean)">
      <summary>
            Plots a two-dimensional rectangular array of values by appending the array  to the existing data in the vertical direction.
            Provides an option to transpose the input array before plotting.
            </summary>
      <param name="zData">
            The array of values to plot.
            </param>
      <param name="transposeZData">
            A Boolean value specifying whether to transpose the input two-dimensional array.
            </param>
      <exception cref="T:System.ArgumentNullException">zData (parameter) is null.
            </exception>
      <exception cref="T:System.ArgumentException">
            		The size of zData (parameter) does not match the size of existing data.
            </exception>
      <exception cref="T:System.InvalidOperationException">
            		The XAxis of the plot is null.
            
            -or-
            
            		The YAxis of the plot is null.
            
            -or-
            
            		The ColorScale of the plot is null.
            </exception>
      <exception cref="T:System.NotSupportedException">
            The Owner of the plot is not null,
            and the Owner of the plot is
            different from the Owner of XAxis.
            
            -or-
            
            The Owner of the plot is not null,
            and the Owner of the plot is
            different from the Owner of YAxis.
            
            -or-
            
            The Owner of the plot is not null,
            and the Owner of the plot is
            different from the Owner of ColorScale.
            </exception>
      <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
    </member>
    <member name="P:NationalInstruments.UI.IIntensityGraph.Plots">
      <summary>
            Gets the collection of plots on the intensity graph.
            </summary>
      <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
    </member>
    <member name="P:NationalInstruments.UI.IIntensityGraph.XAxes">
      <summary>
            Gets the collection of x axes on the intensity  graph.
            </summary>
      <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
    </member>
    <member name="P:NationalInstruments.UI.IIntensityGraph.YAxes">
      <summary>
            Gets the collection of y axes on the intensity graph.
            </summary>
      <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
    </member>
    <member name="P:NationalInstruments.UI.IIntensityGraph.ColorScales">
      <summary>
            Gets the collection of color scales on the graph.
            </summary>
      <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
    </member>
    <member name="P:NationalInstruments.UI.IIntensityGraph.Cursors">
      <summary>
            Gets the collection of plot area cursors on the intensity graph.
            </summary>
      <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
    </member>
    <member name="P:NationalInstruments.UI.IIntensityGraph.Annotations">
      <summary>
            Gets the collection of annotations.
            </summary>
      <exception cref="T:System.ObjectDisposedException">
            The object has been disposed. 
            </exception>
    </member>
    <member name="E:NationalInstruments.UI.IIntensityGraph.AfterDrawPlot">
      <summary>
            Occurs after a plot is drawn.
            </summary>
      <exception cref="T:System.ObjectDisposedException">
            An event handler is added after the object has been disposed.
            </exception>
    </member>
    <member name="E:NationalInstruments.UI.IIntensityGraph.BeforeDrawPlot">
      <summary>
            Occurs before a plot is drawn.
            </summary>
      <exception cref="T:System.ObjectDisposedException">
            An event handler is added after the object has been disposed.
            </exception>
    </member>
    <member name="E:NationalInstruments.UI.IIntensityGraph.PlotDataChanged">
      <summary>
            Occurs when a new set of data is plotted on a plot that is contained in the graph plot collection.
            </summary>
      <exception cref="T:System.ObjectDisposedException">
            An event handler is added after the object has been disposed.
            </exception>
    </member>
    <member name="E:NationalInstruments.UI.IIntensityGraph.XAxesChanged">
      <summary>
            Occurs when the content of the XAxes collection
            changes.
            </summary>
      <exception cref="T:System.ObjectDisposedException">
            An event handler is added after the object has been disposed.
            </exception>
    </member>
    <member name="E:NationalInstruments.UI.IIntensityGraph.XAxisRangeChanged">
      <summary>
            Occurs when the range of an IntensityXAxis in the XAxes collection
            of the graph changes.
            </summary>
      <exception cref="T:System.ObjectDisposedException">
            An event handler is added after the object has been disposed.
            </exception>
    </member>
    <member name="E:NationalInstruments.UI.IIntensityGraph.YAxesChanged">
      <summary>
            Occurs when the content of the YAxes collection
            changes.
            </summary>
      <exception cref="T:System.ObjectDisposedException">
            An event handler is added after the object has been disposed.
            </exception>
    </member>
    <member name="E:NationalInstruments.UI.IIntensityGraph.YAxisRangeChanged">
      <summary>
            Occurs when the range of an IntensityYAxis in the YAxes collection
            of the graph changes.
            </summary>
      <exception cref="T:System.ObjectDisposedException">
            An event handler is added after the object has been disposed.
            </exception>
    </member>
    <member name="E:NationalInstruments.UI.IIntensityGraph.ColorScalesChanged">
      <summary>
            Occurs when the content of the ColorScales collection
            changes.
            </summary>
      <exception cref="T:System.ObjectDisposedException">
            An event handler is added after the object has been disposed.
            </exception>
    </member>
    <member name="E:NationalInstruments.UI.IIntensityGraph.ColorScaleRangeChanged">
      <summary>
            Occurs when the range of an ColorScale in the ColorScales collection
            of the graph changes.
            </summary>
      <exception cref="T:System.ObjectDisposedException">
            An event handler is added after the object has been disposed.
            </exception>
    </member>
    <member name="E:NationalInstruments.UI.IIntensityGraph.AfterDrawCursor">
      <summary>
            Occurs after a cursor is drawn.
            </summary>
      <exception cref="T:System.ObjectDisposedException">
            An event handler is added after the object has been disposed.
            </exception>
    </member>
    <member name="E:NationalInstruments.UI.IIntensityGraph.BeforeDrawCursor">
      <summary>
            Occurs before a cursor is drawn.
            </summary>
      <exception cref="T:System.ObjectDisposedException">
            An event handler is added after the object has been disposed.
            </exception>
    </member>
    <member name="E:NationalInstruments.UI.IIntensityGraph.CursorsChanged">
      <summary>
            Occurs when the content of the Cursors collection
            changes.
            </summary>
      <exception cref="T:System.ObjectDisposedException">
            An event handler is added after the object has been disposed.
            </exception>
    </member>
    <member name="E:NationalInstruments.UI.IIntensityGraph.AfterDrawPointAnnotation">
      <summary>
            Occurs after a point annotation is drawn. 
            </summary>
      <exception cref="T:System.ObjectDisposedException">
            An event handler is added after the object has been disposed.
            </exception>
    </member>
    <member name="E:NationalInstruments.UI.IIntensityGraph.AfterDrawRangeAnnotation">
      <summary>
            Occurs after a range annotation is drawn.
            </summary>
      <exception cref="T:System.ObjectDisposedException">
            An event handler is added after the object has been disposed.
            </exception>
    </member>
    <member name="E:NationalInstruments.UI.IIntensityGraph.BeforeDrawPointAnnotation">
      <summary>
            Occurs before a point annotation is drawn.
            </summary>
      <exception cref="T:System.ObjectDisposedException">
            An event handler is added after the object has been disposed.
            </exception>
    </member>
    <member name="E:NationalInstruments.UI.IIntensityGraph.BeforeDrawRangeAnnotation">
      <summary>
            Occurs before a range annotation is drawn.
            </summary>
      <exception cref="T:System.ObjectDisposedException">
            An event handler is added after the object has been disposed.
            </exception>
    </member>
    <member name="E:NationalInstruments.UI.IIntensityGraph.AnnotationsChanged">
      <summary>
            Occurs when the content of the Annotations collection
            changes.
            </summary>
      <exception cref="T:System.ObjectDisposedException"> 
            An event handler is added after the object has been disposed.
            </exception>
    </member>
    <member name="T:NationalInstruments.UI.IComplexGraph">
      <summary>
            Defines the interface for graphs that plot ComplexDouble data values.
            </summary>
    </member>
    <member name="M:NationalInstruments.UI.IComplexGraph.DrawOriginLines(NationalInstruments.UI.ComponentDrawArgs)">
      <summary>
            Draws the origin lines in the plot area of the complex graph.
            </summary>
      <param name="args">
            A ComponentDrawArgs that contains the drawing data.
            </param>
      <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
      <exception cref="T:System.ArgumentNullException">args (parameter) is null.
            </exception>
    </member>
    <member name="M:NationalInstruments.UI.IComplexGraph.PlotComplex(NationalInstruments.ComplexDouble)">
      <summary>
            Plots the imaginary part against the real part of a ComplexDouble data value.
            </summary>
      <param name="complexData">
            The ComplexDouble data value to plot.
            </param>
      <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
      <exception cref="T:System.InvalidOperationException">
            		The XAxis of the plot is null.
            
            -or-
            
            		The YAxis of the plot is null.
            </exception>
      <exception cref="T:System.NotSupportedException">
            The Owner of the plot is not null,
            and the Owner of the plot is
            different from the Owner of XAxis.
            
            -or-
            
            The Owner of the plot is not null,
            and the Owner of the plot is
            different from the Owner of YAxis.
            </exception>
      <exception cref="T:System.ArgumentException">The imaginary and real parts of complexData (parameter) are special values, and
            	ProcessSpecialValues is true.
            </exception>
    </member>
    <member name="M:NationalInstruments.UI.IComplexGraph.PlotComplex(NationalInstruments.ComplexDouble[])">
      <summary>
            Plots the imaginary parts against the real parts of an array of ComplexDouble data values.
            </summary>
      <param name="complexData">
            The array of ComplexDouble  data values to plot.
            </param>
      <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
      <exception cref="T:System.ArgumentNullException">complexData (parameter) is null.
            </exception>
      <exception cref="T:System.InvalidOperationException">
            		The XAxis of the plot is null.
            
            -or-
            
            		The YAxis of the plot is null.
            </exception>
      <exception cref="T:System.NotSupportedException">
            The Owner of the plot is not null,
            and the Owner of the plot is
            different from the Owner of XAxis.
            
            -or-
            
            The Owner of the plot is not null,
            and the Owner of the plot is
            different from the Owner of YAxis.
            </exception>
      <exception cref="T:System.ArgumentException">The imaginary and real parts of complexData (parameter) are special values, and
            	ProcessSpecialValues is true.
            </exception>
    </member>
    <member name="M:NationalInstruments.UI.IComplexGraph.PlotComplex(NationalInstruments.ComplexDouble[],System.Int32,System.Int32)">
      <summary>
            Plots the imaginary parts against the real parts of a subset of an array of ComplexDouble data values.
            </summary>
      <param name="complexData">
            The array of ComplexDouble data values to plot.
            </param>
      <param name="startIndex">
            The index in complexData (parameter) at which the plot data begins.
            </param>
      <param name="length">
            The number of elements, beginning at startIndex (parameter) in complexData (parameter), to plot.
            </param>
      <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
      <exception cref="T:System.ArgumentNullException">complexData (parameter) is null.
            </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">startIndex (parameter) is less than 0.
            
            -or-
            startIndex (parameter) is greater than or equal to the
            number of elements in complexData (parameter).
            
            -or-
            length (parameter) is less than 0.
            
            -or-
            length (parameter) is greater than the number of elements
            from startIndex (parameter) to the end of complexData (parameter).
            </exception>
      <exception cref="T:System.InvalidOperationException">
            		The XAxis of the plot is null.
            
            -or-
            
            		The YAxis of the plot is null.
            </exception>
      <exception cref="T:System.NotSupportedException">
            The Owner of the plot is not null,
            and the Owner of the plot is
            different from the Owner of XAxis.
            
            -or-
            
            The Owner of the plot is not null,
            and the Owner of the plot is
            different from the Owner of YAxis.
            </exception>
      <exception cref="T:System.ArgumentException">The imaginary and real parts of complexData (parameter) are special values, and
            	ProcessSpecialValues is true.
            </exception>
    </member>
    <member name="M:NationalInstruments.UI.IComplexGraph.PlotComplexAppend(NationalInstruments.ComplexDouble)">
      <summary>
            Plots the imaginary part against the real part of a ComplexDouble data value by appending to the existing data.
            </summary>
      <param name="complexData">
            The ComplexDouble data value to plot.
            </param>
      <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
      <exception cref="T:System.InvalidOperationException">
            		The XAxis of the plot is null.
            
            -or-
            
            		The YAxis of the plot is null.
            </exception>
      <exception cref="T:System.NotSupportedException">
            The Owner of the plot is not null,
            and the Owner of the plot is
            different from the Owner of XAxis.
            
            -or-
            
            The Owner of the plot is not null,
            and the Owner of the plot is
            different from the Owner of YAxis.
            </exception>
      <exception cref="T:System.ArgumentException">The imaginary and real parts of complexData (parameter) are special values, and
            	ProcessSpecialValues is true.
            </exception>
    </member>
    <member name="M:NationalInstruments.UI.IComplexGraph.PlotComplexAppend(NationalInstruments.ComplexDouble[])">
      <summary>
            Plots the imaginary parts against the real parts of an array of ComplexDouble data values by appending to the existing data.
            </summary>
      <param name="complexData">
            The array of ComplexDouble  data values to plot.
            </param>
      <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
      <exception cref="T:System.ArgumentNullException">complexData (parameter) is null.
            </exception>
      <exception cref="T:System.InvalidOperationException">
            		The XAxis of the plot is null.
            
            -or-
            
            		The YAxis of the plot is null.
            </exception>
      <exception cref="T:System.NotSupportedException">
            The Owner of the plot is not null,
            and the Owner of the plot is
            different from the Owner of XAxis.
            
            -or-
            
            The Owner of the plot is not null,
            and the Owner of the plot is
            different from the Owner of YAxis.
            </exception>
      <exception cref="T:System.ArgumentException">The imaginary and real parts of complexData (parameter) are special values, and
            	ProcessSpecialValues is true.
            </exception>
    </member>
    <member name="M:NationalInstruments.UI.IComplexGraph.PlotComplexAppend(NationalInstruments.ComplexDouble[],System.Int32,System.Int32)">
      <summary>
            Plots the imaginary parts against the real parts of a subset of an array of ComplexDouble data values by appending to the existing data.
            </summary>
      <param name="complexData">
            The array of ComplexDouble  data values to plot.
            </param>
      <param name="startIndex">
            The index in complexData (parameter) at which the plot data begins.
            </param>
      <param name="length">
            The number of elements, beginning at startIndex (parameter) in complexData (parameter), to plot.
            </param>
      <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
      <exception cref="T:System.ArgumentNullException">complexData (parameter) is null.
            </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">startIndex (parameter) is less than 0.
            
            -or-
            startIndex (parameter) is greater than or equal to the
            number of elements in complexData (parameter).
            
            -or-
            length (parameter) is less than 0.
            
            -or-
            length (parameter) is greater than the number of elements
            from startIndex (parameter) to the end of complexData (parameter).
            </exception>
      <exception cref="T:System.InvalidOperationException">
            		The XAxis of the plot is null.
            
            -or-
            
            		The YAxis of the plot is null.
            </exception>
      <exception cref="T:System.NotSupportedException">
            The Owner of the plot is not null,
            and the Owner of the plot is
            different from the Owner of XAxis.
            
            -or-
            
            The Owner of the plot is not null,
            and the Owner of the plot is
            different from the Owner of YAxis.
            </exception>
      <exception cref="T:System.ArgumentException">The imaginary and real parts of complexData (parameter) are special values, and
            	ProcessSpecialValues is true.
            </exception>
    </member>
    <member name="M:NationalInstruments.UI.IComplexGraph.ZoomAroundPoint(System.Single,NationalInstruments.UI.ComplexPlot,NationalInstruments.ComplexDouble)">
      <summary>
            Zooms around the specified data point with the specified zoom factor and reference plot.
            </summary>
      <param name="zoomFactor">
            The percentage to zoom by.
            </param>
      <param name="referencePlot">
            A ComplexPlot to use as the context for complexData (parameter).
            </param>
      <param name="complexData">
            The ComplexDouble  data value to zoom around.
            </param>
      <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">zoomFactor (parameter) is less than or equal to 0.0.
            
            -or-
            zoomFactor (parameter) is NaN,
            NegativeInfinity, or
            PositiveInfinity.
            </exception>
      <exception cref="T:System.ArgumentNullException">referencePlot (parameter) is null.
            </exception>
      <exception cref="T:System.NotSupportedException">IComplexGraph is not the
            Owner of referencePlot (parameter).
            </exception>
    </member>
    <member name="M:NationalInstruments.UI.IComplexGraph.ZoomXY(NationalInstruments.UI.ComplexPlot,NationalInstruments.ComplexDouble,System.Double,System.Double)">
      <summary>
            Zooms to the region of the plot area specified by the x location, y location, region width, region height, and
            reference plot.
            </summary>
      <param name="referencePlot">
            A ComplexPlot to use as the context for complexData (parameter),
            width (parameter), and height (parameter).
            </param>
      <param name="complexData">
            The ComplexDouble  data value to zoom around.
            </param>
      <param name="width">
            The width, in data units, of the plot area region to zoom.
            </param>
      <param name="height">
            The height, in data units, of the plot area region to zoom.
            </param>
      <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
      <exception cref="T:System.ArgumentNullException">referencePlot (parameter) is null.
            </exception>
      <exception cref="T:System.NotSupportedException">IComplexGraph is not the
            Owner of referencePlot (parameter).
            </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">width (parameter) or height (parameter) is
            NaN,
            NegativeInfinity, or
            PositiveInfinity.
            </exception>
    </member>
    <member name="P:NationalInstruments.UI.IComplexGraph.Plots">
      <summary>
            Gets the collection of plots on the graph.
            </summary>
      <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
    </member>
    <member name="P:NationalInstruments.UI.IComplexGraph.XAxes">
      <summary>
            Gets the collection of x axes on the graph.
            </summary>
      <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
    </member>
    <member name="P:NationalInstruments.UI.IComplexGraph.YAxes">
      <summary>
            Gets the collection of y axes on the graph.
            </summary>
      <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
    </member>
    <member name="P:NationalInstruments.UI.IComplexGraph.Cursors">
      <summary>
            Gets the collection of plot area cursors on the graph.
            </summary>
      <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
    </member>
    <member name="P:NationalInstruments.UI.IComplexGraph.Annotations">
      <summary>
            Gets the collection of annotations.
            </summary>
      <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
    </member>
    <member name="E:NationalInstruments.UI.IComplexGraph.AfterDrawPlot">
      <summary>
            Occurs after a plot is drawn.
            </summary>
      <exception cref="T:System.ObjectDisposedException">
            An event handler is added after the object has been disposed.
            </exception>
    </member>
    <member name="E:NationalInstruments.UI.IComplexGraph.BeforeDrawPlot">
      <summary>
            Occurs before a plot is drawn.
            </summary>
      <exception cref="T:System.ObjectDisposedException">
            An event handler is added after the object has been disposed.
            </exception>
    </member>
    <member name="E:NationalInstruments.UI.IComplexGraph.PlotDataChanged">
      <summary>
            Occurs when a new set of data is plotted on a plot that is contained in the graph plot collection.
            </summary>
      <exception cref="T:System.ObjectDisposedException">
            An event handler is added after the object has been disposed.
            </exception>
    </member>
    <member name="E:NationalInstruments.UI.IComplexGraph.XAxesChanged">
      <summary>
            Occurs when the content of the XAxes collection
            changes.
            </summary>
      <exception cref="T:System.ObjectDisposedException">
            An event handler is added after the object has been disposed.
            </exception>
    </member>
    <member name="E:NationalInstruments.UI.IComplexGraph.XAxisRangeChanged">
      <summary>
            Occurs when the range of an x-axis in the XAxes collection
            of the graph changes.
            </summary>
      <exception cref="T:System.ObjectDisposedException">
            An event handler is added after the object has been disposed.
            </exception>
    </member>
    <member name="E:NationalInstruments.UI.IComplexGraph.YAxesChanged">
      <summary>
            Occurs when the content of the YAxes collection
            changes.
            </summary>
      <exception cref="T:System.ObjectDisposedException">
            An event handler is added after the object has been disposed.
            </exception>
    </member>
    <member name="E:NationalInstruments.UI.IComplexGraph.YAxisRangeChanged">
      <summary>
            Occurs when the range of a y-axis in the YAxes collection
            of the graph changes.
            </summary>
      <exception cref="T:System.ObjectDisposedException">
            An event handler is added after the object has been disposed.
            </exception>
    </member>
    <member name="E:NationalInstruments.UI.IComplexGraph.BeforeDrawCursor">
      <summary>
            Occurs before a cursor is drawn.
            </summary>
      <exception cref="T:System.ObjectDisposedException">
            An event handler is added after the object has been disposed.
            </exception>
    </member>
    <member name="E:NationalInstruments.UI.IComplexGraph.AfterDrawCursor">
      <summary>
            Occurs after a cursor is drawn.
            </summary>
      <exception cref="T:System.ObjectDisposedException">
            An event handler is added after the object has been disposed.
            </exception>
    </member>
    <member name="E:NationalInstruments.UI.IComplexGraph.CursorsChanged">
      <summary>
            Occurs when the content of the Cursors collection
            changes.
            </summary>
      <exception cref="T:System.ObjectDisposedException">
            An event handler is added after the object has been disposed.
            </exception>
    </member>
    <member name="E:NationalInstruments.UI.IComplexGraph.AnnotationsChanged">
      <summary>
            Occurs when the content of the Annotations collection
            changes.
            </summary>
      <exception cref="T:System.ObjectDisposedException">
            An event handler is added after the object has been disposed.
            </exception>
    </member>
    <member name="E:NationalInstruments.UI.IComplexGraph.AfterDrawComplexPointAnnotation">
      <summary>
            Occurs after a point annotation is drawn.
            </summary>
      <exception cref="T:System.ObjectDisposedException">
            An event handler is added after the object has been disposed.
            </exception>
    </member>
    <member name="E:NationalInstruments.UI.IComplexGraph.AfterDrawComplexRangeAnnotation">
      <summary>
            Occurs after a range annotation is drawn.
            </summary>
      <exception cref="T:System.ObjectDisposedException">
            An event handler is added after the object has been disposed.
            </exception>
    </member>
    <member name="E:NationalInstruments.UI.IComplexGraph.AfterDrawMagnitudePhaseRangeAnnotation">
      <summary>
            Occurs after a range annotation is drawn.
            </summary>
      <exception cref="T:System.ObjectDisposedException">
            An event handler is added after the object has been disposed.
            </exception>
    </member>
    <member name="E:NationalInstruments.UI.IComplexGraph.AfterDrawMagnitudeCircleAnnotation">
      <summary>
            Occurs after a range annotation is drawn.
            </summary>
      <exception cref="T:System.ObjectDisposedException">
            An event handler is added after the object has been disposed.
            </exception>
    </member>
    <member name="E:NationalInstruments.UI.IComplexGraph.BeforeDrawComplexPointAnnotation">
      <summary>
            Occurs before a point annotation is drawn.
            </summary>
      <exception cref="T:System.ObjectDisposedException">
            An event handler is added after the object has been disposed.
            </exception>
    </member>
    <member name="E:NationalInstruments.UI.IComplexGraph.BeforeDrawComplexRangeAnnotation">
      <summary>
            Occurs before a range annotation is drawn.
            </summary>
      <exception cref="T:System.ObjectDisposedException">
            An event handler is added after the object has been disposed.
            </exception>
    </member>
    <member name="E:NationalInstruments.UI.IComplexGraph.BeforeDrawMagnitudePhaseRangeAnnotation">
      <summary>
            Occurs before a range annotation is drawn.
            </summary>
      <exception cref="T:System.ObjectDisposedException">
            An event handler is added after the object has been disposed.
            </exception>
    </member>
    <member name="E:NationalInstruments.UI.IComplexGraph.BeforeDrawMagnitudeCircleAnnotation">
      <summary>
            Occurs before a range annotation is drawn.
            </summary>
      <exception cref="T:System.ObjectDisposedException">
            An event handler is added after the object has been disposed.
            </exception>
    </member>
    <member name="T:NationalInstruments.UI.DigitalWaveformGraphInteractionMouseCursors">
      <summary>
            Represents the mouse cursor for interaction with the digital waveform graph control.
            </summary>
    </member>
    <member name="F:NationalInstruments.UI.DigitalWaveformGraphInteractionMouseCursors.DefaultZoomX">
      <summary>
            Gets the default mouse cursor when 
            DigitalWaveformGraphInteractionModes is set to ZoomX.
            </summary>
    </member>
    <member name="F:NationalInstruments.UI.DigitalWaveformGraphInteractionMouseCursors.DefaultZoomPointZoomX">
      <summary>
            Gets the default mouse cursor when DigitalWaveformGraphInteractionModes is set to ZoomAroundPoint and ZoomX.
            </summary>
    </member>
    <member name="F:NationalInstruments.UI.DigitalWaveformGraphInteractionMouseCursors.DefaultZoomPoint">
      <summary>
            Gets the default mouse cursor when DigitalWaveformGraphInteractionModes  is set to ZoomAroundPoint.
            </summary>
    </member>
    <member name="F:NationalInstruments.UI.DigitalWaveformGraphInteractionMouseCursors.DefaultPan">
      <summary>
            Gets the default mouse cursor when DigitalWaveformGraphInteractionModes  is set to PanX or PanY.
            </summary>
    </member>
    <member name="F:NationalInstruments.UI.DigitalWaveformGraphInteractionMouseCursors.DefaultPanning">
      <summary>
            Gets the default mouse cursor when DigitalWaveformGraphInteractionModes is  set to PanX or PanY for panning.
            </summary>
    </member>
    <member name="F:NationalInstruments.UI.DigitalWaveformGraphInteractionMouseCursors.DefaultEditRange">
      <summary>
            Gets the default mouse cursor when DigitalWaveformGraphInteractionModes is set to EditRange.
            </summary>
    </member>
    <member name="M:NationalInstruments.UI.DigitalWaveformGraphInteractionMouseCursors.#ctor">
      <summary>
            Initializes a new instance of the DigitalWaveformGraphInteractionMouseCursors class.
            </summary>
    </member>
    <member name="M:NationalInstruments.UI.DigitalWaveformGraphInteractionMouseCursors.ToString">
      <summary>
            Returns a string representation of the object.
            </summary>
      <returns>
            A string representation of the object.
            </returns>
    </member>
    <member name="M:NationalInstruments.UI.DigitalWaveformGraphInteractionMouseCursors.ResetAllToDefault">
      <summary>
            Resets all properties of BooleanInteractionMouseCursors to default values.
            </summary>
    </member>
    <member name="M:NationalInstruments.UI.DigitalWaveformGraphInteractionMouseCursors.OnPropertyChanged(System.ComponentModel.PropertyChangedEventArgs)">
      <summary>
            Raises the PropertyChanged event.
            </summary>
      <param name="e">
            A PropertyChangedEventArgs that contains the event data.
            </param>
    </member>
    <member name="P:NationalInstruments.UI.DigitalWaveformGraphInteractionMouseCursors.ZoomX">
      <summary>
            Gets or sets the mouse cursor when the interaction mode of the digital waveform graph control is ZoomX.
            </summary>
    </member>
    <member name="P:NationalInstruments.UI.DigitalWaveformGraphInteractionMouseCursors.ZoomPoint">
      <summary>
            Gets or sets the mouse cursor when the interaction mode of the digital waveform graph control is ZoomAroundPoint.
            </summary>
    </member>
    <member name="P:NationalInstruments.UI.DigitalWaveformGraphInteractionMouseCursors.ZoomPointZoomX">
      <summary>
            Gets or sets the mouse cursor when the interaction mode of the digital waveform graph control is ZoomAroundPoint and ZoomX.
            </summary>
    </member>
    <member name="P:NationalInstruments.UI.DigitalWaveformGraphInteractionMouseCursors.Pan">
      <summary>
            Gets or sets the mouse cursor when the interaction mode of the digital waveform graph control is PanX or PanY.
            </summary>
    </member>
    <member name="P:NationalInstruments.UI.DigitalWaveformGraphInteractionMouseCursors.Panning">
      <summary>
            Gets or sets the mouse cursor when the interaction mode of the digital waveform graph control is PanX or PanY when panning.
            </summary>
    </member>
    <member name="P:NationalInstruments.UI.DigitalWaveformGraphInteractionMouseCursors.EditRange">
      <summary>
            Gets or sets the mouse cursor when the interaction mode of the digital waveform graph control is EditRange.
            </summary>
    </member>
    <member name="E:NationalInstruments.UI.DigitalWaveformGraphInteractionMouseCursors.PropertyChanged">
      <summary>
            Occurs when the value of a property changes.
            </summary>
      <exception cref="T:System.ObjectDisposedException">
            An event handler is added after the object has been disposed.</exception>
    </member>
    <member name="T:NationalInstruments.UI.ComplexDoubleDataStateManagement">
      <summary>
            Provides an abstract base class for specifying a state management
            strategy for complex double data and provides a pre-defined list of state management strategies.
            </summary>
    </member>
    <member name="M:NationalInstruments.UI.ComplexDoubleDataStateManagement.Save(System.Object,NationalInstruments.UI.ComplexDoubleDataStateManagementArgs)">
      <summary>
            Saves data as specified by the contextual information that is provided in the specified
            ComplexDoubleDataStateManagementArgs.
            </summary>
      <param name="context">
            The object that specifies the context in which
            Save is called.
            </param>
      <param name="args">
            A ComplexDoubleDataStateManagementArgs that
            contains contextual data for the load operation.
            </param>
      <exception cref="T:System.ArgumentNullException">args (parameter) is null.
            </exception>
    </member>
    <member name="M:NationalInstruments.UI.ComplexDoubleDataStateManagement.Load(System.Object,NationalInstruments.UI.ComplexDoubleDataStateManagementArgs)">
      <summary>
            Retrieves data as specified by the contextual information that is provided in the specified
            ComplexDoubleDataStateManagementArgs.
            </summary>
      <param name="context">
            The object that specifies the context in which
            Load is called.
            </param>
      <param name="args">
            A ComplexDoubleDataStateManagementArgs that
            contains contextual data for the load operation.
            </param>
      <exception cref="T:System.ArgumentNullException">args (parameter) is null.
            </exception>
    </member>
    <member name="M:NationalInstruments.UI.ComplexDoubleDataStateManagement.#ctor">
      <summary>
            Initializes a new instance of the ComplexDoubleDataStateManagement
            class.
            </summary>
    </member>
    <member name="P:NationalInstruments.UI.ComplexDoubleDataStateManagement.UnderlyingType">
      <summary>
            Gets the underlying type of an EnumObject value.
            </summary>
    </member>
    <member name="P:NationalInstruments.UI.ComplexDoubleDataStateManagement.None">
      <summary>
            Gets a data state management strategy that does not save or load the state of the data.
            </summary>
    </member>
    <member name="P:NationalInstruments.UI.ComplexDoubleDataStateManagement.ServerCache">
      <summary>
            Gets a data state management strategy that uses the ASP.NET cache to save and load data.
            </summary>
    </member>
    <member name="P:NationalInstruments.UI.ComplexDoubleDataStateManagement.SessionState">
      <summary>
            Gets a data state management strategy that uses the ASP.NET session state to save and load data.
            </summary>
    </member>
    <member name="T:NationalInstruments.UI.ComplexAnnotationCollection">
      <summary>
            Represents a strongly typed collection of ComplexAnnotation objects.
            </summary>
    </member>
    <member name="M:NationalInstruments.UI.ComplexAnnotationCollection.#ctor">
      <summary>
            Initializes a new instance of the ComplexAnnotationCollection class.
            </summary>
    </member>
    <member name="M:NationalInstruments.UI.ComplexAnnotationCollection.#ctor(NationalInstruments.UI.ComplexAnnotation[])">
      <summary>
            Initializes a new instance of the ComplexAnnotationCollection class
            from an array of ComplexAnnotation objects.
            </summary>
      <param name="item">
            Array of ComplexAnnotation objects to copy.
            </param>
      <exception cref="T:System.ArgumentNullException">item (parameter) is null.
            
            -or-
            
            An element in item (parameter) is null.
            </exception>
      <exception cref="T:System.NotSupportedException">
            		An element in item (parameter) has been disposed.
            
            -or-
            
            		An element in item (parameter) is in another ComplexAnnotationCollection.
            
            -or-
            
            		An element in item (parameter) is already in this collection.
            </exception>
    </member>
    <member name="M:NationalInstruments.UI.ComplexAnnotationCollection.#ctor(NationalInstruments.UI.ComplexAnnotationCollection)">
      <summary>
            Initializes a new instance of the ComplexAnnotationCollection class
            from an existing collection.
            </summary>
      <param name="item">
            The ComplexAnnotationCollection to copy.
            </param>
      <exception cref="T:System.ArgumentNullException">item (parameter) is null.
            
            -or-
            
            An element in item (parameter) is null.
            </exception>
      <exception cref="T:System.NotSupportedException">
            		An element in item (parameter) has been disposed.
            
            -or-
            
            		An element in item (parameter) is in another ComplexAnnotationCollection.
            
            -or-
            
            		An element in item (parameter) is already in this collection.
            </exception>
    </member>
    <member name="M:NationalInstruments.UI.ComplexAnnotationCollection.ToString">
      <summary>
            Returns a string representation of the object.
            </summary>
      <returns>
            A string representation of the object.
            </returns>
    </member>
    <member name="M:NationalInstruments.UI.ComplexAnnotationCollection.Add(NationalInstruments.UI.ComplexAnnotation)">
      <summary>
            Adds an item to the end of the collection.
            </summary>
      <param name="item">
            Item to add to the collection.
            </param>
      <returns>
            The array index of the added item.
            </returns>
      <exception cref="T:System.ArgumentNullException">item (parameter) is null.
            </exception>
      <exception cref="T:System.NotSupportedException">item (parameter) has been disposed.
            
            -or-
            item (parameter) is in another ComplexAnnotationCollection.
            
            -or-
            item (parameter) is already in this collection.
            </exception>
    </member>
    <member name="M:NationalInstruments.UI.ComplexAnnotationCollection.AddRange(NationalInstruments.UI.ComplexAnnotation[])">
      <summary>
            Adds an array of ComplexAnnotation objects to the end of the collection.
            </summary>
      <param name="item">
            Array of ComplexAnnotation objects to add to the collection.
            </param>
      <exception cref="T:System.ArgumentNullException">item (parameter) is null.
            
            -or-
            
            An element in item (parameter) is null.
            </exception>
      <exception cref="T:System.NotSupportedException">
            		An element in item (parameter) has been disposed.
            
            -or-
            
            		An element in item (parameter) is in another ComplexAnnotationCollection.
            
            -or-
            
            		An element in item (parameter) is already in this collection.
            </exception>
    </member>
    <member name="M:NationalInstruments.UI.ComplexAnnotationCollection.AddRange(NationalInstruments.UI.ComplexAnnotationCollection)">
      <summary>
            Adds a collection of ComplexAnnotation objects to the end of the collection.
            </summary>
      <param name="item">
            Collection of ComplexAnnotation objects to add to the collection.
            </param>
      <exception cref="T:System.ArgumentNullException">item (parameter) is null.
            
            -or-
            
            An element in item (parameter) is null.
            </exception>
      <exception cref="T:System.NotSupportedException">
            		An element in item (parameter) has been disposed.
            
            -or-
            
            		An element in item (parameter) is in another ComplexAnnotationCollection.
            
            -or-
            
            		An element in item (parameter) is already in this collection.
            </exception>
    </member>
    <member name="M:NationalInstruments.UI.ComplexAnnotationCollection.Clear">
      <summary>
            Removes all items from the collection.
            </summary>
    </member>
    <member name="M:NationalInstruments.UI.ComplexAnnotationCollection.Contains(NationalInstruments.UI.ComplexAnnotation)">
      <summary>
            Determines if the specified element is in the collection.
            </summary>
      <param name="item">Item to locate in the collection.</param>
      <returns>true if the collection contains item (parameter).
            </returns>
    </member>
    <member name="M:NationalInstruments.UI.ComplexAnnotationCollection.CopyTo(NationalInstruments.UI.ComplexAnnotation[],System.Int32)">
      <summary>
            Copies the collection to an array or a portion of an array.
            </summary>
      <param name="array">
            Destination array for the collection.
            </param>
      <param name="index">
            The index in the target array to which you want to begin copying the collection.
            </param>
      <exception cref="T:System.ArgumentNullException">array (parameter) is null.
            </exception>
      <exception cref="T:System.ArgumentException">array (parameter) is multidimensional.
            
            -or-
            index (parameter) is greater than or equal to the length of array (parameter).
            
            -or-
            
            The number of elements in the collection is greater than the available space between
            index (parameter) and the end of array (parameter).
            </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">index (parameter) is less than the lower bound of array (parameter).
            </exception>
    </member>
    <member name="M:NationalInstruments.UI.ComplexAnnotationCollection.IndexOf(NationalInstruments.UI.ComplexAnnotation)">
      <summary>
            Returns the zero-based index of the first occurrence of an item in the collection.
            </summary>
      <param name="item">
            Item to search for.
            </param>
      <returns>
            Index of the item. If the item is not found, returns -1.
            </returns>
    </member>
    <member name="M:NationalInstruments.UI.ComplexAnnotationCollection.Insert(System.Int32,NationalInstruments.UI.ComplexAnnotation)">
      <summary>
            Inserts an item into the collection at the specified index.
            </summary>
      <param name="index">
            Index to insert the item at.
            </param>
      <param name="item">
            Item to insert into the collection.
            </param>
      <exception cref="T:System.ArgumentNullException">item (parameter) is null.
            </exception>
      <exception cref="T:System.NotSupportedException">item (parameter) has been disposed.
            
            -or-
            item (parameter) is in another ComplexAnnotationCollection.
            
            -or-
            item (parameter) is already in this collection.
            </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">index (parameter) is less than zero.
            
            -or-
            

index (parameter) is greater than Count.
            


            -or-
            index (parameter) is greater than Count.
            </exception>
    </member>
    <member name="M:NationalInstruments.UI.ComplexAnnotationCollection.GetEnumerator">
      <summary>
            Returns an enumerator that you can use to iterate through the collection.
            </summary>
      <returns>
            The enumerator for the collection.
            </returns>
    </member>
    <member name="M:NationalInstruments.UI.ComplexAnnotationCollection.Remove(NationalInstruments.UI.ComplexAnnotation)">
      <summary>
            Removes the first occurrence of the specified item.
            </summary>
      <param name="item">
            Item to remove from the collection.
            </param>
    </member>
    <member name="M:NationalInstruments.UI.ComplexAnnotationCollection.RemoveAt(System.Int32)">
      <summary>
            Removes the item at the specified index.
            </summary>
      <param name="index">
            The zero-based index of the item to remove.
            </param>
      <exception cref="T:System.ArgumentOutOfRangeException">index (parameter) is less than zero.
            
            -or-
            

index (parameter) is greater than or equal to Count.
            


            -or-
            index (parameter) is greater than or equal to Count.
            </exception>
    </member>
    <member name="P:NationalInstruments.UI.ComplexAnnotationCollection.Item(System.Int32)">
      <summary>
            Gets or sets ComplexAnnotation at the specified index. 
            </summary>
      <param name="index">
            The zero-based index of the entry to locate in the collection.
            </param>
      <exception cref="T:System.ArgumentNullException">
            	The value is null.
            </exception>
      <exception cref="T:System.NotSupportedException">
            		The value has been disposed.
            
            -or-
            
            		The value is in another ComplexAnnotationCollection.
            
            -or-
            
            		The value is already in this collection.
            </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">index (parameter) is less than zero.
            
            -or-
            

index (parameter) is greater than Count.
            


            -or-
            index (parameter) is greater than Count.
            </exception>
    </member>
    <member name="P:NationalInstruments.UI.ComplexAnnotationCollection.Count">
      <summary>
            Gets the number of elements in the ComplexAnnotationCollection.
            </summary>
    </member>
    <member name="P:NationalInstruments.UI.ComplexAnnotationCollection.IsSynchronized">
      <summary>
            Gets a value indicating whether access to the collection is synchronized
            (thread-safe).
            </summary>
    </member>
    <member name="P:NationalInstruments.UI.ComplexAnnotationCollection.IsFixedSize">
      <summary>
            Gets a value indicating whether the collection has a fixed size.
            </summary>
    </member>
    <member name="P:NationalInstruments.UI.ComplexAnnotationCollection.IsReadOnly">
      <summary>
            Gets a value indicating whether the collection is read-only.
            </summary>
    </member>
    <member name="P:NationalInstruments.UI.ComplexAnnotationCollection.SyncRoot">
      <summary>
            Gets an object that can be used to synchronize access to the collection.
            </summary>
    </member>
    <member name="T:NationalInstruments.UI.IntensityRangeAnnotationPart">
      <summary>
            Specifies a part of a range annotation.
            </summary>
    </member>
    <member name="F:NationalInstruments.UI.IntensityRangeAnnotationPart.Caption">
      <summary>
            The caption of a range annotation.
            </summary>
    </member>
    <member name="F:NationalInstruments.UI.IntensityRangeAnnotationPart.Arrow">
      <summary>
            The arrow of a range annotation.
            </summary>
    </member>
    <member name="F:NationalInstruments.UI.IntensityRangeAnnotationPart.Range">
      <summary>
            The range of a range annotation.
            </summary>
    </member>
    <member name="T:NationalInstruments.UI.AfterDrawIntensityRangeAnnotationEventHandler">
      <summary>
            Represents the method that handles the events that occur after a range annotation draws.
            </summary>
      <param name="sender">
            The source of the event.
            </param>
      <param name="e">
            An AfterDrawIntensityRangeAnnotationEventArgs that contains the event data.
            </param>
    </member>
    <member name="T:NationalInstruments.UI.AfterDrawIntensityPointAnnotationEventHandler">
      <summary>
            Represents the method that handles the events that occur after a point annotation draws.
            </summary>
      <param name="sender">
            The source of the event.
            </param>
      <param name="e">
            An AfterDrawIntensityPointAnnotationEventArgs that contains the event data.
            </param>
    </member>
    <member name="T:NationalInstruments.UI.BeforeDragIntensityAnnotationCaptionEventHandler">
      <summary>
            Represents the method that handles the events that occur before an annotation caption is dragged.
            </summary>
      <param name="sender">
            The source of the event.
            </param>
      <param name="e">
            A BeforeDragIntensityAnnotationCaptionEventArgs that contains the event data.
            </param>
    </member>
    <member name="T:NationalInstruments.UI.BooleanInteractionMode">
      <summary>
            Specifies how the control responds to clicking the mouse or pressing  the space bar.
            </summary>
    </member>
    <member name="F:NationalInstruments.UI.BooleanInteractionMode.SwitchWhenPressed">
      <summary>
            The control changes state when the mouse or space bar is pressed.
            </summary>
    </member>
    <member name="F:NationalInstruments.UI.BooleanInteractionMode.SwitchUntilReleased">
      <summary>
            The control changes state until the mouse button or space bar is released.
            </summary>
    </member>
    <member name="F:NationalInstruments.UI.BooleanInteractionMode.SwitchWhenReleased">
      <summary>
            The control changes state when the mouse or space bar is released.
            </summary>
    </member>
    <member name="F:NationalInstruments.UI.BooleanInteractionMode.Indicator">
      <summary>
            The control does not change state when the mouse is clicked or the space bar is pressed.
            </summary>
    </member>
    <member name="T:NationalInstruments.UI.BeforeDrawXYPlotEventHandler">
      <summary>
            Represents the method that handles the BeforeDrawPlot
            event.
            </summary>
      <param name="sender">
            The source of the event.
            </param>
      <param name="e">
            A BeforeDrawXYPlotEventArgs that contains the event data.
            </param>
    </member>
    <member name="T:NationalInstruments.UI.BeforeDrawCaptionEventHandler">
      <summary>
            Represents the method that handles the BeforeDrawCaption
            event.
            </summary>
      <param name="sender">
            The source of the event.
            </param>
      <param name="e">
            A BeforeDrawCaptionEventArgs that contains the event data.
            </param>
    </member>
    <member name="T:NationalInstruments.UI.BeforeDrawCaptionEventArgs">
      <summary>
            Provides data for the BeforeDrawCaption event.
            </summary>
    </member>
    <member name="M:NationalInstruments.UI.BeforeDrawCaptionEventArgs.#ctor(System.String,System.Drawing.Color,System.Drawing.Color,System.Drawing.Font,NationalInstruments.UI.CaptionPosition,System.Drawing.Graphics,System.Drawing.Rectangle,System.Boolean)">
      <summary>
            Initializes a new instance of the BeforeDrawCaptionEventArgs
            class with the specified caption and the background color, foreground color, font, and position of
            the caption along with the graphics, bounds, and cancel value.
            </summary>
      <param name="caption">
            A String that represent the caption text to draw.
            </param>
      <param name="backColor">
            The background Color of the caption to draw.
            </param>
      <param name="foreColor">
            The foreground Color of the caption to draw.
            </param>
      <param name="font">
            The Font of the caption to draw.
            </param>
      <param name="position">
            The CaptionPosition of the caption to draw.
            </param>
      <param name="graphics">
            The Graphics used to draw the caption.
            </param>
      <param name="bounds">
            The Rectangle that represents the bounds in which to draw.
            </param>
      <param name="cancel">
            A value that indicates if the event is cancelled.
            </param>
      <exception cref="T:System.ArgumentNullException">graphics (parameter) is null.
            </exception>
      <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">position (parameter) is not one of the CaptionPosition
            values.
            </exception>
    </member>
    <member name="M:NationalInstruments.UI.BeforeDrawCaptionEventArgs.ToString">
      <summary>
            Returns a string representation of the object.
            </summary>
      <returns>
            A string representation of the object.
            </returns>
    </member>
    <member name="P:NationalInstruments.UI.BeforeDrawCaptionEventArgs.Caption">
      <summary>
            Gets the caption text to draw.
            </summary>
    </member>
    <member name="P:NationalInstruments.UI.BeforeDrawCaptionEventArgs.BackColor">
      <summary>
            Gets the background color of the caption to draw.
            </summary>
    </member>
    <member name="P:NationalInstruments.UI.BeforeDrawCaptionEventArgs.ForeColor">
      <summary>
            Gets the foreground color of the caption to draw.
            </summary>
    </member>
    <member name="P:NationalInstruments.UI.BeforeDrawCaptionEventArgs.Font">
      <summary>
            Gets the font of the caption to draw.
            </summary>
    </member>
    <member name="P:NationalInstruments.UI.BeforeDrawCaptionEventArgs.Position">
      <summary>
            Gets the position of the caption to draw.
            </summary>
    </member>
    <member name="T:NationalInstruments.UI.AfterMoveComplexCursorEventArgs">
      <summary>
            Provides data for the events that occur after the cursor moves.
            </summary>
    </member>
    <member name="M:NationalInstruments.UI.AfterMoveComplexCursorEventArgs.#ctor(NationalInstruments.UI.ComplexCursor,NationalInstruments.ComplexDouble,NationalInstruments.UI.Action)">
      <summary>
            Initializes a new instance of the AfterMoveComplexCursorEventArgs
            class with the specified cursor, the specified position of the
            ComplexCursor, and the action that caused the event. 
            </summary>
      <param name="cursor">
            The ComplexCursor for which the event is occurring.
            </param>
      <param name="position">
            The position of the ComplexCursor.
            </param>
      <param name="action">
            The source of the Action that caused the event.
            </param>
      <exception cref="T:System.ArgumentNullException">cursor (parameter) is null.
            </exception>
    </member>
    <member name="M:NationalInstruments.UI.AfterMoveComplexCursorEventArgs.ToString">
      <summary>
            Returns a string representation of the object.
            </summary>
      <returns>
            A string representation of the object.
            </returns>
    </member>
    <member name="P:NationalInstruments.UI.AfterMoveComplexCursorEventArgs.Cursor">
      <summary>
            Gets the ComplexCursor that has moved. 
            </summary>
    </member>
    <member name="P:NationalInstruments.UI.AfterMoveComplexCursorEventArgs.Position">
      <summary>
            Gets the new position of the
            ComplexCursor.
            </summary>
    </member>
    <member name="T:NationalInstruments.UI.AfterDrawXYPointAnnotationEventArgs">
      <summary>
            Provides data for events that occur after the point annotation draws.
            </summary>
    </member>
    <member name="M:NationalInstruments.UI.AfterDrawXYPointAnnotationEventArgs.#ctor(System.Drawing.Graphics,System.Drawing.Rectangle,NationalInstruments.UI.XYPointAnnotation,NationalInstruments.UI.XYPointAnnotationPart,System.Drawing.PointF,System.Drawing.PointF,System.Drawing.PointF,System.Drawing.Size,System.Single,System.Drawing.PointF,System.Drawing.Size,System.Drawing.PointF[])">
      <summary>
            Initializes a new instance of the AfterDrawXYPointAnnotationEventArgs class with the specified graphics, bounds, 
            annotation, annotation part, arrow head point, arrow tail point, caption point, caption size, caption angle, 
            shape point, shape size, and shape points.
            </summary>
      <param name="graphics">
            The Graphics used to draw the item.
            </param>
      <param name="bounds">
            The Rectangle that represents the bounds in which to draw.
            </param>
      <param name="annotation">
            The XYPointAnnotation for which the event is occurring.
            </param>
      <param name="annotationPart">
            The XYPointAnnotationPart of the annotation that was drawn.
            </param>
      <param name="arrowHeadPoint">
            The Point at which the arrow head was drawn.
            </param>
      <param name="arrowTailPoint">
            The Point where the arrow tail is located.
            </param>
      <param name="captionPoint">
            The Point at which the caption was drawn.
            </param>
      <param name="captionSize">
            The Size of the Rectangle in which to draw the caption.
            </param>
      <param name="captionAngle">
            The angle at which to draw the caption.
            </param>
      <param name="shapePoint">
            The Point at which the shape was drawn.
            </param>
      <param name="shapeSize">
            The Size of the shape that was drawn.
            </param>
      <param name="shapePoints">
            The Point array that defines the shape that was drawn.
            </param>
      <exception cref="T:System.ArgumentNullException">annotation (parameter) is null.
            	-or-graphics (parameter) is null.
            	</exception>
    </member>
    <member name="P:NationalInstruments.UI.AfterDrawXYPointAnnotationEventArgs.Annotation">
      <summary>
            Gets the XYPointAnnotation that was drawn.
            </summary>
    </member>
    <member name="P:NationalInstruments.UI.AfterDrawXYPointAnnotationEventArgs.Part">
      <summary>
            Gets the part of the annotation that was drawn.
            </summary>
    </member>
    <member name="P:NationalInstruments.UI.AfterDrawXYPointAnnotationEventArgs.CaptionSize">
      <summary>
            Gets the size of the rectangle in which the caption was drawn.
            </summary>
    </member>
    <member name="P:NationalInstruments.UI.AfterDrawXYPointAnnotationEventArgs.CaptionAngle">
      <summary>
            Gets the angle at which the caption was drawn.
            </summary>
    </member>
    <member name="P:NationalInstruments.UI.AfterDrawXYPointAnnotationEventArgs.ShapePoint">
      <summary>
            Gets the point at which the shape was drawn.
            </summary>
    </member>
    <member name="P:NationalInstruments.UI.AfterDrawXYPointAnnotationEventArgs.ShapeSize">
      <summary>
            Gets the size of the shape that was drawn.
            </summary>
    </member>
    <member name="P:NationalInstruments.UI.AfterDrawXYPointAnnotationEventArgs.ArrowHeadPoint">
      <summary>
            Gets the point at which the arrow head was drawn.
            </summary>
    </member>
    <member name="P:NationalInstruments.UI.AfterDrawXYPointAnnotationEventArgs.ArrowTailPoint">
      <summary>
            Gets the point at which the arrow tail is located.
            </summary>
    </member>
    <member name="P:NationalInstruments.UI.AfterDrawXYPointAnnotationEventArgs.CaptionPoint">
      <summary>
            Gets the point at which the caption was drawn.
            </summary>
    </member>
    <member name="P:NationalInstruments.UI.AfterDrawXYPointAnnotationEventArgs.ShapePoints">
      <summary>
            Gets the array of points used to define the shape that was drawn.
            </summary>
    </member>
    <member name="T:NationalInstruments.UI.AfterDrawIntensityPlotEventHandler">
      <summary>
            Represents the method that handles the AfterDrawPlot
            event.
            </summary>
      <param name="sender">
            The source of the event.
            </param>
      <param name="e">
            An AfterDrawIntensityPlotEventArgs that contains the event data.
            </param>
    </member>
    <member name="T:NationalInstruments.UI.AfterDrawIntensityPlotEventArgs">
      <summary>
            Provides data for the AfterDrawPlot event.
            </summary>
    </member>
    <member name="M:NationalInstruments.UI.AfterDrawIntensityPlotEventArgs.#ctor(NationalInstruments.UI.IntensityPlot,System.Drawing.Graphics,System.Drawing.Rectangle)">
      <summary>
            Initializes a new instance of the AfterDrawIntensityPlotEventArgs
            class with the specified plot, graphics, and bounds.
            </summary>
      <param name="plot">
            The IntensityPlot for which the event occurs.
            </param>
      <param name="graphics">
            The Graphics used to draw the item.
            </param>
      <param name="bounds">
            The Rectangle that represents the bounds in which to draw.
            </param>
      <exception cref="T:System.ArgumentNullException">plot (parameter) is null.
            	-or-graphics (parameter) is null.
            	</exception>
    </member>
    <member name="M:NationalInstruments.UI.AfterDrawIntensityPlotEventArgs.ToString">
      <summary>
            Returns a string representation of the object.        
            </summary>
      <returns>
            A string representation of the object.
            </returns>
    </member>
    <member name="P:NationalInstruments.UI.AfterDrawIntensityPlotEventArgs.Plot">
      <summary>
            Gets the IntensityPlot that has been drawn.
            </summary>
    </member>
    <member name="T:NationalInstruments.UI.AfterDrawIntensityCursorEventHandler">
      <summary>
            Represents the method that handles the events that occur after a cursor draws.
            </summary>
      <param name="sender">
            The source of the event.
            </param>
      <param name="e">
            An AfterDrawIntensityCursorEventArgs that contains the event data.
            </param>
    </member>
    <member name="T:NationalInstruments.UI.AfterDrawComplexCursorEventHandler">
      <summary>
            Represents the method that handles the events that occur after a cursor draws.
            </summary>
      <param name="sender">
            The source of the event.
            </param>
      <param name="e">
            An AfterDrawComplexCursorEventArgs that contains the event data.
            </param>
    </member>
    <member name="T:NationalInstruments.UI.ActionCancelEventHandler">
      <summary>
            Represents the method that handles events that occur from interactive or programmatic user action.
            </summary>
      <param name="sender">
            The source of the event.
            </param>
      <param name="e">
            An ActionCancelEventArgs that contains the event data.
            </param>
    </member>
    <member name="T:NationalInstruments.UI.XYErrorDataArgs">
      <summary>
            Provides data for the GetErrorData method.
            </summary>
    </member>
    <member name="M:NationalInstruments.UI.XYErrorDataArgs.#ctor(NationalInstruments.UI.XYDataType,System.Double[],System.Double[])">
      <summary>
            Initializes a new instance of the XYErrorDataArgs class
            with the specified primary error data type and x and y data arrays.
            </summary>
      <param name="primaryErrorDataType">
            The type of the primary error data for which GetErrorData is being called.
            </param>
      <param name="xData">
            The x-data values of the data points for which error data is requested.
            </param>
      <param name="yData">
            The y-data values of the data points for which error data is requested.
            </param>
      <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
            The specified value is not one of the XYDataType values.
            </exception>
      <exception cref="T:System.ArgumentNullException">xData (parameter) is null.
              
              -or-
              yData (parameter) is null.
              </exception>
      <exception cref="T:System.ArgumentException">
            The xData (parameter) and yData (parameter) arrays have different lengths.
            </exception>
    </member>
    <member name="M:NationalInstruments.UI.XYErrorDataArgs.GetXData">
      <summary>
            Gets the x-data values of the data points for which error data is requested.
            </summary>
      <returns>
            A Double array that represents the x-data values 
            of the data points for which error data is requested.
            </returns>
    </member>
    <member name="M:NationalInstruments.UI.XYErrorDataArgs.GetYData">
      <summary>
            Gets the y-data values of the data points for which error data is requested.
            </summary>
      <returns>
            A Double array that represents the y-data values 
            of the data points for which error data is requested.
            </returns>
    </member>
    <member name="M:NationalInstruments.UI.XYErrorDataArgs.ToString">
      <summary>
            Returns a string representation of the object.
            </summary>
      <returns>
            A string representation of the object.
            </returns>
    </member>
    <member name="P:NationalInstruments.UI.XYErrorDataArgs.PrimaryErrorDataType">
      <summary>
            Gets the orientation of error data for which the GetErrorData 
            method is being called.
            </summary>
    </member>
    <member name="T:NationalInstruments.UI.XAxisEventHandler">
      <summary>
            Represents the method that handles the 
            XAxisRangeChanged event.
            </summary>
      <param name="sender">
            The source of the event.
            </param>
      <param name="e">
            The XAxisEventArgs that contains the event
            data.
            </param>
    </member>
    <member name="T:NationalInstruments.UI.XAxisEventArgs">
      <summary>
            Provides data for the 
            XAxisRangeChanged event.
            </summary>
    </member>
    <member name="M:NationalInstruments.UI.XAxisEventArgs.#ctor(NationalInstruments.UI.XAxis)">
      <summary>
            Initializes a new instance of the XAxisEventArgs class
            with the specified x-axis.
            </summary>
      <param name="xAxis">
            The XAxis on which the range changed event occurred.
            </param>
      <exception cref="T:System.ArgumentNullException">xAxis (parameter) is null.
            </exception>
    </member>
    <member name="M:NationalInstruments.UI.XAxisEventArgs.#ctor(NationalInstruments.UI.XAxis,NationalInstruments.UI.GraphAction)">
      <summary>
            Initializes a new instance of the XAxisEventArgs class
            with the specified x-axis and the action on the graph.
            </summary>
      <param name="xAxis">
            The XAxis on which the range changed event occurred.
            </param>
      <param name="action">
            The GraphAction that caused the range changed event.
            </param>
      <exception cref="T:System.ArgumentNullException">xAxis (parameter) is null.
            </exception>
    </member>
    <member name="M:NationalInstruments.UI.XAxisEventArgs.ToString">
      <summary>
            Returns a string representation of the object.
            </summary>
      <returns>
            A string representation of the object.
            </returns>
    </member>
    <member name="P:NationalInstruments.UI.XAxisEventArgs.XAxis">
      <summary>
            Gets the x-axis on which the range changed event occurred.
            </summary>
    </member>
    <member name="P:NationalInstruments.UI.XAxisEventArgs.Action">
      <summary>
            Gets the action which raised the range changed event on the x-axis.
            </summary>
    </member>
    <member name="T:NationalInstruments.UI.ScaleCustomDivisionCollection">
      <summary>
            Represents a strongly typed collection of ScaleCustomDivision objects.
            </summary>
    </member>
    <member name="M:NationalInstruments.UI.ScaleCustomDivisionCollection.#ctor">
      <summary>
            Initializes a new instance of the ScaleCustomDivisionCollection class.
            </summary>
    </member>
    <member name="M:NationalInstruments.UI.ScaleCustomDivisionCollection.#ctor(NationalInstruments.UI.ScaleCustomDivisionCollection)">
      <summary>
            Initializes a new instance of the ScaleCustomDivisionCollection class
            from an existing collection.
            </summary>
      <param name="item">
            The ScaleCustomDivisionCollection to copy.
            </param>
      <exception cref="T:System.ArgumentNullException">item (parameter) is null.
            
            -or-
            
            An element in item (parameter) is null.
            </exception>
      <exception cref="T:System.NotSupportedException">
            		An element in item (parameter) has been disposed.
            
            -or-
            
            		An element in item (parameter) is in another ScaleCustomDivisionCollection.
            
            -or-
            
            		An element in item (parameter) is already in this collection.
            </exception>
    </member>
    <member name="M:NationalInstruments.UI.ScaleCustomDivisionCollection.#ctor(NationalInstruments.UI.ScaleCustomDivision[])">
      <summary>
            Initializes a new instance of the ScaleCustomDivisionCollection class
            from an array of items.
            </summary>
      <param name="item">
            The array of ScaleCustomDivision to copy.
            </param>
      <exception cref="T:System.ArgumentNullException">item (parameter) is null.
            
            -or-
            
            An element in item (parameter) is null.
            </exception>
      <exception cref="T:System.NotSupportedException">
            		An element in item (parameter) has been disposed.
            
            -or-
            
            		An element in item (parameter) is in another ScaleCustomDivisionCollection.
            
            -or-
            
            		An element in item (parameter) is already in this collection.
            </exception>
    </member>
    <member name="M:NationalInstruments.UI.ScaleCustomDivisionCollection.ToString">
      <summary>
            Returns a string representation of the object.
            </summary>
      <returns>
            A string representation of the object.
            </returns>
    </member>
    <member name="M:NationalInstruments.UI.ScaleCustomDivisionCollection.Add(NationalInstruments.UI.ScaleCustomDivision)">
      <summary>
            Adds an item to the end of the collection.
            </summary>
      <param name="item">
            Item to add to the collection.
            </param>
      <returns>
            The array index of the added item.
            </returns>
      <exception cref="T:System.ArgumentNullException">item (parameter) is null.
            </exception>
      <exception cref="T:System.NotSupportedException">item (parameter) has been disposed.
            
            -or-
            item (parameter) is in another ScaleCustomDivisionCollection.
            
            -or-
            item (parameter) is already in this collection.
            </exception>
    </member>
    <member name="M:NationalInstruments.UI.ScaleCustomDivisionCollection.AddRange(NationalInstruments.UI.ScaleCustomDivision[])">
      <summary>
            Adds an array of ScaleCustomDivision objects to the end of the collection.
            </summary>
      <param name="item">
            Array of ScaleCustomDivision objects to add to the collection.
            </param>
      <exception cref="T:System.ArgumentNullException">item (parameter) is null.
            
            -or-
            
            An element in item (parameter) is null.
            </exception>
      <exception cref="T:System.NotSupportedException">
            		An element in item (parameter) has been disposed.
            
            -or-
            
            		An element in item (parameter) is in another ScaleCustomDivisionCollection.
            
            -or-
            
            		An element in item (parameter) is already in this collection.
            </exception>
    </member>
    <member name="M:NationalInstruments.UI.ScaleCustomDivisionCollection.AddRange(NationalInstruments.UI.ScaleCustomDivisionCollection)">
      <summary>
            Adds a collection of ScaleCustomDivision objects to the end of the collection.
            </summary>
      <param name="item">
            Collection of ScaleCustomDivision objects to add to the collection.
            </param>
      <exception cref="T:System.ArgumentNullException">item (parameter) is null.
            
            -or-
            
            An element in item (parameter) is null.
            </exception>
      <exception cref="T:System.NotSupportedException">
            		An element in item (parameter) has been disposed.
            
            -or-
            
            		An element in item (parameter) is in another ScaleCustomDivisionCollection.
            
            -or-
            
            		An element in item (parameter) is already in this collection.
            </exception>
    </member>
    <member name="M:NationalInstruments.UI.ScaleCustomDivisionCollection.Clear">
      <summary>
            Removes all items from the collection.
            </summary>
    </member>
    <member name="M:NationalInstruments.UI.ScaleCustomDivisionCollection.Contains(NationalInstruments.UI.ScaleCustomDivision)">
      <summary>
            Determines if the specified element is in the collection.
            </summary>
      <param name="item">Item to locate in the collection.</param>
      <returns>true if the collection contains item (parameter).
            </returns>
    </member>
    <member name="M:NationalInstruments.UI.ScaleCustomDivisionCollection.CopyTo(NationalInstruments.UI.ScaleCustomDivision[],System.Int32)">
      <summary>
            Copies the collection to an array or a portion of an array.
            </summary>
      <param name="array">
            Destination array for the collection.
            </param>
      <param name="index">
            The index in the target array at which you want to begin copying the collection to.
            </param>
      <exception cref="T:System.ArgumentNullException">array (parameter) is null.
            </exception>
      <exception cref="T:System.ArgumentException">array (parameter) is multidimensional.
            
            - or -
            index (parameter) is equal to or greater than the length of array (parameter).
            
            -or-
            
            The number of elements in the collection is greater than the available space between
            index (parameter) and the end of array (parameter).
            </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">index (parameter) is less than the lower bound of array (parameter).
            </exception>
    </member>
    <member name="M:NationalInstruments.UI.ScaleCustomDivisionCollection.IndexOf(NationalInstruments.UI.ScaleCustomDivision)">
      <summary>
            Returns the zero-based index of the first occurrence of an item in the collection.
            </summary>
      <param name="item">
            Item to search for.
            </param>
      <returns>
            Index of the item. If the item is not found, returns -1.
            </returns>
    </member>
    <member name="M:NationalInstruments.UI.ScaleCustomDivisionCollection.Insert(System.Int32,NationalInstruments.UI.ScaleCustomDivision)">
      <summary>
            Inserts an item into the collection at the specified index.
            </summary>
      <param name="index">
            Index to insert the item at.
            </param>
      <param name="item">
            Item to insert into the collection.
            </param>
      <exception cref="T:System.ArgumentNullException">item (parameter) is null.
            </exception>
      <exception cref="T:System.NotSupportedException">item (parameter) has been disposed.
            
            -or-
            item (parameter) is in another ScaleCustomDivisionCollection.
            
            -or-
            item (parameter) is already in this collection.
            </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">index (parameter) is less than zero.
            
            -or-
            

index (parameter) is greater than Count.
            


            -or-
            index (parameter) is greater than Count.
            </exception>
    </member>
    <member name="M:NationalInstruments.UI.ScaleCustomDivisionCollection.GetEnumerator">
      <summary>
            Returns an enumerator that you can use to iterate through the collection.
            </summary>
      <returns>
            The enumerator for the collection.
            </returns>
    </member>
    <member name="M:NationalInstruments.UI.ScaleCustomDivisionCollection.Remove(NationalInstruments.UI.ScaleCustomDivision)">
      <summary>
            Removes the first occurrence of the specified item.
            </summary>
      <param name="item">
            Item to remove from the collection.
            </param>
    </member>
    <member name="M:NationalInstruments.UI.ScaleCustomDivisionCollection.RemoveAt(System.Int32)">
      <summary>
            Removes the item at the specified index.
            </summary>
      <param name="index">
            The zero-based index of the item to remove.
            </param>
      <exception cref="T:System.ArgumentOutOfRangeException">index (parameter) is less than zero.
            
            -or-
            

index (parameter) is greater than or equal to Count.
            


            -or-
            index (parameter) is greater than or equal to Count.
            </exception>
    </member>
    <member name="P:NationalInstruments.UI.ScaleCustomDivisionCollection.Item(System.Int32)">
      <summary>
            Gets or sets the ScaleCustomDivision at the specified index. 
            </summary>
      <param name="index">
            The zero-based index of the entry to locate in the collection.
            </param>
      <exception cref="T:System.ArgumentNullException">
            	The value is null.
            </exception>
      <exception cref="T:System.NotSupportedException">
            		The value has been disposed.
            
            -or-
            
            		The value is in another ScaleCustomDivisionCollection.
            
            -or-
            
            		The value is already in this collection.
            </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">index (parameter) is less than zero.
            
            -or-
            

index (parameter) is greater than Count.
            


            -or-
            index (parameter) is greater than Count.
            </exception>
    </member>
    <member name="P:NationalInstruments.UI.ScaleCustomDivisionCollection.Count">
      <summary>
            Gets the number of elements in the ScaleCustomDivisionCollection.
            </summary>
    </member>
    <member name="P:NationalInstruments.UI.ScaleCustomDivisionCollection.IsSynchronized">
      <summary>
            Gets a value indicating whether access to the collection is synchronized
            (thread-safe).
            </summary>
    </member>
    <member name="P:NationalInstruments.UI.ScaleCustomDivisionCollection.IsFixedSize">
      <summary>
            Gets a value indicating whether the collection has a fixed size.
            </summary>
    </member>
    <member name="P:NationalInstruments.UI.ScaleCustomDivisionCollection.IsReadOnly">
      <summary>
            Gets a value indicating whether the collection is read-only.
            </summary>
    </member>
    <member name="P:NationalInstruments.UI.ScaleCustomDivisionCollection.SyncRoot">
      <summary>
            Gets an object that can be used to synchronize access to the collection.
            </summary>
    </member>
    <member name="M:NationalInstruments.Restricted.GraphEditRangeInfoCollection.System#Collections#IList#Add(System.Object)">
      <summary>
            Adds an item to the end of the collection.
            </summary>
      <param name="item">
            Item to add to the collection.
            </param>
      <returns>
            The array index of the added item.
            </returns>
    </member>
    <member name="M:NationalInstruments.Restricted.GraphEditRangeInfoCollection.System#Collections#IList#Contains(System.Object)">
      <summary>
            Returns if the specified element is in the collection.
            </summary>
      <param name="item">
            Item to locate in the collection.
            </param>
      <returns>true if the collection contains item (parameter).
            </returns>
    </member>
    <member name="M:NationalInstruments.Restricted.GraphEditRangeInfoCollection.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
      <summary>
             Copies the collection to an array or a portion of an array.
             </summary>
      <param name="array">
             Destination array for the collection.
             </param>
      <param name="index">
             Index in the target array at which you want to begin copying the collection to.
             </param>
      <exception cref="T:System.ArgumentException">array (parameter) is multidimensional.
             
             -or-
             index (parameter) is greater than or equal to the array length.
             
             -or-
             
             The number of elements in the collection is greater than the available space between
             index (parameter) and the end of array (parameter).
             </exception>
      <exception cref="T:System.ArgumentNullException">array (parameter) is null.
             </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">index (parameter) is less than zero.
             </exception>
    </member>
    <member name="M:NationalInstruments.Restricted.GraphEditRangeInfoCollection.System#Collections#IList#IndexOf(System.Object)">
      <summary>
            Returns the zero-based index of the first occurrence of an item in the collection.
            </summary>
      <param name="item">
            Item to search for.
            </param>
      <returns>
            Index of the item. If the item is not found, returns -1.
            </returns>
    </member>
    <member name="M:NationalInstruments.Restricted.GraphEditRangeInfoCollection.System#Collections#IList#Insert(System.Int32,System.Object)">
      <summary>
            Inserts an item into the collection at the specified index.
            </summary>
      <param name="index">
            Index to insert the item at.
            </param>
      <param name="item">
            Item to insert into the collection.
            </param>
      <exception cref="T:System.ArgumentOutOfRangeException">index (parameter) is not a valid index in the IList.
            </exception>
    </member>
    <member name="M:NationalInstruments.Restricted.GraphEditRangeInfoCollection.System#Collections#IList#Remove(System.Object)">
      <summary>
            Removes the first occurrence of the specified item.
            </summary>
      <param name="item">
            Item to remove from the collection.
            </param>
    </member>
    <member name="P:NationalInstruments.Restricted.GraphEditRangeInfoCollection.System#Collections#IList#Item(System.Int32)">
      <summary>
            Gets or sets an entry in the collection at the specified index. In Visual C#, this property is the indexer.
            </summary>
      <param name="index">
            Zero-based index of the entry to access in the collection.
            </param>
      <exception cref="T:System.ArgumentOutOfRangeException">index (parameter) is outside the valid range of indexes for the collection.
            </exception>
    </member>
    <member name="P:NationalInstruments.Restricted.GraphEditRangeInfoCollection.System#Collections#ICollection#IsSynchronized">
      <summary>
            Indicates if the GraphEditRangeInfoCollection is
            synchronized (thread-safe).
            </summary>
    </member>
    <member name="P:NationalInstruments.Restricted.GraphEditRangeInfoCollection.System#Collections#IList#IsFixedSize">
      <summary>
            Gets a value indicating if the collection has a fixed size.
            </summary>
    </member>
    <member name="P:NationalInstruments.Restricted.GraphEditRangeInfoCollection.System#Collections#IList#IsReadOnly">
      <summary>
            Gets a value indicating if the collection is read-only.
            </summary>
    </member>
    <member name="P:NationalInstruments.Restricted.GraphEditRangeInfoCollection.System#Collections#ICollection#SyncRoot">
      <summary>
            Gets an object that you can use to synchronize access to the collection.
            </summary>
    </member>
    <member name="T:NationalInstruments.UI.PointStyle">
      <summary>
            Provides an abstract base class for specifying a point style
            and also provides a list of pre-defined point styles.
            </summary>
    </member>
    <member name="M:NationalInstruments.UI.PointStyle.#ctor">
      <summary>
            Initializes a new instance of the PointStyle class.
            </summary>
    </member>
    <member name="M:NationalInstruments.UI.PointStyle.Draw(System.Object,NationalInstruments.UI.PointStyleDrawArgs)">
      <summary>
            Draws a point style with the specified PointStyleDrawArgs.
            </summary>
      <param name="context">
            The object that specifies the context in which Draw is called.
            </param>
      <param name="args">
            A PointStyleDrawArgs that contains the
            drawing data.
            </param>
      <exception cref="T:System.ArgumentNullException">args (parameter) is null.
            </exception>
    </member>
    <member name="P:NationalInstruments.UI.PointStyle.UnderlyingType">
      <summary>
            Gets the underlying type of an EnumObject value.
            </summary>
    </member>
    <member name="P:NationalInstruments.UI.PointStyle.IsValueDependent">
      <summary>
            Gets a value indicating if the PointStyle 
            can be customized based on the data values.
            </summary>
    </member>
    <member name="P:NationalInstruments.UI.PointStyle.None">
      <summary>
            Gets a value that indicates that no point is displayed.
            </summary>
    </member>
    <member name="P:NationalInstruments.UI.PointStyle.SolidCircle">
      <summary>
            Gets a point with a solid circle point style.
            </summary>
    </member>
    <member name="P:NationalInstruments.UI.PointStyle.EmptyCircle">
      <summary>
            Gets a point with an empty circle point style.
            </summary>
    </member>
    <member name="P:NationalInstruments.UI.PointStyle.SolidSquare">
      <summary>
            Gets a point with a solid square point style.
            </summary>
    </member>
    <member name="P:NationalInstruments.UI.PointStyle.EmptySquare">
      <summary>
            Gets a point with an empty square point style.
            </summary>
    </member>
    <member name="P:NationalInstruments.UI.PointStyle.SolidDiamond">
      <summary>
            Gets a point with a solid diamond point style.
            </summary>
    </member>
    <member name="P:NationalInstruments.UI.PointStyle.EmptyDiamond">
      <summary>
            Gets a point with an empty diamond point style.
            </summary>
    </member>
    <member name="P:NationalInstruments.UI.PointStyle.Cross">
      <summary>
            Gets a point with a cross point style.
            </summary>
    </member>
    <member name="P:NationalInstruments.UI.PointStyle.Plus">
      <summary>
            Gets a point with a plus point style.
            </summary>
    </member>
    <member name="P:NationalInstruments.UI.PointStyle.SolidTriangleUp">
      <summary>
            Gets a point with a solid triangle pointing up point style.
            </summary>
    </member>
    <member name="P:NationalInstruments.UI.PointStyle.EmptyTriangleUp">
      <summary>
            Gets a point with an empty triangle pointing up point style.
            </summary>
    </member>
    <member name="P:NationalInstruments.UI.PointStyle.SolidTriangleDown">
      <summary>
            Gets a point with a solid triangle pointing down point style.
            </summary>
    </member>
    <member name="P:NationalInstruments.UI.PointStyle.EmptyTriangleDown">
      <summary>
            Gets a point with an empty triangle pointing down point style.
            </summary>
    </member>
    <member name="P:NationalInstruments.UI.PointStyle.SolidTriangleLeft">
      <summary>
            Gets a point with a solid triangle pointing left point style.
            </summary>
    </member>
    <member name="P:NationalInstruments.UI.PointStyle.EmptyTriangleLeft">
      <summary>
            Gets a point with an empty triangle pointing left point style.
            </summary>
    </member>
    <member name="P:NationalInstruments.UI.PointStyle.SolidTriangleRight">
      <summary>
            Gets a point with a solid triangle pointing right point style.
            </summary>
    </member>
    <member name="P:NationalInstruments.UI.PointStyle.EmptyTriangleRight">
      <summary>
            Gets a point with an empty triangle pointing right point style.
            </summary>
    </member>
    <member name="T:NationalInstruments.UI.NumericOutOfRangeMode">
      <summary>
            Specifies the behavior of a numeric control when the value of the control is set to a value out of range.
            </summary>
    </member>
    <member name="F:NationalInstruments.UI.NumericOutOfRangeMode.ThrowException">
      <summary>
            An exception is thrown when the value is out of range.
            </summary>
    </member>
    <member name="F:NationalInstruments.UI.NumericOutOfRangeMode.CoerceToRange">
      <summary>
            The value is coerced to closest of the minimum or maximum of the range.
            </summary>
    </member>
    <member name="T:NationalInstruments.UI.NumericFormatState">
      <summary>
            Specifies the state in which a NumericFormatMode formats a value.
            </summary>
    </member>
    <member name="F:NationalInstruments.UI.NumericFormatState.Display">
      <summary>
            The NumericFormatMode formats the value for display.
            </summary>
    </member>
    <member name="F:NationalInstruments.UI.NumericFormatState.Edit">
      <summary>
            The NumericFormatMode formats the value for editing.
            </summary>
    </member>
    <member name="T:NationalInstruments.UI.NumericEditChangeArgs">
      <summary>
            Provides data to represent a numeric edit change.
            </summary>
    </member>
    <member name="M:NationalInstruments.UI.NumericEditChangeArgs.#ctor(System.String,System.String)">
      <summary>
            Initializes a new instance of the NumericEditChangeArgs class with 
            the specified old value and new value.
            </summary>
      <param name="oldValue">
            A String representing the old value of the numeric edit change.
            </param>
      <param name="newValue">
            A String representing the new value of the numeric edit change.
            </param>
      <exception cref="T:System.ArgumentNullException">oldValue (parameter) is null.
            
            -or-
            newValue (parameter) is null.
            </exception>
    </member>
    <member name="M:NationalInstruments.UI.NumericEditChangeArgs.#ctor(System.String,System.String,System.String,System.String,System.Int32)">
      <summary>
            Initializes a new instance of the NumericEditChangeArgs class with 
            the specified old value, new value, added characters, deleted characters, and position of the character change.
            </summary>
      <param name="oldValue">
            A String representing the old value of the numeric edit change.
            </param>
      <param name="newValue">
            A String representing the new value of the numeric edit change.
            </param>
      <param name="charactersAdded">
            A String representing the characters that were added.
            </param>
      <param name="charactersDeleted">
            A String representing the characters that were deleted.
            </param>
      <param name="characterChangePosition">
            An integer containing the index of the start of the change.
            </param>
      <exception cref="T:System.ArgumentNullException">oldValue (parameter) is null.
            
            -or-
            newValue (parameter) is null.
            
            -or-
            charactersAdded (parameter) is null.
            
            -or-
            charactersDeleted (parameter) is null.
            </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">characterChangePosition (parameter) is less than zero.
            </exception>
    </member>
    <member name="M:NationalInstruments.UI.NumericEditChangeArgs.ToString">
      <summary>
            Returns a string representation of the object.
            </summary>
      <returns>
            A string representation of the object.
            </returns>
    </member>
    <member name="P:NationalInstruments.UI.NumericEditChangeArgs.OldValue">
      <summary>
            Gets the old string value of the numeric edit change.
            </summary>
    </member>
    <member name="P:NationalInstruments.UI.NumericEditChangeArgs.NewValue">
      <summary>
            Gets or sets the new string value of the numeric edit change.
            </summary>
      <exception cref="T:System.ArgumentNullException">
            The value is null.
            </exception>
    </member>
    <member name="P:NationalInstruments.UI.NumericEditChangeArgs.CharactersAdded">
      <summary>
            Gets the characters that were added in the numeric edit change.
            </summary>
    </member>
    <member name="P:NationalInstruments.UI.NumericEditChangeArgs.CharactersDeleted">
      <summary>
            Gets the characters that were deleted in the numeric edit change.
            </summary>
    </member>
    <member name="P:NationalInstruments.UI.NumericEditChangeArgs.CharacterChangePosition">
      <summary>
            Gets the character change position.
            </summary>
    </member>
    <member name="T:NationalInstruments.UI.IScatterGraph">
      <summary>
            Defines the interface for graphs that accept both x and y data values.
            </summary>
    </member>
    <member name="T:NationalInstruments.UI.IXYGraph">
      <summary>
            Defines the interface for graphs that plot x and y Double data values on a set of x and y axes.
            </summary>
    </member>
    <member name="M:NationalInstruments.UI.IXYGraph.DrawOriginLines(NationalInstruments.UI.ComponentDrawArgs)">
      <summary>
            Draws the origin lines in the plot area of the graph.
            </summary>
      <param name="args">
            A ComponentDrawArgs that contains the drawing data.
            </param>
      <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
      <exception cref="T:System.ArgumentNullException">args (parameter) is null.
            </exception>
    </member>
    <member name="M:NationalInstruments.UI.IXYGraph.ZoomAroundPoint(System.Single,NationalInstruments.UI.XYPlot,System.Double,System.Double)">
      <summary>
            Zooms around the specified data point with the specified zoom factor and reference plot.
            </summary>
      <param name="zoomFactor">
            The percentage to zoom by.
            </param>
      <param name="referencePlot">
            An XYPlot to use as the context for xData (parameter)
            and yData (parameter).
            </param>
      <param name="xData">
            The x data value to zoom around.
            </param>
      <param name="yData">
            The y data value to zoom around.
            </param>
      <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
            The zoomFactor (parameter) is less than or equal to 0.0.
            
            -or-
            zoomFactor (parameter) is NaN,
            NegativeInfinity, or
            PositiveInfinity.
            </exception>
      <exception cref="T:System.ArgumentNullException">referencePlot (parameter) is null.
            </exception>
      <exception cref="T:System.NotSupportedException">IXYGraph is not the
            Owner of referencePlot (parameter).
            </exception>
    </member>
    <member name="M:NationalInstruments.UI.IXYGraph.ZoomXY(NationalInstruments.UI.XYPlot,System.Double,System.Double,System.Double,System.Double)">
      <summary>
            Zooms to the region of the plot area specified by the x location, y location, region width, region height, and
            reference plot.
            </summary>
      <param name="referencePlot">
            An XYPlot to use as the context for xData (parameter),
            yData (parameter), width (parameter) and height (parameter).
            </param>
      <param name="xData">
            The x data value of the corner of the plot area region to zoom.
            </param>
      <param name="yData">
            The y data value of the corner of the plot area region to zoom.
            </param>
      <param name="width">
            The width, in data units, of the plot area region to zoom.
            </param>
      <param name="height">
            The height, in data units, of the plot area region to zoom.
            </param>
      <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
      <exception cref="T:System.ArgumentNullException">referencePlot (parameter) is null.
            </exception>
      <exception cref="T:System.NotSupportedException">IXYGraph is not the
            Owner of referencePlot (parameter).
            </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">width (parameter) or height (parameter) is
            NaN,
            NegativeInfinity, or
            PositiveInfinity.
            </exception>
    </member>
    <member name="P:NationalInstruments.UI.IXYGraph.Cursors">
      <summary>
            Gets the collection of plot area cursors on the graph.
            </summary>
      <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
    </member>
    <member name="P:NationalInstruments.UI.IXYGraph.XAxes">
      <summary>
            Gets the collection of x axes on the graph.
            </summary>
      <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
    </member>
    <member name="P:NationalInstruments.UI.IXYGraph.Annotations">
      <summary>
            Gets the collection of annotations.
            </summary>
      <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
    </member>
    <member name="P:NationalInstruments.UI.IXYGraph.YAxes">
      <summary>
            Gets the collection of y axes on the graph.
            </summary>
      <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
    </member>
    <member name="E:NationalInstruments.UI.IXYGraph.AfterDrawPlot">
      <summary>
            Occurs after a plot is drawn.
            </summary>
      <exception cref="T:System.ObjectDisposedException">
            An event handler is added after the object has been disposed.
            </exception>
    </member>
    <member name="E:NationalInstruments.UI.IXYGraph.AfterDrawPointAnnotation">
      <summary>
            Occurs after a point annotation is drawn.
            </summary>
      <exception cref="T:System.ObjectDisposedException">
            An event handler is added after the object has been disposed.
            </exception>
    </member>
    <member name="E:NationalInstruments.UI.IXYGraph.AfterDrawRangeAnnotation">
      <summary>
            Occurs after a range annotation is drawn.
            </summary>
      <exception cref="T:System.ObjectDisposedException">
            An event handler is added after the object has been disposed.
            </exception>
    </member>
    <member name="E:NationalInstruments.UI.IXYGraph.AfterDrawCursor">
      <summary>
            Occurs after a cursor is drawn.
            </summary>
      <exception cref="T:System.ObjectDisposedException">
            An event handler is added after the object has been disposed.
            </exception>
    </member>
    <member name="E:NationalInstruments.UI.IXYGraph.BeforeDrawPlot">
      <summary>
            Occurs before a plot is drawn.
            </summary>
      <exception cref="T:System.ObjectDisposedException">
            An event handler is added after the object has been disposed.
            </exception>
    </member>
    <member name="E:NationalInstruments.UI.IXYGraph.BeforeDrawPointAnnotation">
      <summary>
            Occurs before a point annotation is drawn.
            </summary>
      <exception cref="T:System.ObjectDisposedException">
            An event handler is added after the object has been disposed.
            </exception>
    </member>
    <member name="E:NationalInstruments.UI.IXYGraph.BeforeDrawRangeAnnotation">
      <summary>
            Occurs before a range annotation is drawn.
            </summary>
      <exception cref="T:System.ObjectDisposedException">
            An event handler is added after the object has been disposed.
            </exception>
    </member>
    <member name="E:NationalInstruments.UI.IXYGraph.BeforeDrawCursor">
      <summary>
            Occurs before a cursor is drawn.
            </summary>
      <exception cref="T:System.ObjectDisposedException">
            An event handler is added after the object has been disposed.
            </exception>
    </member>
    <member name="E:NationalInstruments.UI.IXYGraph.PlotDataChanged">
      <summary>
            Occurs when a new set of data is plotted on a plot that is contained in the graph plot collection.
            </summary>
      <exception cref="T:System.ObjectDisposedException">
            An event handler is added after the object has been disposed.
            </exception>
    </member>
    <member name="E:NationalInstruments.UI.IXYGraph.XAxesChanged">
      <summary>
            Occurs when the content of the XAxes collection
            changes.
            </summary>
      <exception cref="T:System.ObjectDisposedException">
            An event handler is added after the object has been disposed.
            </exception>
    </member>
    <member name="E:NationalInstruments.UI.IXYGraph.XAxisRangeChanged">
      <summary>
            Occurs when the range of an x-axis in the XAxes collection
            of the graph changes.
            </summary>
      <exception cref="T:System.ObjectDisposedException">
            An event handler is added after the object has been disposed.
            </exception>
    </member>
    <member name="E:NationalInstruments.UI.IXYGraph.YAxesChanged">
      <summary>
            Occurs when the content of the YAxes collection
            changes.
            </summary>
      <exception cref="T:System.ObjectDisposedException">
            An event handler is added after the object has been disposed.
            </exception>
    </member>
    <member name="E:NationalInstruments.UI.IXYGraph.YAxisRangeChanged">
      <summary>
            Occurs when the range of a y-axis in the YAxes collection
            of the graph changes.
            </summary>
      <exception cref="T:System.ObjectDisposedException">
            An event handler is added after the object has been disposed.
            </exception>
    </member>
    <member name="E:NationalInstruments.UI.IXYGraph.CursorsChanged">
      <summary>
            Occurs when the content of the Cursors collection
            changes.
            </summary>
      <exception cref="T:System.ObjectDisposedException">
            An event handler is added after the object has been disposed.
            </exception>
    </member>
    <member name="E:NationalInstruments.UI.IXYGraph.AnnotationsChanged">
      <summary>
            Occurs when the content of the Annotations collection
            changes.
            </summary>
      <exception cref="T:System.ObjectDisposedException">
            An event handler is added after the object has been disposed.
            </exception>
    </member>
    <member name="M:NationalInstruments.UI.IScatterGraph.PlotXY(System.Double,System.Double)">
      <summary>
            Plots a single y value against a single x value.
            </summary>
      <param name="xData">
            The x value to plot.
            </param>
      <param name="yData">
            The y value to plot.
            </param>
      <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
      <exception cref="T:System.InvalidOperationException">
            		The XAxis of the plot is null.
            
            -or-
            
            		The YAxis of the plot is null.
            </exception>
      <exception cref="T:System.NotSupportedException">
            The Owner of the plot is not null,
            and the Owner of the plot is
            different from the Owner of XAxis.
            
            -or-
            
            The Owner of the plot is not null,
            and the Owner of the plot is
            different from the Owner of YAxis.
            </exception>
      <exception cref="T:System.ArgumentException">ProcessSpecialValues is true
            and xData (parameter) and yData (parameter) are special values.
            </exception>
    </member>
    <member name="M:NationalInstruments.UI.IScatterGraph.PlotXY(System.Double[],System.Double[])">
      <summary>
            Plots an array of y values against an array of x values.
            </summary>
      <param name="xData">
            The array of x values to plot.
            </param>
      <param name="yData">
            The array of y values to plot.
            </param>
      <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
      <exception cref="T:System.ArgumentNullException">xData (parameter) is null.
            
            -or-
            yData (parameter) is null.
            </exception>
      <exception cref="T:System.ArgumentException">xData (parameter) and yData (parameter) arrays have different lengths.
            
            -or-
            

ProcessSpecialValues is true
            and xData (parameter) and yData (parameter) contain special values
            at the same index.
            


            -or-
            ProcessSpecialValues is true
            and xData (parameter) and yData (parameter) contain special values
            at the same index.
            </exception>
      <exception cref="T:System.InvalidOperationException">
            		The XAxis of the plot is null.
            
            -or-
            
            		The YAxis of the plot is null.
            </exception>
      <exception cref="T:System.NotSupportedException">
            The Owner of the plot is not null,
            and the Owner of the plot is
            different from the Owner of XAxis.
            
            -or-
            
            The Owner of the plot is not null,
            and the Owner of the plot is
            different from the Owner of YAxis.
            </exception>
    </member>
    <member name="M:NationalInstruments.UI.IScatterGraph.PlotXY(System.Double[],System.Double[],System.Int32,System.Int32)">
      <summary>
            Plots a subset of an array of y values against an array of x values.
            </summary>
      <param name="xData">
            The array of x values to plot.
            </param>
      <param name="yData">
            The array of y values to plot.
            </param>
      <param name="startIndex">
            The index in xData (parameter) and yData (parameter) at which the plot data begins.
            </param>
      <param name="length">
            The number of elements, beginning at startIndex (parameter) in xData (parameter)
            and yData (parameter), to plot.
            </param>
      <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
      <exception cref="T:System.ArgumentNullException">xData (parameter) is null.
            
            -or-
            yData (parameter) is null.
            </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">startIndex (parameter) is less than 0.
            
            -or-
            startIndex (parameter) is greater than or equal to the
            number of elements in xData (parameter) or yData (parameter).
            
            -or-
            length (parameter) is less than 0.
            
            -or-
            length (parameter) is greater than the number of elements
            from startIndex (parameter) to the end of xData (parameter) or yData (parameter).
            </exception>
      <exception cref="T:System.ArgumentException">xData (parameter) and yData (parameter) arrays have different lengths.
            
            -or-
            

ProcessSpecialValues is true,
            and xData (parameter) and yData (parameter) contain special values
            at the same index.
            


            -or-
            ProcessSpecialValues is true,
            and xData (parameter) and yData (parameter) contain special values
            at the same index.
            </exception>
      <exception cref="T:System.InvalidOperationException">
            		The XAxis of the plot is null.
            
            -or-
            
            		The YAxis of the plot is null.
            </exception>
      <exception cref="T:System.NotSupportedException">
            The Owner of the plot is not null,
            and the Owner of the plot is
            different from the Owner of XAxis.
            
            -or-
            
            The Owner of the plot is not null,
            and the Owner of the plot is
            different from the Owner of YAxis.
            </exception>
    </member>
    <member name="M:NationalInstruments.UI.IScatterGraph.PlotXYAppend(System.Double,System.Double)">
      <summary>
            Plots a single y value against a single x value by appending the x and y value to the
            existing data.
            </summary>
      <param name="xData">
            The x value to append.
            </param>
      <param name="yData">
            The y value to append.
            </param>
      <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
      <exception cref="T:System.InvalidOperationException">
            		The XAxis of the plot is null.
            
            -or-
            
            		The YAxis of the plot is null.
            </exception>
      <exception cref="T:System.NotSupportedException">
            The Owner of the plot is not null,
            and the Owner of the plot is
            different from the Owner of XAxis.
            
            -or-
            
            The Owner of the plot is not null,
            and the Owner of the plot is
            different from the Owner of YAxis.
            </exception>
      <exception cref="T:System.ArgumentException">ProcessSpecialValues is true
            and xData (parameter) and yData (parameter) are special values.
            </exception>
    </member>
    <member name="M:NationalInstruments.UI.IScatterGraph.PlotXYAppend(System.Double[],System.Double[])">
      <summary>
            Plots an array of y values against an array of x values by appending the x and y values to 
            the existing data.
            </summary>
      <param name="xData">
            The x values to append.
            </param>
      <param name="yData">
            The y values to append.
            </param>
      <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
      <exception cref="T:System.ArgumentNullException">xData (parameter) is null.
            
            -or-
            yData (parameter) is null.
            </exception>
      <exception cref="T:System.ArgumentException">xData (parameter) and yData (parameter) arrays have different lengths.
            
            -or-
            

ProcessSpecialValues is true
            and xData (parameter) and yData (parameter) contain special values
            at the same index.
            


            -or-
            ProcessSpecialValues is true
            and xData (parameter) and yData (parameter) contain special values
            at the same index.
            </exception>
      <exception cref="T:System.InvalidOperationException">
            		The XAxis of the plot is null.
            
            -or-
            
            		The YAxis of the plot is null.
            </exception>
      <exception cref="T:System.NotSupportedException">
            The Owner of the plot is not null,
            and the Owner of the plot is
            different from the Owner of XAxis.
            
            -or-
            
            The Owner of the plot is not null,
            and the Owner of the plot is
            different from the Owner of YAxis.
            </exception>
    </member>
    <member name="M:NationalInstruments.UI.IScatterGraph.PlotXYAppend(System.Double[],System.Double[],System.Int32,System.Int32)">
      <summary>
            Plots a subset of an array of y values against an array of x values by appending the x and y values to 
            the existing data.
            </summary>
      <param name="xData">
            The x values to append.
            </param>
      <param name="yData">
            The y values to append.
            </param>
      <param name="startIndex">
            The index in xData (parameter) and yData (parameter) at which the plot data begins.
            </param>
      <param name="length">
            The number of elements, beginning at startIndex (parameter) in xData (parameter)
            and yData (parameter), to plot.
            </param>
      <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
      <exception cref="T:System.ArgumentNullException">xData (parameter) is null.
            
            -or-
            yData (parameter) is null.
            </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">startIndex (parameter) is less than 0.
            
            -or-
            startIndex (parameter) is greater than or equal to the
            number of elements in xData (parameter) or yData (parameter).
            
            -or-
            length (parameter) is less than 0.
            
            -or-
            length (parameter) is greater than the number of elements
            from startIndex (parameter) to the end of xData (parameter) or yData (parameter).
            </exception>
      <exception cref="T:System.ArgumentException">xData (parameter) and yData (parameter) arrays have different lengths.
            
            -or-
            

ProcessSpecialValues is true,
            and xData (parameter) and yData (parameter) contain special values
            at the same index.
            


            -or-
            ProcessSpecialValues is true,
            and xData (parameter) and yData (parameter) contain special values
            at the same index.
            </exception>
      <exception cref="T:System.InvalidOperationException">
            		The XAxis of the plot is null.
            
            -or-
            
            		The YAxis of the plot is null.
            </exception>
      <exception cref="T:System.NotSupportedException">
            The Owner of the plot is not null,
            and the Owner of the plot is
            different from the Owner of XAxis.
            
            -or-
            
            The Owner of the plot is not null,
            and the Owner of the plot is
            different from the Owner of YAxis.
            </exception>
    </member>
    <member name="M:NationalInstruments.UI.IScatterGraph.PlotXYAppendMultiple(System.Double[],System.Double[0:,0:])">
      <summary>
            Plots a 2D array of y values with the default data orientation against an 
            array of x values by appending the x and y values to the existing data.
            </summary>
      <param name="xData">
            The x values to append.
            </param>
      <param name="yData">
            The 2D array of y values to append.
            </param>
      <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
      <exception cref="T:System.ArgumentNullException">xData (parameter) is null.
            
            -or-
            yData (parameter) is null.
            </exception>
      <exception cref="T:System.ArgumentException">xData (parameter) and yData (parameter) arrays have different lengths.
            
            -or-
            

ProcessSpecialValues is true
            and xData (parameter) and yData (parameter) contain special values
            at the same index.
            


            -or-
            ProcessSpecialValues is true
            and xData (parameter) and yData (parameter) contain special values
            at the same index.
            </exception>
      <exception cref="T:System.InvalidOperationException">
            		The XAxis of the plot is null.
            
            -or-
            
            		The YAxis of the plot is null.
            </exception>
      <exception cref="T:System.NotSupportedException">
            The Owner of the plot is not null,
            and the Owner of the plot is
            different from the Owner of XAxis.
            
            -or-
            
            The Owner of the plot is not null,
            and the Owner of the plot is
            different from the Owner of YAxis.
            </exception>
    </member>
    <member name="M:NationalInstruments.UI.IScatterGraph.PlotXYAppendMultiple(System.Double[],System.Double[0:,0:],NationalInstruments.UI.DataOrientation)">
      <summary>
            Plots a 2D array of y values with the specified orientation against an array
            of x values by appending the x and y values to the existing data.
            </summary>
      <param name="xData">
            The array of x values to append.
            </param>
      <param name="yData">
            The 2D array of y values to append.
            </param>
      <param name="orientation">
            A DataOrientation value that specifies the orientation
            of data in yData (parameter).
            </param>
      <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
      <exception cref="T:System.ArgumentNullException">xData (parameter) is null.
            
            -or-
            yData (parameter) is null.
            </exception>
      <exception cref="T:System.ArgumentException">xData (parameter) and yData (parameter) arrays have different lengths.
            
            -or-
            

ProcessSpecialValues is true
            and xData (parameter) and yData (parameter) contain special values
            at the same index.
            


            -or-
            ProcessSpecialValues is true
            and xData (parameter) and yData (parameter) contain special values
            at the same index.
            </exception>
      <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">orientation (parameter) is not one of the DataOrientation
            values.
            </exception>
      <exception cref="T:System.InvalidOperationException">
            		The XAxis of the plot is null.
            
            -or-
            
            		The YAxis of the plot is null.
            </exception>
      <exception cref="T:System.NotSupportedException">
            The Owner of the plot is not null,
            and the Owner of the plot is
            different from the Owner of XAxis.
            
            -or-
            
            The Owner of the plot is not null,
            and the Owner of the plot is
            different from the Owner of YAxis.
            </exception>
    </member>
    <member name="M:NationalInstruments.UI.IScatterGraph.PlotYXAppendMultiple(System.Double[],System.Double[0:,0:])">
      <summary>
            Plots a 2D array of x values with the default data orientation against an 
            array of y values by appending the x and y values to the existing data.
            </summary>
      <param name="yData">
            The y values to append.
            </param>
      <param name="xData">
            The 2D array of x values to append.
            </param>
      <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
      <exception cref="T:System.ArgumentNullException">xData (parameter) is null.
            
            -or-
            yData (parameter) is null.
            </exception>
      <exception cref="T:System.ArgumentException">xData (parameter) and yData (parameter) arrays have different lengths.
            
            -or-
            

ProcessSpecialValues is true
            and xData (parameter) and yData (parameter) contain special values
            at the same index.
            


            -or-
            ProcessSpecialValues is true
            and xData (parameter) and yData (parameter) contain special values
            at the same index.
            </exception>
      <exception cref="T:System.InvalidOperationException">
            		The XAxis of the plot is null.
            
            -or-
            
            		The YAxis of the plot is null.
            </exception>
      <exception cref="T:System.NotSupportedException">
            The Owner of the plot is not null,
            and the Owner of the plot is
            different from the Owner of XAxis.
            
            -or-
            
            The Owner of the plot is not null,
            and the Owner of the plot is
            different from the Owner of YAxis.
            </exception>
    </member>
    <member name="M:NationalInstruments.UI.IScatterGraph.PlotYXAppendMultiple(System.Double[],System.Double[0:,0:],NationalInstruments.UI.DataOrientation)">
      <summary>
            Plots a 2D array of x values with the specified orientation against an array
            of y values by appending the x and y values to the existing data.
            </summary>
      <param name="yData">
            The y values to append.
            </param>
      <param name="xData">
            The 2D array of x values to append.
            </param>
      <param name="orientation">
            A DataOrientation value that specifies the orientation of
            data in xData (parameter)</param>
      <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
      <exception cref="T:System.ArgumentNullException">xData (parameter) is null.
            
            -or-
            yData (parameter) is null.
            </exception>
      <exception cref="T:System.ArgumentException">xData (parameter) and yData (parameter) arrays have different lengths.
            
            -or-
            

ProcessSpecialValues is true
            and xData (parameter) and yData (parameter) contain special values
            at the same index.
            


            -or-
            ProcessSpecialValues is true
            and xData (parameter) and yData (parameter) contain special values
            at the same index.
            </exception>
      <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">orientation (parameter) is not one of the DataOrientation
            values.
            </exception>
      <exception cref="T:System.InvalidOperationException">
            		The XAxis of the plot is null.
            
            -or-
            
            		The YAxis of the plot is null.
            </exception>
      <exception cref="T:System.NotSupportedException">
            The Owner of the plot is not null,
            and the Owner of the plot is
            different from the Owner of XAxis.
            
            -or-
            
            The Owner of the plot is not null,
            and the Owner of the plot is
            different from the Owner of YAxis.
            </exception>
    </member>
    <member name="M:NationalInstruments.UI.IScatterGraph.PlotXYMultiple(System.Double[],System.Double[0:,0:])">
      <summary>
            Plots a 2D array of y values with the default orientation against an array 
            of x values.
            </summary>
      <param name="xData">
            The array of x values to plot.
            </param>
      <param name="yData">
            The 2D array of y values to plot.
            </param>
      <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
      <exception cref="T:System.ArgumentNullException">xData (parameter) is null.
            
            -or-
            yData (parameter) is null.
            </exception>
      <exception cref="T:System.ArgumentException">xData (parameter) and yData (parameter) arrays have different lengths.
            
            -or-
            

ProcessSpecialValues is true
            and xData (parameter) and yData (parameter) contain special values
            at the same index.
            


            -or-
            ProcessSpecialValues is true
            and xData (parameter) and yData (parameter) contain special values
            at the same index.
            </exception>
      <exception cref="T:System.InvalidOperationException">
            		The XAxis of the plot is null.
            
            -or-
            
            		The YAxis of the plot is null.
            </exception>
      <exception cref="T:System.NotSupportedException">
            The Owner of the plot is not null,
            and the Owner of the plot is
            different from the Owner of XAxis.
            
            -or-
            
            The Owner of the plot is not null,
            and the Owner of the plot is
            different from the Owner of YAxis.
            </exception>
    </member>
    <member name="M:NationalInstruments.UI.IScatterGraph.PlotXYMultiple(System.Double[],System.Double[0:,0:],NationalInstruments.UI.DataOrientation)">
      <summary>
            Plots a 2D array of y values with the specified orientation against an array
            of x values.
            </summary>
      <param name="xData">
            The array of x values to plot.
            </param>
      <param name="yData">
            The 2D array of y values to plot.
            </param>
      <param name="orientation">
            A DataOrientation value that specifies the orientation 
            of values in yData (parameter).
            </param>
      <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
      <exception cref="T:System.ArgumentNullException">xData (parameter) is null.
            
            -or-
            yData (parameter) is null.
            </exception>
      <exception cref="T:System.ArgumentException">xData (parameter) and yData (parameter) arrays have different lengths.
            
            -or-
            

ProcessSpecialValues is true
            and xData (parameter) and yData (parameter) contain special values
            at the same index.
            


            -or-
            ProcessSpecialValues is true
            and xData (parameter) and yData (parameter) contain special values
            at the same index.
            </exception>
      <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">orientation (parameter) is not one of the DataOrientation
            values.
            </exception>
      <exception cref="T:System.InvalidOperationException">
            		The XAxis of the plot is null.
            
            -or-
            
            		The YAxis of the plot is null.
            </exception>
      <exception cref="T:System.NotSupportedException">
            The Owner of the plot is not null,
            and the Owner of the plot is
            different from the Owner of XAxis.
            
            -or-
            
            The Owner of the plot is not null,
            and the Owner of the plot is
            different from the Owner of YAxis.
            </exception>
    </member>
    <member name="M:NationalInstruments.UI.IScatterGraph.PlotYXMultiple(System.Double[],System.Double[0:,0:])">
      <summary>
            Plots a 2D array of x values with the default orientation against an array
            of y values.
            </summary>
      <param name="yData">
            The array of y values to plot.
            </param>
      <param name="xData">
            The 2D array of x values to plot.
            </param>
      <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
      <exception cref="T:System.ArgumentNullException">xData (parameter) is null.
            
            -or-
            yData (parameter) is null.
            </exception>
      <exception cref="T:System.ArgumentException">xData (parameter) and yData (parameter) arrays have different lengths.
            
            -or-
            

ProcessSpecialValues is true
            and xData (parameter) and yData (parameter) contain special values
            at the same index.
            


            -or-
            ProcessSpecialValues is true
            and xData (parameter) and yData (parameter) contain special values
            at the same index.
            </exception>
      <exception cref="T:System.InvalidOperationException">
            		The XAxis of the plot is null.
            
            -or-
            
            		The YAxis of the plot is null.
            </exception>
      <exception cref="T:System.NotSupportedException">
            The Owner of the plot is not null,
            and the Owner of the plot is
            different from the Owner of XAxis.
            
            -or-
            
            The Owner of the plot is not null,
            and the Owner of the plot is
            different from the Owner of YAxis.
            </exception>
    </member>
    <member name="M:NationalInstruments.UI.IScatterGraph.PlotYXMultiple(System.Double[],System.Double[0:,0:],NationalInstruments.UI.DataOrientation)">
      <summary>
            Plots a 2D array of x values with the specified orientation against an array
            of y values.
            </summary>
      <param name="yData">
            The array of y values to plot.
            </param>
      <param name="xData">
            The 2D array of x values to plot.
            </param>
      <param name="orientation">
            A DataOrientation value that specifies the orientation of
            data in xData (parameter).
            </param>
      <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
      <exception cref="T:System.ArgumentNullException">xData (parameter) is null.
            
            -or-
            yData (parameter) is null.
            </exception>
      <exception cref="T:System.ArgumentException">xData (parameter) and yData (parameter) arrays have different lengths.
            
            -or-
            

ProcessSpecialValues is true
            and xData (parameter) and yData (parameter) contain special values
            at the same index.
            


            -or-
            ProcessSpecialValues is true
            and xData (parameter) and yData (parameter) contain special values
            at the same index.
            </exception>
      <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">orientation (parameter) is not one of the DataOrientation
            values.
            </exception>
      <exception cref="T:System.InvalidOperationException">
            		The XAxis of the plot is null.
            
            -or-
            
            		The YAxis of the plot is null.
            </exception>
      <exception cref="T:System.NotSupportedException">
            The Owner of the plot is not null,
            and the Owner of the plot is
            different from the Owner of XAxis.
            
            -or-
            
            The Owner of the plot is not null,
            and the Owner of the plot is
            different from the Owner of YAxis.
            </exception>
    </member>
    <member name="P:NationalInstruments.UI.IScatterGraph.DefaultDataOrientation">
      <summary>
            Gets or sets the default orientation of values in a 2D array.
            </summary>
    </member>
    <member name="P:NationalInstruments.UI.IScatterGraph.Plots">
      <summary>
            Gets the collection of plots on the graph.
            </summary>
      <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
    </member>
    <member name="T:NationalInstruments.UI.IntensityYAxis">
      <summary>
            Represents the vertical axis on a intensity graph. 
            </summary>
    </member>
    <member name="M:NationalInstruments.UI.IntensityYAxis.#ctor">
      <summary>
            Initializes a new instance of the IntensityYAxis class.
            </summary>
    </member>
    <member name="M:NationalInstruments.UI.IntensityYAxis.GetSize(NationalInstruments.UI.YAxisPosition)">
      <summary>
            Returns the size of the IntensityYAxis at the specified position.
            </summary>
      <param name="position">
            A YAxisPosition that indicates the position of the IntensityYAxis
            for which the size is returned.
            </param>
      <returns>
            The Size of the IntensityYAxis.
            </returns>
      <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
      <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">position (parameter) is an invalid YAxisPosition value.
            </exception>
      <exception cref="T:System.NotSupportedException">position (parameter) is LeftRight.
            	</exception>
    </member>
    <member name="M:NationalInstruments.UI.IntensityYAxis.GetBounds(NationalInstruments.UI.YAxisPosition)">
      <summary>
            Returns the bounds of the IntensityYAxis at the specified position.
            </summary>
      <param name="position">
            A YAxisPosition that indicates the position of the IntensityYAxis
             for which the bounds are returned.
            </param>
      <returns>
            A Rectangle that represents the bounds of the IntensityYAxis.
            </returns>
      <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
      <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">position (parameter) is an invalid YAxisPosition value.
            </exception>
      <exception cref="T:System.NotSupportedException">position (parameter) is LeftRight.
            	</exception>
    </member>
    <member name="M:NationalInstruments.UI.IntensityYAxis.GetBounds(System.Drawing.Graphics,System.Drawing.Rectangle)">
      <summary>
            Returns the bounds of the IntensityYAxis relative to a reference rectangle.
            </summary>
      <param name="graphics">
            The Graphics object that is used to calculate the bounds of the axis.
            </param>
      <param name="referenceRectangle">
            A Rectangle that provides a reference for the bounds of the IntensityYAxis.
            </param>
      <returns>
            A Rectangle that represents the bounds of the IntensityYAxis.
            </returns>
      <exception cref="T:System.ArgumentNullException">graphics (parameter) is null.
            	</exception>
      <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
    </member>
    <member name="M:NationalInstruments.UI.IntensityYAxis.GetBounds(System.Drawing.Graphics,System.Drawing.Rectangle,NationalInstruments.UI.YAxisPosition)">
      <summary>
            Returns the bounds of the IntensityYAxis relative to a reference rectangle at the specified position.
            </summary>
      <param name="graphics">
            The Graphics object that is used to calculate the bounds of the axis.
            </param>
      <param name="referenceRectangle">
            A Rectangle that provides a reference for the bounds of the IntensityYAxis.
            </param>
      <param name="position">
            A YAxisPosition that indicates the position of the IntensityYAxis
             for which the bounds are returned.
            </param>
      <returns>
            A Rectangle that represents the bounds of the IntensityYAxis.
            </returns>
      <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
      <exception cref="T:System.ArgumentNullException">graphics (parameter) is null.
            	</exception>
      <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">position (parameter) is an invalid YAxisPosition value.
            </exception>
      <exception cref="T:System.NotSupportedException">position (parameter) is LeftRight.
            	</exception>
    </member>
    <member name="M:NationalInstruments.UI.IntensityYAxis.Draw(NationalInstruments.UI.ComponentDrawArgs,NationalInstruments.UI.YAxisPosition)">
      <summary>
            Draws the IntensityYAxis with the specified axis position.
            </summary>
      <param name="args">
            A ComponentDrawArgs that contains the 
            drawing data.
            </param>
      <param name="position">
            The position of the axis.
            </param>
      <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
      <exception cref="T:System.ArgumentNullException">args (parameter) is null.
            </exception>
      <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">position (parameter) is an invalid YAxisPosition value.
            </exception>
      <exception cref="T:System.NotSupportedException">position (parameter) is LeftRight.
            	</exception>
    </member>
    <member name="M:NationalInstruments.UI.IntensityYAxis.Clone">
      <summary>
            Creates a new object that is a deep copy of this instance.
            </summary>
      <returns>
            A new object that is a deep copy of this instance.
            </returns>
    </member>
    <member name="P:NationalInstruments.UI.IntensityYAxis.CaptionPosition">
      <summary>
            Gets or sets the position of the caption that is displayed for the axis.
            </summary>
      <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
      <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
            The specified value is not a YAxisPosition value.
            </exception>
    </member>
    <member name="P:NationalInstruments.UI.IntensityYAxis.LeftCaptionOrientation">
      <summary>
            Gets or sets the orientation of the caption displayed by the y-axis to the left of the intensity graph.
            </summary>
      <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
      <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
            The specified value is not a VerticalCaptionOrientation value.
            </exception>
    </member>
    <member name="P:NationalInstruments.UI.IntensityYAxis.RightCaptionOrientation">
      <summary>
            Gets or sets the orientation of the caption displayed by the y-axis to the right of the intensity graph.
            </summary>
      <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
      <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
            The specified value is not a VerticalCaptionOrientation value.
            </exception>
    </member>
    <member name="P:NationalInstruments.UI.IntensityYAxis.Position">
      <summary>
            Gets or sets the position of the axis.
            </summary>
      <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
      <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
            The specified value is not a YAxisPosition value.
            </exception>
    </member>
    <member name="P:NationalInstruments.UI.IntensityYAxis.MinimumWidth">
      <summary>
            Gets or sets the minimum width required by IntensityYAxis,
            allowing you to customize the IntensityYAxis width. 
            </summary>
      <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
            The specified value is less than zero.
            </exception>
    </member>
    <member name="T:NationalInstruments.UI.FillStyle">
      <summary>
            Provides an abstract base class for specifying a fill style 
            and also provides a list of pre-defined fill styles.
            </summary>
    </member>
    <member name="M:NationalInstruments.UI.FillStyle.#ctor">
      <summary>
            Initializes a new instance of the FillStyle class.
            </summary>
    </member>
    <member name="M:NationalInstruments.UI.FillStyle.CreateBrush(System.Object,NationalInstruments.UI.FillStyleDrawArgs)">
      <summary>
            Creates a brush with the specified FillStyleDrawArgs.
            </summary>
      <param name="context">
            An Object with additional context information.
            </param>
      <param name="args">
            A FillStyleDrawArgs that contains the 
            drawing data.
            </param>
      <returns>
            A Brush to use to draw the fill style.  If null is returned, a NotSupportedException
            is thrown at the time this method is called.
            </returns>
    </member>
    <member name="M:NationalInstruments.UI.FillStyle.FromImage(System.Drawing.Image,NationalInstruments.UI.ImageAlignment)">
      <summary>
            Creates a FillStyle based on an image.
            </summary>
      <param name="image">
            An Image used to create the fill style.
            </param>
      <param name="alignment">
            The ImageAlignment that specifies how the image is drawn.
            </param>
      <returns>
            A FillStyle that uses an Image to fill.
            </returns>
      <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">alignment (parameter) is not an ImageAlignment value.
            </exception>
      <exception cref="T:System.ArgumentNullException">image (parameter) is null.
            </exception>
    </member>
    <member name="M:NationalInstruments.UI.FillStyle.CreateHorizontalGradient(System.Drawing.Color,System.Drawing.Color)">
      <summary>
            Creates a horizontal gradient FillStyle.
            </summary>
      <param name="color1">
            A Color structure that represents the starting color for the gradient. 
            </param>
      <param name="color2">
            A Color structure that represents the ending color for the gradient. 
            </param>
      <returns>
            A horizontal gradient FillStyle.
            </returns>
    </member>
    <member name="M:NationalInstruments.UI.FillStyle.CreateVerticalGradient(System.Drawing.Color,System.Drawing.Color)">
      <summary>
            Creates a vertical gradient FillStyle.
            </summary>
      <param name="color1">
            A Color structure that represents the starting color for the gradient. 
            </param>
      <param name="color2">
            A Color structure that represents the ending color for the gradient. 
            </param>
      <returns>
            A vertical gradient FillStyle.
            </returns>
    </member>
    <member name="M:NationalInstruments.UI.FillStyle.CreateRotatedGradient(System.Drawing.Color,System.Drawing.Color,System.Single)">
      <summary>
            Creates a rotated gradient FillStyle.
            </summary>
      <param name="color1">
            A Color structure that represents the starting color for the gradient. 
            </param>
      <param name="color2">
            A Color structure that represents the ending color for the gradient. 
            </param>
      <param name="angle">
            The angle, measured in degrees counter clockwise from the x-axis, of the gradient's orientation line. 
            </param>
      <returns>
            A rotated gradient FillStyle.
            </returns>
    </member>
    <member name="P:NationalInstruments.UI.FillStyle.UnderlyingType">
      <summary>
            Gets the underlying type of an EnumObject value.
            </summary>
    </member>
    <member name="P:NationalInstruments.UI.FillStyle.IsContextDependent">
      <summary>
            Gets a value indicating if the fill style is sensitive to changes in the context.
            </summary>
    </member>
    <member name="P:NationalInstruments.UI.FillStyle.None">
      <summary>
            Gets a none fill style.
            </summary>
    </member>
    <member name="P:NationalInstruments.UI.FillStyle.Solid">
      <summary>
            Gets a solid fill style.
            </summary>
    </member>
    <member name="P:NationalInstruments.UI.FillStyle.HorizontalBrick">
      <summary>
            Gets a horizontal brick fill style.
            </summary>
    </member>
    <member name="P:NationalInstruments.UI.FillStyle.ZigZag">
      <summary>
            Gets a zigzag fill style.
            </summary>
    </member>
    <member name="P:NationalInstruments.UI.FillStyle.Wave">
      <summary>
            Gets a wave fill style.
            </summary>
    </member>
    <member name="P:NationalInstruments.UI.FillStyle.DiagonalBrick">
      <summary>
            Gets a diagonal brick fill style.
            </summary>
    </member>
    <member name="P:NationalInstruments.UI.FillStyle.Divot">
      <summary>
            Gets a divot fill style.
            </summary>
    </member>
    <member name="P:NationalInstruments.UI.FillStyle.Shingle">
      <summary>
            Gets a shingle fill style.
            </summary>
    </member>
    <member name="P:NationalInstruments.UI.FillStyle.VerticalGradient">
      <summary>
            Gets a vertical gradient fill style.
            </summary>
    </member>
    <member name="P:NationalInstruments.UI.FillStyle.HorizontalGradient">
      <summary>
            Gets a horizontal gradient fill style.
            </summary>
    </member>
    <member name="T:NationalInstruments.UI.ComplexWaveformPlotScaleMode">
      <summary>
            Provides an abstract base class for specifying a scale mode used to plot  
            ComplexWaveform&lt;T&gt; data on a waveform plot. 
            </summary>
    </member>
    <member name="M:NationalInstruments.UI.ComplexWaveformPlotScaleMode.GetPlotData``1(NationalInstruments.ComplexWaveform{``0},NationalInstruments.UI.ComplexDataPart)">
      <summary>
            Returns the ComplexWaveform&lt;T&gt; data after applying the specified scaling.
            </summary>
      <typeparam name="TData">
            The underlying type of waveform (parameter). TData (generic type parameter) supports the ComplexDouble data type. 
            			</typeparam>
      <param name="waveform">
            The ComplexWaveform&lt;T&gt; data.
            </param>
      <param name="dataToPlot">
            The ComplexDataPart data.
            </param>
      <returns>
            A Double array that corresponds to the complex waveform data based on the scale mode and data to plot. 
            </returns>
    </member>
    <member name="M:NationalInstruments.UI.ComplexWaveformPlotScaleMode.Equals(System.Object)">
      <summary>
            Returns a value indicating if this instance is equal to the specified Object.
            </summary>
      <param name="obj">
            The Object to compare with this
            instance.
            </param>
      <returns>true if obj (parameter) is an Object that is equal 
            to this instance.
            </returns>
    </member>
    <member name="M:NationalInstruments.UI.ComplexWaveformPlotScaleMode.GetHashCode">
      <summary>
            Returns a hash code for this object.
            </summary>
      <returns>
            A 32-bit signed integer hash code.
            </returns>
    </member>
    <member name="M:NationalInstruments.UI.ComplexWaveformPlotScaleMode.op_Equality(NationalInstruments.UI.ComplexWaveformPlotScaleMode,NationalInstruments.UI.ComplexWaveformPlotScaleMode)">
      <summary>
            Returns whether two ComplexWaveformPlotScaleMode objects are equal.
            </summary>
      <param name="source">
            An ComplexWaveformPlotScaleMode.
            </param>
      <param name="destination">
            An ComplexWaveformPlotScaleMode.
            </param>
      <returns>true if the values of source (parameter) and destination (parameter) are equal. 
            </returns>
    </member>
    <member name="M:NationalInstruments.UI.ComplexWaveformPlotScaleMode.op_Inequality(NationalInstruments.UI.ComplexWaveformPlotScaleMode,NationalInstruments.UI.ComplexWaveformPlotScaleMode)">
      <summary>
            Returns whether two ComplexWaveformPlotScaleMode objects are 
            not equal.
            </summary>
      <param name="source">
            An ComplexWaveformPlotScaleMode.
            </param>
      <param name="destination">
            An ComplexWaveformPlotScaleMode.
            </param>
      <returns>true if the values of source (parameter) and destination (parameter) are not equal. 
            </returns>
    </member>
    <member name="P:NationalInstruments.UI.ComplexWaveformPlotScaleMode.Raw">
      <summary>
            Gets a scale mode with no scaling information.
            </summary>
    </member>
    <member name="P:NationalInstruments.UI.ComplexWaveformPlotScaleMode.Scaled">
      <summary>
            Gets a scale mode with scaling information.
            </summary>
    </member>
    <member name="P:NationalInstruments.UI.ComplexWaveformPlotScaleMode.Name">
      <summary>
            Gets the name of the ComplexWaveformPlotScaleMode  value.
            </summary>
    </member>
    <member name="P:NationalInstruments.UI.ComplexWaveformPlotScaleMode.UnderlyingType">
      <summary>
            Gets Type  of ComplexWaveformPlotScaleMode.
            </summary>
    </member>
    <member name="T:NationalInstruments.UI.ComplexDoubleDataStateManagementArgs">
      <summary>
            Provides data for managing the state of complex double data.
            </summary>
    </member>
    <member name="M:NationalInstruments.UI.ComplexDoubleDataStateManagementArgs.#ctor(System.Web.HttpContext,System.String,NationalInstruments.ComplexDouble[],System.String)">
      <summary>
            Initializes a new instance of the
            ComplexDoubleDataStateManagementArgs class with the
            specified context, state ID, data, and property name.
            </summary>
      <param name="context">
            The HttpContext for the current HTTP request.
            </param>
      <param name="stateId">
            An identifier that uniquely identifies the source of the data.
            </param>
      <param name="data">
            The complex double data to manage through state management.
            </param>
      <param name="propertyName">
            The name of the property that is supplying the data.
            </param>
      <exception cref="T:System.ArgumentNullException">data (parameter) is null.
            
            -or-
            stateId (parameter) is null.
            </exception>
    </member>
    <member name="M:NationalInstruments.UI.ComplexDoubleDataStateManagementArgs.#ctor(System.Web.HttpContext,System.String,NationalInstruments.ComplexDouble[],System.String,System.Boolean,System.Int32)">
      <summary>
            Initializes a new instance of the
            ComplexDoubleDataStateManagementArgs class with the
            specified context, state ID, data, property name, and collection information.
            </summary>
      <param name="context">
            The HttpContext for the current HTTP request.
            </param>
      <param name="stateId">
            An identifier that uniquely identifies the source of the data.
            </param>
      <param name="data">
            The complex double data to manage through state management.
            </param>
      <param name="propertyName">
            The name of the property that is supplying the data.
            </param>
      <param name="isCollectionProperty">
            Indicates if the property specified by propertyName (parameter) is a collection.
            </param>
      <param name="collectionIndex">
            The index of the collection that supplies the data.
            </param>
      <exception cref="T:System.ArgumentNullException">data (parameter) is null.
            
            -or-
            stateId (parameter) is null.
            </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">isCollectionProperty (parameter) is true and
            collectionIndex (parameter) is less than 0.
            </exception>
    </member>
    <member name="M:NationalInstruments.UI.ComplexDoubleDataStateManagementArgs.GetData">
      <summary>
            Gets the complex double data that is managed by the data state management strategy.
            </summary>
      <returns>
            An array of ComplexDouble values that represents the complex double 
            data that is managed by the data state management strategy.
            </returns>
    </member>
    <member name="M:NationalInstruments.UI.ComplexDoubleDataStateManagementArgs.SetData(NationalInstruments.ComplexDouble[])">
      <summary>
            Sets the complex double data that is managed by the data state management strategy.
            </summary>
      <param name="data">
            An array of ComplexDouble values that represents the complex double 
            data that is managed by the data state management strategy.
            </param>
      <exception cref="T:System.ArgumentNullException">data (parameter) is null.
            </exception>
    </member>
    <member name="P:NationalInstruments.UI.ComplexDoubleDataStateManagementArgs.PropertyName">
      <summary>
            Gets the name of the property that supplies the complex double data.
            </summary>
    </member>
    <member name="P:NationalInstruments.UI.ComplexDoubleDataStateManagementArgs.IsCollectionProperty">
      <summary>
            Gets a value indicating if the property specified by
            PropertyName
            is a collection property.
            </summary>
    </member>
    <member name="P:NationalInstruments.UI.ComplexDoubleDataStateManagementArgs.CollectionIndex">
      <summary>
            Gets the index of the collection that supplies the data if the property specified by
            PropertyName
            is a collection.
            </summary>
    </member>
    <member name="T:NationalInstruments.UI.IntensityAnnotationCollection">
      <summary>
            Represents a strongly typed collection of IntensityAnnotation objects.
            </summary>
    </member>
    <member name="M:NationalInstruments.UI.IntensityAnnotationCollection.#ctor">
      <summary>
            Initializes a new instance of the IntensityAnnotationCollection class.
            </summary>
    </member>
    <member name="M:NationalInstruments.UI.IntensityAnnotationCollection.#ctor(NationalInstruments.UI.IntensityAnnotation[])">
      <summary>
            Initializes a new instance of the IntensityAnnotationCollection class
            from an array of IntensityAnnotation objects.
            </summary>
      <param name="item">
            Array of IntensityAnnotation objects to copy.
            </param>
      <exception cref="T:System.ArgumentNullException">item (parameter) is null.
            
            -or-
            
            An element in item (parameter) is null.
            </exception>
      <exception cref="T:System.NotSupportedException">
            		An element in item (parameter) has been disposed.
            
            -or-
            
            		An element in item (parameter) is in another IntensityAnnotationCollection.
            
            -or-
            
            		An element in item (parameter) is already in this collection.
            </exception>
    </member>
    <member name="M:NationalInstruments.UI.IntensityAnnotationCollection.#ctor(NationalInstruments.UI.IntensityAnnotationCollection)">
      <summary>
            Initializes a new instance of the IntensityAnnotationCollection class
            from an existing collection.
            </summary>
      <param name="item">
            The IntensityAnnotationCollection to copy.
            </param>
      <exception cref="T:System.ArgumentNullException">item (parameter) is null.
            
            -or-
            
            An element in item (parameter) is null.
            </exception>
      <exception cref="T:System.NotSupportedException">
            		An element in item (parameter) has been disposed.
            
            -or-
            
            		An element in item (parameter) is in another IntensityAnnotationCollection.
            
            -or- 
            
            		An element in item (parameter) is already in this collection.
            </exception>
    </member>
    <member name="M:NationalInstruments.UI.IntensityAnnotationCollection.ToString">
      <summary>
            Returns a string representation of the object.
            </summary>
      <returns>
            A string representation of the object.
            </returns>
    </member>
    <member name="M:NationalInstruments.UI.IntensityAnnotationCollection.Add(NationalInstruments.UI.IntensityAnnotation)">
      <summary>
            Adds an item to the end of the collection.
            </summary>
      <param name="item"> 
            Item to add to the collection.
            </param>
      <returns>
            The array index of the added item.
            </returns>
      <exception cref="T:System.ArgumentNullException">item (parameter) is null.
            </exception>
      <exception cref="T:System.NotSupportedException">item (parameter) has been disposed.
            
            -or-
            item (parameter) is in another IntensityAnnotationCollection.
            
            -or-
            item (parameter) is already in this collection.
            </exception>
    </member>
    <member name="M:NationalInstruments.UI.IntensityAnnotationCollection.AddRange(NationalInstruments.UI.IntensityAnnotation[])">
      <summary>
            Adds an array of IntensityAnnotation objects to the end of the collection.
            </summary>
      <param name="item">
            Array of IntensityAnnotation objects to add to the collection.
            </param>
      <exception cref="T:System.ArgumentNullException">item (parameter) is null.
            
            -or-
            
            An element in item (parameter) is null.
            </exception>
      <exception cref="T:System.NotSupportedException">
            		An element in item (parameter) has been disposed.
            
            -or-
            
            		An element in item (parameter) is in another IntensityAnnotationCollection.
            
            -or-
            
            		An element in item (parameter) is already in this collection.
            </exception>
    </member>
    <member name="M:NationalInstruments.UI.IntensityAnnotationCollection.AddRange(NationalInstruments.UI.IntensityAnnotationCollection)">
      <summary>
            Adds a collection of IntensityAnnotation objects to the end of the collection.
            </summary>
      <param name="item">
            Collection of IntensityAnnotation objects to add to the collection.
            </param>
      <exception cref="T:System.ArgumentNullException">item (parameter) is null.
            
            -or- 
            
            An element in item (parameter) is null.
            </exception>
      <exception cref="T:System.NotSupportedException">
            		An element in item (parameter) has been disposed.
            
            -or-
            
            		An element in item (parameter) is in another IntensityAnnotationCollection.
            
            -or-
            
            		An element in item (parameter) is already in this collection.
            </exception>
    </member>
    <member name="M:NationalInstruments.UI.IntensityAnnotationCollection.Clear">
      <summary>
            Removes all items from the collection.
            </summary>
    </member>
    <member name="M:NationalInstruments.UI.IntensityAnnotationCollection.Contains(NationalInstruments.UI.IntensityAnnotation)">
      <summary>
            Determines if the specified element is in the collection.
            </summary>
      <param name="item">Item to locate in the collection.</param>
      <returns>true if the collection contains item (parameter).
            </returns>
    </member>
    <member name="M:NationalInstruments.UI.IntensityAnnotationCollection.CopyTo(NationalInstruments.UI.IntensityAnnotation[],System.Int32)">
      <summary>
            Copies the collection to an array or a portion of an array.
            </summary>
      <param name="array">
            Destination array for the collection.
            </param>
      <param name="index">
            The index in the target array at which you want to begin copying the collection to.
            </param>
      <exception cref="T:System.ArgumentNullException">array (parameter) is null. 
            </exception>
      <exception cref="T:System.ArgumentException">array (parameter) is multidimensional.
            
            -or-
            index (parameter) is greater than or equal to the length of array (parameter).
            
            -or-
            
            The number of elements in the collection is greater than the available space between
            index (parameter) and the end of array (parameter).
            </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">index (parameter) is less than the lower bound of array (parameter).
            </exception>
    </member>
    <member name="M:NationalInstruments.UI.IntensityAnnotationCollection.IndexOf(NationalInstruments.UI.IntensityAnnotation)">
      <summary>
            Returns the zero-based index of the first occurrence of an item in the collection.
            </summary>
      <param name="item">
            Item to search for.
            </param>
      <returns>
            Index of the item. If the item is not found, returns -1.
            </returns>
    </member>
    <member name="M:NationalInstruments.UI.IntensityAnnotationCollection.Insert(System.Int32,NationalInstruments.UI.IntensityAnnotation)">
      <summary>
            Inserts an item into the collection at the specified index.
            </summary>
      <param name="index">
            Index to insert the item at.
            </param>
      <param name="item">
            Item to insert into the collection.
            </param>
      <exception cref="T:System.ArgumentNullException">item (parameter) is null.
            </exception>
      <exception cref="T:System.NotSupportedException">item (parameter) has been disposed.
            
            -or-
            item (parameter) is in another IntensityAnnotationCollection.
            
            -or-
            item (parameter) is already in this collection.
            </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">index (parameter) is less than zero.
            
            -or-
            

index (parameter) is greater than Count.
            


            -or-
            index (parameter) is greater than Count.
            </exception>
    </member>
    <member name="M:NationalInstruments.UI.IntensityAnnotationCollection.GetEnumerator">
      <summary>
            Returns an enumerator that you can use to iterate through the collection.
            </summary>
      <returns>
            The enumerator for the collection.
            </returns>
    </member>
    <member name="M:NationalInstruments.UI.IntensityAnnotationCollection.Remove(NationalInstruments.UI.IntensityAnnotation)">
      <summary>
            Removes the first occurrence of the specified item.
            </summary>
      <param name="item">
            Item to remove from the collection.
            </param>
    </member>
    <member name="M:NationalInstruments.UI.IntensityAnnotationCollection.RemoveAt(System.Int32)">
      <summary>
            Removes the item at the specified index.
            </summary>
      <param name="index">
            The zero-based index of the item to remove.
            </param>
      <exception cref="T:System.ArgumentOutOfRangeException">index (parameter) is less than zero.
            
            -or-
            

index (parameter) is greater than or equal to Count.
            


            -or-
            index (parameter) is greater than or equal to Count.
            </exception>
    </member>
    <member name="P:NationalInstruments.UI.IntensityAnnotationCollection.Item(System.Int32)">
      <summary>
            Gets or sets IntensityAnnotation at the specified index. 
            </summary>
      <param name="index">
            The zero-based index of the entry to locate in the collection.
            </param>
      <exception cref="T:System.ArgumentNullException">
            	The value is null.
            </exception>
      <exception cref="T:System.NotSupportedException">
            		The value has been disposed.
            
            -or-
            
            		The value is in another IntensityAnnotationCollection.
            
            -or-
            
            		The value is already in this collection.
            </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">index (parameter) is less than zero.
            
            -or-
            

index (parameter) is greater than Count.
            


            -or-
            index (parameter) is greater than Count.
            </exception>
    </member>
    <member name="P:NationalInstruments.UI.IntensityAnnotationCollection.Count">
      <summary>
            Gets the number of elements in the IntensityAnnotationCollection.
            </summary>
    </member>
    <member name="P:NationalInstruments.UI.IntensityAnnotationCollection.IsSynchronized">
      <summary>
            Gets a value indicating whether access to the collection is synchronized
            (thread-safe).
            </summary>
    </member>
    <member name="P:NationalInstruments.UI.IntensityAnnotationCollection.IsFixedSize">
      <summary>
            Gets a value indicating whether the collection has a fixed size.
            </summary>
    </member>
    <member name="P:NationalInstruments.UI.IntensityAnnotationCollection.IsReadOnly">
      <summary>
            Gets a value indicating whether the collection is read-only.
            </summary>
    </member>
    <member name="P:NationalInstruments.UI.IntensityAnnotationCollection.SyncRoot">
      <summary>
            Gets an object that can be used to synchronize access to the collection.
            </summary>
    </member>
    <member name="T:NationalInstruments.UI.AfterDrawIntensityRangeAnnotationEventArgs">
      <summary>
            Provides data for events that occur after the range annotation draws.
            </summary>
    </member>
    <member name="M:NationalInstruments.UI.AfterDrawIntensityRangeAnnotationEventArgs.#ctor(System.Drawing.Graphics,System.Drawing.Rectangle,NationalInstruments.UI.IntensityRangeAnnotation,NationalInstruments.UI.IntensityRangeAnnotationPart,System.Drawing.PointF,System.Drawing.PointF,System.Drawing.PointF,System.Drawing.Size,System.Single)">
      <summary>
            Initializes a new instance of the AfterDrawIntensityRangeAnnotationEventArgs class with the specified graphics, bounds, 
            annotation, annotation part, arrow head point, arrow tail point, caption point, caption size, and caption angle.
            </summary>
      <param name="graphics">
            The Graphics used to draw the item.
            </param>
      <param name="bounds">
            The Rectangle that represents the bounds in which to draw.
            </param>
      <param name="annotation">
            The IntensityRangeAnnotation for which the event is occurring.
            </param>
      <param name="annotationPart">
            The IntensityRangeAnnotationPart of the annotation that was drawn.
            </param>
      <param name="arrowHeadPoint">
            The Point at which the arrow head was drawn.
            </param>
      <param name="arrowTailPoint"> 
            The Point where the arrow tail is located.
            </param>
      <param name="captionPoint">
            The Point at which the caption was drawn.
            </param>
      <param name="captionSize">
            The Size of the Rectangle in which to draw the caption.
            </param>
      <param name="captionAngle">
            The angle at which to draw the caption.
            </param>
      <exception cref="T:System.ArgumentNullException">annotation (parameter) is null.
            	-or-graphics (parameter) is null.
            	</exception>
      <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">annotationPart (parameter) is not one of the IntensityRangeAnnotationPart values.
            	</exception>
    </member>
    <member name="P:NationalInstruments.UI.AfterDrawIntensityRangeAnnotationEventArgs.Annotation">
      <summary>
            Gets the IntensityRangeAnnotation that was drawn.
            </summary>
    </member>
    <member name="P:NationalInstruments.UI.AfterDrawIntensityRangeAnnotationEventArgs.Part">
      <summary>
            Gets the part of the annotation that was drawn.
            </summary>
    </member>
    <member name="P:NationalInstruments.UI.AfterDrawIntensityRangeAnnotationEventArgs.ArrowHeadPoint">
      <summary>
            Gets the point at which the arrow head was drawn.
            </summary>
    </member>
    <member name="P:NationalInstruments.UI.AfterDrawIntensityRangeAnnotationEventArgs.ArrowTailPoint">
      <summary>
            Gets the point at which the arrow tail is located.
            </summary>
    </member>
    <member name="P:NationalInstruments.UI.AfterDrawIntensityRangeAnnotationEventArgs.CaptionPoint">
      <summary>
            Gets the point at which the caption was drawn.
            </summary>
    </member>
    <member name="P:NationalInstruments.UI.AfterDrawIntensityRangeAnnotationEventArgs.CaptionSize">
      <summary>
            Gets the size of the rectangle in which the caption was drawn.
            </summary>
    </member>
    <member name="P:NationalInstruments.UI.AfterDrawIntensityRangeAnnotationEventArgs.CaptionAngle">
      <summary>
            Gets the angle at which the caption was drawn.
            </summary>
    </member>
    <member name="T:NationalInstruments.UI.Border">
      <summary>
            Represents the visual appearance of the border of a user interface control.
            </summary>
    </member>
    <member name="M:NationalInstruments.UI.Border.#ctor">
      <summary>
            Initializes a new instance of the Border class.
            </summary>
    </member>
    <member name="M:NationalInstruments.UI.Border.GetInnerRectangle(System.Drawing.Rectangle)">
      <summary>
            Returns a rectangle that represents the bounds of the control minus the inset of the border.
            </summary>
      <param name="outerRectangle">
            The Rectangle that represents the bounds of the control.
            </param>
      <returns>
            A Rectangle that represents the bounds of the control minus the inset
            of the border.
            </returns>
    </member>
    <member name="M:NationalInstruments.UI.Border.Draw(System.Object,NationalInstruments.UI.BorderDrawArgs)">
      <summary>
            Draws a border with the specified BorderDrawArgs.
            </summary>
      <param name="context">
            The object that specifies the context in which Draw is called.
            </param>
      <param name="args">
            A BorderDrawArgs that contains the graphics surface to draw the border on
            and the bounds in which to draw the border.
            </param>
    </member>
    <member name="P:NationalInstruments.UI.Border.UnderlyingType">
      <summary>
            Gets the underlying type of an EnumObject value.
            </summary>
    </member>
    <member name="P:NationalInstruments.UI.Border.None">
      <summary>
            Gets a value that indicates that there is no border.
            </summary>
    </member>
    <member name="P:NationalInstruments.UI.Border.Solid">
      <summary>
            Gets a border with a solid line style.
            </summary>
    </member>
    <member name="P:NationalInstruments.UI.Border.SolidBlack">
      <summary>
            Gets a border with a solid black line style.
            </summary>
    </member>
    <member name="P:NationalInstruments.UI.Border.Dotted">
      <summary>
            Gets a border with a dotted line style.
            </summary>
    </member>
    <member name="P:NationalInstruments.UI.Border.Dashed">
      <summary>
            Gets a border with a dashed line style.
            </summary>
    </member>
    <member name="P:NationalInstruments.UI.Border.RaisedLite">
      <summary>
            Gets a border with a semi-raised line style.
            </summary>
    </member>
    <member name="P:NationalInstruments.UI.Border.SunkenLite">
      <summary>
            Gets a border with a semi-sunken line style.
            </summary>
    </member>
    <member name="P:NationalInstruments.UI.Border.Raised">
      <summary>
            Gets a border with a raised line style.
            </summary>
    </member>
    <member name="P:NationalInstruments.UI.Border.Sunken">
      <summary>
            Gets a border with a sunken line style.
            </summary>
    </member>
    <member name="P:NationalInstruments.UI.Border.Etched">
      <summary>
            Gets a border with an etched line style.
            </summary>
    </member>
    <member name="P:NationalInstruments.UI.Border.ThickFrame3D">
      <summary>
            Gets a border with a thick 3D frame style.
            </summary>
    </member>
    <member name="P:NationalInstruments.UI.Border.ThinFrame3D">
      <summary>
            Gets a border with a thin 3D frame style.
            </summary>
    </member>
    <member name="T:NationalInstruments.UI.BindableWaveformGraphMethod">
      <summary>
            Specifies the plot method on a waveform graph to use in data binding.
            </summary>
    </member>
    <member name="F:NationalInstruments.UI.BindableWaveformGraphMethod.PlotX">
      <summary>
            The waveform graph calls PlotX.
            </summary>
    </member>
    <member name="F:NationalInstruments.UI.BindableWaveformGraphMethod.PlotXAppend">
      <summary>
            The waveform graph calls PlotXAppend.
            </summary>
    </member>
    <member name="F:NationalInstruments.UI.BindableWaveformGraphMethod.PlotXMultiple">
      <summary>
            The waveform graph calls PlotXMultiple.
            </summary>
    </member>
    <member name="F:NationalInstruments.UI.BindableWaveformGraphMethod.PlotXAppendMultiple">
      <summary>
            The waveform graph calls PlotXAppendMultiple.
            </summary>
    </member>
    <member name="F:NationalInstruments.UI.BindableWaveformGraphMethod.PlotY">
      <summary>
            The waveform graph calls PlotY.
            </summary>
    </member>
    <member name="F:NationalInstruments.UI.BindableWaveformGraphMethod.PlotYAppend">
      <summary>
            The waveform graph calls PlotYAppend.
            </summary>
    </member>
    <member name="F:NationalInstruments.UI.BindableWaveformGraphMethod.PlotYMultiple">
      <summary>
            The waveform graph calls PlotYMultiple.
            </summary>
    </member>
    <member name="F:NationalInstruments.UI.BindableWaveformGraphMethod.PlotYAppendMultiple">
      <summary>
            The waveform graph calls PlotYAppendMultiple.
            </summary>
    </member>
    <member name="F:NationalInstruments.UI.BindableWaveformGraphMethod.PlotWaveform">
      <summary>
            The waveform graph calls PlotWaveform``1.
            </summary>
    </member>
    <member name="F:NationalInstruments.UI.BindableWaveformGraphMethod.PlotWaveformAppend">
      <summary>
            The waveform graph calls PlotWaveformAppend``1.
            </summary>
    </member>
    <member name="F:NationalInstruments.UI.BindableWaveformGraphMethod.PlotWaveforms">
      <summary>
            The waveform graph calls PlotWaveforms``1.
            </summary>
    </member>
    <member name="F:NationalInstruments.UI.BindableWaveformGraphMethod.PlotWaveformsAppend">
      <summary>
            The waveform graph calls PlotWaveformsAppend``1.
            </summary>
    </member>
    <member name="F:NationalInstruments.UI.BindableWaveformGraphMethod.PlotWaveformsMultiple">
      <summary>
            The waveform graph calls PlotWaveformsMultiple``1.
            </summary>
    </member>
    <member name="F:NationalInstruments.UI.BindableWaveformGraphMethod.PlotWaveformsAppendMultiple">
      <summary>
            The waveform graph calls PlotWaveformsAppendMultiple``1.
            </summary>
    </member>
    <member name="F:NationalInstruments.UI.BindableWaveformGraphMethod.PlotComplexWaveform">
      <summary>
            The waveform graph calls PlotComplexWaveform``1.
            </summary>
    </member>
    <member name="F:NationalInstruments.UI.BindableWaveformGraphMethod.PlotComplexWaveformAppend">
      <summary>
            The waveform graph calls PlotComplexWaveformAppend``1.
            </summary>
    </member>
    <member name="F:NationalInstruments.UI.BindableWaveformGraphMethod.PlotComplexWaveforms">
      <summary>
            The waveform graph calls PlotComplexWaveforms``1.
            </summary>
    </member>
    <member name="F:NationalInstruments.UI.BindableWaveformGraphMethod.PlotComplexWaveformsAppend">
      <summary>
            The waveform graph calls PlotComplexWaveformsAppend``1.
            </summary>
    </member>
    <member name="F:NationalInstruments.UI.BindableWaveformGraphMethod.PlotComplexWaveformsMultiple">
      <summary>
            The waveform graph calls PlotComplexWaveformsMultiple``1.
            </summary>
    </member>
    <member name="F:NationalInstruments.UI.BindableWaveformGraphMethod.PlotComplexWaveformsAppendMultiple">
      <summary>
            The waveform graph calls PlotComplexWaveformsAppendMultiple``1.
            </summary>
    </member>
    <member name="T:NationalInstruments.UI.BeforeDrawXYCursorEventHandler">
      <summary>
            Represents the method that handles the events that occur before a cursor draws.
            </summary>
      <param name="sender">
            The source of the event.
            </param>
      <param name="e">
            A BeforeDrawXYCursorEventArgs that contains the event data.
            </param>
    </member>
    <member name="T:NationalInstruments.UI.ArrowStyleDrawArgs">
      <summary>
            Provides data for drawing arrow styles.
            </summary>
    </member>
    <member name="M:NationalInstruments.UI.ArrowStyleDrawArgs.#ctor(System.Drawing.Graphics,System.Drawing.Color,System.Drawing.Size,System.Drawing.PointF,System.Single)">
      <summary>
            Initializes a new instance of the ArrowStyleDrawArgs class
            with the specified color, line width, point, and size.
            </summary>
      <param name="graphics">
            The Graphics used to draw the arrow.
            </param>
      <param name="color">
            The Color of the arrow.
            </param>
      <param name="lineWidth">
            The Width of the arrow line.
            </param>
      <param name="point">
            The Point at which to draw the arrow.
            </param>
      <param name="size">
            The Size of the arrow.
            </param>
    </member>
    <member name="P:NationalInstruments.UI.ArrowStyleDrawArgs.Color">
      <summary>
            Gets the color of the arrow.
            </summary>
    </member>
    <member name="P:NationalInstruments.UI.ArrowStyleDrawArgs.Size">
      <summary>
            Gets the size of the arrow to draw.
            </summary>
    </member>
    <member name="P:NationalInstruments.UI.ArrowStyleDrawArgs.Point">
      <summary>
            Gets the point at which to draw the arrow.
            </summary>
    </member>
    <member name="P:NationalInstruments.UI.ArrowStyleDrawArgs.LineWidth">
      <summary>
            Gets the width of the arrow line.
            </summary>
    </member>
    <member name="T:NationalInstruments.UI.AfterMoveXYCursorEventArgs">
      <summary>
            Provides data for the events that occur after the cursor moves.
            </summary>
    </member>
    <member name="M:NationalInstruments.UI.AfterMoveXYCursorEventArgs.#ctor(NationalInstruments.UI.XYCursor,System.Double,System.Double,NationalInstruments.UI.Action)">
      <summary>
            Initializes a new instance of the AfterMoveXYCursorEventArgs
            class with the specified cursor, the specified x-coordinate and y-coordinate of the
            XYCursor, and the action that caused the event. 
            </summary>
      <param name="cursor">
            The XYCursor for which the event is occurring.
            </param>
      <param name="xPosition">
            The x-coordinate of the XYCursor.
            </param>
      <param name="yPosition">
            The y-coordinate of the XYCursor.
            </param>
      <param name="action">
            The source of the Action that caused the event.
            </param>
      <exception cref="T:System.ArgumentNullException">cursor (parameter) is null.
            </exception>
    </member>
    <member name="M:NationalInstruments.UI.AfterMoveXYCursorEventArgs.ToString">
      <summary>
            Returns a string representation of the object.
            </summary>
      <returns>
            A string representation of the object.
            </returns>
    </member>
    <member name="P:NationalInstruments.UI.AfterMoveXYCursorEventArgs.Cursor">
      <summary>
            Gets the XYCursor that has moved. 
            </summary>
    </member>
    <member name="P:NationalInstruments.UI.AfterMoveXYCursorEventArgs.XPosition">
      <summary>
            Gets the new x-coordinate of the
            XYCursor.
            </summary>
    </member>
    <member name="P:NationalInstruments.UI.AfterMoveXYCursorEventArgs.YPosition">
      <summary>
            Gets the new y-coordinate of the
            XYCursor.
            </summary>
    </member>
    <member name="T:NationalInstruments.UI.AfterDrawComplexRangeAnnotationEventHandler">
      <summary>
            Represents the method that handles the events that occur after a complex range annotation draws.
            </summary>
      <param name="sender">
            The source of the event.
            </param>
      <param name="e">
            An AfterDrawComplexRangeAnnotationEventArgs that contains the event data.
            </param>
    </member>
    <member name="T:NationalInstruments.UI.AfterDrawComplexPointAnnotationEventHandler">
      <summary>
            Represents the method that handles the events that occur after a complex point annotation draws.
            </summary>
      <param name="sender">
            The source of the event.
            </param>
      <param name="e">
            An AfterDrawComplexPointAnnotationEventArgs that contains the event data.
            </param>
    </member>
    <member name="T:NationalInstruments.UI.AfterDragXYAnnotationCaptionEventArgs">
      <summary>
            Provides data for the events that occur after the annotation caption has been dragged.
            </summary>
    </member>
    <member name="M:NationalInstruments.UI.AfterDragXYAnnotationCaptionEventArgs.#ctor(NationalInstruments.UI.XYAnnotation,System.Single,System.Single,NationalInstruments.UI.Action)">
      <summary>
            Initializes a new instance of the AfterDragXYAnnotationCaptionEventArgs
            class with the specified annotation, x offset, y offset, and action that caused the event. 
            </summary>
      <param name="annotation">
            The XYAnnotation for which the event is occurring.
            </param>
      <param name="xOffset">
            The x offset where the caption was dragged to.
            </param>
      <param name="yOffset">
            The y offset where the caption was dragged to.
            </param>
      <param name="action">
            The source of the Action that caused the event.
            </param>
      <exception cref="T:System.ArgumentNullException">annotation (parameter) is null.
            </exception>
    </member>
    <member name="P:NationalInstruments.UI.AfterDragXYAnnotationCaptionEventArgs.Annotation">
      <summary>
            Gets the XYAnnotation whose caption was dragged. 
            </summary>
    </member>
    <member name="P:NationalInstruments.UI.AfterDragXYAnnotationCaptionEventArgs.XOffset">
      <summary>
            The x offset where the caption was dragged to.
            </summary>
    </member>
    <member name="P:NationalInstruments.UI.AfterDragXYAnnotationCaptionEventArgs.YOffset">
      <summary>
            The y offset where the caption was dragged to.
            </summary>
    </member>
    <member name="T:NationalInstruments.UI.AfterDigitalWaveformPlotEventHandler">
      <summary>
            Represents the method that handles the events that occur after interactive or programmatic
            user actions on the digital waveform plot.
            </summary>
      <param name="sender">
            The source of the event.
            </param>
      <param name="e">
            An AfterDigitalWaveformPlotEventArgs that contains the event data.
            </param>
    </member>
    <member name="T:NationalInstruments.UI.YAxis">
      <summary>
            Represents the vertical axis on a graph. 
            </summary>
    </member>
    <member name="M:NationalInstruments.UI.YAxis.#ctor">
      <summary>
            Initializes a new instance of the YAxis class.
            </summary>
    </member>
    <member name="M:NationalInstruments.UI.YAxis.GetSize(NationalInstruments.UI.YAxisPosition)">
      <summary>
            Returns the size of the YAxis at the specified position.
            </summary>
      <param name="position">
            A YAxisPosition that indicates the position of the YAxis
            for which the size is returned.
            </param>
      <returns>
            The Size of the YAxis.
            </returns>
      <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
      <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">position (parameter) is an invalid YAxisPosition value.
            </exception>
      <exception cref="T:System.NotSupportedException">position (parameter) is LeftRight.
            	</exception>
    </member>
    <member name="M:NationalInstruments.UI.YAxis.GetBounds(NationalInstruments.UI.YAxisPosition)">
      <summary>
            Returns the bounds of the YAxis at the specified position.
            </summary>
      <param name="position">
            A YAxisPosition that indicates the position of the YAxis
             for which the bounds are returned.
            </param>
      <returns>
            A Rectangle that represents the bounds of the YAxis.
            </returns>
      <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
      <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">position (parameter) is an invalid YAxisPosition value.
            </exception>
      <exception cref="T:System.NotSupportedException">position (parameter) is LeftRight.
            	</exception>
    </member>
    <member name="M:NationalInstruments.UI.YAxis.GetBounds(System.Drawing.Graphics,System.Drawing.Rectangle)">
      <summary>
            Returns the bounds of the YAxis relative to a reference rectangle.
            </summary>
      <param name="graphics">
            The Graphics object that is used to calculate the bounds of the axis.
            </param>
      <param name="referenceRectangle">
            A Rectangle that provides a reference for the bounds of the YAxis.
            </param>
      <returns>
            A Rectangle that represents the bounds of the YAxis.
            </returns>
      <exception cref="T:System.ArgumentNullException">graphics (parameter) is null.
            	</exception>
      <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
    </member>
    <member name="M:NationalInstruments.UI.YAxis.GetBounds(System.Drawing.Graphics,System.Drawing.Rectangle,NationalInstruments.UI.YAxisPosition)">
      <summary>
            Returns the bounds of the YAxis relative to a reference rectangle at the specified position.
            </summary>
      <param name="graphics">
            The Graphics object that is used to calculate the bounds of the axis.
            </param>
      <param name="referenceRectangle">
            A Rectangle that provides a reference for the bounds of the YAxis.
            </param>
      <param name="position">
            A YAxisPosition that indicates the position of the YAxis
             for which the bounds are returned.
            </param>
      <returns>
            A Rectangle that represents the bounds of the YAxis.
            </returns>
      <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
      <exception cref="T:System.ArgumentNullException">graphics (parameter) is null</exception>
      <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">position (parameter) is an invalid YAxisPosition value.
            </exception>
      <exception cref="T:System.NotSupportedException">position (parameter) is LeftRight.
            	</exception>
    </member>
    <member name="M:NationalInstruments.UI.YAxis.Draw(NationalInstruments.UI.ComponentDrawArgs,NationalInstruments.UI.YAxisPosition)">
      <summary>
            Draws the YAxis with the specified axis position.
            </summary>
      <param name="args">
            A ComponentDrawArgs that contains the 
            drawing data.
            </param>
      <param name="position">
            The position of the axis.
            </param>
      <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
      <exception cref="T:System.ArgumentNullException">args (parameter) is null.
            </exception>
      <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">position (parameter) is an invalid YAxisPosition value.
            </exception>
      <exception cref="T:System.NotSupportedException">position (parameter) is LeftRight.
            	</exception>
    </member>
    <member name="M:NationalInstruments.UI.YAxis.Clone">
      <summary>
            Creates a new object that is a deep copy of this instance.
            </summary>
      <returns>
            A new object that is a deep copy of this instance.
            </returns>
    </member>
    <member name="M:NationalInstruments.UI.YAxis.GetService(System.Type)">
      <summary>
            Gets the service object of the specified type.
            </summary>
      <param name="service">
            A service provided by the component.
            </param>
      <returns>
            An Object that represents the service provided by the component or 
            null if the component does not provide the 
            specified service.
            </returns>
    </member>
    <member name="P:NationalInstruments.UI.YAxis.CaptionPosition">
      <summary>
            Gets or sets the position of the caption that is displayed for the axis.
            </summary>
      <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
      <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
            The specified value is not a YAxisPosition value.
            </exception>
    </member>
    <member name="P:NationalInstruments.UI.YAxis.LeftCaptionOrientation">
      <summary>
            Gets or sets the orientation of the caption displayed by the y-axis to the left of the graph.
            </summary>
      <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
      <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
            The specified value is not a VerticalCaptionOrientation value.
            </exception>
    </member>
    <member name="P:NationalInstruments.UI.YAxis.RightCaptionOrientation">
      <summary>
            Gets or sets the orientation of the caption displayed by the y-axis to the right of the graph.
            </summary>
      <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
      <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
            The specified value is not a VerticalCaptionOrientation value.
            </exception>
    </member>
    <member name="P:NationalInstruments.UI.YAxis.Position">
      <summary>
            Gets or sets the position of the axis.
            </summary>
      <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
      <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
            The specified value is not a YAxisPosition value.
            </exception>
    </member>
    <member name="P:NationalInstruments.UI.YAxis.MinimumWidth">
      <summary>
            Gets or sets the minimum width required by YAxis,
            allowing you to customize the YAxis width. 
            </summary>
      <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
            The specified value is less than zero.
            </exception>
    </member>
    <member name="T:NationalInstruments.UI.XYPlotDataChangedEventHandler">
      <summary>
            Represents the method that handles the PlotDataChanged
            event of an IXYGraph.
            </summary>
      <param name="sender">
            The source of the event.
            </param>
      <param name="e">
            A XYPlotDataChangedEventArgs that contains the event
            data.
            </param>
    </member>
    <member name="T:NationalInstruments.UI.WebMouseCursors">
      <summary>
            Provides a collection of strings defined by cascading style sheets (CSS) that you can use to get basic cursors for use in a Web Forms application. 
            Measurement Studio specific cursors are also defined in this collection.
            </summary>
    </member>
    <member name="P:NationalInstruments.UI.WebMouseCursors.Default">
      <summary>
            Gets the string for the default cursor, which is typically an arrow cursor. 
            </summary>
    </member>
    <member name="P:NationalInstruments.UI.WebMouseCursors.Hand">
      <summary>
            Gets the string for the hand cursor that you typically use when hovering over a Web link.
            </summary>
    </member>
    <member name="P:NationalInstruments.UI.WebMouseCursors.Crosshair">
      <summary>
            Gets the string for the crosshair cursor.
            </summary>
    </member>
    <member name="P:NationalInstruments.UI.WebMouseCursors.Text">
      <summary>
            Gets the string for the text cursor, which you use to indicate where the text cursor appears when the mouse is clicked. 
            </summary>
    </member>
    <member name="P:NationalInstruments.UI.WebMouseCursors.Move">
      <summary>
            Gets the string for the move cursor, which consists of four joined arrows that point north, south, east, and west.
            </summary>
    </member>
    <member name="P:NationalInstruments.UI.WebMouseCursors.Wait">
      <summary>
            Gets the string for the wait cursor, which is typically an hourglass shape. 
            </summary>
    </member>
    <member name="P:NationalInstruments.UI.WebMouseCursors.Help">
      <summary>
            Gets the string for the help cursor, which is a combination of an arrow and a question mark. 
            </summary>
    </member>
    <member name="P:NationalInstruments.UI.WebMouseCursors.SizeNS">
      <summary>
            Gets the string for the sizeNS cursor that is the two-headed vertical (north/south) sizing cursor.
            </summary>
    </member>
    <member name="P:NationalInstruments.UI.WebMouseCursors.SizeWE">
      <summary>
            Gets the string for the sizeWE cursor that is the two-headed horizontal (west/east) sizing cursor. 
            </summary>
    </member>
    <member name="P:NationalInstruments.UI.WebMouseCursors.SizeNWSE">
      <summary>
            Gets the string for the sizeNWSE cursor that is the two-headed diagonal (northwest/southeast) sizing cursor. 
            </summary>
    </member>
    <member name="P:NationalInstruments.UI.WebMouseCursors.SizeNESW">
      <summary>
            Gets the string for the sizeNESW cursor that is the two-headed diagonal (northeast/southwest) sizing cursor. 
            </summary>
    </member>
    <member name="P:NationalInstruments.UI.WebMouseCursors.Progress">
      <summary>
            Gets the string for the cursor that you use to indicate that an operation is in progress.
            </summary>
    </member>
    <member name="P:NationalInstruments.UI.WebMouseCursors.AllScroll">
      <summary>
            Gets the string for the all-scroll cursor that you typically use when an area is scrollable in all four directions.
            </summary>
    </member>
    <member name="P:NationalInstruments.UI.WebMouseCursors.No">
      <summary>
            Gets the string for the cursor that indicates that a particular region is invalid for the current operation.
            </summary>
    </member>
    <member name="P:NationalInstruments.UI.WebMouseCursors.ZoomX">
      <summary>
            Gets the string for the cursor you use to indicate that the end user can zoom within the area in the horizontal direction.
            </summary>
    </member>
    <member name="P:NationalInstruments.UI.WebMouseCursors.ZoomY">
      <summary>
            Gets the string for the cursor you use to indicate that the end user can zoom within the area in the vertical direction.
            </summary>
    </member>
    <member name="P:NationalInstruments.UI.WebMouseCursors.ZoomXY">
      <summary>
            Gets the string for the cursor you use to indicate that the end user can zoom within the area in horizontal and vertical directions.
            </summary>
    </member>
    <member name="P:NationalInstruments.UI.WebMouseCursors.ZoomPoint">
      <summary>
            Gets the string for the cursor that you use to indicate that the end user can zoom around a point within the area.
            </summary>
    </member>
    <member name="P:NationalInstruments.UI.WebMouseCursors.ZoomPointZoomX">
      <summary>
            Gets the string for the cursor you use to indicate that the end user can zoom around a point within the area and zoom in the horizontal direction.
            </summary>
    </member>
    <member name="P:NationalInstruments.UI.WebMouseCursors.ZoomPointZoomY">
      <summary>
            Gets the string for the cursor you use to indicate that the end user can zoom around a point within the area and zoom in the vertical direction.
            </summary>
    </member>
    <member name="P:NationalInstruments.UI.WebMouseCursors.ZoomPointZoomXY">
      <summary>
            Gets the string for the cursor you use to indicate that the end user can zoom around a point within the area and zoom in horizontal and vertical directions.
            </summary>
    </member>
    <member name="T:NationalInstruments.UI.SwitchStyleDrawArgs">
      <summary>
            Provides the data to draw a switch style.
            </summary>
    </member>
    <member name="T:NationalInstruments.UI.BooleanStyleDrawArgs">
      <summary>
            Provides the data to draw a Boolean style.
            </summary>
    </member>
    <member name="M:NationalInstruments.UI.BooleanStyleDrawArgs.#ctor(System.Drawing.Graphics,System.Drawing.Rectangle,System.Drawing.Color,System.Boolean)">
      <summary>
            Initializes a new instance of the BooleanStyleDrawArgs class with the specified
            graphics, bounds, color, and value.
            </summary>
      <param name="graphics">
            The Graphics with which to draw.
            </param>
      <param name="bounds">
            The Rectangle in which the style is drawn.
            </param>
      <param name="color">
            The Color of the style.
            </param>
      <param name="value">
            The Boolean value represented by the style.
            </param>
      <exception cref="T:System.ArgumentNullException">graphics (parameter) is null.
            </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
            The Width of bounds (parameter) is less than zero.
            
            -or-
            
            The Height of bounds (parameter) is less than zero.
            </exception>
    </member>
    <member name="M:NationalInstruments.UI.BooleanStyleDrawArgs.ToString">
      <summary>
            Returns a string representation of the object.
            </summary>
      <returns>
            A string representation of the object.
            </returns>
    </member>
    <member name="P:NationalInstruments.UI.BooleanStyleDrawArgs.Color">
      <summary>
            Gets the color to use to draw the style.
            </summary>
    </member>
    <member name="P:NationalInstruments.UI.BooleanStyleDrawArgs.Value">
      <summary>
            Gets the Boolean value that is represented by the style.
            </summary>
    </member>
    <member name="P:NationalInstruments.UI.BooleanStyleDrawArgs.State">
      <summary>
            This member is obsolete. Use the Value
            property to achieve the same functionality.
            </summary>
    </member>
    <member name="P:NationalInstruments.UI.BooleanStyleDrawArgs.Bounds">
      <summary>
            Gets the rectangle in which the style is drawn.
            </summary>
    </member>
    <member name="M:NationalInstruments.UI.SwitchStyleDrawArgs.#ctor(System.Drawing.Graphics,System.Drawing.Rectangle,System.Drawing.Color,System.Boolean)">
      <summary>
            Initializes a new instance of the SwitchStyleDrawArgs class with the specified
            graphics, bounds, color, and value.
            </summary>
      <param name="graphics">
            The Graphics with which to draw.
            </param>
      <param name="bounds">
            The Rectangle in which the switch style is drawn. This value is the bounds of the 
            control, excluding the caption, and a 4-pixel thick padding on the sides.
            </param>
      <param name="color">
            The Color of the switch style.
            </param>
      <param name="value">
            The Boolean value represented by the switch style.
            </param>
      <exception cref="T:System.ArgumentNullException">graphics (parameter) is null.
            </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
            The Width of bounds (parameter) is less than zero.
            
            -or-
            
            The Height of bounds (parameter) is less than zero.
            </exception>
    </member>
    <member name="T:NationalInstruments.UI.ScaleRangeFillEventHandler">
      <summary>
            Represents the method that handles the ValueEnterRange
            and ValueLeaveRange events.
            </summary>
      <param name="sender">
            The source of the event.
            </param>
      <param name="e">
            A ScaleRangeFillEventArgs that contains
            the event data.
            </param>
    </member>
    <member name="M:NationalInstruments.Restricted.AmbientValueRequestedEventArgs.ToString">
      <summary>
            Returns a string representation of the object.        
            </summary>
      <returns>
            A string representation of the object.
            </returns>
    </member>
    <member name="T:NationalInstruments.UI.RefreshItemCollection">
      <summary>
            Represents a strongly typed collection of RefreshItem objects.
            </summary>
    </member>
    <member name="M:NationalInstruments.UI.RefreshItemCollection.#ctor">
      <summary>
            Initializes a new instance of the RefreshItemCollection class.
            </summary>
    </member>
    <member name="M:NationalInstruments.UI.RefreshItemCollection.ToString">
      <summary>
            Returns a string representation of the object.
            </summary>
      <returns>
            A string representation of the object.
            </returns>
    </member>
    <member name="M:NationalInstruments.UI.RefreshItemCollection.Add(NationalInstruments.UI.RefreshItem)">
      <summary>
            Adds an item to end of the collection.
            </summary>
      <param name="item">
            Item to add to the collection.
            </param>
      <returns>
            The array index of the added item.
            </returns>
      <exception cref="T:System.ArgumentNullException">item (parameter) is null.
            </exception>
    </member>
    <member name="M:NationalInstruments.UI.RefreshItemCollection.Add(NationalInstruments.UI.IRefreshCallbackEventHandler)">
      <summary>
            Adds an item to end of the collection.
            </summary>
      <param name="item">
            Item to add to the collection.
            </param>
      <returns>
            The array index of the added item.
            </returns>
      <exception cref="T:System.ArgumentNullException">item (parameter) is null.
            </exception>
    </member>
    <member name="M:NationalInstruments.UI.RefreshItemCollection.AddRange(NationalInstruments.UI.RefreshItem[])">
      <summary>
            Adds an array of RefreshItem objects to the end of the collection.
            </summary>
      <param name="item">
            Array of RefreshItem objects to add to the collection.
            </param>
      <exception cref="T:System.ArgumentNullException">item (parameter) is null.
            
            -or-
            
            An element in item (parameter) is null.
            </exception>
    </member>
    <member name="M:NationalInstruments.UI.RefreshItemCollection.AddRange(NationalInstruments.UI.RefreshItemCollection)">
      <summary>
            Adds a collection of RefreshItem objects to the end of the collection.
            </summary>
      <param name="item">
            Collection of RefreshItem objects to add to the collection.
            </param>
      <exception cref="T:System.ArgumentNullException">item (parameter) is null.
            
            -or-
            
            An element in item (parameter) is null.
            </exception>
    </member>
    <member name="M:NationalInstruments.UI.RefreshItemCollection.Clear">
      <summary>
            Removes all items from the collection.
            </summary>
    </member>
    <member name="M:NationalInstruments.UI.RefreshItemCollection.Contains(NationalInstruments.UI.RefreshItem)">
      <summary>
            Determines if the specified element is in the collection.
            </summary>
      <param name="item">Item to locate in the collection.</param>
      <returns>true if the collection contains item (parameter).
            </returns>
    </member>
    <member name="M:NationalInstruments.UI.RefreshItemCollection.CopyTo(NationalInstruments.UI.RefreshItem[],System.Int32)">
      <summary>
            Copies the collection to an array or a portion of an array.
            </summary>
      <param name="array">
            Destination array for the collection.
            </param>
      <param name="index">
            The index in the target array at which you want to begin copying the collection to.
            </param>
      <exception cref="T:System.ArgumentNullException">array (parameter) is null.
            </exception>
      <exception cref="T:System.ArgumentException">array (parameter) is multidimensional.
            
            - or -
            index (parameter) is equal to or greater than the length of array (parameter).
            
            -or-
            
            The number of elements in the collection is greater than the available space between
            index (parameter) and the end of array (parameter).
            </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">index (parameter) is less than the lower bound of array (parameter).
            </exception>
    </member>
    <member name="M:NationalInstruments.UI.RefreshItemCollection.IndexOf(NationalInstruments.UI.RefreshItem)">
      <summary>
            Returns the zero-based index of the first occurrence of an item in the collection.
            </summary>
      <param name="item">
            Item to search for.
            </param>
      <returns>
            Index of the item. If the item is not found, returns -1.
            </returns>
    </member>
    <member name="M:NationalInstruments.UI.RefreshItemCollection.Insert(System.Int32,NationalInstruments.UI.RefreshItem)">
      <summary>
            Inserts an item into the collection at the specified index.
            </summary>
      <param name="index">
            Index to insert the item at.
            </param>
      <param name="item">
            Item to insert into the collection.
            </param>
      <exception cref="T:System.ArgumentNullException">item (parameter) is null.
            </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">index (parameter) is less than zero.
            
            -or-
            

index (parameter) is greater than Count.
            


            -or-
            index (parameter) is greater than Count.
            </exception>
    </member>
    <member name="M:NationalInstruments.UI.RefreshItemCollection.GetEnumerator">
      <summary>
            Returns an enumerator that you can use to iterate through the collection.
            </summary>
      <returns>
            The enumerator for the collection.
            </returns>
    </member>
    <member name="M:NationalInstruments.UI.RefreshItemCollection.Remove(NationalInstruments.UI.RefreshItem)">
      <summary>
            Removes the first occurrence of the specified item.
            </summary>
      <param name="item">
            Item to remove from the collection.
            </param>
    </member>
    <member name="M:NationalInstruments.UI.RefreshItemCollection.Remove(NationalInstruments.UI.IRefreshCallbackEventHandler)">
      <summary>
            Removes the first occurrence of the specified item.
            </summary>
      <param name="item">
            Item to remove from the collection.
            </param>
    </member>
    <member name="M:NationalInstruments.UI.RefreshItemCollection.RemoveAt(System.Int32)">
      <summary>
            Removes the item at the specified index.
            </summary>
      <param name="index">
            The zero-based index of the item to remove.
            </param>
      <exception cref="T:System.ArgumentOutOfRangeException">index (parameter) is less than zero.
            
            -or-
            

index (parameter) is greater than or equal to Count.
            


            -or-
            index (parameter) is greater than or equal to Count.
            </exception>
    </member>
    <member name="P:NationalInstruments.UI.RefreshItemCollection.Item(System.Int32)">
      <summary>
            Gets or sets the RefreshItem at the specified index. 
            </summary>
      <param name="index">
            The zero-based index of the entry to locate in the collection.
            </param>
      <exception cref="T:System.ArgumentNullException">
            	The value is null.
            </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">index (parameter) is less than zero.
            
            -or-
            

index (parameter) is greater than Count.
            


            -or-
            index (parameter) is greater than Count.
            </exception>
    </member>
    <member name="P:NationalInstruments.UI.RefreshItemCollection.Count">
      <summary>
            Gets the number of elements in the RefreshItemCollection.
            </summary>
    </member>
    <member name="T:NationalInstruments.UI.RefreshEventHandler">
      <summary>
            Represents the method that handles refresh management control refresh events.
            </summary>
      <param name="sender">
            The source of the event.
            </param>
      <param name="e">
            A RefreshEventArgs that contains the event data.
            </param>
    </member>
    <member name="T:NationalInstruments.UI.NumericPointerWebInteractionMode">
      <summary>
            Defines the set of user interactions that are possible within a numeric pointer
            server control.
            </summary>
    </member>
    <member name="F:NationalInstruments.UI.NumericPointerWebInteractionMode.Indicator">
      <summary>
            No interaction.
            </summary>
    </member>
    <member name="F:NationalInstruments.UI.NumericPointerWebInteractionMode.SnapPointer">
      <summary>
            The pointer can be snapped to a value.
            </summary>
    </member>
    <member name="T:NationalInstruments.UI.NumericFormatModeArgs">
      <summary>
            Provides data for formatting numeric values with the NumericFormatMode class.
            </summary>
    </member>
    <member name="M:NationalInstruments.UI.NumericFormatModeArgs.#ctor(System.Double,NationalInstruments.UI.NumericFormatState)">
      <summary>
            Initializes a new instance of the NumericFormatModeArgs class.
            </summary>
      <param name="value">
            The value to format.
            </param>
      <param name="state">
            A NumericFormatState representing the state of the value to format.
            </param>
      <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">state (parameter) is not one of the NumericFormatState values.
            </exception>
    </member>
    <member name="P:NationalInstruments.UI.NumericFormatModeArgs.Value">
      <summary>
            Gets the value to format.
            </summary>
    </member>
    <member name="P:NationalInstruments.UI.NumericFormatModeArgs.State">
      <summary>
            Gets the state of a formatted value.
            </summary>
    </member>
    <member name="T:NationalInstruments.UI.NumericEditValidationMode">
      <summary>
            Specifies when the text entered into the numeric edit control is validated. 
            </summary>
    </member>
    <member name="F:NationalInstruments.UI.NumericEditValidationMode.WhenCommitted">
      <summary>
            The text entered into the numeric edit control is validated when you press the Enter 
            key or the control loses focus.
            </summary>
    </member>
    <member name="F:NationalInstruments.UI.NumericEditValidationMode.WhenChanged">
      <summary>
            The text entered into the numeric edit control is validated with each change to the text.
            </summary>
    </member>
    <member name="T:NationalInstruments.UI.LineStep">
      <summary>
            Specifies the style for connecting two consecutive points.
            </summary>
    </member>
    <member name="F:NationalInstruments.UI.LineStep.None">
      <summary>
            Points are connected with a straight line.
            </summary>
    </member>
    <member name="F:NationalInstruments.UI.LineStep.XYStep">
      <summary>
            Points are connected in an XY step.
            If the current point is represented as (x0, y0) and the next point is represented as
            (x1, y1), then a line from (x0, y0) to (x1, y0) and (x1, y0) to (x1, y1) represents
            an XY step.
            </summary>
    </member>
    <member name="F:NationalInstruments.UI.LineStep.YXStep">
      <summary>
            Points are connected in a YX step.
            If the current point is represented as (x0, y0) and the next point is represented as
            (x1, y1), then a line from (x0, y0) to (x0, y1) and (x0, y1) to (x1, y1) represents
            a YX step.
            </summary>
    </member>
    <member name="F:NationalInstruments.UI.LineStep.CenteredXYStep">
      <summary>
            Points are connected in an XY step with the x-coordinate centered on the line.
            </summary>
    </member>
    <member name="F:NationalInstruments.UI.LineStep.CenteredYXStep">
      <summary>
            Points are connected in a YX step with the y-coordinate centered on the line.
            </summary>
    </member>
    <member name="T:NationalInstruments.UI.IntensityXAxisCollection">
      <summary>
            Represents a strongly typed collection of IntensityXAxis objects.
            </summary>
    </member>
    <member name="M:NationalInstruments.UI.IntensityXAxisCollection.#ctor">
      <summary>
            Initializes a new instance of the IntensityXAxisCollection class.
            </summary>
    </member>
    <member name="M:NationalInstruments.UI.IntensityXAxisCollection.#ctor(NationalInstruments.UI.IntensityXAxis[])">
      <summary>
            Initializes a new instance of the IntensityXAxisCollection class
            from an array of IntensityXAxis objects.
            </summary>
      <param name="item">
            Array of IntensityXAxis objects to copy.
            </param>
      <exception cref="T:System.ArgumentNullException">item (parameter) is null.
            
            -or-
            
            An element in item (parameter) is null.
            </exception>
      <exception cref="T:System.NotSupportedException">
            		An element in item (parameter) has been disposed.
            
            -or-
            
            		An element in item (parameter) is in another IntensityXAxisCollection.
            
            -or-
            
            		An element in item (parameter) is already in this collection.
            </exception>
    </member>
    <member name="M:NationalInstruments.UI.IntensityXAxisCollection.#ctor(NationalInstruments.UI.IntensityXAxisCollection)">
      <summary>
            Initializes a new instance of IntensityXAxisCollection
            from an existing collection.
            </summary>
      <param name="item">
            The IntensityXAxisCollection to copy.
            </param>
      <exception cref="T:System.ArgumentNullException">item (parameter) is null.
            
            -or-
            
            An element in item (parameter) is null.
            </exception>
      <exception cref="T:System.NotSupportedException">
            		An element in item (parameter) has been disposed.
            
            -or-
            
            		An element in item (parameter) is in another IntensityXAxisCollection.
            
            -or-
            
            		An element in item (parameter) is already in this collection.
            </exception>
    </member>
    <member name="M:NationalInstruments.UI.IntensityXAxisCollection.ToString">
      <summary>
            Returns a string representation of the object.
            </summary>
      <returns>
            A string representation of the object.
            </returns>
    </member>
    <member name="M:NationalInstruments.UI.IntensityXAxisCollection.Add(NationalInstruments.UI.IntensityXAxis)">
      <summary>
            Adds an item to the end of the collection.
            </summary>
      <param name="item">
            Item to add to the collection.
            </param>
      <returns>
            The array index of the added item.
            </returns>
      <exception cref="T:System.ArgumentNullException">item (parameter) is null.
            </exception>
      <exception cref="T:System.NotSupportedException">item (parameter) has been disposed.
            
            -or-
            item (parameter) is in another IntensityXAxisCollection.
            
            -or-
            item (parameter) is already in this collection.
            </exception>
    </member>
    <member name="M:NationalInstruments.UI.IntensityXAxisCollection.AddRange(NationalInstruments.UI.IntensityXAxis[])">
      <summary>
            Adds an array of IntensityXAxis objects to the end of the collection.
            </summary>
      <param name="item">
            Array of IntensityXAxis objects to add to the collection.
            </param>
      <exception cref="T:System.ArgumentNullException">item (parameter) is null.
            
            -or-
            
            An element in item (parameter) is null.
            </exception>
      <exception cref="T:System.NotSupportedException">
            		An element in item (parameter) has been disposed.
            
            -or-
            
            		An element in item (parameter) is in another IntensityXAxisCollection.
            
            -or-
            
            		An element in item (parameter) is already in this collection.
            </exception>
    </member>
    <member name="M:NationalInstruments.UI.IntensityXAxisCollection.AddRange(NationalInstruments.UI.IntensityXAxisCollection)">
      <summary>
            Adds a collection of IntensityXAxis objects to the end of the collection.
            </summary>
      <param name="item">
            Collection of IntensityXAxis objects to add to the collection.
            </param>
      <exception cref="T:System.ArgumentNullException">item (parameter) is null.
            
            -or-
            
            An element in item (parameter) is null.
            </exception>
      <exception cref="T:System.NotSupportedException">
            		An element in item (parameter) has been disposed.
            
            -or-
            
            		An element in item (parameter) is in another IntensityXAxisCollection.
            
            -or-
            
            		An element in item (parameter) is already in this collection.
            </exception>
    </member>
    <member name="M:NationalInstruments.UI.IntensityXAxisCollection.Clear">
      <summary>
            Removes all items from the collection.
            </summary>
    </member>
    <member name="M:NationalInstruments.UI.IntensityXAxisCollection.Contains(NationalInstruments.UI.IntensityXAxis)">
      <summary>
            Determines if the specified element is in the collection.
            </summary>
      <param name="item">Item to locate in the collection.</param>
      <returns>true if the collection contains item (parameter).
            </returns>
    </member>
    <member name="M:NationalInstruments.UI.IntensityXAxisCollection.CopyTo(NationalInstruments.UI.IntensityXAxis[],System.Int32)">
      <summary>
            Copies the collection to an array or a portion of an array.
            </summary>
      <param name="array">
            Destination array for the collection.
            </param>
      <param name="index">
            The index in the target array at which you want to begin copying the collection to.
            </param>
      <exception cref="T:System.ArgumentNullException">array (parameter) is null.
            </exception>
      <exception cref="T:System.ArgumentException">array (parameter) is multidimensional.
            
            -or-
            index (parameter) is equal to or greater than the length of array (parameter).
            
            -or-
            
            The number of elements in the collection is greater than the available space between
            index (parameter) and the end of array (parameter).
            </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">index (parameter) is less than the lower bound of array (parameter).
            </exception>
    </member>
    <member name="M:NationalInstruments.UI.IntensityXAxisCollection.IndexOf(NationalInstruments.UI.IntensityXAxis)">
      <summary>
            Returns the zero-based index of the first occurrence of an item in the collection.
            </summary>
      <param name="item">
            Item to search for.
            </param>
      <returns>
            Index of the item. If the item is not found, returns -1.
            </returns>
    </member>
    <member name="M:NationalInstruments.UI.IntensityXAxisCollection.Insert(System.Int32,NationalInstruments.UI.IntensityXAxis)">
      <summary>
            Inserts an item into the collection at the specified index.
            </summary>
      <param name="index">
            Index to insert the item at.
            </param>
      <param name="item">
            Item to insert into the collection.
            </param>
      <exception cref="T:System.ArgumentNullException">item (parameter) is null.
            </exception>
      <exception cref="T:System.NotSupportedException">item (parameter) has been disposed.
            
            -or-
            item (parameter) is in another IntensityXAxisCollection.
            
            -or-
            item (parameter) is already in this collection.
            </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">index (parameter) is less than zero.
            
            -or-
            

index (parameter) is greater than Count.
            


            -or-
            index (parameter) is greater than Count.
            </exception>
    </member>
    <member name="M:NationalInstruments.UI.IntensityXAxisCollection.GetEnumerator">
      <summary>
            Returns an enumerator that you can use to iterate through the collection.
            </summary>
      <returns>
            The enumerator for the collection.
            </returns>
    </member>
    <member name="M:NationalInstruments.UI.IntensityXAxisCollection.Remove(NationalInstruments.UI.IntensityXAxis)">
      <summary>
            Removes the first occurrence of the specified item.
            </summary>
      <param name="item">
            Item to remove from the collection.
            </param>
    </member>
    <member name="M:NationalInstruments.UI.IntensityXAxisCollection.RemoveAt(System.Int32)">
      <summary>
            Removes the item at the specified index.
            </summary>
      <param name="index">
            The zero-based index of the item to remove.
            </param>
      <exception cref="T:System.ArgumentOutOfRangeException">index (parameter) is less than zero.
            
            -or-
            

index (parameter) is greater than or equal to Count.
            


            -or-
            index (parameter) is greater than or equal to Count.
            </exception>
    </member>
    <member name="P:NationalInstruments.UI.IntensityXAxisCollection.Item(System.Int32)">
      <summary>
            Gets or sets the IntensityXAxis at the specified index. 
            </summary>
      <param name="index">
            The zero-based index of the entry to locate in the collection.
            </param>
      <exception cref="T:System.ArgumentNullException">
            	The value is null.
            </exception>
      <exception cref="T:System.NotSupportedException">
            		The value has been disposed.
            
            -or-
            
            		The value is in another IntensityXAxisCollection.
            
            -or-
            
            		The value is already in this collection.
            </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">index (parameter) is less than zero.
            
            -or-
            

index (parameter) is greater than Count.
            


            -or-
            index (parameter) is greater than Count.
            </exception>
    </member>
    <member name="P:NationalInstruments.UI.IntensityXAxisCollection.Count">
      <summary>
            Gets the number of elements in the IntensityXAxisCollection.
            </summary>
    </member>
    <member name="P:NationalInstruments.UI.IntensityXAxisCollection.IsSynchronized">
      <summary>
            Gets a value indicating whether access to the collection is synchronized
            (thread-safe).
            </summary>
    </member>
    <member name="P:NationalInstruments.UI.IntensityXAxisCollection.IsFixedSize">
      <summary>
            Gets a value indicating whether the collection has a fixed size.
            </summary>
    </member>
    <member name="P:NationalInstruments.UI.IntensityXAxisCollection.IsReadOnly">
      <summary>
            Gets a value indicating whether the collection is read-only.
            </summary>
    </member>
    <member name="P:NationalInstruments.UI.IntensityXAxisCollection.SyncRoot">
      <summary>
            Gets an object that can be used to synchronize access to the collection.
            </summary>
    </member>
    <member name="T:NationalInstruments.UI.IntensityPlotDataChangedEventHandler">
      <summary>
            Represents the method that handles the PlotDataChanged
            event of an IIntensityGraph.
            </summary>
      <param name="sender">
            The source of the event.
            </param>
      <param name="e">
            A IntensityPlotDataChangedEventArgs that contains the event
            data.
            </param>
    </member>
    <member name="T:NationalInstruments.UI.IntensityGraphHitTestInfo">
      <summary>
            Specifies the parts of an intensity graph that can be hit-tested.
            </summary>
    </member>
    <member name="F:NationalInstruments.UI.IntensityGraphHitTestInfo.None">
      <summary>
            The portion of an intensity graph outside the axes, color scales, and plots.
            </summary>
    </member>
    <member name="F:NationalInstruments.UI.IntensityGraphHitTestInfo.Plot">
      <summary>
            The plot of an intensity graph.
            </summary>
    </member>
    <member name="F:NationalInstruments.UI.IntensityGraphHitTestInfo.XAxis">
      <summary>
            The x-axis of an intensity graph.
            </summary>
    </member>
    <member name="F:NationalInstruments.UI.IntensityGraphHitTestInfo.YAxis">
      <summary>
            The y-axis of an intensity graph.
            </summary>
    </member>
    <member name="F:NationalInstruments.UI.IntensityGraphHitTestInfo.ColorScale">
      <summary>
            The color scale of an intensity graph.
            </summary>
    </member>
    <member name="F:NationalInstruments.UI.IntensityGraphHitTestInfo.Cursor">
      <summary>
            The cursor of an intensity graph.
            </summary>
    </member>
    <member name="F:NationalInstruments.UI.IntensityGraphHitTestInfo.Annotation">
      <summary>
            The annotation of an intensity graph.
            </summary>
    </member>
    <member name="F:NationalInstruments.UI.IntensityGraphHitTestInfo.PlotArea">
      <summary>
            The plot area of an intensity graph.
            </summary>
    </member>
    <member name="T:NationalInstruments.UI.ControlArrayScaleModeType">
      <summary>
            Specifies if the number of controls in an array is fixed to a specified value or automatically modified 
            based on the number of data values being set.
            </summary>
    </member>
    <member name="F:NationalInstruments.UI.ControlArrayScaleModeType.Fixed">
      <summary>
            The number of controls in an array is fixed to a specified value.
            </summary>
    </member>
    <member name="F:NationalInstruments.UI.ControlArrayScaleModeType.Automatic">
      <summary>
            The number of controls in an array is automatically modified based on the number of data values being set.
            </summary>
    </member>
    <member name="T:NationalInstruments.UI.ColorScaleEventArgs">
      <summary>
            Provides data for the 
            ColorScaleRangeChanged event.
            </summary>
    </member>
    <member name="M:NationalInstruments.UI.ColorScaleEventArgs.#ctor(NationalInstruments.UI.ColorScale)">
      <summary>
            Initializes a new instance of the ColorScaleEventArgs class
            with the specified color scale.
            </summary>
      <param name="colorScale">
            	The ColorScale on which the range changed event occurred.
            </param>
      <exception cref="T:System.ArgumentNullException">colorScale (parameter) is null.
            </exception>
    </member>
    <member name="M:NationalInstruments.UI.ColorScaleEventArgs.#ctor(NationalInstruments.UI.ColorScale,NationalInstruments.UI.GraphAction)">
      <summary>
            Initializes a new instance of the ColorScaleEventArgs class
            with the specified color scale and the action on the graph.
            </summary>
      <param name="colorScale">
            	The ColorScale on which the range changed event occurred.
            </param>
      <param name="action">
            	The GraphAction that caused the range changed event.
            </param>
      <exception cref="T:System.ArgumentNullException">colorScale (parameter) is null.
            </exception>
    </member>
    <member name="M:NationalInstruments.UI.ColorScaleEventArgs.ToString">
      <summary>
            Returns a string representation of the object.
            </summary>
      <returns>
            A string representation of the object.
            </returns>
    </member>
    <member name="P:NationalInstruments.UI.ColorScaleEventArgs.ColorScale">
      <summary>
            Gets the color scale on which the range changed event occurred.
            </summary>
    </member>
    <member name="P:NationalInstruments.UI.ColorScaleEventArgs.Action">
      <summary>
            Gets the action which raised the range changed event on the color scale.
            </summary>
    </member>
    <member name="T:NationalInstruments.UI.ClickEventHandler">
      <summary>
            Represents the method that handles click events.
            </summary>
      <param name="sender">
            The source of the event.
            </param>
      <param name="e">
            A ClickEventArgs that contains the event data.
            </param>
    </member>
    <member name="T:NationalInstruments.UI.BeforeMoveXYCursorEventArgs">
      <summary>
            Provides data for the events that occur before a cursor moves.
            </summary>
    </member>
    <member name="M:NationalInstruments.UI.BeforeMoveXYCursorEventArgs.#ctor(NationalInstruments.UI.XYCursor,NationalInstruments.UI.XYPlot,System.Double,System.Double,NationalInstruments.UI.Action,System.Boolean)">
      <summary>
            Initializes a new instance of the BeforeMoveXYCursorEventArgs
            class with the specified cursor, plot, x-coordinate, y-coordinate, action, and cancel value.
            </summary>
      <param name="cursor">
            The XYCursor for which the event is occurring.
            </param>
      <param name="plot">
            The XYPlot that the XYCursor
            is moving to.
            </param>
      <param name="xPosition">
            The x-coordinate that the XYCursor is moving to.
            </param>
      <param name="yPosition">
            The y-coordinate that the XYCursor is moving to.
            </param>
      <param name="action">
            The source of the Action that caused the event.
            </param>
      <param name="cancel">true to cancel the event.
            </param>
      <exception cref="T:System.ArgumentNullException">cursor (parameter) is null.
            </exception>
    </member>
    <member name="M:NationalInstruments.UI.BeforeMoveXYCursorEventArgs.ToString">
      <summary>
            Returns a string representation of the object.
            </summary>
      <returns>
            A string representation of the object.
            </returns>
    </member>
    <member name="P:NationalInstruments.UI.BeforeMoveXYCursorEventArgs.Cursor">
      <summary>
            Gets the XYCursor that is moving.
            </summary>
    </member>
    <member name="P:NationalInstruments.UI.BeforeMoveXYCursorEventArgs.Plot">
      <summary>
            Gets the XYPlot that the 
            XYCursor is moving to.
            </summary>
    </member>
    <member name="P:NationalInstruments.UI.BeforeMoveXYCursorEventArgs.XPosition">
      <summary>
            Gets the x-coordinate that the XYCursor is moving to.
            </summary>
    </member>
    <member name="P:NationalInstruments.UI.BeforeMoveXYCursorEventArgs.YPosition">
      <summary>
            Gets the y-coordinate that the XYCursor is moving to.
            </summary>
    </member>
    <member name="T:NationalInstruments.UI.BeforeDrawXYPlotEventArgs">
      <summary>
            Provides data for the BeforeDrawPlot event.
            </summary>
    </member>
    <member name="M:NationalInstruments.UI.BeforeDrawXYPlotEventArgs.#ctor(NationalInstruments.UI.XYPlot,System.Drawing.Graphics,System.Drawing.Rectangle,System.Boolean)">
      <summary>
            Initializes a new instance of the BeforeDrawXYPlotEventArgs
            class with the specified plot, graphics, bounds, and cancel value.
            </summary>
      <param name="plot">
            The XYPlot for which the event is occurring.
            </param>
      <param name="graphics">
            The Graphics used to draw the item.
            </param>
      <param name="bounds">
            The Rectangle that represents the bounds in which to draw.
            </param>
      <param name="cancel">
            A value that indicates if the event is cancelled.
            </param>
      <exception cref="T:System.ArgumentNullException">plot (parameter) is null.
            	-or-graphics (parameter) is null.
            	</exception>
    </member>
    <member name="M:NationalInstruments.UI.BeforeDrawXYPlotEventArgs.ToString">
      <summary>
            Returns a string representation of the object.
            </summary>
      <returns>
            A string representation of the object.
            </returns>
    </member>
    <member name="P:NationalInstruments.UI.BeforeDrawXYPlotEventArgs.Plot">
      <summary>
            Gets the XYPlot to draw.
            </summary>
    </member>
    <member name="T:NationalInstruments.UI.AxisDivisions">
      <summary>
            Represents a set of divisions of an axis.
            </summary>
    </member>
    <member name="P:NationalInstruments.UI.AxisDivisions.GridVisible">
      <summary>
            Gets or sets a value indicating if the grid is displayed.
            </summary>
    </member>
    <member name="P:NationalInstruments.UI.AxisDivisions.GridColor">
      <summary>
            Gets or sets the color of the grid.
            </summary>
    </member>
    <member name="P:NationalInstruments.UI.AxisDivisions.GridLineStyle">
      <summary>
            Gets or sets the line style of the grid.
            </summary>
      <exception cref="T:System.ArgumentNullException">
            The specified value is null.
            </exception>
    </member>
    <member name="T:NationalInstruments.UI.AfterDrawMagnitudePhaseRangeAnnotationEventHandler">
      <summary>
            Represents the method that handles the events that occur after a magnitude-phase range annotation draws.
            </summary>
      <param name="sender">
            The source of the event.
            </param>
      <param name="e">
            An AfterDrawMagnitudePhaseRangeAnnotationEventArgs that contains the event data.
            </param>
    </member>
    <member name="T:NationalInstruments.UI.YAxisPosition">
      <summary>
            Specifies the position of a y-axis with respect to the plot area.
            </summary>
    </member>
    <member name="F:NationalInstruments.UI.YAxisPosition.Left">
      <summary>
            The y-axis is positioned at the left of the plot area.
            </summary>
    </member>
    <member name="F:NationalInstruments.UI.YAxisPosition.Right">
      <summary>
            The y-axis is positioned at the right of the plot area.
            </summary>
    </member>
    <member name="F:NationalInstruments.UI.YAxisPosition.LeftRight">
      <summary>
            The y-axis is positioned at the left and right of the plot area.
            </summary>
    </member>
    <member name="T:NationalInstruments.UI.XYRangeAnnotationPart">
      <summary>
            Specifies a part of a range annotation.
            </summary>
    </member>
    <member name="F:NationalInstruments.UI.XYRangeAnnotationPart.Caption">
      <summary>
            The caption of a range annotation.
            </summary>
    </member>
    <member name="F:NationalInstruments.UI.XYRangeAnnotationPart.Arrow">
      <summary>
            The arrow of a range annotation.
            </summary>
    </member>
    <member name="F:NationalInstruments.UI.XYRangeAnnotationPart.Range">
      <summary>
            The range of a range annotation.
            </summary>
    </member>
    <member name="T:NationalInstruments.UI.XYPlotDataChangedEventArgs">
      <summary>
            Provides data for the PlotDataChanged event.
            </summary>
    </member>
    <member name="M:NationalInstruments.UI.XYPlotDataChangedEventArgs.#ctor(NationalInstruments.UI.XYPlot)">
      <summary>
            Initializes a new instance of the XYPlotDataChangedEventArgs class
            with the specified plot.
            </summary>
      <param name="plot">
            The XYPlot on which data is plotted.
            </param>
    </member>
    <member name="M:NationalInstruments.UI.XYPlotDataChangedEventArgs.ToString">
      <summary>
            Returns a string representation of the object.
            </summary>
      <returns>
            A string representation of the object.
            </returns>
    </member>
    <member name="P:NationalInstruments.UI.XYPlotDataChangedEventArgs.Plot">
      <summary>
            Gets the plot on which data is plotted.
            </summary>
    </member>
    <member name="T:NationalInstruments.UI.XYDataType">
      <summary>
            Specifies the types of data that appear on an XYPlot.
            </summary>
    </member>
    <member name="F:NationalInstruments.UI.XYDataType.XData">
      <summary>
            Specifies the x data that is plotted horizontally on an XYPlot.
            </summary>
    </member>
    <member name="F:NationalInstruments.UI.XYDataType.YData">
      <summary>
            Specifies the y data that is plotted vertically on an XYPlot.
            </summary>
    </member>
    <member name="T:NationalInstruments.UI.WaveformPlotCollection">
      <summary>
            Represents a strongly typed collection of WaveformPlot objects.
            </summary>
    </member>
    <member name="M:NationalInstruments.UI.WaveformPlotCollection.#ctor">
      <summary>
            Initializes a new instance of the WaveformPlotCollection class.
            </summary>
    </member>
    <member name="M:NationalInstruments.UI.WaveformPlotCollection.#ctor(NationalInstruments.UI.WaveformPlot[])">
      <summary>
            Initializes a new instance of the WaveformPlotCollection class
            from an array of WaveformPlot objects.
            </summary>
      <param name="item">
            Array of WaveformPlot objects to copy.
            </param>
      <exception cref="T:System.ArgumentNullException">item (parameter) is null.
            
            -or-
            
            An element in item (parameter) is null.
            </exception>
      <exception cref="T:System.NotSupportedException">
            		An element in item (parameter) has been disposed.
            
            -or-
            
            		An element in item (parameter) is in another WaveformPlotCollection.
            
            -or-
            
            		An element in item (parameter) is already in this collection.
            </exception>
    </member>
    <member name="M:NationalInstruments.UI.WaveformPlotCollection.#ctor(NationalInstruments.UI.WaveformPlotCollection)">
      <summary>
            Initializes a new instance of WaveformPlotCollection
            from an existing collection.
            </summary>
      <param name="item">
            The WaveformPlotCollection to copy.
            </param>
      <exception cref="T:System.ArgumentNullException">item (parameter) is null.
            
            -or-
            
            An element in item (parameter) is null.
            </exception>
      <exception cref="T:System.NotSupportedException">
            		An element in item (parameter) has been disposed.
            
            -or-
            
            		An element in item (parameter) is in another WaveformPlotCollection.
            
            -or-
            
            		An element in item (parameter) is already in this collection.
            </exception>
    </member>
    <member name="M:NationalInstruments.UI.WaveformPlotCollection.ToString">
      <summary>
            Returns a string representation of the object.
            </summary>
      <returns>
            A string representation of the object.
            </returns>
    </member>
    <member name="M:NationalInstruments.UI.WaveformPlotCollection.Add(NationalInstruments.UI.WaveformPlot)">
      <summary>
            Adds an item to end of the collection.
            </summary>
      <param name="item">
            Item to add to the collection.
            </param>
      <returns>
            The array index of the added item.
            </returns>
      <exception cref="T:System.ArgumentNullException">item (parameter) is null.
            </exception>
      <exception cref="T:System.NotSupportedException">item (parameter) has been disposed.
            
            -or-
            item (parameter) is in another WaveformPlotCollection.
            
            -or-
            item (parameter) is already in this collection.
            </exception>
    </member>
    <member name="M:NationalInstruments.UI.WaveformPlotCollection.AddRange(NationalInstruments.UI.WaveformPlot[])">
      <summary>
            Adds an array of WaveformPlot objects to the end of the collection.
            </summary>
      <param name="item">
            Array of WaveformPlot objects to add to the collection.
            </param>
      <exception cref="T:System.ArgumentNullException">item (parameter) is null.
            
            -or-
            
            An element in item (parameter) is null.
            </exception>
      <exception cref="T:System.NotSupportedException">
            		An element in item (parameter) has been disposed.
            
            -or-
            
            		An element in item (parameter) is in another WaveformPlotCollection.
            
            -or-
            
            		An element in item (parameter) is already in this collection.
            </exception>
    </member>
    <member name="M:NationalInstruments.UI.WaveformPlotCollection.AddRange(NationalInstruments.UI.WaveformPlotCollection)">
      <summary>
            Adds a collection of WaveformPlot objects to the end of the collection.
            </summary>
      <param name="item">
            Collection of WaveformPlot objects to add to the collection.
            </param>
      <exception cref="T:System.ArgumentNullException">item (parameter) is null.
            
            -or-
            
            An element in item (parameter) is null.
            </exception>
      <exception cref="T:System.NotSupportedException">
            		An element in item (parameter) has been disposed.
            
            -or-
            
            		An element in item (parameter) is in another WaveformPlotCollection.
            
            -or-
            
            		An element in item (parameter) is already in this collection.
            </exception>
    </member>
    <member name="M:NationalInstruments.UI.WaveformPlotCollection.Clear">
      <summary>
            Removes all items from the collection.
            </summary>
    </member>
    <member name="M:NationalInstruments.UI.WaveformPlotCollection.Contains(NationalInstruments.UI.WaveformPlot)">
      <summary>
            Determines if the specified element is in the collection.
            </summary>
      <param name="item">Item to locate in the collection.</param>
      <returns>true if the collection contains item (parameter).
            </returns>
    </member>
    <member name="M:NationalInstruments.UI.WaveformPlotCollection.CopyTo(NationalInstruments.UI.WaveformPlot[],System.Int32)">
      <summary>
            Copies the collection to an array or a portion of an array.
            </summary>
      <param name="array">
            Destination array for the collection.
            </param>
      <param name="index">
            The index in the target array at which you want to begin copying the collection to.
            </param>
      <exception cref="T:System.ArgumentNullException">array (parameter) is null.
            </exception>
      <exception cref="T:System.ArgumentException">array (parameter) is multidimensional.
            
            - or -
            index (parameter) is equal to or greater than the length of array (parameter).
            
            -or-
            
            The number of elements in the collection is greater than the available space between
            index (parameter) and the end of array (parameter).
            </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">index (parameter) is less than the lower bound of array (parameter).
            </exception>
    </member>
    <member name="M:NationalInstruments.UI.WaveformPlotCollection.IndexOf(NationalInstruments.UI.WaveformPlot)">
      <summary>
            Returns the zero-based index of the first occurrence of an item in the collection.
            </summary>
      <param name="item">
            Item to search for.
            </param>
      <returns>
            Index of the item. If the item is not found, returns -1.
            </returns>
    </member>
    <member name="M:NationalInstruments.UI.WaveformPlotCollection.Insert(System.Int32,NationalInstruments.UI.WaveformPlot)">
      <summary>
            Inserts an item into the collection at the specified index.
            </summary>
      <param name="index">
            Index to insert the item at.
            </param>
      <param name="item">
            Item to insert into the collection.
            </param>
      <exception cref="T:System.ArgumentNullException">item (parameter) is null.
            </exception>
      <exception cref="T:System.NotSupportedException">item (parameter) has been disposed.
            
            -or-
            item (parameter) is in another WaveformPlotCollection.
            
            -or-
            item (parameter) is already in this collection.
            </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">index (parameter) is less than zero.
            
            -or-
            

index (parameter) is greater than Count.
            


            -or-
            index (parameter) is greater than Count.
            </exception>
    </member>
    <member name="M:NationalInstruments.UI.WaveformPlotCollection.GetEnumerator">
      <summary>
            Returns an enumerator that you can use to iterate through the collection.
            </summary>
      <returns>
            The enumerator for the collection.
            </returns>
    </member>
    <member name="M:NationalInstruments.UI.WaveformPlotCollection.Remove(NationalInstruments.UI.WaveformPlot)">
      <summary>
            Removes the first occurrence of the specified item.
            </summary>
      <param name="item">
            Item to remove from the collection.
            </param>
    </member>
    <member name="M:NationalInstruments.UI.WaveformPlotCollection.RemoveAt(System.Int32)">
      <summary>
            Removes the item at the specified index.
            </summary>
      <param name="index">
            The zero-based index of the item to remove.
            </param>
      <exception cref="T:System.ArgumentOutOfRangeException">index (parameter) is less than zero.
            
            -or-
            

index (parameter) is greater than or equal to Count.
            


            -or-
            index (parameter) is greater than or equal to Count.
            </exception>
    </member>
    <member name="P:NationalInstruments.UI.WaveformPlotCollection.Item(System.Int32)">
      <summary>
            Gets or sets the WaveformPlot at the specified index. 
            </summary>
      <param name="index">
            The zero-based index of the entry to locate in the collection.
            </param>
      <exception cref="T:System.ArgumentNullException">
            	The value is null.
            </exception>
      <exception cref="T:System.NotSupportedException">
            		The value has been disposed.
            
            -or-
            
            		The value is in another WaveformPlotCollection.
            
            -or-
            
            		The value is already in this collection.
            </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">index (parameter) is less than zero.
            
            -or-
            

index (parameter) is greater than Count.
            


            -or-
            index (parameter) is greater than Count.
            </exception>
    </member>
    <member name="P:NationalInstruments.UI.WaveformPlotCollection.Count">
      <summary>
            Gets the number of elements in the WaveformPlotCollection.
            </summary>
    </member>
    <member name="P:NationalInstruments.UI.WaveformPlotCollection.IsSynchronized">
      <summary>
            Gets a value indicating whether access to the collection is synchronized
            (thread-safe).
            </summary>
    </member>
    <member name="P:NationalInstruments.UI.WaveformPlotCollection.IsFixedSize">
      <summary>
            Gets a value indicating whether the collection has a fixed size.
            </summary>
    </member>
    <member name="P:NationalInstruments.UI.WaveformPlotCollection.IsReadOnly">
      <summary>
            Gets a value indicating whether the collection is read-only.
            </summary>
    </member>
    <member name="P:NationalInstruments.UI.WaveformPlotCollection.SyncRoot">
      <summary>
            Gets an object that can be used to synchronize access to the collection.
            </summary>
    </member>
    <member name="T:NationalInstruments.UI.RefreshCallbackResult">
      <summary>
            Represents the result of a server refresh callback event.
            </summary>
    </member>
    <member name="F:NationalInstruments.UI.RefreshCallbackResult.None">
      <summary>
            A RefreshCallbackResult that indicates there are no updates
            to make on the client.
            </summary>
    </member>
    <member name="M:NationalInstruments.UI.RefreshCallbackResult.CreateImageResult(System.String,System.String)">
      <summary>
            Creates a RefreshCallbackResult with the specified
            client ID and image URL.
            </summary>
      <param name="clientID">
            The ID of the element on the client to update.
            </param>
      <param name="imageUrl">
            The URL of an image that an image element on the client is updated to display.
            </param>
      <returns>
            A RefreshCallbackResult with the specified client
            update information.
            </returns>
      <exception cref="T:System.ArgumentNullException">clientID (parameter) is null.
            </exception>
    </member>
    <member name="M:NationalInstruments.UI.RefreshCallbackResult.CreateImageResult(System.String,System.String,System.String)">
      <summary>
            Creates a RefreshCallbackResult with the specified
            client ID, image URL, and tooltip.
            </summary>
      <param name="clientID">
            The ID of the element on the client to update.
            </param>
      <param name="imageUrl">
            The URL of an image that an image element on the client is updated to display.
            </param>
      <param name="toolTip">
            The tooltip that an element on the client is updated to display.
            </param>
      <returns>
            A RefreshCallbackResult with the specified client
            update information.
            </returns>
      <exception cref="T:System.ArgumentNullException">clientID (parameter) is null.
            </exception>
    </member>
    <member name="M:NationalInstruments.UI.RefreshCallbackResult.CreateImageResult(System.String,System.String,System.String,System.String)">
      <summary>
            Creates a RefreshCallbackResult with the specified
            client ID, image URL, hidden field name, and hidden field value.
            </summary>
      <param name="clientID">
            The ID of the element on the client to update.
            </param>
      <param name="imageUrl">
            The URL of an image that an image element on the client is updated to display.
            </param>
      <param name="hiddenFieldName">
            The name of a hidden input field on the client that is to be updated.
            </param>
      <param name="hiddenFieldValue">
            The value of a hidden input field on the client that is to be updated.
            </param>
      <returns>
            A RefreshCallbackResult with the specified client
            update information.
            </returns>
      <exception cref="T:System.ArgumentNullException">clientID (parameter) is null.
            </exception>
    </member>
    <member name="M:NationalInstruments.UI.RefreshCallbackResult.CreateImageResult(System.String,System.String,System.String,System.String,System.String)">
      <summary>
            Creates a RefreshCallbackResult with the specified
            client ID, image URL, hidden field name, hidden field value, and tooltip.
            </summary>
      <param name="clientID">
            The ID of the element on the client to update.
            </param>
      <param name="imageUrl">
            The URL of an image that an image element on the client is updated to display.
            </param>
      <param name="hiddenFieldName">
            The name of a hidden input field on the client that is to be updated.
            </param>
      <param name="hiddenFieldValue">
            The value of a hidden input field on the client that is to be updated.
            </param>
      <param name="toolTip">
            The tooltip that an element on the client is updated to display.
            </param>
      <returns>
            A RefreshCallbackResult with the specified client
            update information.
            </returns>
      <exception cref="T:System.ArgumentNullException">clientID (parameter) is null.
            </exception>
    </member>
    <member name="M:NationalInstruments.UI.RefreshCallbackResult.CreateValueResult(System.String,System.String)">
      <summary>
            Creates a RefreshCallbackResult with the specified
            client ID and value.
            </summary>
      <param name="clientID">
            The ID of the element on the client to update.
            </param>
      <param name="value">
            The value of an input field on the client that is to be updated.
            </param>
      <returns>
            A RefreshCallbackResult with the specified client
            update information.
            </returns>
      <exception cref="T:System.ArgumentNullException">clientID (parameter) is null.
            </exception>
    </member>
    <member name="M:NationalInstruments.UI.RefreshCallbackResult.CreateValueResult(System.String,System.String,System.String,System.String)">
      <summary>
            Creates a RefreshCallbackResult with the specified
            client ID, value, hidden field name, and hidden field value.
            </summary>
      <param name="clientID">
            The ID of the element on the client to update.
            </param>
      <param name="value">
            The value of an input field on the client that is to be updated.
            </param>
      <param name="hiddenFieldName">
            The name of a hidden input field on the client that is to be updated.
            </param>
      <param name="hiddenFieldValue">
            The value of a hidden input field on the client that is to be updated.
            </param>
      <returns>
            A RefreshCallbackResult with the specified client
            update information.
            </returns>
      <exception cref="T:System.ArgumentNullException">clientID (parameter) is null.
            </exception>
    </member>
    <member name="P:NationalInstruments.UI.RefreshCallbackResult.Type">
      <summary>
            Gets a value that specifies the types of updates to make on the client.
            </summary>
    </member>
    <member name="P:NationalInstruments.UI.RefreshCallbackResult.ClientID">
      <summary>
            Gets the ID of the element on the client that is to be updated.
            </summary>
    </member>
    <member name="P:NationalInstruments.UI.RefreshCallbackResult.Value">
      <summary>
            Gets the value of an input field on the client that is to be updated.
            </summary>
    </member>
    <member name="P:NationalInstruments.UI.RefreshCallbackResult.HiddenFieldName">
      <summary>
            Gets the name of a hidden input field on the client that is to be updated.
            </summary>
    </member>
    <member name="P:NationalInstruments.UI.RefreshCallbackResult.HiddenFieldValue">
      <summary>
            Gets the value of a hidden input field on the client that is to be updated.
            </summary>
    </member>
    <member name="P:NationalInstruments.UI.RefreshCallbackResult.ImageUrl">
      <summary>
            Gets the URL of an image that an image element on the client is updated to display.
            </summary>
    </member>
    <member name="P:NationalInstruments.UI.RefreshCallbackResult.ToolTip">
      <summary>
            Gets a tooltip that an element on the client is updated to display.
            </summary>
    </member>
    <member name="T:NationalInstruments.UI.MeterStyleDrawArgs">
      <summary>
            Provides the data to draw a MeterStyle.
            </summary>
    </member>
    <member name="M:NationalInstruments.UI.MeterStyleDrawArgs.#ctor(System.Drawing.Graphics,System.Drawing.Rectangle)">
      <summary>
            Initializes a new instance of the MeterStyleDrawArgs class with the specified
            graphics and bounds.
            </summary>
      <param name="graphics">
            The Graphics with which to draw.
            </param>
      <param name="bounds">
            The Rectangle in which the MeterStyle is drawn.
            </param>
      <exception cref="T:System.ArgumentNullException">graphics (parameter)	is null.
            </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
            The	Width of bounds (parameter) is less than zero.
            
            -or-
            
            The	Height of bounds (parameter) is less than zero.
            </exception>
    </member>
    <member name="T:NationalInstruments.UI.LegendItemCollection">
      <summary>
            Represents a strongly typed collection of LegendItem objects.
            </summary>
    </member>
    <member name="M:NationalInstruments.UI.LegendItemCollection.#ctor">
      <summary>
            Initializes a new instance of the LegendItemCollection class.
            </summary>
    </member>
    <member name="M:NationalInstruments.UI.LegendItemCollection.#ctor(NationalInstruments.UI.LegendItem[])">
      <summary>
            Initializes a new instance of the LegendItemCollection class
            from an array of LegendItem objects.
            </summary>
      <param name="item">
            Array of LegendItem objects to copy.
            </param>
      <exception cref="T:System.ArgumentNullException">item (parameter) is null.
            
            -or-
            
            An element in item (parameter) is null.
            </exception>
      <exception cref="T:System.NotSupportedException">
            		An element in item (parameter) has been disposed.
            
            -or-
            
            		An element in item (parameter) is in another LegendItemCollection.
            
            -or-
            
            		An element in item (parameter) is already in this collection.
            </exception>
    </member>
    <member name="M:NationalInstruments.UI.LegendItemCollection.#ctor(NationalInstruments.UI.LegendItemCollection)">
      <summary>
            Initializes a new instance of LegendItemCollection
            from an existing collection.
            </summary>
      <param name="item">
            The LegendItemCollection to copy.
            </param>
      <exception cref="T:System.ArgumentNullException">item (parameter) is null.
            
            -or-
            
            An element in item (parameter) is null.
            </exception>
      <exception cref="T:System.NotSupportedException">
            		An element in item (parameter) has been disposed.
            
            -or-
            
            		An element in item (parameter) is in another LegendItemCollection.
            
            -or-
            
            		An element in item (parameter) is already in this collection.
            </exception>
    </member>
    <member name="M:NationalInstruments.UI.LegendItemCollection.ToString">
      <summary>
            Returns a string representation of the object.
            </summary>
      <returns>
            A string representation of the object.
            </returns>
    </member>
    <member name="M:NationalInstruments.UI.LegendItemCollection.Add(NationalInstruments.UI.LegendItem)">
      <summary>
            Adds an item to end of the collection.
            </summary>
      <param name="item">
            Item to add to the collection.
            </param>
      <returns>
            The array index of the added item.
            </returns>
      <exception cref="T:System.ArgumentNullException">item (parameter) is null.
            </exception>
      <exception cref="T:System.NotSupportedException">item (parameter) has been disposed.
            
            -or-
            item (parameter) is in another LegendItemCollection.
            
            -or-
            item (parameter) is already in this collection.
            </exception>
    </member>
    <member name="M:NationalInstruments.UI.LegendItemCollection.AddRange(NationalInstruments.UI.LegendItem[])">
      <summary>
            Adds an array of LegendItem objects to the end of the collection.
            </summary>
      <param name="item">
            Array of LegendItem objects to add to the collection.
            </param>
      <exception cref="T:System.ArgumentNullException">item (parameter) is null.
            
            -or-
            
            An element in item (parameter) is null.
            </exception>
      <exception cref="T:System.NotSupportedException">
            		An element in item (parameter) has been disposed.
            
            -or-
            
            		An element in item (parameter) is in another LegendItemCollection.
            
            -or-
            
            		An element in item (parameter) is already in this collection.
            </exception>
    </member>
    <member name="M:NationalInstruments.UI.LegendItemCollection.AddRange(NationalInstruments.UI.LegendItemCollection)">
      <summary>
            Adds a collection of LegendItem objects to the end of the collection.
            </summary>
      <param name="item">
            Collection of LegendItem objects to add to the collection.
            </param>
      <exception cref="T:System.ArgumentNullException">item (parameter) is null.
            
            -or-
            
            An element in item (parameter) is null.
            </exception>
      <exception cref="T:System.NotSupportedException">
            		An element in item (parameter) has been disposed.
            
            -or-
            
            		An element in item (parameter) is in another LegendItemCollection.
            
            -or-
            
            		An element in item (parameter) is already in this collection.
            </exception>
    </member>
    <member name="M:NationalInstruments.UI.LegendItemCollection.Clear">
      <summary>
            Removes all items from the collection.
            </summary>
    </member>
    <member name="M:NationalInstruments.UI.LegendItemCollection.Contains(NationalInstruments.UI.LegendItem)">
      <summary>
            Determines if the specified element is in the collection.
            </summary>
      <param name="item">Item to locate in the collection.</param>
      <returns>true if the collection contains item (parameter).
            </returns>
    </member>
    <member name="M:NationalInstruments.UI.LegendItemCollection.CopyTo(NationalInstruments.UI.LegendItem[],System.Int32)">
      <summary>
            Copies the collection to an array or a portion of an array.
            </summary>
      <param name="array">
            Destination array for the collection.
            </param>
      <param name="index">
            The index in the target array at which you want to begin copying the collection to.
            </param>
      <exception cref="T:System.ArgumentNullException">array (parameter) is null.
            </exception>
      <exception cref="T:System.ArgumentException">array (parameter) is multidimensional.
            
            - or -
            index (parameter) is equal to or greater than the length of array (parameter).
            
            -or-
            
            The number of elements in the collection is greater than the available space between
            index (parameter) and the end of array (parameter).
            </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">index (parameter) is less than the lower bound of array (parameter).
            </exception>
    </member>
    <member name="M:NationalInstruments.UI.LegendItemCollection.IndexOf(NationalInstruments.UI.LegendItem)">
      <summary>
            Returns the zero-based index of the first occurrence of an item in the collection.
            </summary>
      <param name="item">
            Item to search for.
            </param>
      <returns>
            Index of the item. If the item is not found, returns -1.
            </returns>
    </member>
    <member name="M:NationalInstruments.UI.LegendItemCollection.Insert(System.Int32,NationalInstruments.UI.LegendItem)">
      <summary>
            Inserts an item into the collection at the specified index.
            </summary>
      <param name="index">
            Index to insert the item at.
            </param>
      <param name="item">
            Item to insert into the collection.
            </param>
      <exception cref="T:System.ArgumentNullException">item (parameter) is null.
            </exception>
      <exception cref="T:System.NotSupportedException">item (parameter) has been disposed.
            
            -or-
            item (parameter) is in another LegendItemCollection.
            
            -or-
            item (parameter) is already in this collection.
            </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">index (parameter) is less than zero.
            
            -or-
            

index (parameter) is greater than Count.
            


            -or-
            index (parameter) is greater than Count.
            </exception>
    </member>
    <member name="M:NationalInstruments.UI.LegendItemCollection.GetEnumerator">
      <summary>
            Returns an enumerator that you can use to iterate through the collection.
            </summary>
      <returns>
            The enumerator for the collection.
            </returns>
    </member>
    <member name="M:NationalInstruments.UI.LegendItemCollection.Remove(NationalInstruments.UI.LegendItem)">
      <summary>
            Removes the first occurrence of the specified item.
            </summary>
      <param name="item">
            Item to remove from the collection.
            </param>
    </member>
    <member name="M:NationalInstruments.UI.LegendItemCollection.RemoveAt(System.Int32)">
      <summary>
            Removes the item at the specified index.
            </summary>
      <param name="index">
            The zero-based index of the item to remove.
            </param>
      <exception cref="T:System.ArgumentOutOfRangeException">index (parameter) is less than zero.
            
            -or-
            

index (parameter) is greater than or equal to Count.
            


            -or-
            index (parameter) is greater than or equal to Count.
            </exception>
    </member>
    <member name="P:NationalInstruments.UI.LegendItemCollection.Item(System.Int32)">
      <summary>
            Gets or sets the LegendItem at the specified index. 
            </summary>
      <param name="index">
            The zero-based index of the entry to locate in the collection.
            </param>
      <exception cref="T:System.ArgumentNullException">
            	The value is null.
            </exception>
      <exception cref="T:System.NotSupportedException">
            		The value has been disposed.
            
            -or-
            
            		The value is in another LegendItemCollection.
            
            -or-
            
            		The value is already in this collection.
            </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">index (parameter) is less than zero.
            
            -or-
            

index (parameter) is greater than Count.
            


            -or-
            index (parameter) is greater than Count.
            </exception>
    </member>
    <member name="P:NationalInstruments.UI.LegendItemCollection.Count">
      <summary>
            Gets the number of elements in the LegendItemCollection.
            </summary>
    </member>
    <member name="P:NationalInstruments.UI.LegendItemCollection.IsSynchronized">
      <summary>
            Gets a value indicating whether access to the collection is synchronized
            (thread-safe).
            </summary>
    </member>
    <member name="P:NationalInstruments.UI.LegendItemCollection.IsFixedSize">
      <summary>
            Gets a value indicating whether the collection has a fixed size.
            </summary>
    </member>
    <member name="P:NationalInstruments.UI.LegendItemCollection.IsReadOnly">
      <summary>
            Gets a value indicating whether the collection is read-only.
            </summary>
    </member>
    <member name="P:NationalInstruments.UI.LegendItemCollection.SyncRoot">
      <summary>
            Gets an object that can be used to synchronize access to the collection.
            </summary>
    </member>
    <member name="T:NationalInstruments.UI.IntensityCursorCollection">
      <summary>
            Represents a strongly typed collection of IntensityCursor objects.
            </summary>
    </member>
    <member name="M:NationalInstruments.UI.IntensityCursorCollection.#ctor">
      <summary>
            Initializes a new instance of the IntensityCursorCollection class.
            </summary>
    </member>
    <member name="M:NationalInstruments.UI.IntensityCursorCollection.#ctor(NationalInstruments.UI.IntensityCursor[])">
      <summary>
            Initializes a new instance of the IntensityCursorCollection class
            from an array of IntensityCursor objects.
            </summary>
      <param name="item">
            Array of IntensityCursor objects to copy.
            </param>
      <exception cref="T:System.ArgumentNullException">item (parameter) is null.
            
            -or-
            
            An element in item (parameter) is null.
            </exception>
      <exception cref="T:System.NotSupportedException">
            		An element in item (parameter) has been disposed.
            
            -or-
            
            		An element in item (parameter) is in another IntensityCursorCollection.
            
            -or-
            
            		An element in item (parameter) is already in this collection.
            </exception>
    </member>
    <member name="M:NationalInstruments.UI.IntensityCursorCollection.#ctor(NationalInstruments.UI.IntensityCursorCollection)">
      <summary>
            Initializes a new instance of the IntensityCursorCollection class
            from an existing collection.
            </summary>
      <param name="item">
            The IntensityCursorCollection to copy.
            </param>
      <exception cref="T:System.ArgumentNullException">item (parameter) is null.
            
            -or-
            
            An element in item (parameter) is null.
            </exception>
      <exception cref="T:System.NotSupportedException">
            		An element in item (parameter) has been disposed.
            
            -or-
            
            		An element in item (parameter) is in another IntensityCursorCollection.
            
            -or-
            
            		An element in item (parameter) is already in this collection.
            </exception>
    </member>
    <member name="M:NationalInstruments.UI.IntensityCursorCollection.ToString">
      <summary>
            Returns a string representation of the object.
            </summary>
      <returns>
            A string representation of the object.
            </returns>
    </member>
    <member name="M:NationalInstruments.UI.IntensityCursorCollection.Add(NationalInstruments.UI.IntensityCursor)">
      <summary>
            Adds an item to end of the collection.
            </summary>
      <param name="item">
            Item to add to the collection.
            </param>
      <returns>
            The array index of the added item.
            </returns>
      <exception cref="T:System.ArgumentNullException">item (parameter) is null.
            </exception>
      <exception cref="T:System.NotSupportedException">item (parameter) has been disposed.
            
            -or-
            item (parameter) is in another IntensityCursorCollection.
            
            -or-
            item (parameter) is already in this collection.
            </exception>
    </member>
    <member name="M:NationalInstruments.UI.IntensityCursorCollection.AddRange(NationalInstruments.UI.IntensityCursor[])">
      <summary>
            Adds an array of IntensityCursor objects to the end of the collection.
            </summary>
      <param name="item">
            Array of IntensityCursor objects to add to the collection.
            </param>
      <exception cref="T:System.ArgumentNullException">item (parameter) is null.
            
            -or-
            
            An element in item (parameter) is null.
            </exception>
      <exception cref="T:System.NotSupportedException">
            		An element in item (parameter) has been disposed.
            
            -or-
            
            		An element in item (parameter) is in another IntensityCursorCollection.
            
            -or-
            
            		An element in item (parameter) is already in this collection.
            </exception>
    </member>
    <member name="M:NationalInstruments.UI.IntensityCursorCollection.AddRange(NationalInstruments.UI.IntensityCursorCollection)">
      <summary>
            Adds a collection of IntensityCursor objects to the end of the collection.
            </summary>
      <param name="item">
            Collection of IntensityCursor objects to add to the collection.
            </param>
      <exception cref="T:System.ArgumentNullException">item (parameter) is null.
            
            -or-
            
            An element in item (parameter) is null.
            </exception>
      <exception cref="T:System.NotSupportedException">
            		An element in item (parameter) has been disposed.
            
            -or-
            
            		An element in item (parameter) is in another IntensityCursorCollection.
            
            -or-
            
            		An element in item (parameter) is already in this collection.
            </exception>
    </member>
    <member name="M:NationalInstruments.UI.IntensityCursorCollection.Clear">
      <summary>
            Removes all items from the collection.
            </summary>
    </member>
    <member name="M:NationalInstruments.UI.IntensityCursorCollection.Contains(NationalInstruments.UI.IntensityCursor)">
      <summary>
            Determines if the specified element is in the collection.
            </summary>
      <param name="item">Item to locate in the collection.</param>
      <returns>true if the collection contains item (parameter).
            </returns>
    </member>
    <member name="M:NationalInstruments.UI.IntensityCursorCollection.CopyTo(NationalInstruments.UI.IntensityCursor[],System.Int32)">
      <summary>
            Copies the collection to an array or a portion of an array.
            </summary>
      <param name="array">
            Destination array for the collection.
            </param>
      <param name="index">
            The index in the target array at which you want to begin copying the collection to.
            </param>
      <exception cref="T:System.ArgumentNullException">array (parameter) is null.
            </exception>
      <exception cref="T:System.ArgumentException">array (parameter) is multidimensional.
            
            - or -
            index (parameter) is equal to or greater than the length of array (parameter).
            
            -or-
            
            The number of elements in the collection is greater than the available space between
            index (parameter) and the end of array (parameter).
            </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">index (parameter) is less than the lower bound of array (parameter).
            </exception>
    </member>
    <member name="M:NationalInstruments.UI.IntensityCursorCollection.IndexOf(NationalInstruments.UI.IntensityCursor)">
      <summary>
            Returns the zero-based index of the first occurrence of an item in the collection.
            </summary>
      <param name="item">
            Item to search for.
            </param>
      <returns>
            Index of the item. If the item is not found, returns -1.
            </returns>
    </member>
    <member name="M:NationalInstruments.UI.IntensityCursorCollection.Insert(System.Int32,NationalInstruments.UI.IntensityCursor)">
      <summary>
            Inserts an item into the collection at the specified index.
            </summary>
      <param name="index">
            Index to insert the item at.
            </param>
      <param name="item">
            Item to insert into the collection.
            </param>
      <exception cref="T:System.ArgumentNullException">item (parameter) is null.
            </exception>
      <exception cref="T:System.NotSupportedException">item (parameter) has been disposed.
            
            -or-
            item (parameter) is in another IntensityCursorCollection.
            
            -or-
            item (parameter) is already in this collection.
            </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">index (parameter) is less than zero.
            
            -or-
            

index (parameter) is greater than Count.
            


            -or-
            index (parameter) is greater than Count.
            </exception>
    </member>
    <member name="M:NationalInstruments.UI.IntensityCursorCollection.GetEnumerator">
      <summary>
            Returns an enumerator that you can use to iterate through the collection.
            </summary>
      <returns>
            The enumerator for the collection.
            </returns>
    </member>
    <member name="M:NationalInstruments.UI.IntensityCursorCollection.Remove(NationalInstruments.UI.IntensityCursor)">
      <summary>
            Removes the first occurrence of the specified item.
            </summary>
      <param name="item">
            Item to remove from the collection.
            </param>
    </member>
    <member name="M:NationalInstruments.UI.IntensityCursorCollection.RemoveAt(System.Int32)">
      <summary>
            Removes the item at the specified index.
            </summary>
      <param name="index">
            The zero-based index of the item to remove.
            </param>
      <exception cref="T:System.ArgumentOutOfRangeException">index (parameter) is less than zero.
            
            -or-
            

index (parameter) is greater than or equal to Count.
            


            -or-
            index (parameter) is greater than or equal to Count.
            </exception>
    </member>
    <member name="P:NationalInstruments.UI.IntensityCursorCollection.Item(System.Int32)">
      <summary>
            Gets or sets IntensityCursor at the specified index. 
            </summary>
      <param name="index">
            The zero-based index of the entry to locate in the collection.
            </param>
      <exception cref="T:System.ArgumentNullException">
            	The value is null.
            </exception>
      <exception cref="T:System.NotSupportedException">
            		The value has been disposed.
            
            -or-
            
            		The value is in another IntensityCursorCollection.
            
            -or-
            
            		The value is already in this collection.
            </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">index (parameter) is less than zero.
            
            -or-
            

index (parameter) is greater than Count.
            


            -or-
            index (parameter) is greater than Count.
            </exception>
    </member>
    <member name="P:NationalInstruments.UI.IntensityCursorCollection.Count">
      <summary>
            Gets the number of elements in the IntensityCursorCollection.
            </summary>
    </member>
    <member name="P:NationalInstruments.UI.IntensityCursorCollection.IsSynchronized">
      <summary>
            Gets a value indicating whether access to the collection is synchronized
            (thread-safe).
            </summary>
    </member>
    <member name="P:NationalInstruments.UI.IntensityCursorCollection.IsFixedSize">
      <summary>
            Gets a value indicating whether the collection has a fixed size.
            </summary>
    </member>
    <member name="P:NationalInstruments.UI.IntensityCursorCollection.IsReadOnly">
      <summary>
            Gets a value indicating whether the collection is read-only.
            </summary>
    </member>
    <member name="P:NationalInstruments.UI.IntensityCursorCollection.SyncRoot">
      <summary>
            Gets an object that can be used to synchronize access to the collection.
            </summary>
    </member>
    <member name="T:NationalInstruments.UI.FormatStringMode">
      <summary>
            Specifies the format provider to use with a format specifier to format a value.
            </summary>
    </member>
    <member name="F:NationalInstruments.UI.FormatStringMode.Numeric">
      <summary>
            The NumberFormatInfo is used with a format specifier
            to format a value.
            </summary>
    </member>
    <member name="F:NationalInstruments.UI.FormatStringMode.DateTime">
      <summary>
            The DateTimeFormatInfo is used with a format specifier
            to format a value.
            </summary>
    </member>
    <member name="F:NationalInstruments.UI.FormatStringMode.Engineering">
      <summary>
            The EngineeringFormatInfo is used with a format specifier
            to format a value.
            </summary>
    </member>
    <member name="T:NationalInstruments.UI.DigitalWaveformStateManagement">
      <summary>
            Provides an abstract base class for specifying a state management strategy
            for digital waveform data and provides a pre-defined list of state management strategies.
            </summary>
    </member>
    <member name="M:NationalInstruments.UI.DigitalWaveformStateManagement.Save(System.Object,NationalInstruments.UI.DigitalWaveformStateManagementArgs)">
      <summary>
            Saves data as specified by the contextual information that is provided in the specified
            DigitalWaveformStateManagementArgs.
            </summary>
      <param name="context">
            The Object that specifies the context in which
            Save is called.
            </param>
      <param name="args">
            A DigitalWaveformStateManagementArgs that
            contains contextual data for the save operation.
            </param>
      <exception cref="T:System.ArgumentNullException">args (parameter) is null.
            </exception>
    </member>
    <member name="M:NationalInstruments.UI.DigitalWaveformStateManagement.Load(System.Object,NationalInstruments.UI.DigitalWaveformStateManagementArgs)">
      <summary>
            Retrieves data as specified by the contextual information that is provided in the specified
            DigitalWaveformStateManagementArgs.
            </summary>
      <param name="context">
            The Object that specifies the context in which
            Load is called.
            </param>
      <param name="args">
            A DigitalWaveformStateManagementArgs that
            contains contextual data for the load operation.
            </param>
      <exception cref="T:System.ArgumentNullException">args (parameter) is null.
            </exception>
    </member>
    <member name="M:NationalInstruments.UI.DigitalWaveformStateManagement.#ctor">
      <summary>
            Initializes a new instance of the DigitalWaveformStateManagement
            class.
            </summary>
    </member>
    <member name="P:NationalInstruments.UI.DigitalWaveformStateManagement.UnderlyingType">
      <summary>
            Gets the underlying type of an EnumObject value.
            </summary>
    </member>
    <member name="P:NationalInstruments.UI.DigitalWaveformStateManagement.None">
      <summary>
            Gets a data state management strategy that does not save or load the state of the data.
            </summary>
    </member>
    <member name="P:NationalInstruments.UI.DigitalWaveformStateManagement.ServerCache">
      <summary>
            Gets a data state management strategy that uses the ASP.NET cache to save and load data.
            </summary>
    </member>
    <member name="P:NationalInstruments.UI.DigitalWaveformStateManagement.SessionState">
      <summary>
            Gets a data state management strategy that uses the ASP.NET session state to save and load data.
            </summary>
    </member>
    <member name="T:NationalInstruments.UI.DigitalWaveformSampleTransitionStyle">
      <summary>
            Provides an abstract base class for specifying how to connect neighboring samples of a digital waveform 
            and also provides a list of pre-defined transition styles.
            </summary>
    </member>
    <member name="M:NationalInstruments.UI.DigitalWaveformSampleTransitionStyle.#ctor">
      <summary>
            Initializes a new instance of the DigitalWaveformSampleTransitionStyle class.
            </summary>
    </member>
    <member name="M:NationalInstruments.UI.DigitalWaveformSampleTransitionStyle.Draw(System.Object,NationalInstruments.UI.DigitalWaveformSampleTransitionStyleDrawArgs)">
      <summary>
            Draws the transition of digital waveform samples with the specified DigitalWaveformSampleTransitionStyleDrawArgs.
            </summary>
      <param name="context">
            An Object that specifies the context in which Draw is called.
            </param>
      <param name="args">
            A DigitalWaveformSampleTransitionStyleDrawArgs that contains
            the drawing data.
            </param>
      <exception cref="T:System.ArgumentNullException">args (parameter) is null.
            </exception>
    </member>
    <member name="P:NationalInstruments.UI.DigitalWaveformSampleTransitionStyle.TransitionWidth">
      <summary>
            Gets the width between neighboring samples of the digital waveform.
            </summary>
      <exception cref="T:System.ArgumentOutOfRangeException">
            The returned value is less than zero.
            </exception>
    </member>
    <member name="P:NationalInstruments.UI.DigitalWaveformSampleTransitionStyle.UnderlyingType">
      <summary>
            Gets the underlying type of an EnumObject value.
            </summary>
    </member>
    <member name="P:NationalInstruments.UI.DigitalWaveformSampleTransitionStyle.SlopedEdge">
      <summary>
            Gets a style that draws the transition of digital waveform samples using sloped edges.
            </summary>
    </member>
    <member name="P:NationalInstruments.UI.DigitalWaveformSampleTransitionStyle.StraightEdge">
      <summary>
            Gets a style that draws the transition of digital waveform samples using straight edges.
            </summary>
    </member>
    <member name="T:NationalInstruments.UI.DigitalPlotLabelMode">
      <summary>
            Provides an abstract base class for specifying a plot label mode
            and provides a list of pre-defined label modes.
            </summary>
    </member>
    <member name="M:NationalInstruments.UI.DigitalPlotLabelMode.#ctor">
      <summary>
            Initializes a new instance of the DigitalPlotLabelMode class.
            </summary>
    </member>
    <member name="M:NationalInstruments.UI.DigitalPlotLabelMode.GetWaveformPlotLabel(System.Object,NationalInstruments.UI.DigitalPlotLabelModeArgs)">
      <summary>
            Returns the waveform plot label string to display.
            </summary>
      <param name="context">
            An Object that specifies the context in which GetWaveformPlotLabel is called.
            </param>
      <param name="args">
            A DigitalPlotLabelModeArgs that contains information about the waveform plot.
            </param>
      <returns>
            The waveform plot label to display.
            </returns>
    </member>
    <member name="M:NationalInstruments.UI.DigitalPlotLabelMode.GetSignalPlotLabel(System.Object,NationalInstruments.UI.DigitalPlotLabelModeArgs)">
      <summary>
            Returns the signal plot label string to display.
            </summary>
      <param name="context">
            An Object that specifies the context in which GetSignalPlotLabel is called.
            </param>
      <param name="args">
            A DigitalPlotLabelModeArgs that contains information about the signal plot.
            </param>
      <returns>
            The signal plot label to display.
            </returns>
    </member>
    <member name="P:NationalInstruments.UI.DigitalPlotLabelMode.UnderlyingType">
      <summary>
            Gets the underlying type of an EnumObject value.
            </summary>
    </member>
    <member name="P:NationalInstruments.UI.DigitalPlotLabelMode.None">
      <summary>
            Gets a mode that returns an empty string for the plot label.
            </summary>
    </member>
    <member name="P:NationalInstruments.UI.DigitalPlotLabelMode.Waveform">
      <summary>
            Gets a mode that returns the value of the waveform channel name or the signal name for the digital plot label.
            </summary>
    </member>
    <member name="P:NationalInstruments.UI.DigitalPlotLabelMode.Plots">
      <summary>
            Gets a mode that returns the value of Label for the digital plot label.
            </summary>
    </member>
    <member name="P:NationalInstruments.UI.DigitalPlotLabelMode.WaveformOrPlots">
      <summary>
            Gets a mode that returns the value of the waveform channel name or the signal name for the digital plot label. If the names are not available, the mode returns the value
            of Label.
             
            </summary>
    </member>
    <member name="T:NationalInstruments.UI.DigitalAxisMode">
      <summary>
            Specifies the scaling mode of the digital axis.
            </summary>
    </member>
    <member name="F:NationalInstruments.UI.DigitalAxisMode.Fixed">
      <summary>
            The digital axis fixes the range to the existing range. The range is never updated.
            </summary>
    </member>
    <member name="F:NationalInstruments.UI.DigitalAxisMode.AutoScaleLoose">
      <summary>
            The digital axis automatically updates the range so that the range extends beyond the exact calculated data values. 
            </summary>
    </member>
    <member name="F:NationalInstruments.UI.DigitalAxisMode.AutoScaleExact">
      <summary>
            The digital axis automatically updates the range to the exact calculated values.
            </summary>
    </member>
    <member name="T:NationalInstruments.UI.ControlArrayLayoutMode">
      <summary>
            Specifies the layout of the controls in an array.
            </summary>
    </member>
    <member name="F:NationalInstruments.UI.ControlArrayLayoutMode.Horizontal">
      <summary>
            The controls are laid out horizontally.
            </summary>
    </member>
    <member name="F:NationalInstruments.UI.ControlArrayLayoutMode.Vertical">
      <summary>
            The controls are laid out vertically.
            </summary>
    </member>
    <member name="T:NationalInstruments.UI.ComplexRangeAnnotation">
      <summary>
            Represents an annotation that highlights a range of values.
            </summary>
    </member>
    <member name="M:NationalInstruments.UI.ComplexRangeAnnotation.#ctor">
      <summary>
            Initializes a new instance of the ComplexRangeAnnotation class.
            </summary>
    </member>
    <member name="M:NationalInstruments.UI.ComplexRangeAnnotation.#ctor(NationalInstruments.UI.ComplexXAxis,NationalInstruments.UI.ComplexYAxis)">
      <summary>
            Initializes a new instance of the ComplexRangeAnnotation class with the specified
            ComplexXAxis and ComplexYAxis.
            </summary>
      <param name="complexXAxis">
            The ComplexXAxis of the annotation.
            </param>
      <param name="complexYAxis">
            The ComplexYAxis of the annotation.
            </param>
    </member>
    <member name="M:NationalInstruments.UI.ComplexRangeAnnotation.#ctor(NationalInstruments.UI.ComplexXAxis,NationalInstruments.UI.ComplexYAxis,NationalInstruments.UI.Range,NationalInstruments.UI.Range)">
      <summary>
            Initializes a new instance of the ComplexRangeAnnotation class with the specified
            ComplexXAxis, ComplexYAxis, XRange, and YRange.
            </summary>
      <param name="complexXAxis">
            The ComplexXAxis of the annotation.
            </param>
      <param name="complexYAxis">
            The ComplexYAxis of the annotation.
            </param>
      <param name="complexXRange">
            The XRange of the annotation.
            </param>
      <param name="complexYRange">
            The YRange of the annotation.
            </param>
      <exception cref="T:System.ArgumentNullException">complexXRange (parameter) or complexYRange (parameter) is null.
            </exception>
      <exception cref="T:System.ArgumentException">complexXRange (parameter) or complexYRange (parameter) is Empty.
            </exception>
    </member>
    <member name="M:NationalInstruments.UI.ComplexRangeAnnotation.Clone">
      <summary>
            Creates a new object that is a copy of this instance.
            </summary>
      <returns>
            A new object that is a copy of this instance.
            </returns>
      <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
    </member>
    <member name="M:NationalInstruments.UI.ComplexRangeAnnotation.FormatDataToolTip(NationalInstruments.UI.Range,NationalInstruments.UI.Range)">
      <summary>
            Formats an x-range and y-range data value pair as a ComplexRangeAnnotation data tooltip.
            </summary>
      <param name="complexXRange">
            The x-range data value to format.
            </param>
      <param name="complexYRange">
            The y-range data value to format.
            </param>
      <returns>
            A String that contains the specified x-range and y-range data values formatted as
            a data tooltip. The tooltip format is specified by the current values of the label format of 
            XAxis and YAxis.
            </returns>
      <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
    </member>
    <member name="M:NationalInstruments.UI.ComplexRangeAnnotation.Dispose(System.Boolean)">
      <summary>
            Releases the resources used by the ComplexRangeAnnotation.
            </summary>
      <param name="disposing">
            If true, this method releases managed and unmanaged resources. If false, this method releases
            only unmanaged resources.
            </param>
    </member>
    <member name="M:NationalInstruments.UI.ComplexRangeAnnotation.OnBeforeDraw(NationalInstruments.UI.BeforeDrawComplexRangeAnnotationEventArgs)">
      <summary>
            Raises the BeforeDraw event.
            </summary>
      <param name="e">
            A BeforeDrawComplexRangeAnnotationEventArgs that contains the event data.
            </param>
      <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
    </member>
    <member name="M:NationalInstruments.UI.ComplexRangeAnnotation.OnAfterDraw(NationalInstruments.UI.AfterDrawComplexRangeAnnotationEventArgs)">
      <summary>
            Raises the AfterDraw event.
            </summary>
      <param name="e">
            An AfterDrawComplexRangeAnnotationEventArgs that contains the event data.
            </param>
      <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
    </member>
    <member name="P:NationalInstruments.UI.ComplexRangeAnnotation.XRange">
      <summary>
            Gets or sets the minimum and maximum x-axis values of the annotation.
            </summary>
      <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
      <exception cref="T:System.ArgumentNullException">value (parameter) is null.
            </exception>
      <exception cref="T:System.ArgumentException">value (parameter) is Empty.
            </exception>
    </member>
    <member name="P:NationalInstruments.UI.ComplexRangeAnnotation.YRange">
      <summary>
            Gets or sets the minimum and maximum y-axis values of the annotation.
            </summary>
      <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
      <exception cref="T:System.ArgumentNullException">value (parameter) is null.
            </exception>
      <exception cref="T:System.ArgumentException">value (parameter) is Empty.
            </exception>
    </member>
    <member name="P:NationalInstruments.UI.ComplexRangeAnnotation.AutoHide">
      <summary>
            Gets or sets a value indicating if the annotation is hidden when the range of interest is not located
            inside the plot area bounds. 
            </summary>
      <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
    </member>
    <member name="P:NationalInstruments.UI.ComplexRangeAnnotation.RangeFillColor">
      <summary>
            Gets or sets the color used to fill the range area.
            </summary>
      <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
    </member>
    <member name="P:NationalInstruments.UI.ComplexRangeAnnotation.RangeFillStyle">
      <summary>
            Gets or sets the style used to draw the fill color of the range area.
            </summary>
      <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
      <exception cref="T:System.ArgumentNullException">value (parameter) is null.
            </exception>
    </member>
    <member name="P:NationalInstruments.UI.ComplexRangeAnnotation.RangeLineColor">
      <summary>
            Gets or sets the color of the line that borders the range area.
            </summary>
      <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
    </member>
    <member name="P:NationalInstruments.UI.ComplexRangeAnnotation.RangeLineStyle">
      <summary>
            Gets or sets the style of the line that borders the range area.
            </summary>
      <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
      <exception cref="T:System.ArgumentNullException">value (parameter) is null.
            </exception>
    </member>
    <member name="P:NationalInstruments.UI.ComplexRangeAnnotation.RangeLineWidth">
      <summary>
            Gets or sets the width of the line that borders the range area.
            </summary>
      <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
            The specified value is less than or equal to zero.
            
            -or-
            
            The specified value is NaN, NegativeInfinity,
            or PositiveInfinity.
            </exception>
    </member>
    <member name="P:NationalInstruments.UI.ComplexRangeAnnotation.RangeZOrder">
      <summary>
            Gets or sets a value indicating if the range area is drawn above or below all plots.
            </summary>
      <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
      <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
            The specified value is not an AnnotationZOrder value.
            </exception>
    </member>
    <member name="P:NationalInstruments.UI.ComplexRangeAnnotation.ArrowHeadAlignment">
      <summary>
            Gets or sets the location of the arrow head in relation to the range bounds.
            </summary>
      <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
      <exception cref="T:System.ArgumentNullException">value (parameter) is null.
            </exception>
    </member>
    <member name="E:NationalInstruments.UI.ComplexRangeAnnotation.BeforeDraw">
      <summary>
            Occurs before the range annotation is drawn.
            </summary>
      <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
    </member>
    <member name="E:NationalInstruments.UI.ComplexRangeAnnotation.AfterDraw">
      <summary>
            Occurs after the range annotation has been drawn.
            </summary>
      <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
    </member>
    <member name="T:NationalInstruments.UI.ComplexPointAnnotation">
      <summary>
            Represents an annotation for a (x, y) data point.
            </summary>
    </member>
    <member name="M:NationalInstruments.UI.ComplexPointAnnotation.#ctor">
      <summary>
            Initializes a new instance of the ComplexPointAnnotation class.
            </summary>
    </member>
    <member name="M:NationalInstruments.UI.ComplexPointAnnotation.#ctor(NationalInstruments.UI.ComplexXAxis,NationalInstruments.UI.ComplexYAxis)">
      <summary>
            Initializes a new instance of the ComplexPointAnnotation class with the specified
            ComplexXAxis and ComplexYAxis.
            </summary>
      <param name="complexXAxis">
            The ComplexXAxis of the annotation.
            </param>
      <param name="complexYAxis">
            The ComplexYAxis of the annotation.
            </param>
    </member>
    <member name="M:NationalInstruments.UI.ComplexPointAnnotation.#ctor(NationalInstruments.UI.ComplexXAxis,NationalInstruments.UI.ComplexYAxis,NationalInstruments.ComplexDouble)">
      <summary>
            Initializes a new instance of the ComplexPointAnnotation class with the specified
            ComplexXAxis, ComplexYAxis, and Position.
            </summary>
      <param name="complexXAxis">
            The ComplexXAxis of the annotation.
            </param>
      <param name="complexYAxis">
            The ComplexYAxis of the annotation.
            </param>
      <param name="position">
            The Position of the annotation.
            </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
            The specified position (parameter) is NaN, NegativeInfinity,
            or PositiveInfinity. 
            </exception>
    </member>
    <member name="M:NationalInstruments.UI.ComplexPointAnnotation.Clone">
      <summary>
            Creates a new object that is a copy of this instance.
            </summary>
      <returns>
            A new object that is a copy of this instance.
            </returns>
      <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
    </member>
    <member name="M:NationalInstruments.UI.ComplexPointAnnotation.GetService(System.Type)">
      <summary>
            Gets the service object of the specified type.
            </summary>
      <param name="service">
            A service provided by the component.
            </param>
      <returns>
            An Object that represents the service provided by the component or 
            null if the component does not provide the 
            specified service.
            </returns>
    </member>
    <member name="M:NationalInstruments.UI.ComplexPointAnnotation.SetPosition(NationalInstruments.ComplexDouble)">
      <summary>
            Sets the location of the point to annotate.
            </summary>
      <param name="position">
            The location of the point to annotate.
            </param>
      <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
    </member>
    <member name="M:NationalInstruments.UI.ComplexPointAnnotation.FormatDataToolTip(NationalInstruments.ComplexDouble)">
      <summary>
            Formats a complex double data value as a ComplexPointAnnotation data tooltip.
            </summary>
      <param name="data">
            The complex double data value to format.
            </param>
      <returns>
            A String that contains the specified complex double data value formatted as
            a data tooltip. The tooltip format is as specified by the ToolTipFormatString
            property.
            </returns>
      <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
    </member>
    <member name="M:NationalInstruments.UI.ComplexPointAnnotation.Dispose(System.Boolean)">
      <summary>
            Releases the resources used by the ComplexPointAnnotation.
            </summary>
      <param name="disposing">
            If true, this method releases managed and unmanaged resources. If false, this method releases
            only unmanaged resources.
            </param>
    </member>
    <member name="M:NationalInstruments.UI.ComplexPointAnnotation.OnBeforeDraw(NationalInstruments.UI.BeforeDrawComplexPointAnnotationEventArgs)">
      <summary>
            Raises the BeforeDraw event.
            </summary>
      <param name="e">
            A BeforeDrawComplexPointAnnotationEventArgs that contains the event data.
            </param>
      <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
    </member>
    <member name="M:NationalInstruments.UI.ComplexPointAnnotation.OnAfterDraw(NationalInstruments.UI.AfterDrawComplexPointAnnotationEventArgs)">
      <summary>
            Raises the AfterDraw event.
            </summary>
      <param name="e">
            An AfterDrawComplexPointAnnotationEventArgs that contains the event data.
            </param>
      <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
    </member>
    <member name="P:NationalInstruments.UI.ComplexPointAnnotation.Position">
      <summary>
            Gets or sets the location of the annotation in data coordinates.
            </summary>
      <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
            The specified value is NaN, NegativeInfinity,
            or PositiveInfinity.
            </exception>
    </member>
    <member name="P:NationalInstruments.UI.ComplexPointAnnotation.AutoHide">
      <summary>
            Gets or sets a value indicating if the annotation is hidden when the point of interest is not located
            inside the plot area bounds. 
            </summary>
      <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
    </member>
    <member name="P:NationalInstruments.UI.ComplexPointAnnotation.ArrowHeadPosition">
      <summary>
            Gets or sets the position of the arrow head relative to the bounds of the shape.
            </summary>
      <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
      <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
            The specified value is not an ComplexArrowHeadPosition value.
            </exception>
    </member>
    <member name="P:NationalInstruments.UI.ComplexPointAnnotation.ShapeFillColor">
      <summary>
            Gets or sets the color used to fill the shape.
            </summary>
      <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
    </member>
    <member name="P:NationalInstruments.UI.ComplexPointAnnotation.ShapeFillStyle">
      <summary>
            Gets or sets the style used to draw the fill color of the shape.
            </summary>
      <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
      <exception cref="T:System.ArgumentNullException">value (parameter) is null.
            </exception>
    </member>
    <member name="P:NationalInstruments.UI.ComplexPointAnnotation.ShapeLineColor">
      <summary>
            Gets or sets the color of the line that outlines the shape.
            </summary>
      <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
    </member>
    <member name="P:NationalInstruments.UI.ComplexPointAnnotation.ShapeLineStyle">
      <summary>
            Gets or sets the style of the line that outlines the shape.
            </summary>
      <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
      <exception cref="T:System.ArgumentNullException">value (parameter) is null.
            </exception>
    </member>
    <member name="P:NationalInstruments.UI.ComplexPointAnnotation.ShapeLineWidth">
      <summary>
            Gets or sets the width of the line that outlines the shape.
            </summary>
      <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
            The specified value is less than or equal to zero.
            
            -or-
            
            The specified value is NaN, NegativeInfinity,
            or PositiveInfinity.
            </exception>
    </member>
    <member name="P:NationalInstruments.UI.ComplexPointAnnotation.ShapeZOrder">
      <summary>
            Gets or sets a value indicating if the shape is drawn above or below all plots.
            </summary>
      <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
      <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
            The specified value is not an AnnotationZOrder value.
            </exception>
    </member>
    <member name="P:NationalInstruments.UI.ComplexPointAnnotation.ShapeSize">
      <summary>
            Gets or sets the size of the shape.
            </summary>
      <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
            The specified value is Empty.
            
            -or-
            
            The Width is negative.
            
            -or-
            
            The Height is negative.
            </exception>
    </member>
    <member name="P:NationalInstruments.UI.ComplexPointAnnotation.ShapeStyle">
      <summary>
            Gets or sets the style of the shape.
            </summary>
      <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
      <exception cref="T:System.ArgumentNullException">value (parameter) is null.
            </exception>
    </member>
    <member name="P:NationalInstruments.UI.ComplexPointAnnotation.ShapeXOffset">
      <summary>
            Gets or sets the x offset of the shape.
            </summary>
      <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
            The specified value is NaN, NegativeInfinity,
            or PositiveInfinity.
            </exception>
    </member>
    <member name="P:NationalInstruments.UI.ComplexPointAnnotation.ShapeYOffset">
      <summary>
            Gets or sets the y offset of the shape.
            </summary>
      <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
            The specified value is NaN, NegativeInfinity,
            or PositiveInfinity.
            </exception>
    </member>
    <member name="P:NationalInstruments.UI.ComplexPointAnnotation.ShapeRotation">
      <summary>
            Gets or sets the angle at which to rotate the shape.
            </summary>
      <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
            The specified value is NaN, NegativeInfinity,
            or PositiveInfinity.
            </exception>
    </member>
    <member name="P:NationalInstruments.UI.ComplexPointAnnotation.ShapeVisible">
      <summary>
            Gets or sets a value indicating if the shape is visible. 
            </summary>
      <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
    </member>
    <member name="P:NationalInstruments.UI.ComplexPointAnnotation.ToolTipFormatString">
      <summary>
            Gets or sets the format string that is used to format the 
            ComplexPointAnnotation tool tip.
            </summary>
      <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
      <exception cref="T:System.FormatException">
            The format string is not well formed.
            </exception>
    </member>
    <member name="E:NationalInstruments.UI.ComplexPointAnnotation.BeforeDraw">
      <summary>
            Occurs before the point annotation is drawn.
            </summary>
      <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
    </member>
    <member name="E:NationalInstruments.UI.ComplexPointAnnotation.AfterDraw">
      <summary>
            Occurs after the point annotation has been drawn.
            </summary>
      <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
    </member>
    <member name="T:NationalInstruments.UI.GraphAction">
      <summary>
            Specifies the action source which caused the range changed event on a graph.
            </summary>
    </member>
    <member name="F:NationalInstruments.UI.GraphAction.InteractiveZoom">
      <summary>
            The action was caused by interactively zooming.
            </summary>
    </member>
    <member name="F:NationalInstruments.UI.GraphAction.UndoInteractiveZoom">
      <summary>
            The action was caused by interactively performing undo zoom.
            </summary>
    </member>
    <member name="F:NationalInstruments.UI.GraphAction.InteractivePan">
      <summary>
            The action was caused by interactively panning.
            </summary>
    </member>
    <member name="F:NationalInstruments.UI.GraphAction.UndoInteractivePan">
      <summary>
            The action was caused by interactively performing undo pan.
            </summary>
    </member>
    <member name="F:NationalInstruments.UI.GraphAction.InteractiveEdit">
      <summary>
            The action was caused by interactively editing the range.
            </summary>
    </member>
    <member name="F:NationalInstruments.UI.GraphAction.Programmatic">
      <summary>
            The action was caused by a programmatic modification.
            </summary>
    </member>
    <member name="F:NationalInstruments.UI.GraphAction.UndoProgrammatic">
      <summary>
            The action was caused by programmatic undo.
            </summary>
    </member>
    <member name="T:NationalInstruments.UI.IntensityAnnotation">
      <summary>
            Provides an abstract base class for annotations that are displayed with 
            respect to an XAxis and a 
            YAxis.
            </summary>
    </member>
    <member name="M:NationalInstruments.UI.IntensityAnnotation.#ctor">
      <summary>
            Initializes a new instance of the IntensityAnnotation class.
            </summary>
    </member>
    <member name="M:NationalInstruments.UI.IntensityAnnotation.#ctor(NationalInstruments.UI.IntensityXAxis,NationalInstruments.UI.IntensityYAxis)">
      <summary>
            Initializes a new instance of the IntensityAnnotation class with the specified
            IntensityXAxis and IntensityYAxis.
            </summary>
      <param name="xAxis">
            The IntensityXAxis of the annotation.
            </param>
      <param name="yAxis">
            The IntensityYAxis of the annotation.
            </param>
    </member>
    <member name="M:NationalInstruments.UI.IntensityAnnotation.Dispose(System.Boolean)">
      <summary>
            Releases the resources used by IntensityAnnotation.
            </summary>
      <param name="disposing">
            If true, this method releases managed and unmanaged resources. If false, this method releases
            only unmanaged resources.
            </param>
    </member>
    <member name="M:NationalInstruments.UI.IntensityAnnotation.SetCaptionPosition(System.Double,System.Double)">
      <summary>
            Sets the location of the caption based on a value relative to the annotation axis.
            </summary>
      <param name="xPosition">
            The location on the XAxis to position the caption, in data coordinates.
            </param>
      <param name="yPosition">
            The location on the YAxis to position the caption, in data coordinates.
            </param>
      <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">xPosition (parameter) or yPosition (parameter) is
            NaN,
            NegativeInfinity, or
            PositiveInfinity.
                </exception>
    </member>
    <member name="M:NationalInstruments.UI.IntensityAnnotation.OnBeforeDragCaption(NationalInstruments.UI.BeforeDragIntensityAnnotationCaptionEventArgs)">
      <summary>
            Raises the BeforeDragCaption event.
            </summary>
      <param name="e">
            An BeforeDragIntensityAnnotationCaptionEventArgs 
            that contains the event data.
            </param>
      <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
    </member>
    <member name="M:NationalInstruments.UI.IntensityAnnotation.OnAfterDragCaption(NationalInstruments.UI.AfterDragIntensityAnnotationCaptionEventArgs)">
      <summary>
            Raises the AfterDragCaption event.
            </summary>
      <param name="e">
            An AfterDragIntensityAnnotationCaptionEventArgs 
            that contains the event data.
            </param>
      <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
    </member>
    <member name="P:NationalInstruments.UI.IntensityAnnotation.XAxis">
      <summary>
            Gets or sets the x-axis that determines where to draw the annotation.
            </summary>
      <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
    </member>
    <member name="P:NationalInstruments.UI.IntensityAnnotation.YAxis">
      <summary> 
            Gets or sets the y-axis that determines where to draw the annotation.
            </summary>
      <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
    </member>
    <member name="E:NationalInstruments.UI.IntensityAnnotation.BeforeDragCaption">
      <summary>
            Occurs before Caption is dragged.
            </summary>
      <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
    </member>
    <member name="E:NationalInstruments.UI.IntensityAnnotation.AfterDragCaption">
      <summary>
            Occurs after Caption is dragged.
            </summary>
      <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
    </member>
    <member name="T:NationalInstruments.UI.AfterDrawIntensityPointAnnotationEventArgs">
      <summary>
            Provides data for events that occur after the point annotation draws.
            </summary>
    </member>
    <member name="M:NationalInstruments.UI.AfterDrawIntensityPointAnnotationEventArgs.#ctor(System.Drawing.Graphics,System.Drawing.Rectangle,NationalInstruments.UI.IntensityPointAnnotation,NationalInstruments.UI.IntensityPointAnnotationPart,System.Drawing.PointF,System.Drawing.PointF,System.Drawing.PointF,System.Drawing.Size,System.Single,System.Drawing.PointF,System.Drawing.Size,System.Drawing.PointF[])">
      <summary>
            Initializes a new instance of the AfterDrawIntensityPointAnnotationEventArgs class with the specified graphics, bounds, 
            annotation, annotation part, arrow head point, arrow tail point, caption point, caption size, caption angle, 
            shape point, shape size, and shape points.
            </summary>
      <param name="graphics">
            The Graphics used to draw the item.
            </param>
      <param name="bounds">
            The Rectangle that represents the bounds in which to draw.
            </param>
      <param name="annotation">
            The IntensityPointAnnotation for which the event is occurring.
            </param>
      <param name="annotationPart">
            The IntensityPointAnnotationPart of the annotation that was drawn.
            </param>
      <param name="arrowHeadPoint">
            The Point at which the arrow head was drawn.
            </param>
      <param name="arrowTailPoint">
            The Point where the arrow tail is located.
            </param>
      <param name="captionPoint">
            The Point at which the caption was drawn.
            </param>
      <param name="captionSize">
            The Size of the Rectangle in which to draw the caption.
            </param>
      <param name="captionAngle">
            The angle at which to draw the caption.
            </param>
      <param name="shapePoint">
            The Point at which the shape was drawn.
            </param>
      <param name="shapeSize">
            The Size of the shape that was drawn.
            </param>
      <param name="shapePoints">
            The Point array that defines the shape that was drawn.
            </param>
      <exception cref="T:System.ArgumentNullException">annotation (parameter) is null.
            	-or-graphics (parameter) is null.
            	</exception>
      <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">annotationPart (parameter) is not one of the IntensityPointAnnotationPart values.
            	</exception>
    </member>
    <member name="P:NationalInstruments.UI.AfterDrawIntensityPointAnnotationEventArgs.Annotation">
      <summary>
            Gets the IntensityPointAnnotation that was drawn.
            </summary>
    </member>
    <member name="P:NationalInstruments.UI.AfterDrawIntensityPointAnnotationEventArgs.Part">
      <summary>
            Gets the part of the annotation that was drawn.
            </summary>
    </member>
    <member name="P:NationalInstruments.UI.AfterDrawIntensityPointAnnotationEventArgs.CaptionSize">
      <summary>
            Gets the size of the rectangle in which the caption was drawn.
            </summary>
    </member>
    <member name="P:NationalInstruments.UI.AfterDrawIntensityPointAnnotationEventArgs.CaptionAngle">
      <summary>
            Gets the angle at which the caption was drawn.
            </summary>
    </member>
    <member name="P:NationalInstruments.UI.AfterDrawIntensityPointAnnotationEventArgs.ShapePoint">
      <summary>
            Gets the point at which the shape was drawn.
            </summary>
    </member>
    <member name="P:NationalInstruments.UI.AfterDrawIntensityPointAnnotationEventArgs.ShapeSize">
      <summary>
            Gets the size of the shape that was drawn.
            </summary>
    </member>
    <member name="P:NationalInstruments.UI.AfterDrawIntensityPointAnnotationEventArgs.ArrowHeadPoint">
      <summary>
            Gets the point at which the arrow head was drawn.
            </summary>
    </member>
    <member name="P:NationalInstruments.UI.AfterDrawIntensityPointAnnotationEventArgs.ArrowTailPoint">
      <summary>
            Gets the point at which the arrow tail is located.
            </summary>
    </member>
    <member name="P:NationalInstruments.UI.AfterDrawIntensityPointAnnotationEventArgs.CaptionPoint">
      <summary>
            Gets the point at which the caption was drawn.
            </summary>
    </member>
    <member name="P:NationalInstruments.UI.AfterDrawIntensityPointAnnotationEventArgs.ShapePoints">
      <summary>
            Gets the array of points used to define the shape that was drawn.
            </summary>
    </member>
    <member name="T:NationalInstruments.UI.AfterDragIntensityAnnotationCaptionEventHandler">
      <summary>
            Represents the method that handles the events that occur after an annotation caption is dragged.
            </summary>
      <param name="sender">
            The source of the event.
            </param>
      <param name="e">
            An AfterDragIntensityAnnotationCaptionEventArgs that contains the event data.
            </param>
    </member>
    <member name="T:NationalInstruments.UI.ColorScale">
      <summary>
            Represents the third axis on an intensity graph, where a value corresponds to a color.
            </summary>
    </member>
    <member name="M:NationalInstruments.UI.ColorScale.#ctor">
      <summary>
            Initializes a new instance of the ColorScale class.
            </summary>
    </member>
    <member name="M:NationalInstruments.UI.ColorScale.GetColor(System.Double)">
      <summary>
            Returns a color that corresponds to the color the specified value is mapped to on the intensity graph.
            </summary>
      <param name="value">
            The value to map to a color on the intensity graph.
            </param>
      <returns>
            A Color that corresponds to the value.
            </returns>
      <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
    </member>
    <member name="M:NationalInstruments.UI.ColorScale.GetColors(System.Double[])">
      <summary>
            Returns an array of colors that corresponds to the array of colors the specified values are mapped to on the intensity graph.
            </summary>
      <param name="values">
            An array of values to map to an array of colors.
            </param>
      <returns>
            An array of colors that corresponds to values (parameter).
            </returns>
      <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
      <exception cref="T:System.ArgumentNullException">values (parameter) is null.
            </exception>
    </member>
    <member name="M:NationalInstruments.UI.ColorScale.ScaleColorScale(NationalInstruments.UI.Range)">
      <summary>
            Scales every ColorMapEntry object in ColorMap 
            from Range to the specified range on the intensity graph.
            </summary>
      <param name="range">
            The range value used to scale every ColorMapEntry object in 
            ColorMap.
            </param>
      <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
      <exception cref="T:System.ArgumentNullException">range (parameter) is null.
            </exception>
      <exception cref="T:System.ArgumentException">
            The specified value is Empty.
            </exception>
    </member>
    <member name="M:NationalInstruments.UI.ColorScale.Draw(NationalInstruments.UI.ComponentDrawArgs,NationalInstruments.UI.ColorScalePosition)">
      <summary>
            Draws the color scale with the specified ColorScalePosition.
            </summary>
      <param name="args">
            A ComponentDrawArgs that contains the 
            drawing data.
            </param>
      <param name="position">
            The position of the color scale with respect to the plot area of the graph.
            </param>
      <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
      <exception cref="T:System.ArgumentNullException">args (parameter) is null.
            </exception>
      <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">position (parameter) is not a valid ColorScalePosition value.
            </exception>
    </member>
    <member name="M:NationalInstruments.UI.ColorScale.GetSize(NationalInstruments.UI.ColorScalePosition)">
      <summary>
            Returns the size of the ColorScale at the specified position.
            </summary>
      <param name="position">
            A ColorScalePosition that indicates the position of the ColorScale
            for which the size is returned.
            </param>
      <returns>
            The Size of the ColorScale.
            </returns>
      <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
      <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">position (parameter) is not a valid ColorScalePosition value.
            </exception>
    </member>
    <member name="M:NationalInstruments.UI.ColorScale.GetBounds(NationalInstruments.UI.ColorScalePosition)">
      <summary>
            Returns the bounds of the ColorScale at the specified position.
            </summary>
      <param name="position">
            A ColorScalePosition that indicates the position of the ColorScale
             for which the bounds are returned.
            </param>
      <returns>
            A Rectangle that represents the bounds of the ColorScale.
            </returns>
      <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
      <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">position (parameter) is an invalid ColorScalePosition value.
            </exception>
    </member>
    <member name="M:NationalInstruments.UI.ColorScale.GetBounds(System.Drawing.Graphics,System.Drawing.Rectangle)">
      <summary>
            Returns the bounds of the ColorScale relative to a reference rectangle with the specified graphics object.
            </summary>
      <param name="graphics">
            The Graphics object used to calculate the bounds of the color scale.
            </param>
      <param name="referenceRectangle">
            A Rectangle that provides a reference for the bounds of the ColorScale.
            </param>
      <returns>
            A Rectangle that provides a reference for the bounds of the ColorScale.
            </returns>
      <exception cref="T:System.ArgumentNullException">graphics (parameter) is null.
            	</exception>
      <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
    </member>
    <member name="M:NationalInstruments.UI.ColorScale.GetBounds(System.Drawing.Graphics,System.Drawing.Rectangle,NationalInstruments.UI.ColorScalePosition)">
      <summary>
            Returns the bounds of the ColorScale relative to a reference rectangle at the specified position and with the specified graphics object.
            </summary>
      <param name="graphics">
            The Graphics object used to calculate the bounds of the color scale.
            </param>
      <param name="referenceRectangle">
            A Rectangle that provides a reference for the bounds of the ColorScale.
            </param>
      <param name="position">
            A ColorScalePosition that indicates the position of ColorScale
             for which the bounds are returned.
            </param>
      <returns>
            A Rectangle that represents the bounds of ColorScale.
            </returns>
      <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
      <exception cref="T:System.ArgumentNullException">graphics (parameter) or referenceRectangle (parameter) is null.
            	</exception>
      <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">position (parameter) is an invalid ColorScalePosition value.
            </exception>
    </member>
    <member name="M:NationalInstruments.UI.ColorScale.Clone">
      <summary>
            Creates a new object that is a deep copy of this instance.
            </summary>
      <returns>
            A new object that is a deep copy of this instance.
            </returns>
    </member>
    <member name="M:NationalInstruments.UI.ColorScale.ToString">
      <summary>
            Returns a string representation of the object.
            </summary>
      <returns>
            A string representation of the object.
            </returns>
      <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
    </member>
    <member name="P:NationalInstruments.UI.ColorScale.ScaleType">
      <summary>
            Gets or sets the type of scale to use on the intensity graph color scale.
            </summary>
      <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
      <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
            The specified value is not a ScaleType value.
            </exception>
    </member>
    <member name="P:NationalInstruments.UI.ColorScale.ColorMap">
      <summary>
            Gets the IntensityColorMap collection that defines the color values to map.
            </summary>
      <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
    </member>
    <member name="P:NationalInstruments.UI.ColorScale.Border">
      <summary>
            Gets or sets the border style of the color scale.
            </summary>
      <exception cref="T:System.ArgumentNullException">
            The specified Border is null.
            </exception>
      <exception cref="T:System.ObjectDisposedException">
            The object has been disposed. 
            </exception>
    </member>
    <member name="P:NationalInstruments.UI.ColorScale.Position">
      <summary>
            Gets or sets the position of the color scale.
            </summary>
      <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
      <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
            The specified value is not a ColorScalePosition value.
            </exception>
    </member>
    <member name="P:NationalInstruments.UI.ColorScale.LowColor">
      <summary>
            Gets or sets the color that corresponds to any value less than or equal to the Minimum property of the color scale.
            </summary>
      <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
    </member>
    <member name="P:NationalInstruments.UI.ColorScale.HighColor">
      <summary>
            Gets or sets the color that corresponds to any value that is greater than or equal to the Maximum property of the color scale.
            </summary>
      <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
    </member>
    <member name="P:NationalInstruments.UI.ColorScale.InterpolateColor">
      <summary>
            Gets or sets the interpolation behavior indicating how a value maps to a color 
            if the value does not match entries in the ColorMap
            or the range Minimum or Maximum.
            </summary>
      <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
    </member>
    <member name="P:NationalInstruments.UI.ColorScale.Mode">
      <summary>
            Gets or sets the update mode for the range of the color scale.
            </summary>
      <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
      <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
            The specified value is not a ColorScaleMode value.
            </exception>
    </member>
    <member name="P:NationalInstruments.UI.ColorScale.LeftCaptionOrientation">
      <summary>
            Gets or sets the orientation of the caption displayed by a vertical color scale to the left of the graph.
            </summary>
      <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
      <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
            The specified value is not a VerticalCaptionOrientation value.
            </exception>
    </member>
    <member name="P:NationalInstruments.UI.ColorScale.RightCaptionOrientation">
      <summary>
            Gets or sets the orientation of the caption displayed by a vertical color scale to the right of the graph.
            </summary>
      <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
      <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
            The specified value is not a VerticalCaptionOrientation value.
            </exception>
    </member>
    <member name="P:NationalInstruments.UI.ColorScale.MinimumHeight">
      <summary>
            Gets or sets the minimum height required by ColorScale. 
            </summary>
      <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
            The specified value is less than zero.
            </exception>
    </member>
    <member name="P:NationalInstruments.UI.ColorScale.MinimumWidth">
      <summary>
            Gets or sets the minimum width required by ColorScale. 
            </summary>
      <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
            The specified value is less than zero.
            </exception>
    </member>
    <member name="P:NationalInstruments.UI.ColorScale.Caption">
      <summary>
            Gets or sets the text of the caption that is displayed by the color scale.
            </summary>
      <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
    </member>
    <member name="P:NationalInstruments.UI.ColorScale.CaptionFont">
      <summary>
            Gets or sets the font of the caption that the color scale displays.
            </summary>
      <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
    </member>
    <member name="P:NationalInstruments.UI.ColorScale.CaptionForeColor">
      <summary>
            Gets or sets the foreground color of the caption that the color scale displays.
            </summary>
      <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
    </member>
    <member name="P:NationalInstruments.UI.ColorScale.CaptionBackColor">
      <summary>
            Gets or sets the background color of the caption that is displayed by the color scale.
            </summary>
      <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
    </member>
    <member name="P:NationalInstruments.UI.ColorScale.CaptionVisible">
      <summary>
            Gets or sets a value indicating whether the color scale displays the caption.
            </summary>
      <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
    </member>
    <member name="P:NationalInstruments.UI.ColorScale.AutoSpacingMajorInterval">
      <summary>
            Gets a value indicating the interval between the major divisions of the color scale when AutoSpacing  is true.
            </summary>
      <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
    </member>
    <member name="P:NationalInstruments.UI.ColorScale.AutoSpacingMinorInterval">
      <summary>
            Gets a value indicating the interval between the minor divisions of the color scale when AutoSpacing  is true.
            </summary>
      <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
    </member>
    <member name="P:NationalInstruments.UI.ColorScale.EndLabelsAlwaysVisible">
      <summary>
            Gets or sets a value indicating whether the ticks and labels at the end of the color scale are visible.
            </summary>
      <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
    </member>
    <member name="P:NationalInstruments.UI.ColorScale.MajorDivisions">
      <summary>
            Gets ScaleLabeledDivisions on the color scale.
            </summary>
      <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
    </member>
    <member name="P:NationalInstruments.UI.ColorScale.MinorDivisions">
      <summary>
            Gets the minor ScaleDivisions on the color scale.
            </summary>
      <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
    </member>
    <member name="P:NationalInstruments.UI.ColorScale.CustomDivisions">
      <summary>
            Gets the collection of ScaleCustomDivision objects on the color scale.
            </summary>
      <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
    </member>
    <member name="T:NationalInstruments.UI.ClickEventArgs">
      <summary>
            Provides data for click events.
            </summary>
    </member>
    <member name="M:NationalInstruments.UI.ClickEventArgs.#ctor(System.Int32,System.Int32)">
      <summary>
            Initializes a new instance of ClickEventArgs.
            </summary>
      <param name="x">
            The x-coordinate of the mouse in client pixel coordinates.
            </param>
      <param name="y">
            The y-coordinate of the mouse in client pixel coordinates.
            </param>
    </member>
    <member name="P:NationalInstruments.UI.ClickEventArgs.X">
      <summary>
            Gets the x-coordinate of the mouse during the generating click event.
            </summary>
    </member>
    <member name="P:NationalInstruments.UI.ClickEventArgs.Y">
      <summary>
            Gets the y-coordinate of the mouse during the generating click event.
            </summary>
    </member>
    <member name="T:NationalInstruments.UI.BeforeDrawComplexRangeAnnotationEventHandler">
      <summary>
            Represents the method that handles the events that occur before a complex range annotation draws.
            </summary>
      <param name="sender">
            The source of the event.
            </param>
      <param name="e">
            A BeforeDrawComplexRangeAnnotationEventArgs that contains the event data.
            </param>
    </member>
    <member name="T:NationalInstruments.UI.BeforeDrawComplexPointAnnotationEventHandler">
      <summary>
            Represents the method that handles the events that occur before a point annotation draws.
            </summary>
      <param name="sender">
            The source of the event.
            </param>
      <param name="e">
            A BeforeDrawComplexPointAnnotationEventArgs that contains the event data.
            </param>
    </member>
    <member name="T:NationalInstruments.UI.ArrowHeadPosition">
      <summary>
            Specifies the position of the arrow head.
            </summary>
    </member>
    <member name="F:NationalInstruments.UI.ArrowHeadPosition.XYPosition">
      <summary>
            The arrow head is at the x and y positions of the annotation.
            </summary>
    </member>
    <member name="F:NationalInstruments.UI.ArrowHeadPosition.ShapeBounds">
      <summary>
            The arrow head is on the boundary of the annotation shape.
            </summary>
    </member>
    <member name="T:NationalInstruments.UI.AlignmentArgs">
      <summary>
            Provides the information needed to align items.
            </summary>
    </member>
    <member name="M:NationalInstruments.UI.AlignmentArgs.#ctor(System.Drawing.Rectangle,System.Drawing.PointF,System.Drawing.SizeF,System.Single,System.Single)">
      <summary>
            Initializes a new instance of the AlignmentArgs class with the 
            specified context bounds, item position, item size, x offset, and y offset.
            </summary>
      <param name="contextBounds">
            The bounding context rectangle in which the item is aligned.
            </param>
      <param name="referencePoint">
            The position used in the AdjustPosition method.
            </param>
      <param name="itemSize">
            The Size of the item being aligned.
            </param>
      <param name="xOffset">
            The additional spacing to apply in the X direction.
            </param>
      <param name="yOffset">
            The additional spacing to apply in the Y direction.
            </param>
      <exception cref="T:System.ArgumentOutOfRangeException">Width is negative. 


            -or-
            

Height is negative.
            


            -or-
            	
            The specified xOffset (parameter) or yOffset (parameter) is negative. 


            -or-
            	
            The Width of contextBounds (parameter) is less than zero.
            


            -or-
            


            The Height of contextBounds (parameter) is less than zero.
            

Width is negative. 
            -or-
            Height is negative.
            
            The specified xOffset (parameter) or yOffset (parameter) is negative. 
            The Width of contextBounds (parameter) is less than zero.
            
            -or-
            
            The Height of contextBounds (parameter) is less than zero.
            </exception>
    </member>
    <member name="P:NationalInstruments.UI.AlignmentArgs.ContextBounds">
      <summary>
            Gets the bounding context rectangle in which the item is aligned.
            </summary>
    </member>
    <member name="P:NationalInstruments.UI.AlignmentArgs.ReferencePoint">
      <summary>
            Gets the reference point.
            </summary>
    </member>
    <member name="P:NationalInstruments.UI.AlignmentArgs.ItemSize">
      <summary>
            Gets the size of the item to align.
            </summary>
    </member>
    <member name="P:NationalInstruments.UI.AlignmentArgs.XOffset">
      <summary>
            Gets the spacing to apply in the X direction.
            </summary>
    </member>
    <member name="P:NationalInstruments.UI.AlignmentArgs.YOffset">
      <summary>
            Gets the spacing to apply in the Y direction.
            </summary>
    </member>
    <member name="T:NationalInstruments.UI.AfterDragComplexAnnotationCaptionEventArgs">
      <summary>
            Provides data for the events that occur after the annotation caption has been dragged.
            </summary>
    </member>
    <member name="M:NationalInstruments.UI.AfterDragComplexAnnotationCaptionEventArgs.#ctor(NationalInstruments.UI.ComplexAnnotation,System.Single,System.Single,NationalInstruments.UI.Action)">
      <summary>
            Initializes a new instance of the AfterDragComplexAnnotationCaptionEventArgs
            class with the specified annotation, x offset, y offset, and action that caused the event. 
            </summary>
      <param name="annotation">
            The ComplexAnnotation for which the event is occurring.
            </param>
      <param name="complexXOffset">
            The x offset to where the caption was dragged.
            </param>
      <param name="complexYOffset">
            The y offset to where the caption was dragged.
            </param>
      <param name="action">
            The source of the Action that caused the event.
            </param>
      <exception cref="T:System.ArgumentNullException">annotation (parameter) is null.
            </exception>
    </member>
    <member name="P:NationalInstruments.UI.AfterDragComplexAnnotationCaptionEventArgs.Annotation">
      <summary>
            Gets the ComplexAnnotation whose caption was dragged. 
            </summary>
    </member>
    <member name="P:NationalInstruments.UI.AfterDragComplexAnnotationCaptionEventArgs.ComplexXOffset">
      <summary>
            The x offset to where the caption was dragged.
            </summary>
    </member>
    <member name="P:NationalInstruments.UI.AfterDragComplexAnnotationCaptionEventArgs.ComplexYOffset">
      <summary>
            The y offset to where the caption was dragged.
            </summary>
    </member>
    <member name="T:NationalInstruments.UI.XYPlotFillBase">
      <summary>
            Specifies if the fill is drawn to a base x value, base y value, or base plot.
            </summary>
    </member>
    <member name="F:NationalInstruments.UI.XYPlotFillBase.XValue">
      <summary>
            The base value is an x value.
            </summary>
    </member>
    <member name="F:NationalInstruments.UI.XYPlotFillBase.YValue">
      <summary>
            The base value is a y value.
            </summary>
    </member>
    <member name="F:NationalInstruments.UI.XYPlotFillBase.Plot">
      <summary>
            The base value is a plot.
            </summary>
    </member>
    <member name="M:NationalInstruments.Restricted.EditRangeInfoCollection.System#Collections#IList#Add(System.Object)">
      <summary>
            Adds an item to the end of the collection.
            </summary>
      <param name="item">
            Item to add to the collection.
            </param>
      <returns>
            The array index of the added item.
            </returns>
    </member>
    <member name="M:NationalInstruments.Restricted.EditRangeInfoCollection.System#Collections#IList#Contains(System.Object)">
      <summary>
            Returns if the specified element is in the collection.
            </summary>
      <param name="item">
            Item to locate in the collection.
            </param>
      <returns>true if the collection contains item (parameter).
            </returns>
    </member>
    <member name="M:NationalInstruments.Restricted.EditRangeInfoCollection.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
      <summary>
             Copies the collection to an array or a portion of an array.
             </summary>
      <param name="array">
             Destination array for the collection.
             </param>
      <param name="index">
             Index in the target array at which you want to begin copying the collection to.
             </param>
      <exception cref="T:System.ArgumentException">array (parameter) is multidimensional.
             
             -or-
             index (parameter) is greater than or equal to the array length.
             
             -or-
             
             The number of elements in the collection is greater than the available space between
             index (parameter) and the end of array (parameter).
             </exception>
      <exception cref="T:System.ArgumentNullException">array (parameter) is null.
             </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">index (parameter) is less than zero.
             </exception>
    </member>
    <member name="M:NationalInstruments.Restricted.EditRangeInfoCollection.System#Collections#IList#IndexOf(System.Object)">
      <summary>
            Returns the zero-based index of the first occurrence of an item in the collection.
            </summary>
      <param name="item">
            Item to search for.
            </param>
      <returns>
            Index of the item. If the item is not found, returns -1.
            </returns>
    </member>
    <member name="M:NationalInstruments.Restricted.EditRangeInfoCollection.System#Collections#IList#Insert(System.Int32,System.Object)">
      <summary>
            Inserts an item into the collection at the specified index.
            </summary>
      <param name="index">
            Index to insert the item at.
            </param>
      <param name="item">
            Item to insert into the collection.
            </param>
      <exception cref="T:System.ArgumentOutOfRangeException">index (parameter) is not a valid index in the IList.
            </exception>
    </member>
    <member name="M:NationalInstruments.Restricted.EditRangeInfoCollection.System#Collections#IList#Remove(System.Object)">
      <summary>
            Removes the first occurrence of the specified item.
            </summary>
      <param name="item">
            Item to remove from the collection.
            </param>
    </member>
    <member name="P:NationalInstruments.Restricted.EditRangeInfoCollection.System#Collections#IList#Item(System.Int32)">
      <summary>
            Gets or sets an entry in the collection at the specified index. In Visual C#, this property is the indexer.
            </summary>
      <param name="index">
            Zero-based index of the entry to access in the collection.
            </param>
      <exception cref="T:System.ArgumentOutOfRangeException">index (parameter) is outside the valid range of indexes for the collection.
            </exception>
    </member>
    <member name="P:NationalInstruments.Restricted.EditRangeInfoCollection.System#Collections#ICollection#IsSynchronized">
      <summary>
            Indicates if the EditRangeInfoCollection is
            synchronized (thread-safe).
            </summary>
    </member>
    <member name="P:NationalInstruments.Restricted.EditRangeInfoCollection.System#Collections#IList#IsFixedSize">
      <summary>
            Gets a value indicating if the collection has a fixed size.
            </summary>
    </member>
    <member name="P:NationalInstruments.Restricted.EditRangeInfoCollection.System#Collections#IList#IsReadOnly">
      <summary>
            Gets a value indicating if the collection is read-only.
            </summary>
    </member>
    <member name="P:NationalInstruments.Restricted.EditRangeInfoCollection.System#Collections#ICollection#SyncRoot">
      <summary>
            Gets an object that you can use to synchronize access to the collection.
            </summary>
    </member>
    <member name="T:NationalInstruments.UI.PropertyEditorSourceValueWarningEventArgs">
      <summary>
            Provides data for the warning event of the property editor control to indicate an invalid value.
            </summary>
    </member>
    <member name="M:NationalInstruments.UI.PropertyEditorSourceValueWarningEventArgs.#ctor(System.String)">
      <summary>
            Initializes a new instance of the PropertyEditorSourceValueWarningEventArgs class
            with the string representation of the specified invalid property value.
            </summary>
      <param name="invalidString">
            The String representing the invalid property value.
            </param>
    </member>
    <member name="M:NationalInstruments.UI.PropertyEditorSourceValueWarningEventArgs.#ctor(System.String,System.Object,System.Exception,NationalInstruments.UI.PropertyEditorSourceValueWarningHint)">
      <summary>
            Initializes a new instance of the PropertyEditorSourceValueWarningEventArgs class
            with the string representation of the specified invalid property value, the object representing the invalid property value,
            the exception thrown, and a hint indicating the cause of the event.
            </summary>
      <param name="invalidString">
            The String representing the invalid property value.
            </param>
      <param name="invalidObject">
            The object representing the invalid property value.
            </param>
      <param name="exception">
            The Exception that caused the warning.
            </param>
      <param name="hint">
            The PropertyEditorSourceValueWarningHint value indicating the cause of the warning.
            </param>
    </member>
    <member name="M:NationalInstruments.UI.PropertyEditorSourceValueWarningEventArgs.ToString">
      <summary>
            Returns a string representation of the object.
            </summary>
      <returns>
            A string representation of the object.
            </returns>
    </member>
    <member name="P:NationalInstruments.UI.PropertyEditorSourceValueWarningEventArgs.InvalidValue">
      <summary>
            Gets the string representing the invalid property value.
            </summary>
    </member>
    <member name="P:NationalInstruments.UI.PropertyEditorSourceValueWarningEventArgs.InvalidString">
      <summary>
            Gets the string representing the invalid property value.
            </summary>
    </member>
    <member name="P:NationalInstruments.UI.PropertyEditorSourceValueWarningEventArgs.InvalidObject">
      <summary>
            Gets the object representing the invalid property value.
            </summary>
    </member>
    <member name="P:NationalInstruments.UI.PropertyEditorSourceValueWarningEventArgs.Exception">
      <summary>
            Gets the exception that caused the warning.
            </summary>
    </member>
    <member name="P:NationalInstruments.UI.PropertyEditorSourceValueWarningEventArgs.Hint">
      <summary>
            Gets the hint indicating the cause of the warning.
            </summary>
    </member>
    <member name="T:NationalInstruments.UI.MagnitudeCircleAnnotationPart">
      <summary>
            Specifies a part of a magnitude circle annotation.
            </summary>
    </member>
    <member name="F:NationalInstruments.UI.MagnitudeCircleAnnotationPart.Caption">
      <summary>
            The caption of a magnitude circle annotation.
            </summary>
    </member>
    <member name="F:NationalInstruments.UI.MagnitudeCircleAnnotationPart.Arrow">
      <summary>
            The arrow of a magnitude circle annotation.
            </summary>
    </member>
    <member name="F:NationalInstruments.UI.MagnitudeCircleAnnotationPart.Circle">
      <summary>
            The circle of a magnitude circle annotation.
            </summary>
    </member>
    <member name="T:NationalInstruments.UI.MagnitudeCircleAnnotation">
      <summary>
            Represents an annotation that highlights a circle connecting complex numbers of a certain magnitude in the complex plane.
            </summary>
    </member>
    <member name="M:NationalInstruments.UI.MagnitudeCircleAnnotation.#ctor">
      <summary>
            Initializes a new instance of the MagnitudeCircleAnnotation class.
            </summary>
    </member>
    <member name="M:NationalInstruments.UI.MagnitudeCircleAnnotation.#ctor(NationalInstruments.UI.ComplexXAxis,NationalInstruments.UI.ComplexYAxis)">
      <summary>
            Initializes a new instance of the MagnitudeCircleAnnotation class with the specified
            ComplexXAxis and ComplexYAxis.
            </summary>
      <param name="complexXAxis">
            The ComplexXAxis of the annotation.
            </param>
      <param name="complexYAxis">
            The ComplexYAxis of the annotation.
            </param>
    </member>
    <member name="M:NationalInstruments.UI.MagnitudeCircleAnnotation.#ctor(NationalInstruments.UI.ComplexXAxis,NationalInstruments.UI.ComplexYAxis,System.Double)">
      <summary>
            Initializes a new instance of the MagnitudeCircleAnnotation class with the specified
            ComplexXAxis, ComplexYAxis, and magnitude.
            </summary>
      <param name="complexXAxis">
            The ComplexXAxis of the annotation.
            </param>
      <param name="complexYAxis">
            The ComplexYAxis of the annotation.
            </param>
      <param name="magnitude"> 
            The magnitude value of the annotation.
            </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
            The specified magnitude (parameter) is negative, NaN, NegativeInfinity,
            or PositiveInfinity.
            </exception>
    </member>
    <member name="M:NationalInstruments.UI.MagnitudeCircleAnnotation.Clone">
      <summary>
            Creates a new object that is a copy of this instance.
            </summary>
      <returns>
            A new object that is a copy of this instance.
            </returns>
      <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
    </member>
    <member name="M:NationalInstruments.UI.MagnitudeCircleAnnotation.FormatDataToolTip(System.Double)">
      <summary>
            Formats a double data value as a MagnitudeCircleAnnotation data tooltip.
            </summary>
      <param name="magnitude">
            The data value to format.
            </param>
      <returns>
            A String that contains the specified data values formatted as
            a data tooltip. The tooltip format is specified by the 
            ToolTipMagnitudeFormat property.
            </returns>
      <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
    </member>
    <member name="M:NationalInstruments.UI.MagnitudeCircleAnnotation.Dispose(System.Boolean)">
      <summary>
            Releases the resources used by the MagnitudeCircleAnnotation.
            </summary>
      <param name="disposing">
            If true, this method releases managed and unmanaged resources. If false, this method releases
            only unmanaged resources.
            </param>
    </member>
    <member name="M:NationalInstruments.UI.MagnitudeCircleAnnotation.OnBeforeDraw(NationalInstruments.UI.BeforeDrawMagnitudeCircleAnnotationEventArgs)">
      <summary>
            Raises the BeforeDraw event.
            </summary>
      <param name="e">
            A BeforeDrawMagnitudeCircleAnnotationEventArgs that contains the event data.
            </param>
      <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
    </member>
    <member name="M:NationalInstruments.UI.MagnitudeCircleAnnotation.OnAfterDraw(NationalInstruments.UI.AfterDrawMagnitudeCircleAnnotationEventArgs)">
      <summary>
            Raises the AfterDraw event.
            </summary>
      <param name="e">
            An AfterDrawMagnitudeCircleAnnotationEventArgs that contains the event data.
            </param>
      <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
    </member>
    <member name="P:NationalInstruments.UI.MagnitudeCircleAnnotation.Center">
      <summary>
            Gets or sets the center of the circle annotation.
            </summary>
      <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
    </member>
    <member name="P:NationalInstruments.UI.MagnitudeCircleAnnotation.Magnitude">
      <summary>
            Gets or sets the magnitude of the complex numbers that form the circle in the complex plane.
            </summary>
      <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
            The specified value is negative, NaN, NegativeInfinity,
            or PositiveInfinity.
            </exception>
    </member>
    <member name="P:NationalInstruments.UI.MagnitudeCircleAnnotation.AutoHide">
      <summary>
            Gets or sets a value indicating if the annotation is hidden when the range of interest is not located
            inside the plot area bounds. 
            </summary>
      <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
    </member>
    <member name="P:NationalInstruments.UI.MagnitudeCircleAnnotation.CircleLineColor">
      <summary>
            Gets or sets the color of the circle shape.
            </summary>
      <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
    </member>
    <member name="P:NationalInstruments.UI.MagnitudeCircleAnnotation.CircleLineStyle">
      <summary>
            Gets or sets the style of the circle shape.
            </summary>
      <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
      <exception cref="T:System.ArgumentNullException">value (parameter) is null.
            </exception>
    </member>
    <member name="P:NationalInstruments.UI.MagnitudeCircleAnnotation.CircleLineWidth">
      <summary>
            Gets or sets the width of the circle shape.
            </summary>
      <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
            The specified value is less than or equal to zero.
            
            -or-
            
            The specified value is NaN, NegativeInfinity,
            or PositiveInfinity.
            </exception>
    </member>
    <member name="P:NationalInstruments.UI.MagnitudeCircleAnnotation.CircleZOrder">
      <summary>
            Gets or sets a value indicating if the circle is drawn above or below all plots.
            </summary>
      <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
      <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
            The specified value is not an AnnotationZOrder value.
            </exception>
    </member>
    <member name="P:NationalInstruments.UI.MagnitudeCircleAnnotation.ArrowHeadPosition">
      <summary>
            Gets or sets the position of the arrow head.
            </summary>
      <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
      <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
            The specified value is not an ComplexArrowHeadPosition value.
            </exception>
    </member>
    <member name="P:NationalInstruments.UI.MagnitudeCircleAnnotation.ArrowHeadMagnitude">
      <summary>
            Gets or sets the magnitude of the arrow head data point.
            </summary>
      <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
            The specified value is lesser than 0.
            
            -or-
            
            The specified value is NaN, NegativeInfinity,
            or PositiveInfinity.
            </exception>
    </member>
    <member name="P:NationalInstruments.UI.MagnitudeCircleAnnotation.ArrowHeadPhase">
      <summary>
            Gets or sets the phase of the arrow head data point in degrees.
            </summary>
      <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
            The specified value is lesser than 0 or more than 360.
            
            -or-
            
            The specified value is NaN, NegativeInfinity,
            or PositiveInfinity.
            </exception>
    </member>
    <member name="P:NationalInstruments.UI.MagnitudeCircleAnnotation.ToolTipMagnitudeFormat">
      <summary>
            Gets or sets the format string used to format the magnitude data value displayed in the tooltip.
            </summary>
      <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
      <exception cref="T:System.ArgumentNullException">
            The specified value is null.
            </exception>
    </member>
    <member name="E:NationalInstruments.UI.MagnitudeCircleAnnotation.BeforeDraw">
      <summary>
            Occurs before the circle annotation is drawn.
            </summary>
      <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
    </member>
    <member name="E:NationalInstruments.UI.MagnitudeCircleAnnotation.AfterDraw">
      <summary>
            Occurs after the circle annotation has been drawn.
            </summary>
      <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
    </member>
    <member name="T:NationalInstruments.UI.ISlide">
      <summary>
            Defines an interface for the slide control.
            </summary>
    </member>
    <member name="T:NationalInstruments.UI.ILinearNumericPointer">
      <summary>
            Defines the interface for Measurement Studio Windows Forms numeric controls that display a 
            numeric value in a linear scale.
            </summary>
    </member>
    <member name="P:NationalInstruments.UI.ILinearNumericPointer.FillMode">
      <summary>
            Gets or sets the direction for filling the fill area of the control.
            </summary>
      <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
      <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
            The value is not a NumericFillMode value.
            </exception>
    </member>
    <member name="P:NationalInstruments.UI.ILinearNumericPointer.FillBaseValue">
      <summary>
            Gets or sets the value at which the fill begins.
            </summary>
      <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
            The value is NaN.
            </exception>
    </member>
    <member name="P:NationalInstruments.UI.ILinearNumericPointer.FillColor">
      <summary>
            Gets or sets the color of the fill area of the control.
            </summary>
      <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
    </member>
    <member name="P:NationalInstruments.UI.ILinearNumericPointer.FillStyle">
      <summary>
            Gets or sets the style used to draw the fill color.
            </summary>
      <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
      <exception cref="T:System.ArgumentNullException">
            The value is null.
            </exception>
    </member>
    <member name="P:NationalInstruments.UI.ILinearNumericPointer.FillBackColor">
      <summary>
            Gets or sets the color of the background of the fill area.
            </summary>
      <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
    </member>
    <member name="P:NationalInstruments.UI.ILinearNumericPointer.ScalePosition">
      <summary>
            Gets or sets the horizontal or vertical orientation of the control.
            </summary>
      <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
      <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
            The value is not a NumericScalePosition value.
            </exception>
    </member>
    <member name="P:NationalInstruments.UI.ILinearNumericPointer.InvertedScale">
      <summary>
            Gets or sets a value indicating if the scale is inverted.
            </summary>
      <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
    </member>
    <member name="P:NationalInstruments.UI.ISlide.SlideStyle">
      <summary>
            Gets or sets the style that determines the appearance of the slide.
            </summary>
      <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
      <exception cref="T:System.ArgumentNullException">
            The value is null.
            </exception>
    </member>
    <member name="T:NationalInstruments.UI.ILegend">
      <summary>
            Defines the interface for all legend controls.
            </summary>
    </member>
    <member name="P:NationalInstruments.UI.ILegend.ItemSize">
      <summary>
            Gets or sets the size of the symbols in the legend control.
            </summary>
      <exception cref="T:System.ArgumentOutOfRangeException">
            The width of the specified size is less than zero.
            
            -or-
            
            The height of the specified size is less than zero.
            </exception>
      <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
    </member>
    <member name="P:NationalInstruments.UI.ILegend.Items">
      <summary>
            Gets the collection of legend items in the legend.
            </summary>
      <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
    </member>
    <member name="E:NationalInstruments.UI.ILegend.BeforeDrawItem">
      <summary>
            Occurs before a legend item is drawn.
            </summary>
      <exception cref="T:System.ObjectDisposedException">
            An event handler is added after the object has been disposed.
            </exception>
    </member>
    <member name="E:NationalInstruments.UI.ILegend.AfterDrawItem">
      <summary>
            Occurs after a legend item is drawn.
            </summary>
      <exception cref="T:System.ObjectDisposedException">
            An event handler is added after the object has been disposed.
            </exception>
    </member>
    <member name="E:NationalInstruments.UI.ILegend.ItemsChanged">
      <summary>
            Occurs when the content of the Items collection
            changes.
            </summary>
      <exception cref="T:System.ObjectDisposedException">
            An event handler is added after the object has been disposed.
            </exception>
    </member>
    <member name="P:NationalInstruments.UI.ILegend.ScrollBarStyle">
      <summary>
            Gets or sets the scroll bar style.
            </summary>
      <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
      <exception cref="T:System.ArgumentNullException">
            The specified value is null.
            </exception>
    </member>
    <member name="P:NationalInstruments.UI.ILegend.ScrollBarBackColor">
      <summary>
            Gets or sets the background color of the scroll bar.
            </summary>
      <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
    </member>
    <member name="P:NationalInstruments.UI.ILegend.ScrollBarForeColor">
      <summary>
            Gets or sets the foreground color of the scroll bar.
            </summary>
      <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
    </member>
    <member name="P:NationalInstruments.UI.ILegend.HorizontalScrollMode">
      <summary>
            Gets or sets the scroll mode of the horizontal scroll bar.
            </summary>
      <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
      <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
            The value is not a ScrollMode value.
            </exception>
    </member>
    <member name="P:NationalInstruments.UI.ILegend.VerticalScrollMode">
      <summary>
            Gets or sets the scroll mode of the vertical scroll bar.
            </summary>
      <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
      <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
            The value is not a ScrollMode value.
            </exception>
    </member>
    <member name="P:NationalInstruments.UI.ILegend.ItemLayoutMode">
      <summary>
            Gets or sets the layout mode for the legend items.
            </summary>
      <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
      <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
            The value is not a LegendItemLayoutMode value.
            </exception>
    </member>
    <member name="T:NationalInstruments.UI.HorizontalScrollPosition">
      <summary>
            Specifies the position of a horizontal scroll bar.
            </summary>
    </member>
    <member name="F:NationalInstruments.UI.HorizontalScrollPosition.Top">
      <summary>
            Positions the scroll bar at the top of the plot area.
            </summary>
    </member>
    <member name="F:NationalInstruments.UI.HorizontalScrollPosition.Bottom">
      <summary>
            Positions the scroll bar at the bottom of the plot area.
            </summary>
    </member>
    <member name="T:NationalInstruments.UI.GraphWebInteractionModes">
      <summary>
            Defines the set of possible zooming interactions within the plot area of a graph.
            </summary>
    </member>
    <member name="F:NationalInstruments.UI.GraphWebInteractionModes.None">
      <summary>
            No interaction.
            </summary>
    </member>
    <member name="F:NationalInstruments.UI.GraphWebInteractionModes.ZoomX">
      <summary>
            The plot area can be zoomed with a horizontal selection.
            </summary>
    </member>
    <member name="F:NationalInstruments.UI.GraphWebInteractionModes.ZoomY">
      <summary>
            The plot area can be zoomed with a vertical selection.
            </summary>
    </member>
    <member name="F:NationalInstruments.UI.GraphWebInteractionModes.ZoomAroundPoint">
      <summary>
            The plot area can be zoomed around a particular point.
            </summary>
    </member>
    <member name="F:NationalInstruments.UI.GraphWebInteractionModes.EditRange">
      <summary>
            The minimum and maximum values of the axes can be edited interactively.
            </summary>
    </member>
    <member name="F:NationalInstruments.UI.GraphWebInteractionModes.PlotAreaClick">
      <summary>
            The graph plot area can be clicked to raise an event on the server.
            </summary>
    </member>
    <member name="T:NationalInstruments.UI.GaugeStyle">
      <summary>
            Provides an abstract base class for specifying a gauge style
            and also provides a list of pre-defined gauge styles.
            </summary>
    </member>
    <member name="M:NationalInstruments.UI.GaugeStyle.#ctor">
      <summary>
            Initializes a new instance of the GaugeStyle class.
            </summary>
    </member>
    <member name="M:NationalInstruments.UI.GaugeStyle.DrawSpindle(NationalInstruments.UI.IGauge,NationalInstruments.UI.RadialNumericPointerStyleDrawArgs)">
      <summary>
            Draws the spindle of the style.
            </summary>
      <param name="context">
            An IGauge with additional information.
            </param>
      <param name="args">
            A RadialNumericPointerStyleDrawArgs that contains the
            drawing data.
            </param>
      <exception cref="T:System.ArgumentNullException">context (parameter) is null.
            
            -or-
            args (parameter) is null.
            </exception>
      <exception cref="T:System.NotSupportedException">GetScaleRadius is called and the 
            returned radius is NaN, NegativeInfinity, 
            PositiveInfinity, or is less than or equal to zero.
            </exception>
    </member>
    <member name="M:NationalInstruments.UI.GaugeStyle.Draw(NationalInstruments.UI.INumericPointer,NationalInstruments.UI.NumericPointerStyleDrawArgs,System.Double)">
      <summary>
            Draws the style at the specified value.
            </summary>
      <param name="context">
            An INumericPointer with additional context information. 
            </param>
      <param name="args">
            A NumericPointerStyleDrawArgs that contains the
            drawing data.
            </param>
      <param name="value">
            The value used to draw the style.
            </param>
      <exception cref="T:System.ArgumentNullException">context (parameter) is null.
            
            -or-
            args (parameter) is null.
            </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
            The value (parameter) is outside the Range.
            </exception>
      <exception cref="T:System.InvalidCastException">
            The context (parameter) does not support this style.
            </exception>
    </member>
    <member name="P:NationalInstruments.UI.GaugeStyle.UnderlyingType">
      <summary>
            Gets the underlying type of an EnumObject value.
            </summary>
    </member>
    <member name="P:NationalInstruments.UI.GaugeStyle.SunkenWithThickNeedle">
      <summary>
            Gets a gauge with a sunken look and a thick needle.
            </summary>
    </member>
    <member name="P:NationalInstruments.UI.GaugeStyle.SunkenWithThinNeedle">
      <summary>
            Gets a gauge with a sunken look and a thin needle.
            </summary>
    </member>
    <member name="P:NationalInstruments.UI.GaugeStyle.SunkenWithThickNeedle3D">
      <summary>
            Gets a 3D gauge with a sunken look and a thick needle.
            </summary>
    </member>
    <member name="P:NationalInstruments.UI.GaugeStyle.SunkenWithThinNeedle3D">
      <summary>
            Gets a 3D gauge with a sunken look and a thin needle.
            </summary>
    </member>
    <member name="P:NationalInstruments.UI.GaugeStyle.FlatWithThickNeedle">
      <summary>
            Gets a gauge with a flat look and a thick needle.
            </summary>
    </member>
    <member name="P:NationalInstruments.UI.GaugeStyle.FlatWithThinNeedle">
      <summary>
            Gets a gauge with a flat look and a thin needle.
            </summary>
    </member>
    <member name="T:NationalInstruments.UI.DrawUtility">
      <summary>
            Provides helper methods related to drawing and transforming coordinates.
            </summary>
    </member>
    <member name="M:NationalInstruments.UI.DrawUtility.GetLineStepPoints(System.Drawing.PointF[],NationalInstruments.UI.LineStep)">
      <summary>
            Transforms an array of points representing mapped data by applying the 
            specified LineStep.
            </summary>
      <param name="points">
            A PointF array representing mapped data.
            </param>
      <param name="lineStep">
            A LineStep value to use for specifying
            the transformation.
            </param>
      <returns>
            A PointF array representing mapped data after applying 
            lineStep (parameter).
            </returns>
      <exception cref="T:System.ArgumentNullException">points (parameter) is null.
            </exception>
      <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">lineStep (parameter) is not of the LineStep
            values.
            </exception>
    </member>
    <member name="M:NationalInstruments.UI.DrawUtility.OffsetLine(System.Drawing.PointF,System.Drawing.PointF,System.Single,System.Single,System.Drawing.PointF@,System.Drawing.PointF@)">
      <summary>
            Lengthens or shortens a line between two points.
            </summary>
      <param name="lineStart">
            The line start point.
            </param>
      <param name="lineEnd">
            The line end point.
            </param>
      <param name="startOffset">
            The value that moves the start point while maintaining the slope of the line.
            </param>
      <param name="endOffset">
            The value that moves the end point while maintaining the slope of the line.
            </param>
      <param name="offsetLineStart">
            Upon return, contains the new start point.
            </param>
      <param name="offsetLineEnd">
            Upon return, contains the new end point.
            </param>
      <exception cref="T:System.ArgumentException">lineStart (parameter) and lineEnd (parameter) are equal.
            </exception>
    </member>
    <member name="M:NationalInstruments.UI.DrawUtility.OffsetLineByRatio(System.Drawing.PointF,System.Drawing.PointF,System.Single,System.Single,System.Drawing.PointF@,System.Drawing.PointF@)">
      <summary>
            Lengthens or shortens a line between two points by specifying ratios.
            </summary>
      <param name="lineStart">
            The line start point.
            </param>
      <param name="lineEnd">
            The line end point.
            </param>
      <param name="startOffsetRatio">
            The value that moves the start point while maintaining the slope of the line.
            </param>
      <param name="endOffsetRatio">
            The value that moves the end point while maintaining the slope of the line.
            </param>
      <param name="offsetLineStart">
            Upon return, contains the new start point.
            </param>
      <param name="offsetLineEnd">
            Upon return, contains the new end point.
            </param>
      <exception cref="T:System.ArgumentException">lineStart (parameter) and lineEnd (parameter) are equal.
            </exception>
    </member>
    <member name="M:NationalInstruments.UI.DrawUtility.GetAngleAt(System.Drawing.PointF,System.Drawing.PointF)">
      <summary>
            Gets the angle of the specified point relative to a specified reference point in client
            coordinates.
            </summary>
      <param name="referencePoint">
            A PointF that represents the reference point.
            </param>
      <param name="point">
            A PointF for which the angle is calculated.
            </param>
      <returns>
            A value between 0.0 and 360.0 representing the angle of point (parameter) relative to
            referencePoint (parameter) in client coordinates.
            </returns>
    </member>
    <member name="T:NationalInstruments.UI.ComplexYAxisEventHandler">
      <summary>
            Represents the method that handles the 
            YAxisRangeChanged event.
            </summary>
      <param name="sender">
            The source of the event.
            </param>
      <param name="e">
            The ComplexYAxisEventArgs that contains the event
            data.
            </param>
    </member>
    <member name="T:NationalInstruments.UI.ComplexDataType">
      <summary>
            Specifies the types of data that appear on a ComplexPlot.
            </summary>
    </member>
    <member name="F:NationalInstruments.UI.ComplexDataType.RealData">
      <summary>
            Specifies the real data that is plotted horizontally on a ComplexPlot.
            </summary>
    </member>
    <member name="F:NationalInstruments.UI.ComplexDataType.ImaginaryData">
      <summary>
            Specifies the imaginary data that is plotted vertically on a ComplexPlot.
            </summary>
    </member>
    <member name="T:NationalInstruments.UI.BeforeDrawIntensityRangeAnnotationEventHandler">
      <summary>
            Represents the method that handles the events that occur before a range annotation draws.
            </summary>
      <param name="sender">
            The source of the event.
            </param>
      <param name="e">
            A BeforeDrawIntensityRangeAnnotationEventArgs that contains the event data.
            </param>
    </member>
    <member name="T:NationalInstruments.UI.BeforeDrawIntensityPointAnnotationEventHandler">
      <summary>
            Represents the method that handles the events that occur before a point annotation draws.
            </summary>
      <param name="sender">
            The source of the event.
            </param>
      <param name="e">
            A BeforeDrawIntensityPointAnnotationEventArgs that contains the event data.
            </param>
    </member>
    <member name="T:NationalInstruments.UI.AfterMoveXYCursorEventHandler">
      <summary>
            Represents the method that handles the events that occur after a cursor moves.
            </summary>
      <param name="sender">
            The source of the event.
            </param>
      <param name="e">
            An AfterMoveXYCursorEventArgs that contains the event data.
            </param>
    </member>
    <member name="T:NationalInstruments.UI.AfterDrawXYPointAnnotationEventHandler">
      <summary>
            Represents the method that handles the events that occur after a point annotation draws.
            </summary>
      <param name="sender">
            The source of the event.
            </param>
      <param name="e">
            An AfterDrawXYPointAnnotationEventArgs that contains the event data.
            </param>
    </member>
    <member name="T:NationalInstruments.UI.AfterDrawXYPlotEventArgs">
      <summary>
            Provides data for the AfterDrawPlot event.
            </summary>
    </member>
    <member name="M:NationalInstruments.UI.AfterDrawXYPlotEventArgs.#ctor(NationalInstruments.UI.XYPlot,System.Drawing.Graphics,System.Drawing.Rectangle)">
      <summary>
            Initializes a new instance of the AfterDrawXYPlotEventArgs
            class with the specified plot, graphics, and bounds.
            </summary>
      <param name="plot">
            The XYPlot for which the event is occurring.
            </param>
      <param name="graphics">
            The Graphics used to draw the item.
            </param>
      <param name="bounds">
            The Rectangle that represents the bounds in which to draw.
            </param>
      <exception cref="T:System.ArgumentNullException">plot (parameter) is null.
            	-or-graphics (parameter) is null.
            	</exception>
    </member>
    <member name="M:NationalInstruments.UI.AfterDrawXYPlotEventArgs.ToString">
      <summary>
            Returns a string representation of the object.
            </summary>
      <returns>
            A string representation of the object.
            </returns>
    </member>
    <member name="P:NationalInstruments.UI.AfterDrawXYPlotEventArgs.Plot">
      <summary>
            Gets the XYPlot that has been drawn.
            </summary>
    </member>
    <member name="T:NationalInstruments.UI.AfterDrawLegendItemEventHandler">
      <summary>
            Represents the method that handles the AfterDrawItem
            event.
            </summary>
      <param name="sender">
            The source of the event.
            </param>
      <param name="e">
            An AfterDrawLegendItemEventArgs that contains the event data.
            </param>
    </member>
    <member name="T:NationalInstruments.UI.AfterDragXYAnnotationCaptionEventHandler">
      <summary>
            Represents the method that handles the events that occur after an annotation caption is dragged.
            </summary>
      <param name="sender">
            The source of the event.
            </param>
      <param name="e">
            An AfterDragXYAnnotationCaptionEventArgs that contains the event data.
            </param>
    </member>
    <member name="T:NationalInstruments.UI.ActionEventHandler">
      <summary>
            Represents the method that handles events that occur from an interactive or programmatic user actions.
            </summary>
      <param name="sender">
            The source of the event.
            </param>
      <param name="e">
            An ActionEventArgs that contains the event data.
            </param>
    </member>
    <member name="T:NationalInstruments.UI.XYDataStateManagementArgs">
      <summary>
            Provides data for managing the state of x and y data.
            </summary>
    </member>
    <member name="M:NationalInstruments.UI.XYDataStateManagementArgs.#ctor(System.Web.HttpContext,System.String,System.Double[],System.Double[],System.String)">
      <summary>
            Initializes a new instance of the XYDataStateManagementArgs
            class with the specified context, state ID, x and y data, and property name.
            </summary>
      <param name="context">
            The HttpContext for the current HTTP request.
            </param>
      <param name="stateId">
            An identifier that uniquely identifies the source of the data.
            </param>
      <param name="xData">
            The x-data value to manage through state management.
            </param>
      <param name="yData">
            The y-data value to manage through state management.
            </param>
      <param name="propertyName">
            The name of the property that is supplying the data.
            </param>
      <exception cref="T:System.ArgumentNullException">xData (parameter) is null.
            
            -or-
            yData (parameter) is null.
            
            -or-
            stateId (parameter) is null.
            </exception>
    </member>
    <member name="M:NationalInstruments.UI.XYDataStateManagementArgs.#ctor(System.Web.HttpContext,System.String,System.Double[],System.Double[],System.String,System.Boolean,System.Int32)">
      <summary>
            Initializes a new instance of the XYDataStateManagementArgs
            class with the specified context, state ID, x and y data, property name, and collection information.
            </summary>
      <param name="context">
            The HttpContext for the current HTTP request.
            </param>
      <param name="stateId">
            An identifier that uniquely identifies the source of the data.
            </param>
      <param name="xData">
            The x-data value to manage through state management.
            </param>
      <param name="yData">
            The y-data value to manage through state management.
            </param>
      <param name="propertyName">
            The name of the property that is supplying the data.
            </param>
      <param name="isCollectionProperty">
            Indicates if the property specified by propertyName (parameter) is a collection.
            </param>
      <param name="collectionIndex">
            The index of the collection that supplies the data.
            </param>
      <exception cref="T:System.ArgumentNullException">xData (parameter) is null.
            
            -or-
            yData (parameter) is null.
            
            -or-
            stateId (parameter) is null.
            </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">isCollectionProperty (parameter) is true and
            collectionIndex (parameter) is less than 0.
            </exception>
    </member>
    <member name="M:NationalInstruments.UI.XYDataStateManagementArgs.GetData(System.Double[]@,System.Double[]@)">
      <summary>
            Gets the x and y data that is managed by the data state management strategy.
            </summary>
      <param name="xData">
            An array of Double values that represents the x data.
            </param>
      <param name="yData">
            An array of Double values that represents the y data.
            </param>
    </member>
    <member name="M:NationalInstruments.UI.XYDataStateManagementArgs.SetData(System.Double[],System.Double[])">
      <summary>
            Sets the x and y data that is managed by the data state management strategy.
            </summary>
      <param name="xData">
            An array of Double values that represents the x data.
            </param>
      <param name="yData">
            An array of Double values that represents the y data.
            </param>
    </member>
    <member name="P:NationalInstruments.UI.XYDataStateManagementArgs.PropertyName">
      <summary>
            Gets the name of the property that supplies the x and y data.
            </summary>
    </member>
    <member name="P:NationalInstruments.UI.XYDataStateManagementArgs.IsCollectionProperty">
      <summary>
            Gets a value indicating if the property specified by
            PropertyName
            is a collection property.
            </summary>
    </member>
    <member name="P:NationalInstruments.UI.XYDataStateManagementArgs.CollectionIndex">
      <summary>
            Gets the index of the collection that supplies the data if the property specified by
            PropertyName
            is a collection.
            </summary>
    </member>
    <member name="T:NationalInstruments.UI.XYAnnotationCollection">
      <summary>
            Represents a strongly typed collection of XYAnnotation objects.
            </summary>
    </member>
    <member name="M:NationalInstruments.UI.XYAnnotationCollection.#ctor">
      <summary>
            Initializes a new instance of the XYAnnotationCollection class.
            </summary>
    </member>
    <member name="M:NationalInstruments.UI.XYAnnotationCollection.#ctor(NationalInstruments.UI.XYAnnotation[])">
      <summary>
            Initializes a new instance of the XYAnnotationCollection class
            from an array of XYAnnotation objects.
            </summary>
      <param name="item">
            Array of XYAnnotation objects to copy.
            </param>
      <exception cref="T:System.ArgumentNullException">item (parameter) is null.
            
            -or-
            
            An element in item (parameter) is null.
            </exception>
      <exception cref="T:System.NotSupportedException">
            		An element in item (parameter) has been disposed.
            
            -or-
            
            		An element in item (parameter) is in another XYAnnotationCollection.
            
            -or-
            
            		An element in item (parameter) is already in this collection.
            </exception>
    </member>
    <member name="M:NationalInstruments.UI.XYAnnotationCollection.#ctor(NationalInstruments.UI.XYAnnotationCollection)">
      <summary>
            Initializes a new instance of the XYAnnotationCollection class
            from an existing collection.
            </summary>
      <param name="item">
            The XYAnnotationCollection to copy.
            </param>
      <exception cref="T:System.ArgumentNullException">item (parameter) is null.
            
            -or-
            
            An element in item (parameter) is null.
            </exception>
      <exception cref="T:System.NotSupportedException">
            		An element in item (parameter) has been disposed.
            
            -or-
            
            		An element in item (parameter) is in another XYAnnotationCollection.
            
            -or-
            
            		An element in item (parameter) is already in this collection.
            </exception>
    </member>
    <member name="M:NationalInstruments.UI.XYAnnotationCollection.ToString">
      <summary>
            Returns a string representation of the object.
            </summary>
      <returns>
            A string representation of the object.
            </returns>
    </member>
    <member name="M:NationalInstruments.UI.XYAnnotationCollection.Add(NationalInstruments.UI.XYAnnotation)">
      <summary>
            Adds an item to the end of the collection.
            </summary>
      <param name="item">
            Item to add to the collection.
            </param>
      <returns>
            The array index of the added item.
            </returns>
      <exception cref="T:System.ArgumentNullException">item (parameter) is null.
            </exception>
      <exception cref="T:System.NotSupportedException">item (parameter) has been disposed.
            
            -or-
            item (parameter) is in another XYAnnotationCollection.
            
            -or-
            item (parameter) is already in this collection.
            </exception>
    </member>
    <member name="M:NationalInstruments.UI.XYAnnotationCollection.AddRange(NationalInstruments.UI.XYAnnotation[])">
      <summary>
            Adds an array of XYAnnotation objects to the end of the collection.
            </summary>
      <param name="item">
            Array of XYAnnotation objects to add to the collection.
            </param>
      <exception cref="T:System.ArgumentNullException">item (parameter) is null.
            
            -or-
            
            An element in item (parameter) is null.
            </exception>
      <exception cref="T:System.NotSupportedException">
            		An element in item (parameter) has been disposed.
            
            -or-
            
            		An element in item (parameter) is in another XYAnnotationCollection.
            
            -or-
            
            		An element in item (parameter) is already in this collection.
            </exception>
    </member>
    <member name="M:NationalInstruments.UI.XYAnnotationCollection.AddRange(NationalInstruments.UI.XYAnnotationCollection)">
      <summary>
            Adds a collection of XYAnnotation objects to the end of the collection.
            </summary>
      <param name="item">
            Collection of XYAnnotation objects to add to the collection.
            </param>
      <exception cref="T:System.ArgumentNullException">item (parameter) is null.
            
            -or-
            
            An element in item (parameter) is null.
            </exception>
      <exception cref="T:System.NotSupportedException">
            		An element in item (parameter) has been disposed.
            
            -or-
            
            		An element in item (parameter) is in another XYAnnotationCollection.
            
            -or-
            
            		An element in item (parameter) is already in this collection.
            </exception>
    </member>
    <member name="M:NationalInstruments.UI.XYAnnotationCollection.Clear">
      <summary>
            Removes all items from the collection.
            </summary>
    </member>
    <member name="M:NationalInstruments.UI.XYAnnotationCollection.Contains(NationalInstruments.UI.XYAnnotation)">
      <summary>
            Determines if the specified element is in the collection.
            </summary>
      <param name="item">Item to locate in the collection.</param>
      <returns>true if the collection contains item (parameter).
            </returns>
    </member>
    <member name="M:NationalInstruments.UI.XYAnnotationCollection.CopyTo(NationalInstruments.UI.XYAnnotation[],System.Int32)">
      <summary>
            Copies the collection to an array or a portion of an array.
            </summary>
      <param name="array">
            Destination array for the collection.
            </param>
      <param name="index">
            The index in the target array at which you want to begin copying the collection to.
            </param>
      <exception cref="T:System.ArgumentNullException">array (parameter) is null.
            </exception>
      <exception cref="T:System.ArgumentException">array (parameter) is multidimensional.
            
            -or-
            index (parameter) is greater than or equal to the length of array (parameter).
            
            -or-
            
            The number of elements in the collection is greater than the available space between
            index (parameter) and the end of array (parameter).
            </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">index (parameter) is less than the lower bound of array (parameter).
            </exception>
    </member>
    <member name="M:NationalInstruments.UI.XYAnnotationCollection.IndexOf(NationalInstruments.UI.XYAnnotation)">
      <summary>
            Returns the zero-based index of the first occurrence of an item in the collection.
            </summary>
      <param name="item">
            Item to search for.
            </param>
      <returns>
            Index of the item. If the item is not found, returns -1.
            </returns>
    </member>
    <member name="M:NationalInstruments.UI.XYAnnotationCollection.Insert(System.Int32,NationalInstruments.UI.XYAnnotation)">
      <summary>
            Inserts an item into the collection at the specified index.
            </summary>
      <param name="index">
            Index to insert the item at.
            </param>
      <param name="item">
            Item to insert into the collection.
            </param>
      <exception cref="T:System.ArgumentNullException">item (parameter) is null.
            </exception>
      <exception cref="T:System.NotSupportedException">item (parameter) has been disposed.
            
            -or-
            item (parameter) is in another XYAnnotationCollection.
            
            -or-
            item (parameter) is already in this collection.
            </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">index (parameter) is less than zero.
            
            -or-
            

index (parameter) is greater than Count.
            


            -or-
            index (parameter) is greater than Count.
            </exception>
    </member>
    <member name="M:NationalInstruments.UI.XYAnnotationCollection.GetEnumerator">
      <summary>
            Returns an enumerator that you can use to iterate through the collection.
            </summary>
      <returns>
            The enumerator for the collection.
            </returns>
    </member>
    <member name="M:NationalInstruments.UI.XYAnnotationCollection.Remove(NationalInstruments.UI.XYAnnotation)">
      <summary>
            Removes the first occurrence of the specified item.
            </summary>
      <param name="item">
            Item to remove from the collection.
            </param>
    </member>
    <member name="M:NationalInstruments.UI.XYAnnotationCollection.RemoveAt(System.Int32)">
      <summary>
            Removes the item at the specified index.
            </summary>
      <param name="index">
            The zero-based index of the item to remove.
            </param>
      <exception cref="T:System.ArgumentOutOfRangeException">index (parameter) is less than zero.
            
            -or-
            

index (parameter) is greater than or equal to Count.
            


            -or-
            index (parameter) is greater than or equal to Count.
            </exception>
    </member>
    <member name="P:NationalInstruments.UI.XYAnnotationCollection.Item(System.Int32)">
      <summary>
            Gets or sets XYAnnotation at the specified index. 
            </summary>
      <param name="index">
            The zero-based index of the entry to locate in the collection.
            </param>
      <exception cref="T:System.ArgumentNullException">
            	The value is null.
            </exception>
      <exception cref="T:System.NotSupportedException">
            		The value has been disposed.
            
            -or-
            
            		The value is in another XYAnnotationCollection.
            
            -or-
            
            		The value is already in this collection.
            </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">index (parameter) is less than zero.
            
            -or-
            

index (parameter) is greater than Count.
            


            -or-
            index (parameter) is greater than Count.
            </exception>
    </member>
    <member name="P:NationalInstruments.UI.XYAnnotationCollection.Count">
      <summary>
            Gets the number of elements in the XYAnnotationCollection.
            </summary>
    </member>
    <member name="P:NationalInstruments.UI.XYAnnotationCollection.IsSynchronized">
      <summary>
            Gets a value indicating whether access to the collection is synchronized
            (thread-safe).
            </summary>
    </member>
    <member name="P:NationalInstruments.UI.XYAnnotationCollection.IsFixedSize">
      <summary>
            Gets a value indicating whether the collection has a fixed size.
            </summary>
    </member>
    <member name="P:NationalInstruments.UI.XYAnnotationCollection.IsReadOnly">
      <summary>
            Gets a value indicating whether the collection is read-only.
            </summary>
    </member>
    <member name="P:NationalInstruments.UI.XYAnnotationCollection.SyncRoot">
      <summary>
            Gets an object that can be used to synchronize access to the collection.
            </summary>
    </member>
    <member name="T:NationalInstruments.UI.WaveformPlot">
      <summary>
            Defines a class for plotting waveforms that represent x or y values.
            </summary>
    </member>
    <member name="M:NationalInstruments.UI.WaveformPlot.#ctor">
      <summary>
            Initializes a new instance of the WaveformPlot class.
            </summary>
    </member>
    <member name="M:NationalInstruments.UI.WaveformPlot.#ctor(NationalInstruments.UI.XAxis,NationalInstruments.UI.YAxis)">
      <summary>
            Initializes a new instance of the WaveformPlot class
            with the specified XAxis and
            YAxis.
            </summary>
      <param name="xAxis">
            The XAxis to use for the plot.
            </param>
      <param name="yAxis">
            The YAxis to use for the plot.
            </param>
      <exception cref="T:System.ArgumentNullException">xAxis (parameter) is null
            -or-
            yAxis (parameter) is null</exception>
    </member>
    <member name="M:NationalInstruments.UI.WaveformPlot.PlotXAppend(System.Double)">
      <summary>
            Plots a single x value against a starting y value by appending the x and y values
             to the existing data.</summary>
      <param name="xData">
            The x value to append.
            </param>
      <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
      <exception cref="T:System.InvalidOperationException">
            		The XAxis of the plot is null.
            
            -or-
            
            		The YAxis of the plot is null.
            
            -or-
            PlotXAppend is called after calling
            PlotY,
            PlotYAppend,
            PlotWaveform``1,
            PlotWaveformAppend``1,
            PlotComplexWaveform``1, or
            PlotComplexWaveformAppend``1.
            
            -or-
            
            	The increment is a positive value and it was a negative value in a previous 
            PlotX or 
            PlotXAppend 
            invocation.
            
            -or-
            
            		The increment is a negative value and it was a positive value in a 
            previous PlotX or 
            PlotXAppend 
            invocation.
            </exception>
      <exception cref="T:System.NotSupportedException">
            The Owner of the plot is not null,
            and the Owner of the plot is
            different from the Owner of XAxis.
            
            -or-
            
            The Owner of the plot is not null,
            and the Owner of the plot is
            different from the Owner of YAxis.
            </exception>
      <exception cref="T:System.ArgumentException">ProcessSpecialValues is true,
            and xData (parameter) and its corresponding y value are special values.
            </exception>
    </member>
    <member name="M:NationalInstruments.UI.WaveformPlot.PlotXAppend(System.Double,System.Double)">
      <summary>
            Plots a single x value against a starting y value by appending the x and y values to the existing data 
            using the specified value to increment y values.
            </summary>
      <param name="xData">
            The x value to append.
            </param>
      <param name="increment">
            The value to use to increment y values.
            </param>
      <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
      <exception cref="T:System.InvalidOperationException">
            		The XAxis of the plot is null.
            
            -or-
            
            		The YAxis of the plot is null.
            
            -or-
            PlotXAppend is called after calling
            PlotY,
            PlotYAppend,
            PlotWaveform``1,
            PlotWaveformAppend``1,
            PlotComplexWaveform``1, or
            PlotComplexWaveformAppend``1.
            
            -or-
            increment (parameter) is a positive value and it was a negative value in a previous 
            PlotX or 
            PlotXAppend 
            invocation.
            
            -or-
            increment (parameter) is a negative value and it was a positive value in a 
            previous PlotX or 
            PlotXAppend 
            invocation.
            </exception>
      <exception cref="T:System.NotSupportedException">
            The Owner of the plot is not null,
            and the Owner of the plot is
            different from the Owner of XAxis.
            
            -or-
            
            The Owner of the plot is not null,
            and the Owner of the plot is
            different from the Owner of YAxis.
            </exception>
      <exception cref="T:System.ArgumentException">ProcessSpecialValues is true,
            and xData (parameter) and its corresponding y value are special values.
            </exception>
    </member>
    <member name="M:NationalInstruments.UI.WaveformPlot.PlotXAppend(System.Double,System.TimeSpan)">
      <summary>
            Plots a single x value against a starting y value by appending the x and y values to the existing data
            using the specified time span to increment y values.
            </summary>
      <param name="xData">
            The x value to append.
            </param>
      <param name="increment">
            A TimeSpan that represents the value to use to increment y values.
            </param>
      <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
      <exception cref="T:System.InvalidOperationException">
            		The XAxis of the plot is null.
            
            -or-
            
            		The YAxis of the plot is null.
            
            -or-
            PlotXAppend is called after calling
            PlotY,
            PlotYAppend,
            PlotWaveform``1,
            PlotWaveformAppend``1,
            PlotComplexWaveform``1, or
            PlotComplexWaveformAppend``1.
            
            -or-
            increment (parameter) is a positive value and it was a negative value in a previous 
            PlotX or 
            PlotXAppend 
            invocation.
            
            -or-
            increment (parameter) is a negative value and it was a positive value in a 
            previous PlotX or 
            PlotXAppend 
            invocation.
            </exception>
      <exception cref="T:System.NotSupportedException">
            The Owner of the plot is not null,
            and the Owner of the plot is
            different from the Owner of XAxis.
            
            -or-
            
            The Owner of the plot is not null,
            and the Owner of the plot is
            different from the Owner of YAxis.
            </exception>
      <exception cref="T:System.ArgumentException">ProcessSpecialValues is true,
            and xData (parameter) and its corresponding y value are special values.
            </exception>
    </member>
    <member name="M:NationalInstruments.UI.WaveformPlot.PlotXAppend(System.Double[])">
      <summary>
            Plots an array of x values against a starting y value by appending the x and y values to the existing data.</summary>
      <param name="xData">
            The x values to append.
            </param>
      <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
      <exception cref="T:System.ArgumentNullException">xData (parameter) is null.
            </exception>
      <exception cref="T:System.InvalidOperationException">
            		The XAxis of the plot is null.
            
            -or-
            
            		The YAxis of the plot is null.
            
            -or-
            PlotXAppend is called after calling
            PlotY,
            PlotYAppend,
            PlotWaveform``1,
            PlotWaveformAppend``1,
            PlotComplexWaveform``1, or
            PlotComplexWaveformAppend``1.
            
            -or-
            
            	The increment is a positive value and it was a negative value in a previous 
            PlotX or 
            PlotXAppend 
            invocation.
            
            -or-
            
            		The increment is a negative value and it was a positive value in a 
            previous PlotX or 
            PlotXAppend 
            invocation.
            </exception>
      <exception cref="T:System.NotSupportedException">
            The Owner of the plot is not null,
            and the Owner of the plot is
            different from the Owner of XAxis.
            
            -or-
            
            The Owner of the plot is not null,
            and the Owner of the plot is
            different from the Owner of YAxis.
            </exception>
      <exception cref="T:System.ArgumentException">ProcessSpecialValues is true,
            and xData (parameter) value at a particular index and its corresponding y value are special values.
            </exception>
    </member>
    <member name="M:NationalInstruments.UI.WaveformPlot.PlotXAppend(System.Double[],System.Double)">
      <summary>
            Plots an array of x values against a starting y value by appending the x and y values to the existing data 
            using the specified value to increment y values.
            </summary>
      <param name="xData">
            The x values to append.
            </param>
      <param name="increment">
            The value to use to increment y values.
            </param>
      <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
      <exception cref="T:System.ArgumentNullException">xData (parameter) is null.
            </exception>
      <exception cref="T:System.InvalidOperationException">
            		The XAxis of the plot is null.
            
            -or-
            
            		The YAxis of the plot is null.
            
            -or-
            PlotXAppend is called after calling
            PlotY,
            PlotYAppend,
            PlotWaveform``1,
            PlotWaveformAppend``1,
            PlotComplexWaveform``1, or
            PlotComplexWaveformAppend``1.
            
            -or-
            increment (parameter) is a positive value and it was a negative value in a previous 
            PlotX or 
            PlotXAppend 
            invocation.
            
            -or-
            increment (parameter) is a negative value and it was a positive value in a 
            previous PlotX or 
            PlotXAppend 
            invocation.
            </exception>
      <exception cref="T:System.NotSupportedException">
            The Owner of the plot is not null,
            and the Owner of the plot is
            different from the Owner of XAxis.
            
            -or-
            
            The Owner of the plot is not null,
            and the Owner of the plot is
            different from the Owner of YAxis.
            </exception>
      <exception cref="T:System.ArgumentException">ProcessSpecialValues is true,
            and xData (parameter) value at a particular index and its corresponding y value are special values.
            </exception>
    </member>
    <member name="M:NationalInstruments.UI.WaveformPlot.PlotXAppend(System.Double[],System.TimeSpan)">
      <summary>
            Plots an array of x values against a starting y value by appending the x and y values to the existing 
            data using the specified time span to increment y values.
            </summary>
      <param name="xData">
            The x values to append.
            </param>
      <param name="increment">
            A TimeSpan that represents the value used to increment y values.
            </param>
      <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
      <exception cref="T:System.ArgumentNullException">xData (parameter) is null.
            </exception>
      <exception cref="T:System.InvalidOperationException">
            		The XAxis of the plot is null.
            
            -or-
            
            		The YAxis of the plot is null.
            
            -or-
            PlotXAppend is called after calling
            PlotY,
            PlotYAppend,
            PlotWaveform``1,
            PlotWaveformAppend``1,
            PlotComplexWaveform``1, or
            PlotComplexWaveformAppend``1.
            
            -or-
            increment (parameter) is a positive value, and it was a negative value in a previous 
            PlotX or 
            PlotXAppend 
            invocation.
            
            -or-
            increment (parameter) is a negative value, and it was a positive value in a 
            previous PlotX or 
            PlotXAppend 
            invocation.
            </exception>
      <exception cref="T:System.NotSupportedException">
            The Owner of the plot is not null,
            and the Owner of the plot is
            different from the Owner of XAxis.
            
            -or-
            
            The Owner of the plot is not null,
            and the Owner of the plot is
            different from the Owner of YAxis.
            </exception>
      <exception cref="T:System.ArgumentException">ProcessSpecialValues is true,
            and the xData (parameter) value at a particular index and its corresponding y value are special values.
            </exception>
    </member>
    <member name="M:NationalInstruments.UI.WaveformPlot.PlotXAppend(System.Double[],System.Int32,System.Int32,System.Double)">
      <summary>
            Plots a subset of an array of x values against a starting y value by appending the x and y values to the existing data 
            using the specified value to increment y values.
            </summary>
      <param name="xData">
            The x values to append.
            </param>
      <param name="startIndex">
            The index in xData (parameter) at which the plot data begins.
            </param>
      <param name="length">
            The number of elements, beginning at startIndex (parameter) in xData (parameter), to plot.
            </param>
      <param name="increment">
            The value to use to increment y values.
            </param>
      <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
      <exception cref="T:System.ArgumentNullException">xData (parameter) is null.
            </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">startIndex (parameter) is less than 0.
            
            -or-
            startIndex (parameter) is greater than or equal to the
            number of elements in xData (parameter).
            
            -or-
            length (parameter) is less than 0.
            
            -or-
            length (parameter) is greater than the number of elements
            from startIndex (parameter) to the end of xData (parameter).
            </exception>
      <exception cref="T:System.InvalidOperationException">
            		The XAxis of the plot is null.
            
            -or-
            
            		The YAxis of the plot is null.
            
            -or-
            PlotXAppend is called after calling
            PlotY,
            PlotYAppend,
            PlotWaveform``1,
            PlotWaveformAppend``1,
            PlotComplexWaveform``1, or
            PlotComplexWaveformAppend``1.
            
            -or-
            increment (parameter) is a positive value, and it was a negative value in a previous 
            PlotX or 
            PlotXAppend 
            invocation.
            
            -or-
            increment (parameter) is a negative value, and it was a positive value in a 
            previous PlotX or 
            PlotXAppend 
            invocation.
            </exception>
      <exception cref="T:System.NotSupportedException">
            The Owner of the plot is not null,
            and the Owner of the plot is
            different from the Owner of XAxis.
            
            -or-
            
            The Owner of the plot is not null,
            and the Owner of the plot is
            different from the Owner of YAxis.
            </exception>
      <exception cref="T:System.ArgumentException">ProcessSpecialValues is true,
            and the xData (parameter) value at a particular index and its corresponding y value are special values.
            </exception>
    </member>
    <member name="M:NationalInstruments.UI.WaveformPlot.PlotXAppend(System.Double[],System.Int32,System.Int32,System.TimeSpan)">
      <summary>
            Plots a subset of an array of x values against a starting y value by appending the x and y values to the 
            existing data using the specified time span to increment y values.
            </summary>
      <param name="xData">
            The x values to append.
            </param>
      <param name="startIndex">
            The index in xData (parameter) at which the plot data begins.
            </param>
      <param name="length">
            The number of elements, beginning at startIndex (parameter) in xData (parameter), to plot.
            </param>
      <param name="increment">
            A TimeSpan that represents the value used to increment y values.
            </param>
      <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
      <exception cref="T:System.ArgumentNullException">xData (parameter) is null.
            </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">startIndex (parameter) is less than 0.
            
            -or-
            startIndex (parameter) is greater than or equal to the
            number of elements in xData (parameter).
            
            -or-
            length (parameter) is less than 0.
            
            -or-
            length (parameter) is greater than the number of elements
            from startIndex (parameter) to the end of xData (parameter).
            </exception>
      <exception cref="T:System.InvalidOperationException">
            		The XAxis of the plot is null.
            
            -or-
            
            		The YAxis of the plot is null.
            
            -or-
            PlotXAppend is called after calling
            PlotY,
            PlotYAppend,
            PlotWaveform``1,
            PlotWaveformAppend``1,
            PlotComplexWaveform``1, or
            PlotComplexWaveformAppend``1.
            
            -or-
            increment (parameter) is a positive value, and it was a negative value in a previous 
            PlotX or 
            PlotXAppend 
            invocation.
            
            -or-
            increment (parameter) is a negative value, and it was a positive value in a 
            previous PlotX or 
            PlotXAppend 
            invocation.
            </exception>
      <exception cref="T:System.NotSupportedException">
            The Owner of the plot is not null,
            and the Owner of the plot is
            different from the Owner of XAxis.
            
            -or-
            
            The Owner of the plot is not null,
            and the Owner of the plot is
            different from the Owner of YAxis.
            </exception>
      <exception cref="T:System.ArgumentException">ProcessSpecialValues is true,
            and the xData (parameter) value at a particular index and its corresponding y value are special values.
            </exception>
    </member>
    <member name="M:NationalInstruments.UI.WaveformPlot.PlotXAppend(System.Double[],System.Int32,System.Int32,System.TimeSpan,NationalInstruments.UI.PlotDateTimePrecisionMode)">
      <summary>
            Plots a subset of an array of x values against a starting y value with the specified PlotDateTimePrecisionMode. 
            PlotXAppend appends the x and y values to the 
            existing data using the specified time span to increment y values.
            </summary>
      <param name="xData">
            The x values to append.
            </param>
      <param name="startIndex">
            The index in xData (parameter) at which the plot data begins.
            </param>
      <param name="length">
            The number of elements, beginning at startIndex (parameter) in xData (parameter), to plot.
            </param>
      <param name="increment">
            A TimeSpan that represents the value to use to increment y values.
            </param>
      <param name="precisionMode">
            A PlotDateTimePrecisionMode that represents the precision mode to use when plotting the x values.
            </param>
      <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
      <exception cref="T:System.ArgumentNullException">xData (parameter) is null.
            </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">startIndex (parameter) is less than 0.
            
            -or-
            startIndex (parameter) is greater than or equal to the
            number of elements in xData (parameter).
            
            -or-
            length (parameter) is less than 0.
            
            -or-
            length (parameter) is greater than the number of elements
            from startIndex (parameter) to the end of xData (parameter).
            </exception>
      <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">precisionMode (parameter) is not a valid PlotDateTimePrecisionMode value.
            </exception>
      <exception cref="T:System.InvalidOperationException">
            		The XAxis of the plot is null.
            
            -or-
            
            		The YAxis of the plot is null.
            
            -or-
            PlotXAppend is called after calling
            PlotY,
            PlotYAppend,
            PlotWaveform``1,
            PlotWaveformAppend``1,
            PlotComplexWaveform``1, or
            PlotComplexWaveformAppend``1.
            
            -or-
            increment (parameter) is a positive value, and it was a negative value in a previous 
            PlotX or 
            PlotXAppend 
            invocation.
            
            -or-
            increment (parameter) is a negative value, and it was a positive value in a 
            previous PlotX or 
            PlotXAppend 
            invocation.
            </exception>
      <exception cref="T:System.NotSupportedException">
            The Owner of the plot is not null,
            and the Owner of the plot is
            different from the Owner of XAxis.
            
            -or-
            
            The Owner of the plot is not null,
            and the Owner of the plot is
            different from the Owner of YAxis.
            </exception>
      <exception cref="T:System.ArgumentException">ProcessSpecialValues is true,
            and the xData (parameter) value at a particular index and its corresponding y value are special values.
            </exception>
    </member>
    <member name="M:NationalInstruments.UI.WaveformPlot.PlotX(System.Double[],System.Int32,System.Int32,System.Double,System.Double)">
      <summary>
            Plots a subset of an array of x values against the specified starting y value. PlotX
            uses the specified value to increment y values.
            </summary>
      <param name="xData">
            The array of x values to plot.
            </param>
      <param name="startIndex">
            The index in xData (parameter) at which the plot data begins.
            </param>
      <param name="length">
            The number of elements, beginning at startIndex (parameter) in xData (parameter), to plot.
            </param>
      <param name="start">
            The starting y value.
            </param>
      <param name="increment">
            The value used to increment y values.
            </param>
      <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
      <exception cref="T:System.ArgumentNullException">xData (parameter) is null.
            </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">startIndex (parameter) is less than 0.
            
            -or-
            startIndex (parameter) is greater than or equal to the
            number of elements in xData (parameter).
            
            -or-
            length (parameter) is less than 0.
            
            -or-
            length (parameter) is greater than the number of elements
            from startIndex (parameter) to the end of xData (parameter).
            </exception>
      <exception cref="T:System.InvalidOperationException">
            		The XAxis of the plot is null.
            
            -or-
            
            		The YAxis of the plot is null.
            </exception>
      <exception cref="T:System.NotSupportedException">
            The Owner of the plot is not null,
            and the Owner of the plot is
            different from the Owner of XAxis.
            
            -or-
            
            The Owner of the plot is not null,
            and the Owner of the plot is
            different from the Owner of YAxis.
            </exception>
      <exception cref="T:System.ArgumentException">ProcessSpecialValues is true,
            and the xData (parameter) value at a particular index and its corresponding y value are special values.
            </exception>
    </member>
    <member name="M:NationalInstruments.UI.WaveformPlot.PlotX(System.Double[],System.Int32,System.Int32,System.DateTime,System.TimeSpan)">
      <summary>
            Plots a subset of an array of x values against the specified DateTime as the starting y value. 
            PlotX uses the 
            specified time span to increment y values.
            </summary>
      <param name="xData">
            The array of x values to plot.
            </param>
      <param name="startIndex">
            The index in xData (parameter) at which the plot data begins.
            </param>
      <param name="length">
            The number of elements, beginning at startIndex (parameter) in xData (parameter), to plot.
            </param>
      <param name="start">
            A DateTime that represents the starting y value.
            </param>
      <param name="increment">
            A TimeSpan that represents the value used to increment y values.
            </param>
      <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
      <exception cref="T:System.ArgumentNullException">xData (parameter) is null.
            </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">startIndex (parameter) is less than 0.
            
            -or-
            startIndex (parameter) is greater than or equal to the
            number of elements in xData (parameter).
            
            -or-
            length (parameter) is less than 0.
            
            -or-
            length (parameter) is greater than the number of elements
            from startIndex (parameter) to the end of xData (parameter).
            </exception>
      <exception cref="T:System.InvalidOperationException">
            		The XAxis of the plot is null.
            
            -or-
            
            		The YAxis of the plot is null.
            </exception>
      <exception cref="T:System.InvalidOperationException">
            		The XAxis of the plot is null.
            
            -or-
            
            		The YAxis of the plot is null.
            </exception>
      <exception cref="T:System.NotSupportedException">
            The Owner of the plot is not null,
            and the Owner of the plot is
            different from the Owner of XAxis.
            
            -or-
            
            The Owner of the plot is not null,
            and the Owner of the plot is
            different from the Owner of YAxis.
            </exception>
      <exception cref="T:System.ArgumentException">ProcessSpecialValues is true,
            and the xData (parameter) value at a particular index and its corresponding y value are special values.
            </exception>
    </member>
    <member name="M:NationalInstruments.UI.WaveformPlot.PlotX(System.Double[],System.Int32,System.Int32,System.DateTime,System.TimeSpan,NationalInstruments.UI.PlotDateTimePrecisionMode)">
      <summary>
            Plots a subset of an array of x values against the specified DateTime as the starting y value with the specified PlotDateTimePrecisionMode. PlotX uses the 
            specified time span to increment y values.
            </summary>
      <param name="xData">
            The array of x values to plot.
            </param>
      <param name="startIndex">
            The index in xData (parameter) at which the plot data begins.
            </param>
      <param name="length">
            The number of elements, beginning at startIndex (parameter) in xData (parameter), to plot.
            </param>
      <param name="start">
            A DateTime that represents the starting y value.
            </param>
      <param name="increment">
            A TimeSpan that represents the value to use to increment y values.
            </param>
      <param name="precisionMode">
            A PlotDateTimePrecisionMode that represents the precision mode to use when plotting the x values.
            </param>
      <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
      <exception cref="T:System.ArgumentNullException">xData (parameter) is null.
            </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">startIndex (parameter) is less than 0.
            
            -or-
            startIndex (parameter) is greater than or equal to the
            number of elements in xData (parameter).
            
            -or-
            length (parameter) is less than 0.
            
            -or-
            length (parameter) is greater than the number of elements
            from startIndex (parameter) to the end of xData (parameter).
            </exception>
      <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">precisionMode (parameter) is not a valid PlotDateTimePrecisionMode value.
            </exception>
      <exception cref="T:System.InvalidOperationException">
            		The XAxis of the plot is null.
            
            -or-
            
            		The YAxis of the plot is null.
            </exception>
      <exception cref="T:System.InvalidOperationException">
            		The XAxis of the plot is null.
            
            -or-
            
            		The YAxis of the plot is null.
            </exception>
      <exception cref="T:System.NotSupportedException">
            The Owner of the plot is not null,
            and the Owner of the plot is
            different from the Owner of XAxis.
            
            -or-
            
            The Owner of the plot is not null,
            and the Owner of the plot is
            different from the Owner of YAxis.
            </exception>
      <exception cref="T:System.ArgumentException">ProcessSpecialValues is true,
            and the xData (parameter) value at a particular index and its corresponding y value are special values.
            </exception>
    </member>
    <member name="M:NationalInstruments.UI.WaveformPlot.PlotX(System.Double)">
      <summary>
            Plots a single x value against the default starting y value.
            </summary>
      <param name="xData">
            The x value to plot.
            </param>
      <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
      <exception cref="T:System.InvalidOperationException">
            		The XAxis of the plot is null.
            
            -or-
            
            		The YAxis of the plot is null.
            </exception>
      <exception cref="T:System.NotSupportedException">
            The Owner of the plot is not null,
            and the Owner of the plot is
            different from the Owner of XAxis.
            
            -or-
            
            The Owner of the plot is not null,
            and the Owner of the plot is
            different from the Owner of YAxis.
            </exception>
      <exception cref="T:System.ArgumentException">ProcessSpecialValues is true,
            and xData (parameter) and its corresponding y value are special values.
            </exception>
    </member>
    <member name="M:NationalInstruments.UI.WaveformPlot.PlotX(System.Double[])">
      <summary>
            Plots an array of x values against the default starting y value.
            </summary>
      <param name="xData">
            The array of x values to plot.
            </param>
      <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
      <exception cref="T:System.ArgumentNullException">xData (parameter) is null.
            </exception>
      <exception cref="T:System.InvalidOperationException">
            		The XAxis of the plot is null.
            
            -or-
            
            		The YAxis of the plot is null.
            </exception>
      <exception cref="T:System.NotSupportedException">
            The Owner of the plot is not null,
            and the Owner of the plot is
            different from the Owner of XAxis.
            
            -or-
            
            The Owner of the plot is not null,
            and the Owner of the plot is
            different from the Owner of YAxis.
            </exception>
      <exception cref="T:System.ArgumentException">ProcessSpecialValues is true,
            and xData (parameter) value at a particular index and its corresponding y value are special values.
            </exception>
    </member>
    <member name="M:NationalInstruments.UI.WaveformPlot.PlotX(System.Double[],System.Double,System.Double)">
      <summary>
            Plots an array of x values against the specified starting y value. PlotX
            uses the specified value to increment y values.
            </summary>
      <param name="xData">
            The array of x values to plot.
            </param>
      <param name="start">
            The starting y value.
            </param>
      <param name="increment">
            The value to use to increment y values.
            </param>
      <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
      <exception cref="T:System.ArgumentNullException">xData (parameter) is null.
            </exception>
      <exception cref="T:System.InvalidOperationException">
            		The XAxis of the plot is null.
            
            -or-
            
            		The YAxis of the plot is null.
            </exception>
      <exception cref="T:System.NotSupportedException">
            The Owner of the plot is not null,
            and the Owner of the plot is
            different from the Owner of XAxis.
            
            -or-
            
            The Owner of the plot is not null,
            and the Owner of the plot is
            different from the Owner of YAxis.
            </exception>
      <exception cref="T:System.ArgumentException">ProcessSpecialValues is true,
            and xData (parameter) value at a particular index and its corresponding y value are special values.
            </exception>
    </member>
    <member name="M:NationalInstruments.UI.WaveformPlot.PlotX(System.Double[],System.DateTime,System.TimeSpan)">
      <summary>
            Plots an array of x values against the specified DateTime as the starting y value. 
            PlotX uses the 
            specified time span to increment y values.
            </summary>
      <param name="xData">
            The array of x values to plot.
            </param>
      <param name="start">
            A DateTime that represents the starting y value.
            </param>
      <param name="increment">
            A TimeSpan that represents the value to use to increment y values.
            </param>
      <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
      <exception cref="T:System.ArgumentNullException">xData (parameter) is null.
            </exception>
      <exception cref="T:System.InvalidOperationException">
            		The XAxis of the plot is null.
            
            -or-
            
            		The YAxis of the plot is null.
            </exception>
      <exception cref="T:System.NotSupportedException">
            The Owner of the plot is not null,
            and the Owner of the plot is
            different from the Owner of XAxis.
            
            -or-
            
            The Owner of the plot is not null,
            and the Owner of the plot is
            different from the Owner of YAxis.
            </exception>
      <exception cref="T:System.ArgumentException">ProcessSpecialValues is true,
            and xData (parameter) value at a particular index and its corresponding y value are special values.
            </exception>
    </member>
    <member name="M:NationalInstruments.UI.WaveformPlot.PlotYAppend(System.Double)">
      <summary>
            Plots a single y value against a starting x value by appending the x and y values to the existing data.
            </summary>
      <param name="yData">
            The y value to append.
            </param>
      <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
      <exception cref="T:System.InvalidOperationException">
            		The XAxis of the plot is null.
            
            -or-
            
            		The YAxis of the plot is null.
            
            -or-
            PlotYAppend is called after calling
            PlotX,
            PlotXAppend,
            PlotWaveform``1,
            PlotWaveformAppend``1,
            PlotComplexWaveform``1, or
            PlotComplexWaveformAppend``1.
            
            -or-
            
            	The increment is a positive value and it was a negative value in a previous 
            PlotY or 
            PlotYAppend 
            invocation.
            
            -or-
            
            		The increment is a negative value and it was a positive value in a 
            previous PlotY or 
            PlotYAppend 
            invocation.
            </exception>
      <exception cref="T:System.NotSupportedException">
            The Owner of the plot is not null,
            and the Owner of the plot is
            different from the Owner of XAxis.
            
            -or-
            
            The Owner of the plot is not null,
            and the Owner of the plot is
            different from the Owner of YAxis.
            </exception>
      <exception cref="T:System.ArgumentException">ProcessSpecialValues is true,
            and yData (parameter) and its corresponding x value are special values.
            </exception>
    </member>
    <member name="M:NationalInstruments.UI.WaveformPlot.PlotYAppend(System.Double,System.Double)">
      <summary>
            Plots a single y value against a starting x value by appending the x and y values to the existing data 
            using the specified value to increment x values.
            </summary>
      <param name="yData">
            The y value to append.
            </param>
      <param name="increment">
            The value to use to increment x values.
            </param>
      <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
      <exception cref="T:System.InvalidOperationException">
            		The XAxis of the plot is null.
            
            -or-
            
            		The YAxis of the plot is null.
            
            -or-
            PlotYAppend is called after calling
            PlotX,
            PlotXAppend,
            PlotWaveform``1,
            PlotWaveformAppend``1,
            PlotComplexWaveform``1, or
            PlotComplexWaveformAppend``1.
            
            -or-
            increment (parameter) is a positive value and it was a negative value in a previous 
            PlotY or 
            PlotYAppend 
            invocation.
            
            -or-
            increment (parameter) is a negative value and it was a positive value in a 
            previous PlotY or 
            PlotYAppend 
            invocation.
            </exception>
      <exception cref="T:System.NotSupportedException">
            The Owner of the plot is not null,
            and the Owner of the plot is
            different from the Owner of XAxis.
            
            -or-
            
            The Owner of the plot is not null,
            and the Owner of the plot is
            different from the Owner of YAxis.
            </exception>
      <exception cref="T:System.ArgumentException">increment (parameter) is a positive value and it was a negative value in a previous 
            PlotYAppend invocation.
            
            -or-
            

increment (parameter) is a negative value and it was a positive value in a previous 
            PlotYAppend invocation.
            


            -or-
            

ProcessSpecialValues is true,
            and yData (parameter) and its corresponding x value are special values.
            


            -or-
            increment (parameter) is a negative value and it was a positive value in a previous 
            PlotYAppend invocation.
            
            -or-
            ProcessSpecialValues is true,
            and yData (parameter) and its corresponding x value are special values.
            </exception>
    </member>
    <member name="M:NationalInstruments.UI.WaveformPlot.PlotYAppend(System.Double,System.TimeSpan)">
      <summary>
            Plots a single y value against a starting x value by appending the x and y values to the existing data 
            using the specified time span to increment x values.
            </summary>
      <param name="yData">
            The y value to append.
            </param>
      <param name="increment">
            A TimeSpan that represents the value to use to increment x values.
            </param>
      <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
      <exception cref="T:System.InvalidOperationException">
            		The XAxis of the plot is null.
            
            -or-
            
            		The YAxis of the plot is null.
            
            -or-
            PlotYAppend is called after calling
            PlotX,
            PlotXAppend,
            PlotWaveform``1,
            PlotWaveformAppend``1,
            PlotComplexWaveform``1, or
            PlotComplexWaveformAppend``1.
            
            -or-
            increment (parameter) is a positive value and it was a negative value in a previous 
            PlotY or 
            PlotYAppend 
            invocation.
            
            -or-
            increment (parameter) is a negative value and it was a positive value in a 
            previous PlotY or 
            PlotYAppend 
            invocation.
            </exception>
      <exception cref="T:System.NotSupportedException">
            The Owner of the plot is not null,
            and the Owner of the plot is
            different from the Owner of XAxis.
            
            -or-
            
            The Owner of the plot is not null,
            and the Owner of the plot is
            different from the Owner of YAxis.
            </exception>
      <exception cref="T:System.ArgumentException">ProcessSpecialValues is true,
            and yData (parameter) and its corresponding x value are special values.
            </exception>
    </member>
    <member name="M:NationalInstruments.UI.WaveformPlot.PlotYAppend(System.Double[])">
      <summary>
            Plots an array of y values against a starting x value by appending the x and y values to the existing data.
            </summary>
      <param name="yData">
            The y values to append.
            </param>
      <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
      <exception cref="T:System.ArgumentNullException">yData (parameter) is null.
            </exception>
      <exception cref="T:System.InvalidOperationException">
            		The XAxis of the plot is null.
            
            -or-
            
            		The YAxis of the plot is null.
            
            -or-
            PlotYAppend is called after calling
            PlotX,
            PlotXAppend,
            PlotWaveform``1,
            PlotWaveformAppend``1,
            PlotComplexWaveform``1, or
            PlotComplexWaveformAppend``1.
            
            -or-
            
            	The increment is a positive value and it was a negative value in a previous 
            PlotY or 
            PlotYAppend 
            invocation.
            
            -or-
            
            		The increment is a negative value and it was a positive value in a 
            previous PlotY or 
            PlotYAppend 
            invocation.
            </exception>
      <exception cref="T:System.NotSupportedException">
            The Owner of the plot is not null,
            and the Owner of the plot is
            different from the Owner of XAxis.
            
            -or-
            
            The Owner of the plot is not null,
            and the Owner of the plot is
            different from the Owner of YAxis.
            </exception>
      <exception cref="T:System.ArgumentException">ProcessSpecialValues is true,
            and yData (parameter) value at a particular index and its corresponding x value are special values.
            </exception>
    </member>
    <member name="M:NationalInstruments.UI.WaveformPlot.PlotYAppend(System.Double[],System.Double)">
      <summary>
            Plots an array of y values against a starting x value by appending the x and y values to the existing data 
            using the specified value to increment x values.
            </summary>
      <param name="yData">
            The y values to append.
            </param>
      <param name="increment">
            The value to use to increment x values.
            </param>
      <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
      <exception cref="T:System.ArgumentNullException">yData (parameter) is null.
            </exception>
      <exception cref="T:System.InvalidOperationException">
            		The XAxis of the plot is null.
            
            -or-
            
            		The YAxis of the plot is null.
            
            -or-
            PlotYAppend is called after calling
            PlotX,
            PlotXAppend,
            PlotWaveform``1,
            PlotWaveformAppend``1,
            PlotComplexWaveform``1, or
            PlotComplexWaveformAppend``1.
            
            -or-
            increment (parameter) is a positive value and it was a negative value in a previous 
            PlotY or 
            PlotYAppend 
            invocation.
            
            -or-
            increment (parameter) is a negative value and it was a positive value in a 
            previous PlotY or 
            PlotYAppend 
            invocation.
            </exception>
      <exception cref="T:System.NotSupportedException">
            The Owner of the plot is not null,
            and the Owner of the plot is
            different from the Owner of XAxis.
            
            -or-
            
            The Owner of the plot is not null,
            and the Owner of the plot is
            different from the Owner of YAxis.
            </exception>
      <exception cref="T:System.ArgumentException">ProcessSpecialValues is true,
            and yData (parameter) value at a particular index and its corresponding x value are special values.
            </exception>
    </member>
    <member name="M:NationalInstruments.UI.WaveformPlot.PlotYAppend(System.Double[],System.TimeSpan)">
      <summary>
            Plots an array of y values against a starting x value by appending the x and y value to the existing data 
            using the specified time span to increment x values.
            </summary>
      <param name="yData">
            The y values to append.
            </param>
      <param name="increment">
            A TimeSpan that represents the value used to increment x values.
            </param>
      <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
      <exception cref="T:System.ArgumentNullException">yData (parameter) is null.
            </exception>
      <exception cref="T:System.InvalidOperationException">
            		The XAxis of the plot is null.
            
            -or-
            
            		The YAxis of the plot is null.
            
            -or-
            PlotYAppend is called after calling
            PlotX,
            PlotXAppend,
            PlotWaveform``1,
            PlotWaveformAppend``1,
            PlotComplexWaveform``1, or
            PlotComplexWaveformAppend``1.
            
            -or-
            increment (parameter) is a positive value, and it was a negative value in a previous 
            PlotY or 
            PlotYAppend 
            invocation.
            
            -or-
            increment (parameter) is a negative value, and it was a positive value in a 
            previous PlotY or 
            PlotYAppend 
            invocation.
            </exception>
      <exception cref="T:System.NotSupportedException">
            The Owner of the plot is not null,
            and the Owner of the plot is
            different from the Owner of XAxis.
            
            -or-
            
            The Owner of the plot is not null,
            and the Owner of the plot is
            different from the Owner of YAxis.
            </exception>
      <exception cref="T:System.ArgumentException">ProcessSpecialValues is true,
            and the yData (parameter) value at a particular index and its corresponding x value are special values.
            </exception>
    </member>
    <member name="M:NationalInstruments.UI.WaveformPlot.PlotYAppend(System.Double[],System.Int32,System.Int32,System.Double)">
      <summary>
            Plots a subset of an array of y values against a starting x value by appending the x and y values to 
            the existing data using the specified value to increment x values.
            </summary>
      <param name="yData">
            The y values to append.
            </param>
      <param name="startIndex">
            The index in yData (parameter) at which the plot data begins.
            </param>
      <param name="length">
            The number of elements, beginning at startIndex (parameter) in yData (parameter), to plot.
            </param>
      <param name="increment">
            The value used to increment x values.
            </param>
      <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
      <exception cref="T:System.ArgumentNullException">yData (parameter) is null.
            </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">startIndex (parameter) is less than 0.
            
            -or-
            startIndex (parameter) is greater than or equal to the
            number of elements in yData (parameter).
            
            -or-
            length (parameter) is less than 0.
            
            -or-
            length (parameter) is greater than the number of elements
            from startIndex (parameter) to the end of yData (parameter).
            </exception>
      <exception cref="T:System.InvalidOperationException">
            		The XAxis of the plot is null.
            
            -or-
            
            		The YAxis of the plot is null.
            
            -or-
            PlotYAppend is called after calling
            PlotX,
            PlotXAppend,
            PlotWaveform``1,
            PlotWaveformAppend``1,
            PlotComplexWaveform``1, or
            PlotComplexWaveformAppend``1.
            
            -or-
            increment (parameter) is a positive value, and it was a negative value in a previous 
            PlotY or 
            PlotYAppend 
            invocation.
            
            -or-
            increment (parameter) is a negative value, and it was a positive value in a 
            previous PlotY or 
            PlotYAppend 
            invocation.
            </exception>
      <exception cref="T:System.NotSupportedException">
            The Owner of the plot is not null,
            and the Owner of the plot is
            different from the Owner of XAxis.
            
            -or-
            
            The Owner of the plot is not null,
            and the Owner of the plot is
            different from the Owner of YAxis.
            </exception>
      <exception cref="T:System.ArgumentException">ProcessSpecialValues is true,
            and the yData (parameter) value at a particular index and its corresponding x value are special values.
            </exception>
    </member>
    <member name="M:NationalInstruments.UI.WaveformPlot.PlotYAppend(System.Double[],System.Int32,System.Int32,System.TimeSpan)">
      <summary>
            Plots a subset of an array of y values against a starting x value by appending the x and y values to the 
            existing data using the specified time span to increment x values.
            </summary>
      <param name="yData">
            The y values to append.
            </param>
      <param name="startIndex">
            The index in yData (parameter) at which the plot data begins.
            </param>
      <param name="length">
            The number of elements, beginning at startIndex (parameter) in yData (parameter), to plot.
            </param>
      <param name="increment">
            A TimeSpan that represents the value used to increment x values.
            </param>
      <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
      <exception cref="T:System.ArgumentNullException">yData (parameter) is null.
            </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">startIndex (parameter) is less than 0.
            
            -or-
            startIndex (parameter) is greater than or equal to the
            number of elements in yData (parameter).
            
            -or-
            length (parameter) is less than 0.
            
            -or-
            length (parameter) is greater than the number of elements
            from startIndex (parameter) to the end of yData (parameter).
            </exception>
      <exception cref="T:System.InvalidOperationException">
            		The XAxis of the plot is null.
            
            -or-
            
            		The YAxis of the plot is null.
            
            -or-
            PlotYAppend is called after calling
            PlotX,
            PlotXAppend,
            PlotWaveform``1,
            PlotWaveformAppend``1,
            PlotComplexWaveform``1, or
            PlotComplexWaveformAppend``1.
            
            -or-
            increment (parameter) is a positive value, and it was a negative value in a previous 
            PlotY or 
            PlotYAppend 
            invocation.
            
            -or-
            increment (parameter) is a negative value, and it was a positive value in a 
            previous PlotY or 
            PlotYAppend 
            invocation.
            </exception>
      <exception cref="T:System.NotSupportedException">
            The Owner of the plot is not null,
            and the Owner of the plot is
            different from the Owner of XAxis.
            
            -or-
            
            The Owner of the plot is not null,
            and the Owner of the plot is
            different from the Owner of YAxis.
            </exception>
      <exception cref="T:System.ArgumentException">ProcessSpecialValues is true,
            and the yData (parameter) value at a particular index and its corresponding x value are special values.
            </exception>
    </member>
    <member name="M:NationalInstruments.UI.WaveformPlot.PlotYAppend(System.Double[],System.Int32,System.Int32,System.TimeSpan,NationalInstruments.UI.PlotDateTimePrecisionMode)">
      <summary>
            Plots a subset of an array of y values against a starting x value with the specified PlotDateTimePrecisionMode. PlotYAppend appends the x and y values to the 
            existing data using the specified time span to increment x values.
            </summary>
      <param name="yData">
            The y values to append.
            </param>
      <param name="startIndex">
            The index in yData (parameter) at which the plot data begins.
            </param>
      <param name="length">
            The number of elements, beginning at startIndex (parameter) in yData (parameter), to plot.
            </param>
      <param name="increment">
            A TimeSpan that represents the value to use to increment x values.
            </param>
      <param name="precisionMode">
            A PlotDateTimePrecisionMode that represents the precision mode to use when plotting the y values.
            </param>
      <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
      <exception cref="T:System.ArgumentNullException">yData (parameter) is null.
            </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">startIndex (parameter) is less than 0.
            
            -or-
            startIndex (parameter) is greater than or equal to the
            number of elements in yData (parameter).
            
            -or-
            length (parameter) is less than 0.
            
            -or-
            length (parameter) is greater than the number of elements
            from startIndex (parameter) to the end of yData (parameter).
            </exception>
      <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">precisionMode (parameter) is not a valid PlotDateTimePrecisionMode value.
            </exception>
      <exception cref="T:System.InvalidOperationException">
            		The XAxis of the plot is null.
            
            -or-
            
            		The YAxis of the plot is null.
            
            -or-
            PlotYAppend is called after calling
            PlotX,
            PlotXAppend,
            PlotWaveform``1,
            PlotWaveformAppend``1,
            PlotComplexWaveform``1, or
            PlotComplexWaveformAppend``1.
            
            -or-
            increment (parameter) is a positive value, and it was a negative value in a previous 
            PlotY or 
            PlotYAppend 
            invocation.
            
            -or-
            increment (parameter) is a negative value, and it was a positive value in a 
            previous PlotY or 
            PlotYAppend 
            invocation.
            </exception>
      <exception cref="T:System.NotSupportedException">
            The Owner of the plot is not null,
            and the Owner of the plot is
            different from the Owner of XAxis.
            
            -or-
            
            The Owner of the plot is not null,
            and the Owner of the plot is
            different from the Owner of YAxis.
            </exception>
      <exception cref="T:System.ArgumentException">ProcessSpecialValues is true,
            and the yData (parameter) value at a particular index and its corresponding x value are special values.
            </exception>
    </member>
    <member name="M:NationalInstruments.UI.WaveformPlot.PlotY(System.Double)">
      <summary>
            Plots a single y value against the default starting x value.
            </summary>
      <param name="yData">
            The y value to plot.
            </param>
      <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
      <exception cref="T:System.InvalidOperationException">
            		The XAxis of the plot is null.
            
            -or-
            
            		The YAxis of the plot is null.
            </exception>
      <exception cref="T:System.NotSupportedException">
            The Owner of the plot is not null,
            and the Owner of the plot is
            different from the Owner of XAxis.
            
            -or-
            
            The Owner of the plot is not null,
            and the Owner of the plot is
            different from the Owner of YAxis.
            </exception>
      <exception cref="T:System.ArgumentException">ProcessSpecialValues is true,
            and yData (parameter) and its corresponding x value are special values.
            </exception>
    </member>
    <member name="M:NationalInstruments.UI.WaveformPlot.PlotY(System.Double[])">
      <summary>
            Plots an array of y values against the default starting x value.</summary>
      <param name="yData">
            The array of y values to plot.
            </param>
      <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
      <exception cref="T:System.ArgumentNullException">yData (parameter) is null.
            </exception>
      <exception cref="T:System.InvalidOperationException">
            		The XAxis of the plot is null.
            
            -or-
            
            		The YAxis of the plot is null.
            </exception>
      <exception cref="T:System.NotSupportedException">
            The Owner of the plot is not null,
            and the Owner of the plot is
            different from the Owner of XAxis.
            
            -or-
            
            The Owner of the plot is not null,
            and the Owner of the plot is
            different from the Owner of YAxis.
            </exception>
      <exception cref="T:System.ArgumentException">ProcessSpecialValues is true,
            and yData (parameter) value at a particular index and its corresponding x value are special values.
            </exception>
    </member>
    <member name="M:NationalInstruments.UI.WaveformPlot.PlotY(System.Double[],System.Double,System.Double)">
      <summary>
            Plots an array of y values against the specified starting x value using the specified value
            to increment x values.
            </summary>
      <param name="yData">
            The array of y values to plot.
            </param>
      <param name="start">
            The starting x value.
            </param>
      <param name="increment">
            The value to use to increment x values.
            </param>
      <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
      <exception cref="T:System.ArgumentNullException">yData (parameter) is null.
            </exception>
      <exception cref="T:System.InvalidOperationException">
            		The XAxis of the plot is null.
            
            -or-
            
            		The YAxis of the plot is null.
            </exception>
      <exception cref="T:System.NotSupportedException">
            The Owner of the plot is not null,
            and the Owner of the plot is
            different from the Owner of XAxis.
            
            -or-
            
            The Owner of the plot is not null,
            and the Owner of the plot is
            different from the Owner of YAxis.
            </exception>
      <exception cref="T:System.ArgumentException">ProcessSpecialValues is true,
            and yData (parameter) value at a particular index and its corresponding x value are special values.
            </exception>
    </member>
    <member name="M:NationalInstruments.UI.WaveformPlot.PlotY(System.Double[],System.DateTime,System.TimeSpan)">
      <summary>
            Plots an array of y values against the specified DateTime as the starting x value using the 
            specified time span to increment x values.
            </summary>
      <param name="yData">
            The array of y values to plot.
            </param>
      <param name="start">
            A DateTime that represents the starting x value.
            </param>
      <param name="increment">
            A TimeSpan that represents the value to use to increment x values.
            </param>
      <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
      <exception cref="T:System.ArgumentNullException">yData (parameter) is null.
            </exception>
      <exception cref="T:System.InvalidOperationException">
            		The XAxis of the plot is null.
            
            -or-
            
            		The YAxis of the plot is null.
            </exception>
      <exception cref="T:System.NotSupportedException">
            The Owner of the plot is not null,
            and the Owner of the plot is
            different from the Owner of XAxis.
            
            -or-
            
            The Owner of the plot is not null,
            and the Owner of the plot is
            different from the Owner of YAxis.
            </exception>
      <exception cref="T:System.ArgumentException">ProcessSpecialValues is true,
            and yData (parameter) value at a particular index and its corresponding x value are special values.
            </exception>
    </member>
    <member name="M:NationalInstruments.UI.WaveformPlot.PlotY(System.Double[],System.Int32,System.Int32,System.Double,System.Double)">
      <summary>
            Plots a subset of an array of y values against the specified starting x value using the specified value
            to increment x values.
            </summary>
      <param name="yData">
            The array of y values to plot.
            </param>
      <param name="startIndex">
            The index in yData (parameter) at which the plot data begins.
            </param>
      <param name="length">
            The number of elements, beginning at startIndex (parameter) in yData (parameter), to plot.
            </param>
      <param name="start">
            The starting x value.
            </param>
      <param name="increment">
            The value used to increment x values.
            </param>
      <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
      <exception cref="T:System.ArgumentNullException">yData (parameter) is null.
            </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">startIndex (parameter) is less than 0.
            
            -or-
            startIndex (parameter) is greater than or equal to the
            number of elements in yData (parameter).
            
            -or-
            length (parameter) is less than 0.
            
            -or-
            length (parameter) is greater than the number of elements
            from startIndex (parameter) to the end of yData (parameter).
            </exception>
      <exception cref="T:System.InvalidOperationException">
            		The XAxis of the plot is null.
            
            -or-
            
            		The YAxis of the plot is null.
            </exception>
      <exception cref="T:System.NotSupportedException">
            The Owner of the plot is not null,
            and the Owner of the plot is
            different from the Owner of XAxis.
            
            -or-
            
            The Owner of the plot is not null,
            and the Owner of the plot is
            different from the Owner of YAxis.
            </exception>
      <exception cref="T:System.ArgumentException">ProcessSpecialValues is true,
            and the yData (parameter) value at a particular index and its corresponding x value are special values.
            </exception>
    </member>
    <member name="M:NationalInstruments.UI.WaveformPlot.PlotY(System.Double[],System.Int32,System.Int32,System.DateTime,System.TimeSpan)">
      <summary>
            Plots a subset of an array of y values against the specified DateTime as the starting x value.
            PlotY uses the specified time span to increment x values.
            </summary>
      <param name="yData">
            The array of y values to plot.
            </param>
      <param name="startIndex">
            The index in yData (parameter) at which the plot data begins.
            </param>
      <param name="length">
            The number of elements, beginning at startIndex (parameter) in yData (parameter), to plot.
            </param>
      <param name="start">
            A DateTime that represents the starting x value.
            </param>
      <param name="increment">
            A TimeSpan that represents the value used to increment x values.
            </param>
      <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
      <exception cref="T:System.ArgumentNullException">yData (parameter) is null.
            </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">startIndex (parameter) is less than 0.
            
            -or-
            startIndex (parameter) is greater than or equal to the
            number of elements in yData (parameter).
            
            -or-
            length (parameter) is less than 0.
            
            -or-
            length (parameter) is greater than the number of elements
            from startIndex (parameter) to the end of yData (parameter).
            </exception>
      <exception cref="T:System.InvalidOperationException">
            		The XAxis of the plot is null.
            
            -or-
            
            		The YAxis of the plot is null.
            </exception>
      <exception cref="T:System.NotSupportedException">
            The Owner of the plot is not null,
            and the Owner of the plot is
            different from the Owner of XAxis.
            
            -or-
            
            The Owner of the plot is not null,
            and the Owner of the plot is
            different from the Owner of YAxis.
            </exception>
      <exception cref="T:System.ArgumentException">ProcessSpecialValues is true,
            and the yData (parameter) value at a particular index and its corresponding x value are special values.
            </exception>
    </member>
    <member name="M:NationalInstruments.UI.WaveformPlot.PlotY(System.Double[],System.Int32,System.Int32,System.DateTime,System.TimeSpan,NationalInstruments.UI.PlotDateTimePrecisionMode)">
      <summary>
            Plots a subset of an array of y values against the specified DateTime as the starting x value with the specified PlotDateTimePrecisionMode.
            PlotY uses the specified time span to increment x values.
            </summary>
      <param name="yData">
            The array of y values to plot.
            </param>
      <param name="startIndex">
            The index in yData (parameter) at which the plot data begins.
            </param>
      <param name="length">
            The number of elements, beginning at startIndex (parameter) in yData (parameter), to plot.
            </param>
      <param name="start">
            A DateTime that represents the starting x value.
            </param>
      <param name="increment">
            A TimeSpan that represents the value to use to increment x values.
            </param>
      <param name="precisionMode">
            A PlotDateTimePrecisionMode that represents the precision mode to use when plotting the y values.
            </param>
      <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
      <exception cref="T:System.ArgumentNullException">yData (parameter) is null.
            </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">startIndex (parameter) is less than 0.
            
            -or-
            startIndex (parameter) is greater than or equal to the
            number of elements in yData (parameter).
            
            -or-
            length (parameter) is less than 0.
            
            -or-
            length (parameter) is greater than the number of elements
            from startIndex (parameter) to the end of yData (parameter).
            </exception>
      <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">precisionMode (parameter) is not a valid PlotDateTimePrecisionMode value.
            </exception>
      <exception cref="T:System.InvalidOperationException">
            		The XAxis of the plot is null.
            
            -or-
            
            		The YAxis of the plot is null.
            </exception>
      <exception cref="T:System.NotSupportedException">
            The Owner of the plot is not null,
            and the Owner of the plot is
            different from the Owner of XAxis.
            
            -or-
            
            The Owner of the plot is not null,
            and the Owner of the plot is
            different from the Owner of YAxis.
            </exception>
      <exception cref="T:System.ArgumentException">ProcessSpecialValues is true,
            and the yData (parameter) value at a particular index and its corresponding x value are special values.
            </exception>
    </member>
    <member name="M:NationalInstruments.UI.WaveformPlot.PlotWaveform``1(NationalInstruments.AnalogWaveform{``0})">
      <summary>
            Plots AnalogWaveform&lt;T&gt; data using default plot options.
            </summary>
      <typeparam name="TData">
            The underlying type of the waveform. 
            </typeparam>
      <param name="waveform">
            The AnalogWaveform&lt;T&gt; to plot.
            </param>
      <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
      <exception cref="T:System.ArgumentNullException">waveform (parameter) is null.
            </exception>
      <exception cref="T:System.InvalidOperationException">
            		The XAxis of the plot is null.
            
            -or-
            
            		The YAxis of the plot is null.
            </exception>
      <exception cref="T:System.NotSupportedException">
            The Owner of the plot is not null,
            and the Owner of the plot is
            different from the Owner of XAxis.
            
            -or-
            
            The Owner of the plot is not null,
            and the Owner of the plot is
            different from the Owner of YAxis.
            </exception>
    </member>
    <member name="M:NationalInstruments.UI.WaveformPlot.PlotWaveform``1(NationalInstruments.AnalogWaveform{``0},NationalInstruments.UI.AnalogWaveformPlotOptions)">
      <summary>
            Plots AnalogWaveform&lt;T&gt; data using the specified plot options.
            </summary>
      <typeparam name="TData">
            The underlying type of the waveform. 
            </typeparam>
      <param name="waveform">
            The AnalogWaveform&lt;T&gt; to plot.
            </param>
      <param name="options">
            The AnalogWaveformPlotOptions that specifies whether the waveform is 
            plotted against time or against waveform sample units. This parameter
            also specifies whether the waveform data is Raw
            or Scaled.
            This parameter also specifies whether PrecisionWaveformTiming or WaveformTiming
            is used if plotting the waveform data against time.
            </param>
      <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
      <exception cref="T:System.ArgumentNullException">waveform (parameter) is null.
            -or-
            options (parameter) is null.
            </exception>
      <exception cref="T:System.InvalidOperationException">
            		The XAxis of the plot is null.
            
            -or-
            
            		The YAxis of the plot is null.
            </exception>
      <exception cref="T:System.NotSupportedException">
            The Owner of the plot is not null,
            and the Owner of the plot is
            different from the Owner of XAxis.
            
            -or-
            
            The Owner of the plot is not null,
            and the Owner of the plot is
            different from the Owner of YAxis.
            </exception>
    </member>
    <member name="M:NationalInstruments.UI.WaveformPlot.PlotWaveformAppend``1(NationalInstruments.AnalogWaveform{``0})">
      <summary>
            Plots AnalogWaveform&lt;T&gt; data by 
            appending the waveform to the existing data.
            </summary>
      <typeparam name="TData">
            The underlying type of the waveform. 
            </typeparam>
      <param name="waveform">
            The AnalogWaveform&lt;T&gt; to append.
            </param>
      <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
      <exception cref="T:System.ArgumentNullException">waveform (parameter) is null.
            </exception>
      <exception cref="T:System.InvalidOperationException">
            		The XAxis of the plot is null.
            
            -or-
            
            		The YAxis of the plot is null.
            
            -or-
            PlotWaveformAppend``1 is called after calling
            PlotX,
            PlotXAppend,
            PlotY,
            PlotYAppend,
            PlotComplexWaveform``1, or
            PlotComplexWaveformAppend``1.
            </exception>
      <exception cref="T:System.NotSupportedException">
            The Owner of the plot is not null,
            and the Owner of the plot is
            different from the Owner of XAxis.
            
            -or-
            
            The Owner of the plot is not null,
            and the Owner of the plot is
            different from the Owner of YAxis.
            </exception>
    </member>
    <member name="M:NationalInstruments.UI.WaveformPlot.PlotComplexWaveform``1(NationalInstruments.ComplexWaveform{``0})">
      <summary>
            Plots ComplexWaveform&lt;T&gt; data using default plot options.
            </summary>
      <typeparam name="TData">
            The underlying type of the waveform. 
            </typeparam>
      <param name="waveform">
            The ComplexWaveform&lt;T&gt; to plot.
            </param>
      <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
      <exception cref="T:System.ArgumentNullException">waveform (parameter) is null.
            </exception>
      <exception cref="T:System.InvalidOperationException">
            		The XAxis of the plot is null.
            
            -or-
            
            		The YAxis of the plot is null.
            </exception>
      <exception cref="T:System.NotSupportedException">
            The Owner of the plot is not null,
            and the Owner of the plot is
            different from the Owner of XAxis.
            
            -or-
            
            The Owner of the plot is not null,
            and the Owner of the plot is
            different from the Owner of YAxis.
            </exception>
    </member>
    <member name="M:NationalInstruments.UI.WaveformPlot.PlotComplexWaveform``1(NationalInstruments.ComplexWaveform{``0},NationalInstruments.UI.ComplexWaveformPlotOptions)">
      <summary>
            Plots ComplexWaveform&lt;T&gt; data using the specified plot options.
            </summary>
      <typeparam name="TData">
            The underlying type of the waveform. 
            </typeparam>
      <param name="waveform">
            The ComplexWaveform&lt;T&gt; to plot.
            </param>
      <param name="options">
            The ComplexWaveformPlotOptions that specifies whether the waveform is 
            plotted against time or against waveform sample units. This parameter
            also specifies whether the waveform data is Raw
            or Scaled and specifies whether the part of complex data plotted on YAxes is Real,
            Imaginary, Phase, or Magnitude.
            </param>
      <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
      <exception cref="T:System.ArgumentNullException">waveform (parameter) is null.
            -or-
            options (parameter) is null.</exception>
      <exception cref="T:System.InvalidOperationException">
            		The XAxis of the plot is null.
            
            -or-
            
            		The YAxis of the plot is null.
            </exception>
      <exception cref="T:System.NotSupportedException">
            The Owner of the plot is not null,
            and the Owner of the plot is
            different from the Owner of XAxis.
            
            -or-
            
            The Owner of the plot is not null,
            and the Owner of the plot is
            different from the Owner of YAxis.
            </exception>
    </member>
    <member name="M:NationalInstruments.UI.WaveformPlot.PlotComplexWaveformAppend``1(NationalInstruments.ComplexWaveform{``0})">
      <summary>
            Plots ComplexWaveform&lt;T&gt; data by 
            appending the waveform to the existing data.
            </summary>
      <typeparam name="TData">
            The underlying type of the waveform. 
            </typeparam>
      <param name="waveform">
            The ComplexWaveform&lt;T&gt; to append.
            </param>
      <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
      <exception cref="T:System.ArgumentNullException">waveform (parameter) is null.
            </exception>
      <exception cref="T:System.InvalidOperationException">
            		The XAxis of the plot is null.
            
            -or-
            
            		The YAxis of the plot is null.
            
            -or-
            PlotComplexWaveformAppend``1 is called after calling
            PlotX,
            PlotXAppend,
            PlotY, 
            PlotYAppend,
            PlotWaveform``1, or
            PlotWaveformAppend``1.
            </exception>
      <exception cref="T:System.NotSupportedException">
            The Owner of the plot is not null,
            and the Owner of the plot is
            different from the Owner of XAxis.
            
            -or-
            
            The Owner of the plot is not null,
            and the Owner of the plot is
            different from the Owner of YAxis.
            </exception>
    </member>
    <member name="M:NationalInstruments.UI.WaveformPlot.Clone">
      <summary>
            Creates a new object that is a copy of this instance.
            </summary>
      <returns>
            A new object that is a copy of this instance.
            </returns>
      <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
    </member>
    <member name="P:NationalInstruments.UI.WaveformPlot.DefaultStart">
      <summary>
            Gets or sets the default value that is used for the starting x or y value.
            </summary>
      <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
            The specified value is NaN, NegativeInfinity,
            or PositiveInfinity.
            </exception>
    </member>
    <member name="P:NationalInstruments.UI.WaveformPlot.DefaultIncrement">
      <summary>
            Gets or sets the default value to use to increment x or y values.
            </summary>
      <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
            The specified value is NaN, NegativeInfinity,
            or PositiveInfinity.
            </exception>
    </member>
    <member name="P:NationalInstruments.UI.WaveformPlot.DefaultWaveformPlotOptions">
      <summary> 
            Gets or sets the AnalogWaveformPlotOptions that display an AnalogWaveform or AnalogWaveform&lt;T&gt; 
            when you use a PlotWaveform``1 overload that does not specify the options.
             
            Gets or sets the AnalogWaveformPlotOptions that display an AnalogWaveform&lt;T&gt; 
            when you use a PlotWaveform``1 overload that does not specify the options.
            </summary>
      <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
      <exception cref="T:System.ArgumentNullException">
            The specified value is null.
            </exception>
    </member>
    <member name="P:NationalInstruments.UI.WaveformPlot.DefaultComplexWaveformPlotOptions">
      <summary>
            Gets or sets the ComplexWaveformPlotOptions used to display a ComplexWaveform&lt;T&gt; when a PlotComplexWaveform``1 overload is used that does not specify it.
            </summary>
      <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
      <exception cref="T:System.ArgumentNullException">
            The specified value is null.
            </exception>
    </member>
    <member name="P:NationalInstruments.UI.WaveformPlot.DefaultWaveformPrecisionTiming">
      <summary>
            Gets or sets the timing used to plot the analog or complex waveform using PlotWaveform``1 or PlotComplexWaveform``1 when the waveform does not have a time stamp or sample interval.
            </summary>
      <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
      <exception cref="T:System.ArgumentNullException">
            The specified value is null.
            </exception>
      <exception cref="T:System.InvalidOperationException">
            The SampleIntervalMode of the specified value is not 
            Regular.
            
            -or-
            
            The HasTimeStamp in the specified value is false.
            </exception>
    </member>
    <member name="P:NationalInstruments.UI.WaveformPlot.DefaultTiming">
      <summary>
            Gets or sets the timing used to plot the analog waveform using PlotWaveform``1
            when the waveform does not have a time stamp or 
            sample interval.
            </summary>
      <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
      <exception cref="T:System.ArgumentNullException">
            The specified value is null.
            </exception>
      <exception cref="T:System.InvalidOperationException">
            The SampleIntervalMode of the specified value is not 
            Regular.
            
            -or-
            
            The HasTimeStamp in the specified value is false.
            </exception>
    </member>
    <member name="P:NationalInstruments.UI.WaveformPlot.Mode">
      <summary>
            Gets the category of the method that is currently being used to plot data.
            </summary>
      <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
    </member>
    <member name="P:NationalInstruments.UI.WaveformPlot.IntervalPolarity">
      <summary>
            Gets the polarity of the interval that separates the waveform data.
            </summary>
      <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
    </member>
    <member name="T:NationalInstruments.UI.ScrollBarButton">
      <summary>
            Specifies the position of the scroll bar button.
            </summary>
    </member>
    <member name="F:NationalInstruments.UI.ScrollBarButton.Up">
      <summary>
            An up-scroll arrow.
            </summary>
    </member>
    <member name="F:NationalInstruments.UI.ScrollBarButton.Down">
      <summary>
            A down-scroll arrow.
            </summary>
    </member>
    <member name="F:NationalInstruments.UI.ScrollBarButton.Left">
      <summary>
            A left-scroll arrow.
            </summary>
    </member>
    <member name="F:NationalInstruments.UI.ScrollBarButton.Right">
      <summary>
            A right-scroll arrow.
            </summary>
    </member>
    <member name="T:NationalInstruments.UI.AfterChangeNumericValueEventArgs">
      <summary>
            Provides data for the AfterChangeValue event.
            </summary>
    </member>
    <member name="M:NationalInstruments.UI.AfterChangeNumericValueEventArgs.#ctor(System.Double,System.Double,NationalInstruments.UI.Action)">
      <summary>
            Initializes a new instance of the AfterChangeNumericValueEventArgs class.
            </summary>
      <param name="oldValue">The value before the event occurs.
            </param>
      <param name="newValue">The value after the event occurs.
            </param>
      <param name="action">The Action that caused the event.
            </param>
      <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">action (parameter) is not one of the Action
            values.
            </exception>
    </member>
    <member name="M:NationalInstruments.UI.AfterChangeNumericValueEventArgs.ToString">
      <summary>
            Returns a string representation of the object.
            </summary>
      <returns>
            A string representation of the object.
            </returns>
    </member>
    <member name="P:NationalInstruments.UI.AfterChangeNumericValueEventArgs.OldValue">
      <summary>
            Gets the value before the event occurs.
            </summary>
    </member>
    <member name="P:NationalInstruments.UI.AfterChangeNumericValueEventArgs.NewValue">
      <summary>
            Gets the value after the event occurs.
            </summary>
    </member>
    <member name="T:NationalInstruments.UI.PointAlignment">
      <summary>
            Provides an abstract base class for aligning items to a reference point.
            </summary>
    </member>
    <member name="M:NationalInstruments.UI.PointAlignment.#ctor">
      <summary>
            Initializes a new instance of the PointAlignment class.
            </summary>
    </member>
    <member name="P:NationalInstruments.UI.PointAlignment.UnderlyingType">
      <summary>
            Gets the underlying type of an EnumObject value.
            </summary>
    </member>
    <member name="P:NationalInstruments.UI.PointAlignment.Auto">
      <summary>
            Gets a point alignment that auto-aligns an item to the specified reference point.
            </summary>
    </member>
    <member name="P:NationalInstruments.UI.PointAlignment.BottomCenter">
      <summary>
            Gets a point alignment that aligns an item to the bottom center of the specified reference point.
            </summary>
    </member>
    <member name="P:NationalInstruments.UI.PointAlignment.BottomLeft">
      <summary>
            Gets a point alignment that aligns an item to the bottom left of the specified reference point.
            </summary>
    </member>
    <member name="P:NationalInstruments.UI.PointAlignment.BottomRight">
      <summary>
            Gets a point alignment that aligns an item to the bottom right of the specified reference point.
            </summary>
    </member>
    <member name="P:NationalInstruments.UI.PointAlignment.MiddleCenter">
      <summary>
            Gets a point alignment that aligns an item to the middle center of the specified reference point.
            </summary>
    </member>
    <member name="P:NationalInstruments.UI.PointAlignment.MiddleLeft">
      <summary>
            Gets a point alignment that aligns an item to the middle left of the specified reference point.
            </summary>
    </member>
    <member name="P:NationalInstruments.UI.PointAlignment.MiddleRight">
      <summary>
            Gets a point alignment that aligns an item to the middle right of the specified reference point.
            </summary>
    </member>
    <member name="P:NationalInstruments.UI.PointAlignment.TopLeft">
      <summary>
            Gets a point alignment that aligns an item to the top left of the specified reference point.
            </summary>
    </member>
    <member name="P:NationalInstruments.UI.PointAlignment.TopRight">
      <summary>
            Gets a point alignment that aligns an item to the top right of the specified reference point.
            </summary>
    </member>
    <member name="P:NationalInstruments.UI.PointAlignment.TopCenter">
      <summary>
            Gets a point alignment that aligns an item to the top center of the specified reference point.
            </summary>
    </member>
    <member name="P:NationalInstruments.UI.PointAlignment.None">
      <summary>
            Gets a point alignment that does not adjust the alignment of the item.
            </summary>
    </member>
    <member name="T:NationalInstruments.UI.PlotFillMode">
      <summary>
            Specifies what draws to base.
            </summary>
    </member>
    <member name="F:NationalInstruments.UI.PlotFillMode.None">
      <summary>
            No fill or lines to base.
            </summary>
    </member>
    <member name="F:NationalInstruments.UI.PlotFillMode.Fill">
      <summary>
            Fills are from the plot to the base.
            </summary>
    </member>
    <member name="F:NationalInstruments.UI.PlotFillMode.Lines">
      <summary>
            Lines are drawn from the data points to the base.
            </summary>
    </member>
    <member name="F:NationalInstruments.UI.PlotFillMode.FillAndLines">
      <summary>
            Lines are drawn from the data points to the base and fills.
            </summary>
    </member>
    <member name="F:NationalInstruments.UI.PlotFillMode.Bins">
      <summary>
            Lines are drawn between the data points to the base.
            </summary>
    </member>
    <member name="F:NationalInstruments.UI.PlotFillMode.FillAndBins">
      <summary>
            Lines are drawn between the data points and fills to the base.
            </summary>
    </member>
    <member name="T:NationalInstruments.UI.PlotArrowLocationInfo">
      <summary>
            Provides information about the number and location of arrows drawn on various segments of the plot.
            </summary>
    </member>
    <member name="M:NationalInstruments.UI.PlotArrowLocationInfo.#ctor(System.Int32,System.Int32,System.Int32)">
      <summary>
            Initializes a new instance of the PlotArrowLocationInfo class.
            </summary>
      <param name="startIndex">
            The index in the data points array at which the array data begins.
            </param>
      <param name="endIndex">
            The index in the data points array at which the array data ends.
            </param>
      <param name="arrowCount">
            The number of arrows drawn on the plot segment defined by StartIndex and 
            EndIndex.
            </param>
      <exception cref="T:System.ArgumentOutOfRangeException">arrowCount (parameter) is negative.
            
            -or-
            startIndex (parameter) is negative.
            
            -or-
            endIndex (parameter) is negative.
            
            -or-
            startIndex (parameter) is greater than or equal to endIndex (parameter).
            </exception>
    </member>
    <member name="P:NationalInstruments.UI.PlotArrowLocationInfo.StartIndex">
      <summary>
            Gets the index in the data array at which the plot segment begins.
            </summary>
    </member>
    <member name="P:NationalInstruments.UI.PlotArrowLocationInfo.EndIndex">
      <summary>
            Gets the index in the data array at which the plot segment ends.
            </summary>
    </member>
    <member name="P:NationalInstruments.UI.PlotArrowLocationInfo.ArrowCount">
      <summary>
            Gets the number of arrows to draw on the plot.
            </summary>
    </member>
    <member name="T:NationalInstruments.UI.NumericPointerWebInteractionMouseCursors">
      <summary>
            Represents the mouse cursor for interaction with the Web Forms numeric pointer controls.</summary>
    </member>
    <member name="F:NationalInstruments.UI.NumericPointerWebInteractionMouseCursors.DefaultIndicator">
      <summary>
            Gets the default mouse cursor used when NumericPointerWebInteractionMode is set to Indicator.
            </summary>
    </member>
    <member name="F:NationalInstruments.UI.NumericPointerWebInteractionMouseCursors.DefaultSnapPointer">
      <summary>
            The default mouse cursor used when NumericPointerWebInteractionMode is set to SnapPointer.
            </summary>
    </member>
    <member name="M:NationalInstruments.UI.NumericPointerWebInteractionMouseCursors.#ctor">
      <summary>
            Initializes a new instance of the NumericPointerWebInteractionMouseCursors class.
            </summary>
    </member>
    <member name="M:NationalInstruments.UI.NumericPointerWebInteractionMouseCursors.ToString">
      <summary>
            Creates a new object that is a copy of this instance.
            </summary>
      <returns>
            A new object that is a copy of this instance.
            </returns>
    </member>
    <member name="M:NationalInstruments.UI.NumericPointerWebInteractionMouseCursors.ResetAllToDefault">
      <summary>
            Resets all the properties of NumericPointerWebInteractionMouseCursors to default values.
            </summary>
    </member>
    <member name="P:NationalInstruments.UI.NumericPointerWebInteractionMouseCursors.Indicator">
      <summary>
            Gets or sets the mouse cursor used when NumericPointerWebInteractionMode is set to Indicator.
            </summary>
    </member>
    <member name="P:NationalInstruments.UI.NumericPointerWebInteractionMouseCursors.SnapPointer">
      <summary>
            Gets or sets the mouse cursor used when NumericPointerWebInteractionMode is set to SnapPointer.
            </summary>
    </member>
    <member name="T:NationalInstruments.UI.NumericPointerInteractionMouseCursors">
      <summary>
            Represents the mouse cursor for interaction with the Windows Forms numeric pointer controls..
            </summary>
    </member>
    <member name="F:NationalInstruments.UI.NumericPointerInteractionMouseCursors.DefaultDrag">
      <summary>
            Gets the default mouse cursor used when LinearNumericPointerInteractionModes is set to DragPointer  or RadialNumericPointerInteractionModes is set to or DragPointer for the drag interaction.
            </summary>
    </member>
    <member name="F:NationalInstruments.UI.NumericPointerInteractionMouseCursors.DefaultDragging">
      <summary>
            Gets the default mouse cursor used when 
            LinearNumericPointerInteractionModes is set to DragPointer or 
            RadialNumericPointerInteractionModes  is set to DragPointer for the dragging interaction.
            </summary>
    </member>
    <member name="F:NationalInstruments.UI.NumericPointerInteractionMouseCursors.DefaultSnap">
      <summary>
            Gets the default mouse cursor used when LinearNumericPointerInteractionModes is set to SnapPointer or 
            RadialNumericPointerInteractionModes  is set to SnapPointer for the snap interaction.
            </summary>
    </member>
    <member name="F:NationalInstruments.UI.NumericPointerInteractionMouseCursors.DefaultSnapping">
      <summary>
            Gets the default mouse cursor used when 
            LinearNumericPointerInteractionModes is set to SnapPointer or RadialNumericPointerInteractionModes  is set to SnapPointer for the snapping interaction.
            </summary>
    </member>
    <member name="F:NationalInstruments.UI.NumericPointerInteractionMouseCursors.DefaultEditRange">
      <summary>
            Gets the default mouse cursor used when LinearNumericPointerInteractionModes  is set to EditRange or 
            RadialNumericPointerInteractionModes is set to EditRange.
            </summary>
    </member>
    <member name="M:NationalInstruments.UI.NumericPointerInteractionMouseCursors.#ctor">
      <summary>
            Initializes a new instance of the NumericPointerInteractionMouseCursors class.
            </summary>
    </member>
    <member name="M:NationalInstruments.UI.NumericPointerInteractionMouseCursors.ToString">
      <summary>
            Creates a new object that is a copy of this instance.
            </summary>
      <returns>
            A new object that is a copy of this instance.
            </returns>
    </member>
    <member name="M:NationalInstruments.UI.NumericPointerInteractionMouseCursors.ResetAllToDefault">
      <summary>
            Resets all the properties of NumericPointerInteractionMouseCursors to default values.
            </summary>
    </member>
    <member name="M:NationalInstruments.UI.NumericPointerInteractionMouseCursors.OnPropertyChanged(System.ComponentModel.PropertyChangedEventArgs)">
      <summary>
            Raises the PropertyChanged event.
            </summary>
      <param name="e">
            A PropertyChangedEventArgs that contains the event data.
            </param>
    </member>
    <member name="P:NationalInstruments.UI.NumericPointerInteractionMouseCursors.Drag">
      <summary>
            Gets or sets the mouse cursor used when LinearNumericPointerInteractionModes is set to DragPointer  or RadialNumericPointerInteractionModes is set to or DragPointer for the drag interaction. 
            </summary>
    </member>
    <member name="P:NationalInstruments.UI.NumericPointerInteractionMouseCursors.Dragging">
      <summary>
            Gets or sets the mouse cursor used when LinearNumericPointerInteractionModes is set to DragPointer  or RadialNumericPointerInteractionModes is set to or DragPointer for the dragging interaction.
            </summary>
    </member>
    <member name="P:NationalInstruments.UI.NumericPointerInteractionMouseCursors.Snap">
      <summary>
            Gets or sets the mouse cursor used when LinearNumericPointerInteractionModes is set to SnapPointer or 
            RadialNumericPointerInteractionModes  is set to SnapPointer for the snap interaction.
            </summary>
    </member>
    <member name="P:NationalInstruments.UI.NumericPointerInteractionMouseCursors.Snapping">
      <summary>
            Gets or sets the mouse cursor used when 
            LinearNumericPointerInteractionModes is set to SnapPointer or RadialNumericPointerInteractionModes  is set to SnapPointer for the snapping interaction.
            </summary>
    </member>
    <member name="P:NationalInstruments.UI.NumericPointerInteractionMouseCursors.EditRange">
      <summary>
            Gets or sets the mouse cursor used when LinearNumericPointerInteractionModes  is set to EditRange or 
            RadialNumericPointerInteractionModes is set to EditRange.
            </summary>
    </member>
    <member name="E:NationalInstruments.UI.NumericPointerInteractionMouseCursors.PropertyChanged">
      <summary>
            Occurs when the value of a property changes.
            </summary>
      <exception cref="T:System.ObjectDisposedException">
            An event handler is added after the object has been disposed.</exception>
    </member>
    <member name="T:NationalInstruments.UI.LedStyleDrawArgs">
      <summary>
            Provides the data to draw an LED style.
            </summary>
    </member>
    <member name="M:NationalInstruments.UI.LedStyleDrawArgs.#ctor(System.Drawing.Graphics,System.Drawing.Rectangle,System.Drawing.Color,System.Boolean)">
      <summary>
            Initializes	a new instance of the LedStyleDrawArgs class with the specified
            graphics, bounds, color, and value.
            </summary>
      <param name="graphics">
            The	Graphics with which to draw.
            </param>
      <param name="bounds">
            The Rectangle in which the LED style is drawn. This value is the bounds of the 
            control, excluding the caption, and a 4-pixel thick padding on the sides.
            </param>
      <param name="color">
            The	Color of the LED style.
            </param>
      <param name="value">
            The	Boolean value that is represented by the LED style.
            </param>
      <exception cref="T:System.ArgumentNullException">graphics (parameter)	is null.
            </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
            The	Width of bounds (parameter) is less than zero.
            
            -or-
            
            The	Height of bounds (parameter) is less than zero.
            </exception>
    </member>
    <member name="T:NationalInstruments.UI.IThermometer">
      <summary>
            Defines an interface for the thermometer control.</summary>
    </member>
    <member name="P:NationalInstruments.UI.IThermometer.ThermometerStyle">
      <summary>
            Gets or sets the style that determines the appearance of the thermometer.
            </summary>
      <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
      <exception cref="T:System.ArgumentNullException">
            The value is null.
            </exception>
    </member>
    <member name="P:NationalInstruments.UI.IThermometer.MaximumBulbDiameter">
      <summary>
            Gets or sets the maximum bulb diameter.
            </summary>
      <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
            The specified value is less than or equal to zero.
            
            -or-
            
            The specified value is NaN, NegativeInfinity,
            or PositiveInfinity.
            </exception>
    </member>
    <member name="T:NationalInstruments.UI.ITank">
      <summary>
            Defines an interface for the tank control.</summary>
    </member>
    <member name="P:NationalInstruments.UI.ITank.TankStyle">
      <summary>
            Gets or sets the style that determines the appearance of the tank.
            </summary>
      <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
      <exception cref="T:System.ArgumentNullException">
            The value is null.
            </exception>
    </member>
    <member name="T:NationalInstruments.UI.IntensityYAxisEventHandler">
      <summary>
            Represents the method that handles the 
            YAxisRangeChanged event.
            </summary>
      <param name="sender">
            The source of the event.
            </param>
      <param name="e">
            An IntensityYAxisEventArgs that contains the event
            data.
            </param>
    </member>
    <member name="T:NationalInstruments.UI.IntensityYAxisCollection">
      <summary>
            Represents a strongly typed collection of IntensityYAxis objects.
            </summary>
    </member>
    <member name="M:NationalInstruments.UI.IntensityYAxisCollection.#ctor">
      <summary>
            Initializes a new instance of the IntensityYAxisCollection class.
            </summary>
    </member>
    <member name="M:NationalInstruments.UI.IntensityYAxisCollection.#ctor(NationalInstruments.UI.IntensityYAxis[])">
      <summary>
            Initializes a new instance of the IntensityYAxisCollection class
            from an array of IntensityYAxis objects.
            </summary>
      <param name="item">
            Array of IntensityYAxis objects to copy.
            </param>
      <exception cref="T:System.ArgumentNullException">item (parameter) is null.
            
            -or-
            
            An element in item (parameter) is null.
            </exception>
      <exception cref="T:System.NotSupportedException">
            		An element in item (parameter) has been disposed.
            
            -or-
            
            		An element in item (parameter) is in another IntensityYAxisCollection.
            
            -or-
            
            		An element in item (parameter) is already in this collection.
            </exception>
    </member>
    <member name="M:NationalInstruments.UI.IntensityYAxisCollection.#ctor(NationalInstruments.UI.IntensityYAxisCollection)">
      <summary>
            Initializes a new instance of IntensityYAxisCollection
            from an existing collection.
            </summary>
      <param name="item">
            The IntensityYAxisCollection to copy.
            </param>
      <exception cref="T:System.ArgumentNullException">item (parameter) is null.
            
            -or-
            
            An element in item (parameter) is null.
            </exception>
      <exception cref="T:System.NotSupportedException">
            		An element in item (parameter) has been disposed.
            
            -or-
            
            		An element in item (parameter) is in another IntensityYAxisCollection.
            
            -or-
            
            		An element in item (parameter) is already in this collection.
            </exception>
    </member>
    <member name="M:NationalInstruments.UI.IntensityYAxisCollection.ToString">
      <summary>
            Returns a string representation of the object.
            </summary>
      <returns>
            A string representation of the object.
            </returns>
    </member>
    <member name="M:NationalInstruments.UI.IntensityYAxisCollection.Add(NationalInstruments.UI.IntensityYAxis)">
      <summary>
            Adds an item to the end of the collection.
            </summary>
      <param name="item">
            Item to add to the collection.
            </param>
      <returns>
            The array index of the added item.
            </returns>
      <exception cref="T:System.ArgumentNullException">item (parameter) is null.
            </exception>
      <exception cref="T:System.NotSupportedException">item (parameter) has been disposed.
            
            -or-
            item (parameter) is in another IntensityYAxisCollection.
            
            -or-
            item (parameter) is already in this collection.
            </exception>
    </member>
    <member name="M:NationalInstruments.UI.IntensityYAxisCollection.AddRange(NationalInstruments.UI.IntensityYAxis[])">
      <summary>
            Adds an array of IntensityYAxis objects to the end of the collection.
            </summary>
      <param name="item">
            Array of IntensityYAxis objects to add to the collection.
            </param>
      <exception cref="T:System.ArgumentNullException">item (parameter) is null.
            
            -or-
            
            An element in item (parameter) is null.
            </exception>
      <exception cref="T:System.NotSupportedException">
            		An element in item (parameter) has been disposed.
            
            -or-
            
            		An element in item (parameter) is in another IntensityYAxisCollection.
            
            -or-
            
            		An element in item (parameter) is already in this collection.
            </exception>
    </member>
    <member name="M:NationalInstruments.UI.IntensityYAxisCollection.AddRange(NationalInstruments.UI.IntensityYAxisCollection)">
      <summary>
            Adds a collection of IntensityYAxis objects to the end of the collection.
            </summary>
      <param name="item">
            Collection of IntensityYAxis objects to add to the collection.
            </param>
      <exception cref="T:System.ArgumentNullException">item (parameter) is null.
            
            -or-
            
            An element in item (parameter) is null.
            </exception>
      <exception cref="T:System.NotSupportedException">
            		An element in item (parameter) has been disposed.
            
            -or-
            
            		An element in item (parameter) is in another IntensityYAxisCollection.
            
            -or-
            
            		An element in item (parameter) is already in this collection.
            </exception>
    </member>
    <member name="M:NationalInstruments.UI.IntensityYAxisCollection.Clear">
      <summary>
            Removes all items from the collection.
            </summary>
    </member>
    <member name="M:NationalInstruments.UI.IntensityYAxisCollection.Contains(NationalInstruments.UI.IntensityYAxis)">
      <summary>
            Determines if the specified element is in the collection.
            </summary>
      <param name="item">Item to locate in the collection.</param>
      <returns>true if the collection contains item (parameter).
            </returns>
    </member>
    <member name="M:NationalInstruments.UI.IntensityYAxisCollection.CopyTo(NationalInstruments.UI.IntensityYAxis[],System.Int32)">
      <summary>
            Copies the collection to an array or a portion of an array.
            </summary>
      <param name="array">
            Destination array for the collection.
            </param>
      <param name="index">
            The index in the target array at which you want to begin copying the collection to.
            </param>
      <exception cref="T:System.ArgumentNullException">array (parameter) is null.
            </exception>
      <exception cref="T:System.ArgumentException">array (parameter) is multidimensional.
            
            -or-
            index (parameter) is equal to or greater than the length of array (parameter).
            
            -or-
            
            The number of elements in the collection is greater than the available space between
            index (parameter) and the end of array (parameter).
            </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">index (parameter) is less than the lower bound of array (parameter).
            </exception>
    </member>
    <member name="M:NationalInstruments.UI.IntensityYAxisCollection.IndexOf(NationalInstruments.UI.IntensityYAxis)">
      <summary>
            Returns the zero-based index of the first occurrence of an item in the collection.
            </summary>
      <param name="item">
            Item to search for.
            </param>
      <returns>
            Index of the item. If the item is not found, returns -1.
            </returns>
    </member>
    <member name="M:NationalInstruments.UI.IntensityYAxisCollection.Insert(System.Int32,NationalInstruments.UI.IntensityYAxis)">
      <summary>
            Inserts an item into the collection at the specified index.
            </summary>
      <param name="index">
            Index to insert the item at.
            </param>
      <param name="item">
            Item to insert into the collection.
            </param>
      <exception cref="T:System.ArgumentNullException">item (parameter) is null.
            </exception>
      <exception cref="T:System.NotSupportedException">item (parameter) has been disposed.
            
            -or-
            item (parameter) is in another IntensityYAxisCollection.
            
            -or-
            item (parameter) is already in this collection.
            </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">index (parameter) is less than zero.
            
            -or-
            

index (parameter) is greater than Count.
            


            -or-
            index (parameter) is greater than Count.
            </exception>
    </member>
    <member name="M:NationalInstruments.UI.IntensityYAxisCollection.GetEnumerator">
      <summary>
            Returns an enumerator that you can use to iterate through the collection.
            </summary>
      <returns>
            The enumerator for the collection.
            </returns>
    </member>
    <member name="M:NationalInstruments.UI.IntensityYAxisCollection.Remove(NationalInstruments.UI.IntensityYAxis)">
      <summary>
            Removes the first occurrence of the specified item.
            </summary>
      <param name="item">
            Item to remove from the collection.
            </param>
    </member>
    <member name="M:NationalInstruments.UI.IntensityYAxisCollection.RemoveAt(System.Int32)">
      <summary>
            Removes the item at the specified index.
            </summary>
      <param name="index">
            The zero-based index of the item to remove.
            </param>
      <exception cref="T:System.ArgumentOutOfRangeException">index (parameter) is less than zero.
            
            -or-
            

index (parameter) is greater than or equal to Count.
            


            -or-
            index (parameter) is greater than or equal to Count.
            </exception>
    </member>
    <member name="P:NationalInstruments.UI.IntensityYAxisCollection.Item(System.Int32)">
      <summary>
            Gets or sets the IntensityYAxis at the specified index. 
            </summary>
      <param name="index">
            The zero-based index of the entry to locate in the collection.
            </param>
      <exception cref="T:System.ArgumentNullException">
            	The value is null.
            </exception>
      <exception cref="T:System.NotSupportedException">
            		The value has been disposed.
            
            -or-
            
            		The value is in another IntensityYAxisCollection.
            
            -or-
            
            		The value is already in this collection.
            </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">index (parameter) is less than zero.
            
            -or-
            

index (parameter) is greater than Count.
            


            -or-
            index (parameter) is greater than Count.
            </exception>
    </member>
    <member name="P:NationalInstruments.UI.IntensityYAxisCollection.Count">
      <summary>
            Gets the number of elements in the IntensityYAxisCollection.
            </summary>
    </member>
    <member name="P:NationalInstruments.UI.IntensityYAxisCollection.IsSynchronized">
      <summary>
            Gets a value indicating whether access to the collection is synchronized
            (thread-safe).
            </summary>
    </member>
    <member name="P:NationalInstruments.UI.IntensityYAxisCollection.IsFixedSize">
      <summary>
            Gets a value indicating whether the collection has a fixed size.
            </summary>
    </member>
    <member name="P:NationalInstruments.UI.IntensityYAxisCollection.IsReadOnly">
      <summary>
            Gets a value indicating whether the collection is read-only.
            </summary>
    </member>
    <member name="P:NationalInstruments.UI.IntensityYAxisCollection.SyncRoot">
      <summary>
            Gets an object that can be used to synchronize access to the collection.
            </summary>
    </member>
    <member name="T:NationalInstruments.UI.IntensityGraphInteractionModes">
      <summary>
            Defines the set of possible user interactions with an intensity graph.
            </summary>
    </member>
    <member name="F:NationalInstruments.UI.IntensityGraphInteractionModes.None">
      <summary>
            No interaction.
            </summary>
    </member>
    <member name="F:NationalInstruments.UI.IntensityGraphInteractionModes.ZoomX">
      <summary>
            The plot area can be zoomed with a horizontal selection.
            </summary>
    </member>
    <member name="F:NationalInstruments.UI.IntensityGraphInteractionModes.ZoomY">
      <summary>
            The plot area can be zoomed with a vertical selection.
            </summary>
    </member>
    <member name="F:NationalInstruments.UI.IntensityGraphInteractionModes.ZoomAroundPoint">
      <summary>
            The plot area can be zoomed around a particular point.
            </summary>
    </member>
    <member name="F:NationalInstruments.UI.IntensityGraphInteractionModes.PanX">
      <summary>
            The plot area can be panned horizontally.
            </summary>
    </member>
    <member name="F:NationalInstruments.UI.IntensityGraphInteractionModes.PanY">
      <summary>
            The plot area can be panned vertically.
            </summary>
    </member>
    <member name="F:NationalInstruments.UI.IntensityGraphInteractionModes.EditRange">
      <summary>
            Specifies how you can interactively edit the minimum and maximum values for the axes at run time.
            </summary>
    </member>
    <member name="F:NationalInstruments.UI.IntensityGraphInteractionModes.DragCursor">
      <summary>
            The cursor can be dragged.
            </summary>
    </member>
    <member name="F:NationalInstruments.UI.IntensityGraphInteractionModes.DragAnnotationCaption">
      <summary>
            The annotation caption can be dragged.
            </summary>
    </member>
    <member name="T:NationalInstruments.UI.IntensityCursor">
      <summary>
            Represents a cursor that is associated with an IntensityPlot.
            </summary>
    </member>
    <member name="M:NationalInstruments.UI.IntensityCursor.#ctor(NationalInstruments.UI.IntensityPlot)">
      <summary>
            Initializes a new instance of the IntensityCursor class with the specified
            IntensityPlot.
            </summary>
      <param name="plot">
            The IntensityPlot of the cursor.
            </param>
      <exception cref="T:System.ArgumentNullException">plot (parameter) is null.	
            </exception>
    </member>
    <member name="M:NationalInstruments.UI.IntensityCursor.#ctor">
      <summary>
            Initializes a new instance of the IntensityCursor class.
            </summary>
    </member>
    <member name="M:NationalInstruments.UI.IntensityCursor.GetCurrentIndexes(System.Int32@,System.Int32@)">
      <summary>
            Gets the current x and y data indices of the cursor.
            </summary>
      <param name="xIndex">
            Upon return, contains the x data index of the cursor.
            </param>
      <param name="yIndex">
            Upon return, contains the y data index of the cursor.
            </param>
      <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
    </member>
    <member name="M:NationalInstruments.UI.IntensityCursor.MoveCursor(System.Double,System.Double)">
      <summary>
            Moves IntensityCursor to the specified position. 
            </summary>
      <param name="xValue">
            The horizontal location to move IntensityCursor to.
            </param>
      <param name="yValue">
            The vertical location to move IntensityCursor to.
            </param>
      <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">xValue (parameter) or yValue (parameter) is
            NaN.
            </exception>
      <exception cref="T:System.InvalidOperationException">
            		The XAxis of the
            Plot is null.
            
            -or-
            
            	The YAxis of the
            Plot is null.	
            
            -or-
            The PlotOwner
            and the IntensityCursorOwner are different.
            
            -or-
            The PlotOwner
            and the Plot y-axis Owner are different.
            
            -or-
            The PlotOwner
            and the Plot x-axis Owner are different.
            </exception>
    </member>
    <member name="M:NationalInstruments.UI.IntensityCursor.MoveCursor(System.Int32,System.Int32)">
      <summary>
            Moves IntensityCursor to the specified data indices.
            </summary>
      <param name="xIndex">
            The x data index to move the cursor to.
            </param>
      <param name="yIndex">
            The y data index to move the cursor to.
            </param>
      <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">xIndex (parameter) is less than 0.
            
            -or-
            yIndex (parameter) is less than 0.
            
            -or-
            xIndex (parameter) is greater than or equal to
            HistoryCountX.
            
            -or-
            yIndex (parameter) is greater than or equal to
            HistoryCountY.
            </exception>
    </member>
    <member name="M:NationalInstruments.UI.IntensityCursor.MovePreviousX">
      <summary>
            Moves the IntensityCursor back one index in the horizontal direction.
            </summary>
      <returns>true if IntensityCursor moved; otherwise,
            false.
            </returns>
      <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
    </member>
    <member name="M:NationalInstruments.UI.IntensityCursor.MovePreviousX(System.Int32)">
      <summary>
            Moves the IntensityCursor back a specified number of indexes
            in the horizontal direction. 
            </summary>
      <param name="pointCount">
            The number of indexes to move the cursor back.
            </param>
      <returns>true if the IntensityCursor moved; otherwise,
            false.
            </returns>
      <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">pointCount (parameter) is less than or equal to zero.
            </exception>
    </member>
    <member name="M:NationalInstruments.UI.IntensityCursor.MoveNextX">
      <summary>
            Advances IntensityCursor forward one index in the horizontal direction.
            </summary>
      <returns>true if IntensityCursor moved; otherwise,
            false.
            </returns>
      <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
    </member>
    <member name="M:NationalInstruments.UI.IntensityCursor.MoveNextX(System.Int32)">
      <summary>
            Advances IntensityCursor forward a specified number of indexes
            in the horizontal direction.
            </summary>
      <param name="pointCount">
            The number of indexes to advance the cursor. 
            </param>
      <returns>true if IntensityCursor moved; otherwise,
            false.
            </returns>
      <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">pointCount (parameter) is less than or equal to zero.
            </exception>
    </member>
    <member name="M:NationalInstruments.UI.IntensityCursor.MovePreviousY">
      <summary>
            Moves the IntensityCursor back one index in the vertical direction.
            </summary>
      <returns>true if IntensityCursor moved; otherwise,
            false.
            </returns>
      <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
    </member>
    <member name="M:NationalInstruments.UI.IntensityCursor.MovePreviousY(System.Int32)">
      <summary>
            Moves the IntensityCursor back a specified number of indexes
            in the vertical direction. 
            </summary>
      <param name="pointCount">
            The number of indexes to move the cursor back.
            </param>
      <returns>true if the IntensityCursor moved; otherwise,
            false.
            </returns>
      <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">pointCount (parameter) is less than or equal to zero.
            </exception>
    </member>
    <member name="M:NationalInstruments.UI.IntensityCursor.MoveNextY">
      <summary>
            Advances IntensityCursor forward one index in the vertical direction.
            </summary>
      <returns>true if IntensityCursor moved; otherwise,
            false.
            </returns>
      <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
    </member>
    <member name="M:NationalInstruments.UI.IntensityCursor.MoveNextY(System.Int32)">
      <summary>
            Advances IntensityCursor forward a specified number of indexes
            in the vertical direction.
            </summary>
      <param name="pointCount">
            The number of indexes to advance the cursor. 
            </param>
      <returns>true if IntensityCursor moved; otherwise,
            false.
            </returns>
      <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">pointCount (parameter) is less than or equal to zero.
            </exception>
    </member>
    <member name="M:NationalInstruments.UI.IntensityCursor.Dispose(System.Boolean)">
      <summary>
            Releases the resources used by IntensityCursor.
            </summary>
      <param name="disposing">
            If true, this method releases managed and unmanaged resources. If false, this method releases
            only unmanaged resources.
            </param>
    </member>
    <member name="M:NationalInstruments.UI.IntensityCursor.Clone">
      <summary>
            Creates a new object that is a copy of this instance.
            </summary>
      <returns>
            A new object that is a copy of this instance.
            </returns>
    </member>
    <member name="M:NationalInstruments.UI.IntensityCursor.OnBeforeMove(NationalInstruments.UI.BeforeMoveIntensityCursorEventArgs)">
      <summary>
            Raises the BeforeMove event.
            </summary>
      <param name="e">
            A BeforeMoveIntensityCursorEventArgs 
            that contains the event data.
            </param>
      <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
    </member>
    <member name="M:NationalInstruments.UI.IntensityCursor.OnBeforeDraw(NationalInstruments.UI.BeforeDrawIntensityCursorEventArgs)">
      <summary>
            Raises the BeforeDraw event.
            </summary>
      <param name="e">
            A BeforeDrawIntensityCursorEventArgs that contains the event data.
            </param>
      <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
    </member>
    <member name="M:NationalInstruments.UI.IntensityCursor.OnAfterMove(NationalInstruments.UI.AfterMoveIntensityCursorEventArgs)">
      <summary>
            Raises the AfterMove event.
            </summary>
      <param name="e">
            An AfterMoveIntensityCursorEventArgs 
            that contains the event data.
            </param>
      <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
    </member>
    <member name="M:NationalInstruments.UI.IntensityCursor.OnAfterDraw(NationalInstruments.UI.AfterDrawIntensityCursorEventArgs)">
      <summary>
            Raises the AfterDraw event.
            </summary>
      <param name="e">
            An AfterDrawIntensityCursorEventArgs that contains the event data.
            </param>
      <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
    </member>
    <member name="P:NationalInstruments.UI.IntensityCursor.Plot">
      <summary>
            Gets or sets the IntensityPlot that 
            IntensityCursor is associated with.
            </summary>
      <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
    </member>
    <member name="P:NationalInstruments.UI.IntensityCursor.XPosition">
      <summary>
            Gets or sets the horizontal location of 
            IntensityCursor.  
            </summary>
      <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
            The specified value is NaN.
            </exception>
      <exception cref="T:System.InvalidOperationException">
            		The XAxis of the
            Plot is null.
            
            -or-
            
            	The YAxis of the
            Plot is null.	
            
            -or-
            The PlotOwner
            and the IntensityCursorOwner are different.
            
            -or-
            The PlotOwner
            and the Plot y-axis Owner are different.
            
            -or-
            The PlotOwner
            and the Plot x-axis Owner are different.
            </exception>
    </member>
    <member name="P:NationalInstruments.UI.IntensityCursor.YPosition">
      <summary>
            Gets or sets the vertical location of 
            IntensityCursor.  
            </summary>
      <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
            The specified value is NaN.
            </exception>
      <exception cref="T:System.InvalidOperationException">
            		The XAxis of the
            Plot is null.
            
            -or-
            
            	The YAxis of the
            Plot is null.	
            
            -or-
            The PlotOwner
            and the IntensityCursorOwner are different.
            
            -or-
            The PlotOwner
            and the Plot y-axis Owner are different.
            
            -or-
            The PlotOwner
            and the Plot x-axis Owner are different.
            </exception>
    </member>
    <member name="P:NationalInstruments.UI.IntensityCursor.LabelXFormat">
      <summary>
            Gets or sets the format string used to format the x data value displayed in the cursor label.
            </summary>
      <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
    </member>
    <member name="P:NationalInstruments.UI.IntensityCursor.LabelYFormat">
      <summary>
            Gets or sets the format string used to format the y data value displayed in the cursor label.
            </summary>
      <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
    </member>
    <member name="P:NationalInstruments.UI.IntensityCursor.LabelZFormat">
      <summary>
            Gets or sets the format string used to format the z data value displayed in the cursor label.
            </summary>
      <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
    </member>
    <member name="P:NationalInstruments.UI.IntensityCursor.LabelDisplay">
      <summary>
            Gets or sets which label coordinates the cursor displays.
            </summary>
      <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
      <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
            The specified value is not a IntensityCursorLabelDisplay value.
            </exception>
    </member>
    <member name="E:NationalInstruments.UI.IntensityCursor.BeforeMove">
      <summary>
            Occurs before IntensityCursor moves.
            </summary>
      <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
    </member>
    <member name="E:NationalInstruments.UI.IntensityCursor.BeforeDraw">
      <summary>
            Occurs before the cursor is drawn.
            </summary>
      <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
    </member>
    <member name="E:NationalInstruments.UI.IntensityCursor.AfterMove">
      <summary>
            Occurs after IntensityCursor moves.
            </summary>
      <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
    </member>
    <member name="E:NationalInstruments.UI.IntensityCursor.AfterDraw">
      <summary>
            Occurs after the cursor has been drawn.
            </summary>
    </member>
    <member name="T:NationalInstruments.UI.ErrorBandDisplayModes">
      <summary>
            Specifies how error data is displayed.
            </summary>
    </member>
    <member name="F:NationalInstruments.UI.ErrorBandDisplayModes.None">
      <summary>
            Indicates that error data should not be displayed.
            </summary>
    </member>
    <member name="F:NationalInstruments.UI.ErrorBandDisplayModes.High">
      <summary>
            Indicates that high error data should be displayed.
            </summary>
    </member>
    <member name="F:NationalInstruments.UI.ErrorBandDisplayModes.Low">
      <summary>
            Indicates that low error data should be displayed.
            </summary>
    </member>
    <member name="F:NationalInstruments.UI.ErrorBandDisplayModes.HighAndLow">
      <summary>
            Indicates that both high and low error data should be displayed.
            </summary>
    </member>
    <member name="T:NationalInstruments.UI.DigitalXAxis">
      <summary>
            Represents the horizontal axis on a digital waveform graph.
            </summary>
    </member>
    <member name="M:NationalInstruments.UI.DigitalXAxis.ToString">
      <summary>
            Returns a string representation of the object.
            </summary>
      <returns>
            A string representation of the object.
            </returns>
      <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
    </member>
    <member name="M:NationalInstruments.UI.DigitalXAxis.GetSize(NationalInstruments.UI.XAxisPosition)">
      <summary>
            Returns the size of the DigitalXAxis at the specified position.
            </summary>
      <param name="position">
            An XAxisPosition that indicates the position of the DigitalXAxis
            for which the size is returned.
            </param>
      <returns>
            The Size of the DigitalXAxis.
            </returns>
      <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
      <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">position (parameter) is an invalid XAxisPosition value.
            </exception>
      <exception cref="T:System.NotSupportedException">position (parameter) is TopBottom.
            	</exception>
    </member>
    <member name="M:NationalInstruments.UI.DigitalXAxis.GetBounds(NationalInstruments.UI.XAxisPosition)">
      <summary>
            Returns the bounds of the DigitalXAxis at the specified position.
            </summary>
      <param name="position">
            An XAxisPosition that indicates the position of the DigitalXAxis
             for which the bounds are returned.
            </param>
      <returns>
            A Rectangle that represents the bounds of the DigitalXAxis.
            </returns>
      <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
      <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">position (parameter) is an invalid XAxisPosition value.
            </exception>
      <exception cref="T:System.NotSupportedException">position (parameter) is TopBottom.
            	</exception>
    </member>
    <member name="M:NationalInstruments.UI.DigitalXAxis.GetBounds(System.Drawing.Graphics,System.Drawing.Rectangle)">
      <summary>
            Returns the bounds of the DigitalXAxis relative to a reference rectangle.
            </summary>
      <param name="graphics">
            The Graphics object that is used to calculate the bounds of the axis.
            </param>
      <param name="referenceRectangle">
            A Rectangle that provides a reference for the bounds of the DigitalXAxis.
            </param>
      <returns>
            A Rectangle that provides a reference for the bounds of the DigitalXAxis.
            </returns>
      <exception cref="T:System.ArgumentNullException">graphics (parameter) is null.
            	</exception>
      <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
    </member>
    <member name="M:NationalInstruments.UI.DigitalXAxis.GetBounds(System.Drawing.Graphics,System.Drawing.Rectangle,NationalInstruments.UI.XAxisPosition)">
      <summary>
            Returns the bounds of the DigitalXAxis relative to a reference rectangle at the specified position.
            </summary>
      <param name="graphics">
            The Graphics object that is used to calculate the bounds of the axis.
            </param>
      <param name="referenceRectangle">
            A Rectangle that provides a reference for the bounds of the DigitalXAxis.
            </param>
      <param name="position">
            An XAxisPosition that indicates the position of the DigitalXAxis
             for which the bounds are returned.
            </param>
      <returns>
            A Rectangle that represents the bounds of the DigitalXAxis.
            </returns>
      <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
      <exception cref="T:System.ArgumentNullException">graphics (parameter) is null.
            	</exception>
      <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">position (parameter) is an invalid XAxisPosition value.
            </exception>
      <exception cref="T:System.NotSupportedException">position (parameter) is TopBottom.
            	</exception>
    </member>
    <member name="M:NationalInstruments.UI.DigitalXAxis.Draw(NationalInstruments.UI.ComponentDrawArgs,NationalInstruments.UI.XAxisPosition)">
      <summary>
            Draws the DigitalXAxis with the specified x-axis position.
            </summary>
      <param name="args">
            A ComponentDrawArgs that contains the 
            drawing data.
            </param>
      <param name="position">
            The XAxisPosition of the axis.
            </param>
      <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
      <exception cref="T:System.ArgumentNullException">args (parameter) is null.
            </exception>
      <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">position (parameter) is not one of the XAxisPosition values.
            </exception>
      <exception cref="T:System.NotSupportedException">position (parameter) is TopBottom.
            	</exception>
    </member>
    <member name="M:NationalInstruments.UI.DigitalXAxis.Dispose(System.Boolean)">
      <summary>
            Releases the resources used by Scale.
            </summary>
      <param name="disposing">
            If true, this method releases managed and unmanaged resources. If false, this method releases
            only unmanaged resources.
            </param>
    </member>
    <member name="M:NationalInstruments.UI.DigitalXAxis.OnRangeChanged(System.EventArgs)">
      <summary>
            Raises the RangeChanged event.
            </summary>
      <param name="e">
            An EventArgs that contains the event data.
            </param>
      <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
    </member>
    <member name="M:NationalInstruments.UI.DigitalXAxis.GetService(System.Type)">
      <summary>
            Gets the service object of the specified type.
            </summary>
      <param name="service">
            A service provided by the component.
            </param>
      <returns>
            An Object that represents the service provided by the component or 
            null if the component does not provide the 
            specified service.
            </returns>
    </member>
    <member name="P:NationalInstruments.UI.DigitalXAxis.MajorDivisions">
      <summary>
            Gets AxisLabeledDivisions on the x-axis.
            </summary>
      <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
    </member>
    <member name="P:NationalInstruments.UI.DigitalXAxis.MinorDivisions">
      <summary>
            Gets the minor AxisDivisions on the x-axis.
            </summary>
      <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
    </member>
    <member name="P:NationalInstruments.UI.DigitalXAxis.CustomDivisions">
      <summary>
            Gets the collection of AxisCustomDivision objects on the x-axis.
            </summary>
      <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
    </member>
    <member name="P:NationalInstruments.UI.DigitalXAxis.Caption">
      <summary>
            Gets or sets the text of the caption that is displayed by the x-axis.
            </summary>
      <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
    </member>
    <member name="P:NationalInstruments.UI.DigitalXAxis.CaptionFont">
      <summary>
            Gets or sets the font of the caption that is displayed by the x-axis.
            </summary>
      <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
    </member>
    <member name="P:NationalInstruments.UI.DigitalXAxis.CaptionForeColor">
      <summary>
            Gets or sets the foreground color of the caption that is displayed by the x-axis.
            </summary>
      <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
    </member>
    <member name="P:NationalInstruments.UI.DigitalXAxis.CaptionBackColor">
      <summary>
            Gets or sets the background color of the caption that is displayed by the x-axis.
            </summary>
      <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
    </member>
    <member name="P:NationalInstruments.UI.DigitalXAxis.CaptionVisible">
      <summary>
            Gets or sets a value indicating whether a caption is displayed by the x-axis.
            </summary>
      <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
    </member>
    <member name="P:NationalInstruments.UI.DigitalXAxis.CaptionPosition">
      <summary>
            Gets or sets the position of the caption that is displayed for the x-axis.
            </summary>
      <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
      <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
            The specified value is not an XAxisPosition value.
            </exception>
    </member>
    <member name="P:NationalInstruments.UI.DigitalXAxis.AutoSpacing">
      <summary>
            Gets or sets a value indicating if the axis automatically calculates the location of tick marks.
            </summary>
      <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
    </member>
    <member name="P:NationalInstruments.UI.DigitalXAxis.AutoSpacingMajorInterval">
      <summary>
            Gets a value indicating the interval between the major divisions of the axis when AutoSpacing  is true.
            </summary>
      <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
    </member>
    <member name="P:NationalInstruments.UI.DigitalXAxis.AutoSpacingMinorInterval">
      <summary>
            Gets a value indicating the interval between the minor divisions of the axis when AutoSpacing  is true.
            </summary>
      <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
    </member>
    <member name="P:NationalInstruments.UI.DigitalXAxis.MinimumHeight">
      <summary>
            Gets or sets the minimum height required by the DigitalXAxis,
            allowing you to customize the DigitalXAxis height. 
            </summary>
      <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
            The specified value is less than zero.
            </exception>
    </member>
    <member name="P:NationalInstruments.UI.DigitalXAxis.EditRangeNumericFormatMode">
      <summary>
            Gets or sets the mode used to format the value that is displayed when you click an
            editable minimum or maximum value label on an axis.
            </summary>
      <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
      <exception cref="T:System.ArgumentNullException">
            The value is null.
            </exception>
    </member>
    <member name="P:NationalInstruments.UI.DigitalXAxis.EditRangeDateTimeFormatMode">
      <summary>
            Gets or sets the mode used to format the value that is displayed when you click an
            editable minimum or maximum value label on an axis.
            </summary>
      <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
      <exception cref="T:System.ArgumentNullException">
            The value is null.
            </exception>
    </member>
    <member name="P:NationalInstruments.UI.DigitalXAxis.Mode">
      <summary>
            Gets or sets the update mode for the range of the x-axis.
            </summary>
      <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
      <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
            The specified value is not an DigitalAxisMode value.
            </exception>
    </member>
    <member name="P:NationalInstruments.UI.DigitalXAxis.Range">
      <summary>
            Gets or sets the minimum and maximum values of the x-axis.
            </summary>
      <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
      <exception cref="T:System.ArgumentNullException">
            The specified value is null.
            </exception>
      <exception cref="T:System.ArgumentException">
            The specified value is Empty.
            </exception>
    </member>
    <member name="P:NationalInstruments.UI.DigitalXAxis.Position">
      <summary>
            Gets or sets the position of the x-axis.
            </summary>
      <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
      <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
            The specified value is not an XAxisPosition value.
            </exception>
    </member>
    <member name="P:NationalInstruments.UI.DigitalXAxis.DisplayMode">
      <summary>
            Gets or sets whether the x-axis displays values in terms of time or samples.
            </summary>
      <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
      <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
            The specified value is not a DigitalAxisDisplayMode value.
            </exception>
    </member>
    <member name="E:NationalInstruments.UI.DigitalXAxis.RangeChanged">
      <summary>
            Occurs when the range of the x-axis changes.
            </summary>
      <exception cref="T:System.ObjectDisposedException">
            An event handler is added after the object has been disposed.
            </exception>
    </member>
    <member name="T:NationalInstruments.UI.DigitalWaveformGraphWebInteractionModes">
      <summary>
            Defines the set of possible user interactions, such as zooming and interactive editing, within the plot area of a digital waveform graph.
            </summary>
    </member>
    <member name="F:NationalInstruments.UI.DigitalWaveformGraphWebInteractionModes.None">
      <summary>
            No interaction.
            </summary>
    </member>
    <member name="F:NationalInstruments.UI.DigitalWaveformGraphWebInteractionModes.ZoomX">
      <summary>
            The plot area can be zoomed with a horizontal selection.
            </summary>
    </member>
    <member name="F:NationalInstruments.UI.DigitalWaveformGraphWebInteractionModes.ZoomAroundPoint">
      <summary>
            The plot area can be zoomed around a particular point.
            </summary>
    </member>
    <member name="F:NationalInstruments.UI.DigitalWaveformGraphWebInteractionModes.EditRange">
      <summary>
            The minimum and maximum values for the axes can be edited interactively at run time.
            </summary>
    </member>
    <member name="F:NationalInstruments.UI.DigitalWaveformGraphWebInteractionModes.CollapseSignals">
      <summary>
            The digital signals can be collapsed.
            </summary>
    </member>
    <member name="F:NationalInstruments.UI.DigitalWaveformGraphWebInteractionModes.PlotAreaClick">
      <summary>
            The graph plot area can be clicked to raise an event on the server.
            </summary>
    </member>
    <member name="T:NationalInstruments.UI.ControlArrayScaleMode">
      <summary>
            Defines a set of methods that represent mechanisms used to modify the number of
            controls in an array.
            </summary>
    </member>
    <member name="M:NationalInstruments.UI.ControlArrayScaleMode.CreateFixedMode(System.Int32)">
      <summary>
            Creates a mode in which the number of controls in an array is fixed to the specified value.
            </summary>
      <param name="count">
            The number of controls in an array.
            </param>
      <returns>
            A ControlArrayScaleMode in which the number of controls
            in an array is fixed to count (parameter).
            </returns>
    </member>
    <member name="M:NationalInstruments.UI.ControlArrayScaleMode.CreateAutomaticMode">
      <summary>
            Creates a mode that automatically modifies the number of controls in an array 
            based on the number of data values being set.
            </summary>
      <returns>
            A ControlArrayScaleMode that automatically modifies the 
            number of controls in an array based on the number of data values being set.
            </returns>
    </member>
    <member name="M:NationalInstruments.UI.ControlArrayScaleMode.op_Equality(NationalInstruments.UI.ControlArrayScaleMode,NationalInstruments.UI.ControlArrayScaleMode)">
      <summary>
            Returns whether two ControlArrayScaleMode objects are equal.
            </summary>
      <param name="mode1">
            A ControlArrayScaleMode.
            </param>
      <param name="mode2">
            A ControlArrayScaleMode.
            </param>
      <returns>true if the values of mode1 (parameter) and mode2 (parameter) are equal. 
            </returns>
    </member>
    <member name="M:NationalInstruments.UI.ControlArrayScaleMode.op_Inequality(NationalInstruments.UI.ControlArrayScaleMode,NationalInstruments.UI.ControlArrayScaleMode)">
      <summary>
            Returns whether two ControlArrayScaleMode objects are 
            not equal.
            </summary>
      <param name="mode1">
            A ControlArrayScaleMode.
            </param>
      <param name="mode2">
            A ControlArrayScaleMode.
            </param>
      <returns>true if the values of mode1 (parameter) and mode2 (parameter) are not equal. 
            </returns>
    </member>
    <member name="M:NationalInstruments.UI.ControlArrayScaleMode.Equals(System.Object)">
      <summary>
            Returns a value indicating if this instance is equal to the specified Object.
            </summary>
      <param name="obj">
            The Object to compare with this
            instance.
            </param>
      <returns>true if obj (parameter) is a Object that is equal 
            to this instance.
            </returns>
    </member>
    <member name="M:NationalInstruments.UI.ControlArrayScaleMode.Equals(NationalInstruments.UI.ControlArrayScaleMode)">
      <summary>
            Returns a value indicating if this instance is equal to the specified ControlArrayScaleMode.
            </summary>
      <param name="mode">
            A ControlArrayScaleMode to compare with this instance.
            </param>
      <returns>true if mode (parameter) is a ControlArrayScaleMode  that is equal 
            to this instance.
            </returns>
    </member>
    <member name="M:NationalInstruments.UI.ControlArrayScaleMode.GetHashCode">
      <summary>
            Returns a hash code for this object.
            </summary>
      <returns>
            A 32-bit signed integer hash code.
            </returns>
    </member>
    <member name="M:NationalInstruments.UI.ControlArrayScaleMode.ToString">
      <summary>
            Returns a string representation of the object.
            </summary>
      <returns>
            A string representation of the object.
            </returns>
    </member>
    <member name="P:NationalInstruments.UI.ControlArrayScaleMode.Type">
      <summary>
            Gets the type of mode used to modify the number of controls in an array.
            </summary>
    </member>
    <member name="P:NationalInstruments.UI.ControlArrayScaleMode.FixedCount">
      <summary>
            Gets the number of controls in an array when the ControlArrayScaleMode
            is created using the CreateFixedMode 
            method.
            </summary>
    </member>
    <member name="T:NationalInstruments.UI.ComplexWaveformPlotDisplayMode">
      <summary>
            Specifies whether the complex waveform is displayed against samples or increments of time.</summary>
    </member>
    <member name="F:NationalInstruments.UI.ComplexWaveformPlotDisplayMode.Samples">
      <summary>
            The complex waveform is displayed against samples.</summary>
    </member>
    <member name="F:NationalInstruments.UI.ComplexWaveformPlotDisplayMode.Time">
      <summary>
            The complex waveform is displayed against time.</summary>
    </member>
    <member name="T:NationalInstruments.UI.ComplexRangeAnnotationPart">
      <summary>
            Specifies a part of a complex range annotation.
            </summary>
    </member>
    <member name="F:NationalInstruments.UI.ComplexRangeAnnotationPart.Caption">
      <summary>
            The caption of a range annotation.
            </summary>
    </member>
    <member name="F:NationalInstruments.UI.ComplexRangeAnnotationPart.Arrow">
      <summary>
            The arrow of a range annotation.
            </summary>
    </member>
    <member name="F:NationalInstruments.UI.ComplexRangeAnnotationPart.Range">
      <summary>
            The range of a range annotation.
            </summary>
    </member>
    <member name="T:NationalInstruments.UI.ComplexPlotDataChangedEventHandler">
      <summary>
            Represents the method that handles the PlotDataChanged
            event of an IComplexGraph.
            </summary>
      <param name="sender">
            The source of the event.
            </param>
      <param name="e">
            A ComplexPlotDataChangedEventArgs that contains the event
            data.
            </param>
    </member>
    <member name="T:NationalInstruments.UI.ComplexGraphDefaultInteractionMode">
      <summary>
            Specifies the user interaction mode that is enabled without the use of a modifier key in the plot area 
            of a graph.
            </summary>
    </member>
    <member name="F:NationalInstruments.UI.ComplexGraphDefaultInteractionMode.None">
      <summary>
            No interaction is enabled by default.
            </summary>
    </member>
    <member name="F:NationalInstruments.UI.ComplexGraphDefaultInteractionMode.ZoomX">
      <summary>
            The plot area can be zoomed with a horizontal selection by default.
            </summary>
    </member>
    <member name="F:NationalInstruments.UI.ComplexGraphDefaultInteractionMode.ZoomY">
      <summary>
            The plot area can be zoomed with a vertical selection by default.
            </summary>
    </member>
    <member name="F:NationalInstruments.UI.ComplexGraphDefaultInteractionMode.ZoomXY">
      <summary>
            The plot area can be zoomed both horizontally and vertically with a rectangular selection by default.
            </summary>
    </member>
    <member name="F:NationalInstruments.UI.ComplexGraphDefaultInteractionMode.ZoomXYProportional">
      <summary>
            The plot area can be zoomed both horizontally and vertically with a rectangular selection
            that is proportional to the dimension of the plot area by default.
            </summary>
    </member>
    <member name="F:NationalInstruments.UI.ComplexGraphDefaultInteractionMode.ZoomAroundPoint">
      <summary>
            The plot area can be zoomed around a particular point by default.
            </summary>
    </member>
    <member name="F:NationalInstruments.UI.ComplexGraphDefaultInteractionMode.PanX">
      <summary>
            The plot area can be panned horizontally by default.
            </summary>
    </member>
    <member name="F:NationalInstruments.UI.ComplexGraphDefaultInteractionMode.PanY">
      <summary>
            The plot area can be panned vertically by default.
            </summary>
    </member>
    <member name="F:NationalInstruments.UI.ComplexGraphDefaultInteractionMode.PanXY">
      <summary>
            The plot area can be panned both horizontally and vertically by default.
            </summary>
    </member>
    <member name="T:NationalInstruments.UI.IntensityPointAnnotationPart">
      <summary>
            Specifies a part of a intensity point annotation.
            </summary>
    </member>
    <member name="F:NationalInstruments.UI.IntensityPointAnnotationPart.Caption">
      <summary>
            The caption of a point annotation.
            </summary>
    </member>
    <member name="F:NationalInstruments.UI.IntensityPointAnnotationPart.Arrow">
      <summary>
            The arrow of a point annotation.
            </summary>
    </member>
    <member name="F:NationalInstruments.UI.IntensityPointAnnotationPart.Shape">
      <summary>
            The shape of a point annotation. 
            </summary>
    </member>
    <member name="T:NationalInstruments.UI.BeforeDrawXYRangeAnnotationEventArgs">
      <summary>
            Provides data for events that occur before the range annotation draws.
            </summary>
    </member>
    <member name="M:NationalInstruments.UI.BeforeDrawXYRangeAnnotationEventArgs.#ctor(System.Drawing.Graphics,System.Drawing.Rectangle,System.Boolean,NationalInstruments.UI.XYRangeAnnotation,NationalInstruments.UI.XYRangeAnnotationPart,System.Drawing.PointF,System.Drawing.PointF,System.Drawing.PointF,System.Drawing.Size,System.Single)">
      <summary>
            Initializes a new instance of BeforeDrawXYRangeAnnotationEventArgs 
            with the specified graphics, bounds, annotation, annotation part, arrow head point, arrow tail point, 
            caption point, caption size, and caption angle.
            </summary>
      <param name="graphics">
            The Graphics used to draw the item.
            </param>
      <param name="bounds">
            The Rectangle that represents the bounds in which to draw.
            </param>
      <param name="cancel">
            A value that indicates if the event is cancelled.
            </param>
      <param name="annotation">
            The XYRangeAnnotation for which the event is occurring.
            </param>
      <param name="annotationPart">
            The XYRangeAnnotationPart of the annotation to draw.
            </param>
      <param name="arrowHeadPoint">
            The Point at which to draw the arrow head.
            </param>
      <param name="arrowTailPoint">
            The Point at which arrow tail is located.
            </param>
      <param name="captionPoint">
            The Point at which to draw the caption.
            </param>
      <param name="captionSize">
            The Size of the Rectangle in which to draw the caption.
            </param>
      <param name="captionAngle">
            The angle at which to draw the caption.
            </param>
      <exception cref="T:System.ArgumentNullException">annotation (parameter) is null.
            	-or-graphics (parameter) is null.
            	</exception>
    </member>
    <member name="P:NationalInstruments.UI.BeforeDrawXYRangeAnnotationEventArgs.Annotation">
      <summary>
            Gets the XYPointAnnotation to draw.
            </summary>
    </member>
    <member name="P:NationalInstruments.UI.BeforeDrawXYRangeAnnotationEventArgs.Part">
      <summary>
            Gets the part of the annotation to draw.
            </summary>
    </member>
    <member name="P:NationalInstruments.UI.BeforeDrawXYRangeAnnotationEventArgs.CaptionSize">
      <summary>
            Gets the size of the rectangle in which to draw the caption.
            </summary>
    </member>
    <member name="P:NationalInstruments.UI.BeforeDrawXYRangeAnnotationEventArgs.CaptionAngle">
      <summary>
            Gets the angle at which to draw the caption.
            </summary>
    </member>
    <member name="P:NationalInstruments.UI.BeforeDrawXYRangeAnnotationEventArgs.ArrowHeadPoint">
      <summary>
            Gets the point at which to draw the arrow head.
            </summary>
    </member>
    <member name="P:NationalInstruments.UI.BeforeDrawXYRangeAnnotationEventArgs.ArrowTailPoint">
      <summary>
            Gets the point at which to the arrow tail is located.
            </summary>
    </member>
    <member name="P:NationalInstruments.UI.BeforeDrawXYRangeAnnotationEventArgs.CaptionPoint">
      <summary>
            Gets the point at which to draw the caption.
            </summary>
    </member>
    <member name="T:NationalInstruments.UI.AnnotationInteractionMode">
      <summary>
            Defines the set of user interactions that are possible within an annotation.
            </summary>
    </member>
    <member name="F:NationalInstruments.UI.AnnotationInteractionMode.None">
      <summary>
            No interaction.
            </summary>
    </member>
    <member name="F:NationalInstruments.UI.AnnotationInteractionMode.DragCaption">
      <summary>
            The caption of the annotation can be dragged.
            </summary>
    </member>
    <member name="T:NationalInstruments.UI.AfterMoveComplexCursorEventHandler">
      <summary>
            Represents the method that handles the events that occur after a cursor moves.
            </summary>
      <param name="sender">
            The source of the event.
            </param>
      <param name="e">
            An AfterMoveComplexCursorEventArgs that contains the event data.
            </param>
    </member>
    <member name="T:NationalInstruments.UI.AfterDrawXYRangeAnnotationEventHandler">
      <summary>
            Represents the method that handles the events that occur after a range annotation draws.
            </summary>
      <param name="sender">
            The source of the event.
            </param>
      <param name="e">
            An AfterDrawXYRangeAnnotationEventArgs that contains the event data.
            </param>
    </member>
    <member name="T:NationalInstruments.UI.AfterDrawXYCursorEventArgs">
      <summary>
            Provides data for events that occur after the cursor draws.
            </summary>
    </member>
    <member name="M:NationalInstruments.UI.AfterDrawXYCursorEventArgs.#ctor(NationalInstruments.UI.XYCursor,System.Drawing.Rectangle,System.Drawing.Graphics,System.Drawing.Rectangle)">
      <summary>
            Initializes a new instance of AfterDrawXYCursorEventArgs with the specified cursor, point bounds,
            graphics, and bounds.
            </summary>
      <param name="cursor">
            The XYCursor for which the event is occurring.
            </param>
      <param name="pointBounds">
            The Rectangle that represents the bounds of the cursor point.
            </param>
      <param name="graphics">
            The Graphics used to draw the item.
            </param>
      <param name="bounds">
            The Rectangle that represents the bounds in which to draw.
            </param>
      <exception cref="T:System.ArgumentNullException">cursor (parameter) is null.
            	-or-graphics (parameter) is null.
            	</exception>
    </member>
    <member name="M:NationalInstruments.UI.AfterDrawXYCursorEventArgs.ToString">
      <summary>
            Returns a string representation of the object.
            </summary>
      <returns>
            A string representation of the object.
            </returns>
    </member>
    <member name="P:NationalInstruments.UI.AfterDrawXYCursorEventArgs.Cursor">
      <summary>
            Gets the XYCursor that has been drawn.
            </summary>
    </member>
    <member name="P:NationalInstruments.UI.AfterDrawXYCursorEventArgs.PointBounds">
      <summary>
            Gets the bounds of the cursor point.
            </summary>
    </member>
    <member name="T:NationalInstruments.UI.AfterDrawComplexPlotEventHandler">
      <summary>
            Represents the method that handles the AfterDrawPlot
            event.
            </summary>
      <param name="sender">
            The source of the event.
            </param>
      <param name="e">
            An AfterDrawComplexPlotEventArgs that contains the event data.
            </param>
    </member>
    <member name="T:NationalInstruments.UI.XYErrorDataMode">
      <summary>
            Provides an abstract class that defines a set of methods used for generating 
            error data for an XYPlot.
            </summary>
    </member>
    <member name="M:NationalInstruments.UI.XYErrorDataMode.#ctor">
      <summary>
            Initializes a new instance of the XYErrorDataMode class.
            </summary>
    </member>
    <member name="M:NationalInstruments.UI.XYErrorDataMode.GetErrorData(NationalInstruments.UI.XYErrorDataArgs,System.Double[]@,System.Double[]@)">
      <summary>
            Generates error data for a subset of the points in an XYPlot.
            </summary>
      <param name="args">
            An XYErrorDataArgs instance containing information about 
            the plot data points for which error data should be generated.
            </param>
      <param name="highErrorData">
            Upon return, contains high offset values for the plot data points, or an empty array if no error data was generated.
            </param>
      <param name="lowErrorData">
            Upon return, contains low offset values for the plot data points, or an empty array if no error data was generated.
            </param>
      <exception cref="T:System.ArgumentNullException">args (parameter) is null.
            </exception>
    </member>
    <member name="M:NationalInstruments.UI.XYErrorDataMode.CreateNoneMode">
      <summary>
            Returns an XYErrorDataMode that does not generate any error data.
            </summary>
      <returns>
            An XYErrorDataMode that does not generate any error data.
            </returns>
    </member>
    <member name="M:NationalInstruments.UI.XYErrorDataMode.CreateConstantErrorMode(System.Double)">
      <summary>
            Creates an XYErrorDataMode that generates symmetric constant error data.
            </summary>
      <param name="symmetricOffset">
            The value to use for generating constant error data.
            </param>
      <returns>
            An XYErrorDataMode that generates identical high and low constant error data 
            according to symmetricOffset (parameter).
            </returns>
    </member>
    <member name="M:NationalInstruments.UI.XYErrorDataMode.CreateConstantErrorMode(System.Double,System.Double)">
      <summary>
            Creates an XYErrorDataMode that generates constant error data.
            </summary>
      <param name="highOffset">
            The value to use for generating high constant error data.
            </param>
      <param name="lowOffset">
            The value to use for generating low constant error data.
            </param>
      <returns>
            An XYErrorDataMode that generates high and low constant error data 
            according to highOffset (parameter) and lowOffset (parameter).
            The highOffset (parameter) is used to calculate error values that are greater than the
            data values specified in GetErrorData. 
            lowOffset (parameter) is used to calculate error values that are less than the data values
            specified in GetErrorData. The primary
            error data specified in XYErrorDataArgs is typically
            used to specify whether the error values are being calculated for the x data or for the y data.
            </returns>
    </member>
    <member name="M:NationalInstruments.UI.XYErrorDataMode.CreatePercentErrorMode(System.Double)">
      <summary>
            Creates an XYErrorDataMode that generates symmetric percent error data.
            </summary>
      <param name="symmetricOffset">
            The value to use for generating percent error data.
            A value of 1.0 indicates 1% of the source value.
            </param>
      <returns>
            An XYErrorDataMode that generates identical high and low percent error data 
            according to symmetricOffset (parameter), and the primary error data of the 
            ComplexErrorDataArgs passed to GetErrorData.
            </returns>
    </member>
    <member name="M:NationalInstruments.UI.XYErrorDataMode.CreatePercentErrorMode(System.Double,System.Double)">
      <summary>
            Creates an XYErrorDataMode that generates percent error data.
            </summary>
      <param name="highOffset">
            The value to use for generating high percent error data.
            A value of 1.0 indicates 1% of the source value.
            </param>
      <param name="lowOffset">
            The value to use for generating low percent error data.
            A value of 1.0 indicates 1% of the source value.
            </param>
      <returns>
            An XYErrorDataMode that generates high and low percent error data 
            according to highOffset (parameter), lowOffset (parameter), and the primary error data of the 
            XYErrorDataArgs passed to GetErrorData.
            The highOffset (parameter) is used to calculate error values that are greater than the
            data values specified in GetErrorData. 
            lowOffset (parameter) is used to calculate error values that are less than the data values
            specified in GetErrorData. The primary
            error data specified in XYErrorDataArgs is typically
            used to specify whether the error values are being calculated for the x data or for the y data.
            </returns>
    </member>
    <member name="M:NationalInstruments.UI.XYErrorDataMode.GetService(System.Type)">
      <summary>
            Gets the service object of the specified type.
            </summary>
      <param name="serviceType">
            A Type that specifies the type of service object to get.
            </param>
      <returns>
            A service object of type serviceType (parameter), or null
            if there is no service object of type serviceType (parameter).
            </returns>
    </member>
    <member name="T:NationalInstruments.UI.XYCursor">
      <summary>
            Represents a cursor that is associated with an XYPlot.
            </summary>
    </member>
    <member name="M:NationalInstruments.UI.XYCursor.#ctor(NationalInstruments.UI.XYPlot)">
      <summary>
            Initializes a new instance of the XYCursor class with the specified
            XYPlot.
            </summary>
      <param name="plot">
            The XYPlot of the cursor.
            </param>
      <exception cref="T:System.ArgumentNullException">plot (parameter) is null.	
            </exception>
    </member>
    <member name="M:NationalInstruments.UI.XYCursor.#ctor">
      <summary>
            Initializes a new instance of the XYCursor class.
            </summary>
    </member>
    <member name="M:NationalInstruments.UI.XYCursor.MoveCursor(System.Double,System.Double)">
      <summary>
            Moves XYCursor to the specified position. 
            </summary>
      <param name="xValue">
            The horizontal location to move XYCursor to.
            </param>
      <param name="yValue">
            The vertical location to move XYCursor to.
            </param>
      <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">xValue (parameter) or yValue (parameter) is
            NaN.
            </exception>
      <exception cref="T:System.InvalidOperationException">
            		The XAxis of the
            Plot is null.
            
            -or-
            
            	The YAxis of the
            Plot is null.	
            
            -or-
            The PlotOwner
            and the XYCursorOwner are different.
            
            -or-
            The PlotOwner
            and the Plot y-axis Owner are different.
            
            -or-
            The PlotOwner
            and the Plot x-axis Owner are different.
            </exception>
    </member>
    <member name="M:NationalInstruments.UI.XYCursor.MoveCursor(System.Int32)">
      <summary>
            Moves XYCursor to the specified data index.
            </summary>
      <param name="index">
            The data index to move the cursor to.
            </param>
      <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">index (parameter) is less than 0.
            
            -or-
            index (parameter) is greater than or equal to
            HistoryCount.
            </exception>
    </member>
    <member name="M:NationalInstruments.UI.XYCursor.MoveNext">
      <summary>
            Advances XYCursor forward 1 index.
            </summary>
      <returns>true if XYCursor moved; otherwise,
            false.
            </returns>
      <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
    </member>
    <member name="M:NationalInstruments.UI.XYCursor.MoveNext(System.Int32)">
      <summary>
            Advances XYCursor forward a specified number of indexes.
            </summary>
      <param name="pointCount">
            The number of indexes to advance the cursor. 
            </param>
      <returns>true if XYCursor moved; otherwise,
            false.
            </returns>
      <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">pointCount (parameter) is less than or equal to zero.
            </exception>
    </member>
    <member name="M:NationalInstruments.UI.XYCursor.MovePrevious">
      <summary>
            Recedes XYCursor back 1 index.
            </summary>
      <returns>true if XYCursor moved; otherwise,
            false.
            </returns>
      <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
    </member>
    <member name="M:NationalInstruments.UI.XYCursor.MovePrevious(System.Int32)">
      <summary>
            Recedes XYCursor back a specified number of indexes. 
            </summary>
      <param name="pointCount">
            The number of indexes to recede the cursor.
            </param>
      <returns>true if the XYCursor moved; otherwise,
            false.
            </returns>
      <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">pointCount (parameter) is less than or equal to zero.
            </exception>
    </member>
    <member name="M:NationalInstruments.UI.XYCursor.GetCurrentIndex">
      <summary>
            Gets the current data index of the cursor.
            </summary>
      <returns>
            The value is -1 if SnapMode is
            Fixed or Floating or
            the Plot has no data; otherwise, the data index.
            </returns>
      <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
    </member>
    <member name="M:NationalInstruments.UI.XYCursor.Dispose(System.Boolean)">
      <summary>
            Releases the resources used by XYCursor.
            </summary>
      <param name="disposing">
            If true, this method releases managed and unmanaged resources. If false, this method releases
            only unmanaged resources.
            </param>
    </member>
    <member name="M:NationalInstruments.UI.XYCursor.Clone">
      <summary>
            Creates a new object that is a copy of this instance.
            </summary>
      <returns>
            A new object that is a copy of this instance.
            </returns>
    </member>
    <member name="M:NationalInstruments.UI.XYCursor.OnBeforeMove(NationalInstruments.UI.BeforeMoveXYCursorEventArgs)">
      <summary>
            Raises the BeforeMove event.
            </summary>
      <param name="e">
            A BeforeMoveXYCursorEventArgs 
            that contains the event data.
            </param>
      <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
    </member>
    <member name="M:NationalInstruments.UI.XYCursor.OnBeforeDraw(NationalInstruments.UI.BeforeDrawXYCursorEventArgs)">
      <summary>
            Raises the BeforeDraw event.
            </summary>
      <param name="e">
            A BeforeDrawXYCursorEventArgs that contains the event data.
            </param>
      <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
    </member>
    <member name="M:NationalInstruments.UI.XYCursor.OnAfterMove(NationalInstruments.UI.AfterMoveXYCursorEventArgs)">
      <summary>
            Raises the AfterMove event.
            </summary>
      <param name="e">
            An AfterMoveXYCursorEventArgs 
            that contains the event data.
            </param>
      <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
    </member>
    <member name="M:NationalInstruments.UI.XYCursor.OnAfterDraw(NationalInstruments.UI.AfterDrawXYCursorEventArgs)">
      <summary>
            Raises the AfterDraw event.
            </summary>
      <param name="e">
            An AfterDrawXYCursorEventArgs that contains the event data.
            </param>
      <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
    </member>
    <member name="P:NationalInstruments.UI.XYCursor.Plot">
      <summary>
            Gets or sets the XYPlot that 
            XYCursor is associated with.
            </summary>
      <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
    </member>
    <member name="P:NationalInstruments.UI.XYCursor.XPosition">
      <summary>
            Gets or sets the horizontal location of 
            XYCursor.  
            </summary>
      <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
            The specified value is NaN.
            </exception>
      <exception cref="T:System.InvalidOperationException">
            		The XAxis of the
            Plot is null.
            
            -or-
            
            	The YAxis of the
            Plot is null.	
            
            -or-
            The PlotOwner
            and the XYCursorOwner are different.
            
            -or-
            The PlotOwner
            and the Plot y-axis Owner are different.
            
            -or-
            The PlotOwner
            and the Plot x-axis Owner are different.
            </exception>
    </member>
    <member name="P:NationalInstruments.UI.XYCursor.YPosition">
      <summary>
            Gets or sets the vertical location of 
            XYCursor.  
            </summary>
      <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
            The specified value is NaN.
            </exception>
      <exception cref="T:System.InvalidOperationException">
            		The XAxis of the
            Plot is null.
            
            -or-
            
            	The YAxis of the
            Plot is null.	
            
            -or-
            The PlotOwner
            and the XYCursorOwner are different.
            
            -or-
            The PlotOwner
            and the Plot y-axis Owner are different.
            
            -or-
            The PlotOwner
            and the Plot x-axis Owner are different.
            </exception>
    </member>
    <member name="P:NationalInstruments.UI.XYCursor.LabelXFormat">
      <summary>
            Gets or sets the format string used to format the x data value displayed in the cursor label.
            </summary>
      <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
    </member>
    <member name="P:NationalInstruments.UI.XYCursor.LabelYFormat">
      <summary>
            Gets or sets the format string used to format the y data value displayed in the cursor label.
            </summary>
      <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
    </member>
    <member name="P:NationalInstruments.UI.XYCursor.LabelDisplay">
      <summary>
            Gets or sets which label coordinates are displayed by the cursor.
            </summary>
      <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
      <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
            The specified value is not a XYCursorLabelDisplay value.
            </exception>
    </member>
    <member name="E:NationalInstruments.UI.XYCursor.BeforeMove">
      <summary>
            Occurs before XYCursor moves.
            </summary>
      <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
    </member>
    <member name="E:NationalInstruments.UI.XYCursor.BeforeDraw">
      <summary>
            Occurs before the cursor is drawn.
            </summary>
      <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
    </member>
    <member name="E:NationalInstruments.UI.XYCursor.AfterMove">
      <summary>
            Occurs after XYCursor moves.
            </summary>
      <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
    </member>
    <member name="E:NationalInstruments.UI.XYCursor.AfterDraw">
      <summary>
            Occurs after the cursor has been drawn.
            </summary>
    </member>
    <member name="T:NationalInstruments.UI.SlideStyle">
      <summary>
            Provides an abstract base class for specifying a slide style
            and also provides a list of pre-defined slide styles.
            </summary>
    </member>
    <member name="M:NationalInstruments.UI.SlideStyle.#ctor">
      <summary>
            Initializes a new instance of the SlideStyle class.
            </summary>
    </member>
    <member name="P:NationalInstruments.UI.SlideStyle.UnderlyingType">
      <summary>
            Gets the underlying type of an EnumObject value.
            </summary>
    </member>
    <member name="P:NationalInstruments.UI.SlideStyle.SunkenWithGrip">
      <summary>
            Gets a slide with a sunken look and a grip.
            </summary>
    </member>
    <member name="P:NationalInstruments.UI.SlideStyle.RaisedWithRoundedGrip">
      <summary>
            Gets a slide with a raised look and a rounded grip.
            </summary>
    </member>
    <member name="P:NationalInstruments.UI.SlideStyle.RaisedWithRoundedGrip3D">
      <summary>
            Gets a 3D slide with a raised look and a rounded grip.
            </summary>
    </member>
    <member name="T:NationalInstruments.UI.ShapeStyle">
      <summary>
            Provides an abstract base class for specifying a shape style and also provides 
            a list of pre-defined shape styles.
            </summary>
    </member>
    <member name="M:NationalInstruments.UI.ShapeStyle.#ctor">
      <summary>
            Initializes a new instance of the ShapeStyle class.
            </summary>
    </member>
    <member name="M:NationalInstruments.UI.ShapeStyle.GetPoints(System.Drawing.PointF,System.Drawing.Size)">
      <summary>
            Gets the array of points defined by the shape.
            </summary>
      <param name="shapePoint">
            The point at which the shape is located.
            </param>
      <param name="shapeSize">
            The Size of the shape.
            </param>
      <returns>
            An array of PointF objects that defines the shape.
            </returns>
    </member>
    <member name="M:NationalInstruments.UI.ShapeStyle.GetPoints(System.Drawing.PointF,System.Drawing.Size,System.Single)">
      <summary>
            Gets the array of points that defines the shape rotated at the specified angle.
            </summary>
      <param name="shapePoint">
            The point at which the shape is located.
            </param>
      <param name="shapeSize">
            The Size of the shape.
            </param>
      <param name="angle">
            The angle at which to rotate the shape.
            </param>
      <returns>
            An array of PointF objects that defines the shape.
            </returns>
    </member>
    <member name="M:NationalInstruments.UI.ShapeStyle.GetFocalPoint(System.Drawing.PointF[],System.Drawing.PointF,System.Drawing.PointF,System.Drawing.PointF@)">
      <summary>
            Gets the point on the bounds of the shape where the line intersects the shape.
            </summary>
      <param name="points">
            The array of points that defines the shape.
            </param>
      <param name="pt1">
            The first point that defines the line to intersect the shape.
            </param>
      <param name="pt2">The second point that defines the line to intersect the shape.
            </param>
      <param name="intersectionPoint">
            Upon return, contains the point at which the specified line intersects the shape bounds.
            </param>
      <returns>true if the specified line intersects the shape. 
            </returns>
    </member>
    <member name="M:NationalInstruments.UI.ShapeStyle.CreateArc(NationalInstruments.UI.Arc)">
      <summary>
            Creates an arc ShapeStyle.
            </summary>
      <param name="arc">
            The Arc for the style.
            </param>
      <returns>
            An arc ShapeStyle.
            </returns>
    </member>
    <member name="M:NationalInstruments.UI.ShapeStyle.CreateLine(System.Single)">
      <summary>
            Creates a line ShapeStyle.
            </summary>
      <param name="angle">
            The angle at which to draw the line ShapeStyle.
            </param>
      <returns>
            A line ShapeStyle.
            </returns>
    </member>
    <member name="M:NationalInstruments.UI.ShapeStyle.CreatePolygon(System.Single[],System.Single[])">
      <summary>
            Creates a ShapeStyle that is defined by an array of x and y values.
            </summary>
      <param name="xArray">
            The array of x values that defines the shape.
            </param>
      <param name="yArray">
            The array of y values that defines the shape.
            </param>
      <returns>
            A ShapeStyle that is defined by xArray (parameter) and yArray (parameter).
            </returns>
    </member>
    <member name="M:NationalInstruments.UI.ShapeStyle.GetService(System.Type)">
      <summary>
            Gets the service object of the specified type.
            </summary>
      <param name="serviceType">
            An Object that specifies the type of service object to get.
            </param>
      <returns>
            A service of type serviceType (parameter), or null
            if there is no object of type serviceType (parameter).
            </returns>
    </member>
    <member name="M:NationalInstruments.UI.ShapeStyle.Draw(System.Object,NationalInstruments.UI.ShapeStyleDrawArgs)">
      <summary>
            Draws a shape with the specified ShapeStyleDrawArgs.
            </summary>
      <param name="context">
            The object that specifies the context in which Draw is called.
            </param>
      <param name="args">
            A ShapeStyleDrawArgs that contains the 
            drawing data.
            </param>
    </member>
    <member name="P:NationalInstruments.UI.ShapeStyle.UnderlyingType">
      <summary>
            Gets the underlying type of an EnumObject value.
            </summary>
    </member>
    <member name="P:NationalInstruments.UI.ShapeStyle.Diamond">
      <summary>
            Gets a diamond shape style.
            </summary>
    </member>
    <member name="P:NationalInstruments.UI.ShapeStyle.None">
      <summary>
            Gets a value indicating that there is no shape.
            </summary>
    </member>
    <member name="P:NationalInstruments.UI.ShapeStyle.Oval">
      <summary>
            Gets an oval shape style.
            </summary>
    </member>
    <member name="P:NationalInstruments.UI.ShapeStyle.Rectangle">
      <summary>
            Gets a rectangle shape style.
            </summary>
    </member>
    <member name="P:NationalInstruments.UI.ShapeStyle.Asterisk">
      <summary>
            Gets an asterisk shape style.
            </summary>
    </member>
    <member name="T:NationalInstruments.UI.NumericFillMode">
      <summary>
            Specifies the direction of the fill in a linear numeric pointer.
            </summary>
    </member>
    <member name="F:NationalInstruments.UI.NumericFillMode.None">
      <summary>
            No fill.
            </summary>
    </member>
    <member name="F:NationalInstruments.UI.NumericFillMode.ToMaximum">
      <summary>
            The linear numeric pointer is filled from the current value to the maximum value.
            </summary>
    </member>
    <member name="F:NationalInstruments.UI.NumericFillMode.ToMinimum">
      <summary>
            The linear numeric pointer is filled from the current value to the minimum value.
            </summary>
    </member>
    <member name="F:NationalInstruments.UI.NumericFillMode.ToBaseValue">
      <summary>
            The linear numeric pointer is filled from the current value to a base value.
            </summary>
    </member>
    <member name="T:NationalInstruments.UI.IntensityCursorLabelDisplay">
      <summary>
            Specifies which label coordinates are displayed.
            </summary>
    </member>
    <member name="F:NationalInstruments.UI.IntensityCursorLabelDisplay.ShowX">
      <summary>
            Displays the x label.
            </summary>
    </member>
    <member name="F:NationalInstruments.UI.IntensityCursorLabelDisplay.ShowY">
      <summary>
            Displays the y label.
            </summary>
    </member>
    <member name="F:NationalInstruments.UI.IntensityCursorLabelDisplay.ShowZ">
      <summary>
            Displays the z label.
            </summary>
    </member>
    <member name="F:NationalInstruments.UI.IntensityCursorLabelDisplay.ShowXY">
      <summary>
            Displays the x and y labels.
            </summary>
    </member>
    <member name="F:NationalInstruments.UI.IntensityCursorLabelDisplay.ShowXZ">
      <summary>
            Displays the x and z labels.
            </summary>
    </member>
    <member name="F:NationalInstruments.UI.IntensityCursorLabelDisplay.ShowYZ">
      <summary>
            Displays the y and z labels.
            </summary>
    </member>
    <member name="F:NationalInstruments.UI.IntensityCursorLabelDisplay.ShowXYZ">
      <summary>
            Displays the x, y, and z labels.
            </summary>
    </member>
    <member name="T:NationalInstruments.UI.ImageStateManagementArgs">
      <summary>
            Provides data for managing the state of control image data.
            </summary>
    </member>
    <member name="M:NationalInstruments.UI.ImageStateManagementArgs.#ctor(System.Web.HttpContext,System.String,System.Drawing.Image,NationalInstruments.UI.ImageType,System.Boolean)">
      <summary>
            Initializes a new instance of the ImageStateManagementArgs
            class with the specified context, state ID, image, image type, and value specifying if the URL 
            is unique.
            </summary>
      <param name="context">
            The HttpContext for the current HTTP request.
            </param>
      <param name="stateId">
            An identifier that uniquely identifies the source of the data.
            </param>
      <param name="image">
            An Image that specifies the image to save.
            </param>
      <param name="imageType">
            An ImageType that specifies the type of
            image (parameter).
            </param>
      <param name="createUniqueUrl">
            A value that indicates if the URL that is returned from
            Save must be unique.
            </param>
    </member>
    <member name="P:NationalInstruments.UI.ImageStateManagementArgs.Image">
      <summary>
            Gets the image that is managed by the control image data state management strategy.
            </summary>
    </member>
    <member name="P:NationalInstruments.UI.ImageStateManagementArgs.ImageType">
      <summary>
            Gets the type of the image that is managed by the control image data state management strategy. 
            </summary>
    </member>
    <member name="P:NationalInstruments.UI.ImageStateManagementArgs.CreateUniqueUrl">
      <summary>
            Gets a value that indicates if the URL that is returned from
            Save must be unique.
            </summary>
    </member>
    <member name="T:NationalInstruments.UI.DigitalStateStyle">
      <summary>
            Provides an abstract base class for specifying how digital states are drawn on a digital signal plot
            and also provides a list of pre-defined state styles.
            </summary>
    </member>
    <member name="M:NationalInstruments.UI.DigitalStateStyle.#ctor">
      <summary>
            Initializes a new instance of the DigitalStateStyle class.
            </summary>
    </member>
    <member name="M:NationalInstruments.UI.DigitalStateStyle.Draw(System.Object,NationalInstruments.UI.DigitalStateStyleDrawArgs)">
      <summary>
            Draws the digital state and its label with the specified DigitalStateStyleDrawArgs.
            </summary>
      <param name="context">
            An Object that specifies the context in which Draw is called.
            </param>
      <param name="args">
            A DigitalStateStyleDrawArgs that contains
            the drawing data.
            </param>
      <exception cref="T:System.ArgumentNullException">args (parameter) is null.
            </exception>
    </member>
    <member name="M:NationalInstruments.UI.DigitalStateStyle.DrawState(System.Object,NationalInstruments.UI.DigitalStateStyleDrawArgs)">
      <summary>
            Draws the digital state with the specified DigitalStateStyleDrawArgs.
            </summary>
      <param name="context">
            An Object that specifies the context in which DrawState is called.
            </param>
      <param name="args">
            A DigitalStateStyleDrawArgs that contains
            the drawing data.
            </param>
      <exception cref="T:System.ArgumentNullException">args (parameter) is null.
            </exception>
    </member>
    <member name="M:NationalInstruments.UI.DigitalStateStyle.DrawLabel(System.Object,NationalInstruments.UI.DigitalStateStyleDrawArgs)">
      <summary>
            Draws the label of the digital state with the specified DigitalStateStyleDrawArgs.
            </summary>
      <param name="context">
            An Object that specifies the context in which DrawLabel is called.
            </param>
      <param name="args">
            A DigitalStateStyleDrawArgs that contains
            the drawing data.
            </param>
      <exception cref="T:System.ArgumentNullException">args (parameter) is null.
            </exception>
    </member>
    <member name="M:NationalInstruments.UI.DigitalStateStyle.GetStatePoints(System.Drawing.Rectangle,NationalInstruments.DigitalState,System.Single,System.Drawing.PointF[]@,System.Drawing.PointF[]@)">
      <summary>
            Gets the array of previous and next points that defines a digital state.
            </summary>
      <param name="stateBounds">
            A Rectangle representing the bounds of the state.
            </param>
      <param name="state">
            The DigitalState value.
            </param>
      <param name="lineWidth">
            The width of the line.
            </param>
      <param name="previousPoints">
            Upon return, contains the points to the left of the transition.
            </param>
      <param name="nextPoints">
            Upon return, contains the points to the right of the transition.
            </param>
      <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">state (parameter) is an invalid DigitalState value.
            </exception>
      <exception cref="T:System.IndexOutOfRangeException">lineWidth (parameter) is less than zero.
            </exception>
    </member>
    <member name="P:NationalInstruments.UI.DigitalStateStyle.UnderlyingType">
      <summary>
            Gets the underlying type of an EnumObject value.
            </summary>
    </member>
    <member name="P:NationalInstruments.UI.DigitalStateStyle.Simple">
      <summary>
            Gets a style that draws the state as a solid line.
            </summary>
    </member>
    <member name="P:NationalInstruments.UI.DigitalStateStyle.Enhanced">
      <summary>
            Gets a style that draws the state with enhanced formatting, such as dotted or slashed lines.
            </summary>
    </member>
    <member name="T:NationalInstruments.UI.DataOrientation">
      <summary>
            Specifies the orientation of data in a 2D array.
            </summary>
    </member>
    <member name="F:NationalInstruments.UI.DataOrientation.DataInRows">
      <summary>
            Data is contained in rows in a 2D array.
            </summary>
    </member>
    <member name="F:NationalInstruments.UI.DataOrientation.DataInColumns">
      <summary>
            Data is contained in columns in a 2D array.
            </summary>
    </member>
    <member name="T:NationalInstruments.UI.CursorCrosshairMode">
      <summary>
            Specifies how the length of the crosshairs is determined.
            </summary>
    </member>
    <member name="F:NationalInstruments.UI.CursorCrosshairMode.None">
      <summary>
            No crosshair is drawn.
            </summary>
    </member>
    <member name="F:NationalInstruments.UI.CursorCrosshairMode.Custom">
      <summary>
            The crosshair length is set to the specified Size.
            </summary>
    </member>
    <member name="F:NationalInstruments.UI.CursorCrosshairMode.FullLength">
      <summary>
            The crosshair is drawn the full length of the plot area.
            </summary>
    </member>
    <member name="T:NationalInstruments.UI.ComplexGraphWebInteractionModes">
      <summary>
            Defines the set of possible user interactions within the plot area of a complex graph.
            </summary>
    </member>
    <member name="F:NationalInstruments.UI.ComplexGraphWebInteractionModes.None">
      <summary>
            No interaction.
            </summary>
    </member>
    <member name="F:NationalInstruments.UI.ComplexGraphWebInteractionModes.ZoomX">
      <summary>
            The plot area can be zoomed with a horizontal selection.
            </summary>
    </member>
    <member name="F:NationalInstruments.UI.ComplexGraphWebInteractionModes.ZoomY">
      <summary>
            The plot area can be zoomed with a vertical selection.
            </summary>
    </member>
    <member name="F:NationalInstruments.UI.ComplexGraphWebInteractionModes.ZoomAroundPoint">
      <summary>
            The plot area can be zoomed around a particular point.
            </summary>
    </member>
    <member name="F:NationalInstruments.UI.ComplexGraphWebInteractionModes.EditRange">
      <summary>
            The minimum and maximum values for the axes can be edited interactively at run time.
            </summary>
    </member>
    <member name="F:NationalInstruments.UI.ComplexGraphWebInteractionModes.PlotAreaClick">
      <summary>
            The graph plot area can be clicked to raise an event on the server.
            </summary>
    </member>
    <member name="T:NationalInstruments.UI.BooleanInteractionMouseCursors">
      <summary>
            Represents the mouse cursor used for interaction with a Boolean control.
            </summary>
    </member>
    <member name="F:NationalInstruments.UI.BooleanInteractionMouseCursors.DefaultClick">
      <summary>
            Gets the default mouse cursor for the click interaction.
            </summary>
    </member>
    <member name="F:NationalInstruments.UI.BooleanInteractionMouseCursors.DefaultClickHold">
      <summary>
            Gets the default mouse cursor for the click and hold interaction.
            </summary>
    </member>
    <member name="M:NationalInstruments.UI.BooleanInteractionMouseCursors.#ctor">
      <summary>
            Initializes a new instance of the BooleanInteractionMouseCursors class.
            </summary>
    </member>
    <member name="M:NationalInstruments.UI.BooleanInteractionMouseCursors.ToString">
      <summary>
            Returns a string representation of the object.
            </summary>
      <returns>
            A string representation of the object.
            </returns>
    </member>
    <member name="M:NationalInstruments.UI.BooleanInteractionMouseCursors.ResetAllToDefault">
      <summary>
            Resets all properties of BooleanInteractionMouseCursors to default values.
            </summary>
    </member>
    <member name="M:NationalInstruments.UI.BooleanInteractionMouseCursors.OnPropertyChanged(System.ComponentModel.PropertyChangedEventArgs)">
      <summary>
            Raises the PropertyChanged event.
            </summary>
      <param name="e">
            A PropertyChangedEventArgs that contains the event data.
            </param>
    </member>
    <member name="P:NationalInstruments.UI.BooleanInteractionMouseCursors.Click">
      <summary>
            Gets or sets the mouse cursor for the click interaction.
            </summary>
    </member>
    <member name="P:NationalInstruments.UI.BooleanInteractionMouseCursors.ClickHold">
      <summary>
            Gets or sets the mouse cursor for the click and hold interaction.
            </summary>
    </member>
    <member name="E:NationalInstruments.UI.BooleanInteractionMouseCursors.PropertyChanged">
      <summary>
            Occurs when the value of a property changes.
            </summary>
      <exception cref="T:System.ObjectDisposedException">
            An event handler is added after the object has been disposed.</exception>
    </member>
    <member name="T:NationalInstruments.UI.BeforeDrawXYPointAnnotationEventArgs">
      <summary>
            Provides data for events that occur before the point annotation draws.
            </summary>
    </member>
    <member name="M:NationalInstruments.UI.BeforeDrawXYPointAnnotationEventArgs.#ctor(System.Drawing.Graphics,System.Drawing.Rectangle,System.Boolean,NationalInstruments.UI.XYPointAnnotation,NationalInstruments.UI.XYPointAnnotationPart,System.Drawing.PointF,System.Drawing.PointF,System.Drawing.PointF,System.Drawing.Size,System.Single,System.Drawing.PointF,System.Drawing.Size,System.Drawing.PointF[])">
      <summary>
            Initializes a new instance of BeforeDrawXYPointAnnotationEventArgs 
            with the specified graphics, bounds, annotation, annotation part, arrow head point, arrow tail point, 
            caption point, caption size, caption angle, shape point, shape size, and shape points.
            </summary>
      <param name="graphics">
            The Graphics used to draw the item.
            </param>
      <param name="bounds">
            The Rectangle that represents the bounds in which to draw.
            </param>
      <param name="cancel">
            A value that indicates if the event is cancelled.
            </param>
      <param name="annotation">
            The XYPointAnnotation for which the event is occurring.
            </param>
      <param name="annotationPart">
            The XYPointAnnotationPart of the annotation to draw.
            </param>
      <param name="arrowHeadPoint">
            The Point at which to draw the arrow head.
            </param>
      <param name="arrowTailPoint">
            The Point at which the arrow tail is located.
            </param>
      <param name="captionPoint">
            The Point at which to draw the caption.
            </param>
      <param name="captionSize">
            The Size of the Rectangle in which to draw the caption.
            </param>
      <param name="captionAngle">
            The angle at which to draw the caption.
            </param>
      <param name="shapePoint">
            The Point at which to draw the shape.
            </param>
      <param name="shapeSize">
            The Size of the shape to draw.
            </param>
      <param name="shapePoints">
            The Point array that defines the shape to draw.
            </param>
      <exception cref="T:System.ArgumentNullException">annotation (parameter) is null.
            	-or-graphics (parameter) is null.
            	</exception>
    </member>
    <member name="P:NationalInstruments.UI.BeforeDrawXYPointAnnotationEventArgs.Annotation">
      <summary>
            Gets the XYPointAnnotation to draw.
            </summary>
    </member>
    <member name="P:NationalInstruments.UI.BeforeDrawXYPointAnnotationEventArgs.Part">
      <summary>
            Gets the part of the annotation to draw.
            </summary>
    </member>
    <member name="P:NationalInstruments.UI.BeforeDrawXYPointAnnotationEventArgs.CaptionSize">
      <summary>
            Gets the size of the rectangle in which to draw the caption.
            </summary>
    </member>
    <member name="P:NationalInstruments.UI.BeforeDrawXYPointAnnotationEventArgs.CaptionAngle">
      <summary>
            Gets the angle at which to draw the caption.
            </summary>
    </member>
    <member name="P:NationalInstruments.UI.BeforeDrawXYPointAnnotationEventArgs.ShapePoint">
      <summary>
            Gets the point at which to draw the shape.
            </summary>
    </member>
    <member name="P:NationalInstruments.UI.BeforeDrawXYPointAnnotationEventArgs.ShapeSize">
      <summary>
            Gets the size of the shape to draw.
            </summary>
    </member>
    <member name="P:NationalInstruments.UI.BeforeDrawXYPointAnnotationEventArgs.ArrowHeadPoint">
      <summary>
            Gets the point at which to draw the arrow head.
            </summary>
    </member>
    <member name="P:NationalInstruments.UI.BeforeDrawXYPointAnnotationEventArgs.ArrowTailPoint">
      <summary>
            Gets the point at which the arrow tail is located.
            </summary>
    </member>
    <member name="P:NationalInstruments.UI.BeforeDrawXYPointAnnotationEventArgs.CaptionPoint">
      <summary>
            Gets the point at which to draw the caption.
            </summary>
    </member>
    <member name="P:NationalInstruments.UI.BeforeDrawXYPointAnnotationEventArgs.ShapePoints">
      <summary>
            Gets the array of points that defines the shape to draw.
            </summary>
    </member>
    <member name="T:NationalInstruments.UI.BeforeDrawComplexRangeAnnotationEventArgs">
      <summary>
            Provides data for events that occur before the range annotation draws.
            </summary>
    </member>
    <member name="M:NationalInstruments.UI.BeforeDrawComplexRangeAnnotationEventArgs.#ctor(System.Drawing.Graphics,System.Drawing.Rectangle,System.Boolean,NationalInstruments.UI.ComplexRangeAnnotation,NationalInstruments.UI.ComplexRangeAnnotationPart,System.Drawing.PointF,System.Drawing.PointF,System.Drawing.PointF,System.Drawing.Size,System.Single)">
      <summary>
            Initializes a new instance of BeforeDrawComplexRangeAnnotationEventArgs 
            with the specified graphics, bounds, annotation, annotation part, arrow head point, arrow tail point, 
            caption point, caption size, and caption angle.
            </summary>
      <param name="graphics">
            The Graphics used to draw the item.
            </param>
      <param name="bounds">
            The Rectangle that represents the bounds in which to draw.
            </param>
      <param name="cancel">
            A value that indicates if the event is cancelled.
            </param>
      <param name="annotation">
            The ComplexRangeAnnotation for which the event is occurring.
            </param>
      <param name="annotationPart">
            The ComplexRangeAnnotationPart of the annotation to draw.
            </param>
      <param name="arrowHeadPoint">
            The Point at which to draw the arrow head.
            </param>
      <param name="arrowTailPoint">
            The Point at which the arrow tail is located.
            </param>
      <param name="captionPoint">
            The Point at which to draw the caption.
            </param>
      <param name="captionSize">
            The Size of the Rectangle in which to draw the caption.
            </param>
      <param name="captionAngle">
            The angle at which to draw the caption.
            </param>
      <exception cref="T:System.ArgumentNullException">annotation (parameter) is null.
            	-or-graphics (parameter) is null.
            	</exception>
    </member>
    <member name="P:NationalInstruments.UI.BeforeDrawComplexRangeAnnotationEventArgs.Annotation">
      <summary>
            Gets the ComplexPointAnnotation to draw.
            </summary>
    </member>
    <member name="P:NationalInstruments.UI.BeforeDrawComplexRangeAnnotationEventArgs.Part">
      <summary>
            Gets the part of the annotation to draw.
            </summary>
    </member>
    <member name="P:NationalInstruments.UI.BeforeDrawComplexRangeAnnotationEventArgs.CaptionSize">
      <summary>
            Gets the size of the rectangle in which to draw the caption.
            </summary>
    </member>
    <member name="P:NationalInstruments.UI.BeforeDrawComplexRangeAnnotationEventArgs.CaptionAngle">
      <summary>
            Gets the angle at which to draw the caption.
            </summary>
    </member>
    <member name="P:NationalInstruments.UI.BeforeDrawComplexRangeAnnotationEventArgs.ArrowHeadPoint">
      <summary>
            Gets the point at which to draw the arrow head.
            </summary>
    </member>
    <member name="P:NationalInstruments.UI.BeforeDrawComplexRangeAnnotationEventArgs.ArrowTailPoint">
      <summary>
            Gets the point at which the arrow tail is located.
            </summary>
    </member>
    <member name="P:NationalInstruments.UI.BeforeDrawComplexRangeAnnotationEventArgs.CaptionPoint">
      <summary>
            Gets the point at which to draw the caption.
            </summary>
    </member>
    <member name="T:NationalInstruments.UI.BeforeDrawComplexPlotEventArgs">
      <summary>
            Provides data for the BeforeDrawPlot event.
            </summary>
    </member>
    <member name="M:NationalInstruments.UI.BeforeDrawComplexPlotEventArgs.#ctor(NationalInstruments.UI.ComplexPlot,System.Drawing.Graphics,System.Drawing.Rectangle,System.Boolean)">
      <summary>
            Initializes a new instance of the BeforeDrawComplexPlotEventArgs
            class with the specified plot, graphics, bounds, and cancel value.
            </summary>
      <param name="plot">
            The ComplexPlot for which the event is occurring.
            </param>
      <param name="graphics">
            The Graphics used to draw the item.
            </param>
      <param name="bounds">
            The Rectangle that represents the bounds in which to draw.
            </param>
      <param name="cancel">
            A value that indicates if the event is cancelled.
            </param>
      <exception cref="T:System.ArgumentNullException">plot (parameter) is null.
            	-or-graphics (parameter) is null.
            	</exception>
    </member>
    <member name="M:NationalInstruments.UI.BeforeDrawComplexPlotEventArgs.ToString">
      <summary>
            Returns a string representation of the object.        
            </summary>
      <returns>
            A string representation of the object.
            </returns>
    </member>
    <member name="P:NationalInstruments.UI.BeforeDrawComplexPlotEventArgs.Plot">
      <summary>
            Gets the ComplexPlot to draw.
            </summary>
    </member>
    <member name="T:NationalInstruments.UI.AfterDrawXYCursorEventHandler">
      <summary>
            Represents the method that handles the events that occur after a cursor draws.
            </summary>
      <param name="sender">
            The source of the event.
            </param>
      <param name="e">
            An AfterDrawXYCursorEventArgs that contains the event data.
            </param>
    </member>
    <member name="T:NationalInstruments.UI.TankStyle">
      <summary>
            Provides an abstract base class for specifying a tank style
            and also provides a list of pre-defined tank styles.
            </summary>
    </member>
    <member name="M:NationalInstruments.UI.TankStyle.#ctor">
      <summary>
            Initializes a new instance of the TankStyle class.
            </summary>
    </member>
    <member name="M:NationalInstruments.UI.TankStyle.DrawPointer(NationalInstruments.UI.INumericPointer,NationalInstruments.UI.NumericPointerStyleDrawArgs,System.Double)">
      <summary>
            Draws the pointer of the style.
            </summary>
      <param name="context">
            An INumericPointer with additional context information. 
            </param>
      <param name="args">
            A NumericPointerStyleDrawArgs that contains the
            drawing data.
            </param>
      <param name="value">
            The value used to draw the pointer. 
            </param>
    </member>
    <member name="P:NationalInstruments.UI.TankStyle.UnderlyingType">
      <summary>
            Gets the underlying type of an EnumObject value.
            </summary>
    </member>
    <member name="P:NationalInstruments.UI.TankStyle.Flat">
      <summary>
            Gets a tank with a flat look.
            </summary>
    </member>
    <member name="P:NationalInstruments.UI.TankStyle.Raised">
      <summary>
            Gets a tank with a raised look.
            </summary>
    </member>
    <member name="P:NationalInstruments.UI.TankStyle.Raised3D">
      <summary>
            Gets a 3D tank with a raised look.
            </summary>
    </member>
    <member name="T:NationalInstruments.UI.ScrollBarOrientation">
      <summary>
            Specifies the orientation of a scroll bar.
            </summary>
    </member>
    <member name="F:NationalInstruments.UI.ScrollBarOrientation.Horizontal">
      <summary>
            The scroll bar scrolls horizontally.
            </summary>
    </member>
    <member name="F:NationalInstruments.UI.ScrollBarOrientation.Vertical">
      <summary>
            The scroll bar scrolls vertically.
            </summary>
    </member>
    <member name="T:NationalInstruments.UI.RefreshCallbackResultTypes">
      <summary>
            Defines the set of possible refresh callback result types.
            </summary>
    </member>
    <member name="F:NationalInstruments.UI.RefreshCallbackResultTypes.None">
      <summary>
            No updates are made on the client.
            </summary>
    </member>
    <member name="F:NationalInstruments.UI.RefreshCallbackResultTypes.HiddenField">
      <summary>
            A hidden field on the client is updated.
            </summary>
    </member>
    <member name="F:NationalInstruments.UI.RefreshCallbackResultTypes.Image">
      <summary>
            An image on the client is updated.
            </summary>
    </member>
    <member name="F:NationalInstruments.UI.RefreshCallbackResultTypes.Value">
      <summary>
            An input element on the client is updated.
            </summary>
    </member>
    <member name="T:NationalInstruments.UI.PropertyEditorSourceValueWarningEventHandler">
      <summary>
            Represents the method that handles the warning event of the property editor control to indicate
            an invalid value.
            </summary>
      <param name="sender">
            The source of the event.
            </param>
      <param name="e">
            A PropertyEditorSourceValueWarningEventArgs that contains the event
            data.
            </param>
    </member>
    <member name="T:NationalInstruments.UI.PropertyEditorSource">
      <summary>
            Represents a property that is edited in a property editor control.
            </summary>
    </member>
    <member name="M:NationalInstruments.UI.PropertyEditorSource.#ctor(System.Object,System.String)">
      <summary>
            Initializes a new instance of the PropertyEditorSource
            class with the specified object and the name of a property on the object.
            </summary>
      <param name="obj">
            The Object whose property value is edited at run time.
            </param>
      <param name="propertyName">
            The name of the property whose value is edited at run time.
            </param>
      <exception cref="T:System.ArgumentNullException">obj (parameter) is null.
            
            -or-
            propertyName (parameter) is null.
            </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">propertyName (parameter) is Empty.
            </exception>
      <exception cref="T:System.ArgumentException">obj (parameter) does not contain a property with the name
            specified in propertyName (parameter).
            
            -or-
            propertyName (parameter) is a design-time only property.
            </exception>
    </member>
    <member name="M:NationalInstruments.UI.PropertyEditorSource.ToString">
      <summary>
            Returns a string representation of the object.
            </summary>
      <returns>
            A string representation of the object.
            </returns>
    </member>
    <member name="M:NationalInstruments.UI.PropertyEditorSource.OnValueChanged(System.EventArgs)">
      <summary>
            Raises the ValueChanged
            event.
            </summary>
      <param name="e">
            An EventArgs that contains the event data.
            </param>
    </member>
    <member name="M:NationalInstruments.UI.PropertyEditorSource.Dispose">
      <summary>
            Releases all resources used by the
            PropertyEditorSource object.
            </summary>
    </member>
    <member name="M:NationalInstruments.UI.PropertyEditorSource.Dispose(System.Boolean)">
      <summary>
            Releases the unmanaged resources used by the PropertyEditorSource 
            and optionally releases the managed resources.
            </summary>
      <param name="disposing">true to release both managed and unmanaged resources; false to release only
            unmanaged resources.
            </param>
    </member>
    <member name="M:NationalInstruments.UI.PropertyEditorSource.OnValueWarning(NationalInstruments.UI.PropertyEditorSourceValueWarningEventArgs)">
      <summary>
            Raises the ValueWarning
            event.
            </summary>
      <param name="e">
            A PropertyEditorSourceValueWarningEventArgs that contains the event data.
            </param>
    </member>
    <member name="P:NationalInstruments.UI.PropertyEditorSource.Object">
      <summary>
            Gets the object whose property is edited at run time.
            </summary>
    </member>
    <member name="P:NationalInstruments.UI.PropertyEditorSource.PropertyName">
      <summary>
            Gets the name of the property whose value is edited.
            </summary>
    </member>
    <member name="P:NationalInstruments.UI.PropertyEditorSource.PropertyType">
      <summary>
            Gets the type of the property whose value is edited at run time.
            </summary>
    </member>
    <member name="P:NationalInstruments.UI.PropertyEditorSource.Converter">
      <summary>
            Gets the type converter for the property.
            </summary>
    </member>
    <member name="P:NationalInstruments.UI.PropertyEditorSource.Editor">
      <summary>
            Gets the editor for the property.
            </summary>
    </member>
    <member name="P:NationalInstruments.UI.PropertyEditorSource.Value">
      <summary>
            Gets or sets the value of the property.
            </summary>
    </member>
    <member name="P:NationalInstruments.UI.PropertyEditorSource.FormattedValue">
      <summary>
            Gets the value formatted as a string.
            </summary>
    </member>
    <member name="E:NationalInstruments.UI.PropertyEditorSource.ValueChanged">
      <summary>
            Occurs when the Value changes.
            </summary>
    </member>
    <member name="P:NationalInstruments.UI.PropertyEditorSource.Empty">
      <summary>
            Gets a property editor source that represents null.
            </summary>
    </member>
    <member name="E:NationalInstruments.UI.PropertyEditorSource.ValueWarning">
      <summary>
            Occurs when the Value changes
            to a value that cannot be converted from its corresponding string representation.
            </summary>
    </member>
    <member name="T:NationalInstruments.UI.PointStyleDrawArgs">
      <summary>
            Provides data for drawing point styles.
            </summary>
    </member>
    <member name="M:NationalInstruments.UI.PointStyleDrawArgs.#ctor(System.Drawing.Graphics,System.Drawing.Color,System.Drawing.Size)">
      <summary>
            Initializes a new instance of the PointStyleDrawArgs class
            with the specified graphics surface, point color, and point size.
            </summary>
      <param name="graphics">
            The Graphics used to draw the point.
            </param>
      <param name="color">
            The Color of the point.
            </param>
      <param name="size">
            The Size of the point.
            </param>
      <exception cref="T:System.ArgumentNullException">graphics (parameter) is null.
            </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
            The width of size (parameter) is less than zero.
            
            -or-
            


            The height of size (parameter) is less than zero.
            


            -or-
            
            The height of size (parameter) is less than zero.
            </exception>
    </member>
    <member name="M:NationalInstruments.UI.PointStyleDrawArgs.#ctor(System.Drawing.Graphics,System.Double,System.Double,System.Drawing.Color,System.Drawing.Size)">
      <summary>
            Initializes a new instance of the PointStyleDrawArgs class
            with the specified graphics surface, x and y coordinates, point color, and point size.
            </summary>
      <param name="graphics">
            The Graphics that is used to draw the point.
            </param>
      <param name="x">
            The Cartesian x-coordinate of the data value.
            </param>
      <param name="y">
            The Cartesian y-coordinate of the data value.
            </param>
      <param name="color">
            The Color of the point.
            </param>
      <param name="size">
            The Size of the point.
            </param>
      <exception cref="T:System.ArgumentNullException">graphics (parameter) is null.
            </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
            The width of size (parameter) is less than zero.
            
            -or-
            


            The height of size (parameter) is less than zero.
            


            -or-
            
            The height of size (parameter) is less than zero.
            </exception>
    </member>
    <member name="M:NationalInstruments.UI.PointStyleDrawArgs.ToString">
      <summary>
            Returns a string representation of the object.
            </summary>
      <returns>
            A string representation of the object.
            </returns>
    </member>
    <member name="P:NationalInstruments.UI.PointStyleDrawArgs.X">
      <summary>
            Gets the Cartesian x-coordinate of the data value.
            </summary>
    </member>
    <member name="P:NationalInstruments.UI.PointStyleDrawArgs.Y">
      <summary>
            Gets the Cartesian y-coordinate of the data value.
            </summary>
    </member>
    <member name="P:NationalInstruments.UI.PointStyleDrawArgs.Color">
      <summary>
            Gets the color of the point.
            </summary>
    </member>
    <member name="P:NationalInstruments.UI.PointStyleDrawArgs.Size">
      <summary>
            Gets the size of the point.
            </summary>
    </member>
    <member name="T:NationalInstruments.UI.IntensityAxisMode">
      <summary>
            Specifies the scaling mode of the specified intensity axis.
            </summary>
    </member>
    <member name="F:NationalInstruments.UI.IntensityAxisMode.Fixed">
      <summary>
            The axis fixes the range to the existing range. The range is never updated.
            </summary>
    </member>
    <member name="F:NationalInstruments.UI.IntensityAxisMode.AutoScaleLoose">
      <summary>
            The axis automatically updates the range so that the range extends beyond the exact calculated data values. 
            </summary>
    </member>
    <member name="F:NationalInstruments.UI.IntensityAxisMode.AutoScaleExact">
      <summary>
            The axis automatically updates the range to the exact calculated values.
            </summary>
    </member>
    <member name="F:NationalInstruments.UI.IntensityAxisMode.ScopeChart">
      <summary>
            The axis updates the range to behave as a scope chart. For example, if the existing range is 0 to 10 and a data value of 13 is 
            plotted, the range is updated to 10 to 20.
            </summary>
    </member>
    <member name="F:NationalInstruments.UI.IntensityAxisMode.StripChart">
      <summary>
            The axis updates the range to behave as a strip chart by 
            scrolling to the most recent data value. For example, if the existing range is 0 to 10 and a data value of 13 is 
            plotted, the range is updated to 3 to 13.
            </summary>
    </member>
    <member name="T:NationalInstruments.UI.IMeter">
      <summary>
            Defines an interface for the meter control.
            </summary>
    </member>
    <member name="P:NationalInstruments.UI.IMeter.SpindleColor">
      <summary>
            Gets or sets the color of the base that connects the pointer to the meter.
            </summary>
      <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
    </member>
    <member name="P:NationalInstruments.UI.IMeter.SpindleVisible">
      <summary>
            Gets or sets a value indicating if the base that connects the pointer to the meter is visible.
            </summary>
      <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
    </member>
    <member name="P:NationalInstruments.UI.IMeter.MeterStyle">
      <summary>
            Gets or sets the style that determines the appearance of the meter.
            </summary>
      <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
      <exception cref="T:System.ArgumentNullException">
            The value is null.
            </exception>
    </member>
    <member name="T:NationalInstruments.UI.ControlArrayPropertyChangedEventArgs`1">
      <summary>
            Provides data for the property changed event of a control in a control array.
            </summary>
      <typeparam name="TControl">
            The type of the control for which the property changed on a control array. The type must derive from
            Control.
            </typeparam>
    </member>
    <member name="M:NationalInstruments.UI.ControlArrayPropertyChangedEventArgs`1.#ctor(`0,System.String)">
      <summary>
            Initializes a new instance of the ControlArrayPropertyChangedEventArgs&lt;T&gt;
            class with the specified control and property name.
            </summary>
      <param name="control">
            The Control for the property changed event that occurred.
            </param>
      <param name="propertyName">
            The name of the property that changed.
            </param>
    </member>
    <member name="P:NationalInstruments.UI.ControlArrayPropertyChangedEventArgs`1.Control">
      <summary>
            Gets the control in a control array for which the property changed event occurred.
            </summary>
    </member>
    <member name="T:NationalInstruments.UI.ComplexXAxis">
      <summary>
            Represents the horizontal axis on a complex graph.
            </summary>
    </member>
    <member name="M:NationalInstruments.UI.ComplexXAxis.#ctor">
      <summary>
            Initializes a new instance of the ComplexXAxis class.
            </summary>
    </member>
    <member name="M:NationalInstruments.UI.ComplexXAxis.GetSize(NationalInstruments.UI.XAxisPosition)">
      <summary>
            Returns the size of the ComplexXAxis at the specified position.
            </summary>
      <param name="position">
            An XAxisPosition that indicates the position of the ComplexXAxis
            for which the size is returned.
            </param>
      <returns>
            The Size of the ComplexXAxis.
            </returns>
      <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
      <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">position (parameter) is an invalid XAxisPosition value.
            </exception>
      <exception cref="T:System.NotSupportedException">position (parameter) is TopBottom.
            	</exception>
    </member>
    <member name="M:NationalInstruments.UI.ComplexXAxis.GetBounds(NationalInstruments.UI.XAxisPosition)">
      <summary>
            Returns the bounds of the ComplexXAxis at the specified position.
            </summary>
      <param name="position">
            An XAxisPosition that indicates the position of the ComplexXAxis
             for which the bounds are returned.
            </param>
      <returns>
            A Rectangle that represents the bounds of the ComplexXAxis.
            </returns>
      <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
      <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">position (parameter) is an invalid XAxisPosition value.
            </exception>
      <exception cref="T:System.NotSupportedException">position (parameter) is TopBottom.
            	</exception>
    </member>
    <member name="M:NationalInstruments.UI.ComplexXAxis.GetBounds(System.Drawing.Graphics,System.Drawing.Rectangle)">
      <summary>
            Returns the bounds of the ComplexXAxis relative to a reference rectangle.
            </summary>
      <param name="graphics">
            The Graphics object that is used to calculate the bounds of the axis.
            </param>
      <param name="referenceRectangle">
            A Rectangle that provides a reference for the bounds of the ComplexXAxis.
            </param>
      <returns>
            A Rectangle that provides a reference for the bounds of the ComplexXAxis.
            </returns>
      <exception cref="T:System.ArgumentNullException">graphics (parameter) is null.
            	</exception>
      <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
    </member>
    <member name="M:NationalInstruments.UI.ComplexXAxis.GetBounds(System.Drawing.Graphics,System.Drawing.Rectangle,NationalInstruments.UI.XAxisPosition)">
      <summary>
            Returns the bounds of the ComplexXAxis relative to a reference rectangle at the specified position.
            </summary>
      <param name="graphics">
            The Graphics object that is used to calculate the bounds of the axis.
            </param>
      <param name="referenceRectangle">
            A Rectangle that provides a reference for the bounds of the ComplexXAxis.
            </param>
      <param name="position">
            An XAxisPosition that indicates the position of the ComplexXAxis
             for which the bounds are returned.
            </param>
      <returns>
            A Rectangle that represents the bounds of the ComplexXAxis.
            </returns>
      <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
      <exception cref="T:System.ArgumentNullException">graphics (parameter) is null.
            	</exception>
      <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">position (parameter) is an invalid XAxisPosition value.
            </exception>
      <exception cref="T:System.NotSupportedException">position (parameter) is TopBottom.
            	</exception>
    </member>
    <member name="M:NationalInstruments.UI.ComplexXAxis.Draw(NationalInstruments.UI.ComponentDrawArgs,NationalInstruments.UI.XAxisPosition)">
      <summary>
            Draws the ComplexXAxis with the specified axis position.
            </summary>
      <param name="args">
            A ComponentDrawArgs that contains the 
            drawing data.
            </param>
      <param name="position">
            The position of the axis.
            </param>
      <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
      <exception cref="T:System.ArgumentNullException">args (parameter) is null.
            </exception>
      <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">position (parameter) is not one of the XAxisPosition values.
            </exception>
      <exception cref="T:System.NotSupportedException">position (parameter) is TopBottom.
            	</exception>
    </member>
    <member name="M:NationalInstruments.UI.ComplexXAxis.Clone">
      <summary>
            Creates a new object that is a deep copy of this instance.
            </summary>
      <returns>
            A new object that is a deep copy of this instance.
            </returns>
    </member>
    <member name="M:NationalInstruments.UI.ComplexXAxis.GetService(System.Type)">
      <summary>
            Gets the service object of the specified type.
            </summary>
      <param name="service">
            A service provided by the component.
            </param>
      <returns>
            An Object that represents the service provided by the component or 
            null if the component does not provide the 
            specified service.
            </returns>
    </member>
    <member name="P:NationalInstruments.UI.ComplexXAxis.CaptionPosition">
      <summary>
            Gets or sets the position of the caption that is displayed for the axis.
            </summary>
      <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
      <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
            The specified value is not an XAxisPosition value.
            </exception>
    </member>
    <member name="P:NationalInstruments.UI.ComplexXAxis.Position">
      <summary>
            Gets or sets the position of the axis.
            </summary>
      <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
      <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
            The specified value is not an XAxisPosition value.
            </exception>
    </member>
    <member name="P:NationalInstruments.UI.ComplexXAxis.MinimumHeight">
      <summary>
            Gets or sets the minimum height required by ComplexXAxis,
            allowing you to customize the ComplexXAxis height. 
            </summary>
      <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
            The specified value is less than zero.
            </exception>
    </member>
    <member name="T:NationalInstruments.UI.AfterDragIntensityAnnotationCaptionEventArgs">
      <summary>
            Provides data for the events that occur after the annotation caption has been dragged.
            </summary>
    </member>
    <member name="M:NationalInstruments.UI.AfterDragIntensityAnnotationCaptionEventArgs.#ctor(NationalInstruments.UI.IntensityAnnotation,System.Single,System.Single,NationalInstruments.UI.Action)">
      <summary>
            Initializes a new instance of the AfterDragIntensityAnnotationCaptionEventArgs
            class with the specified annotation, x offset, y offset, and action that caused the event. 
            </summary>
      <param name="annotation">
            The IntensityAnnotation for which the event is occurring.
            </param>
      <param name="xOffset">
            The x offset where the caption was dragged.
            </param>
      <param name="yOffset">
            The y offset where the caption was dragged.
            </param>
      <param name="action"> 
            The source of the Action that caused the event.
            </param>
      <exception cref="T:System.ArgumentNullException">annotation (parameter) is null.
            </exception>
      <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">action (parameter) is not one of the Action
            values.
            </exception>
    </member>
    <member name="P:NationalInstruments.UI.AfterDragIntensityAnnotationCaptionEventArgs.Annotation">
      <summary>
            Gets the IntensityAnnotation whose caption was dragged. 
            </summary>
    </member>
    <member name="P:NationalInstruments.UI.AfterDragIntensityAnnotationCaptionEventArgs.XOffset">
      <summary>
            The x offset where the caption was dragged.
            </summary>
    </member>
    <member name="P:NationalInstruments.UI.AfterDragIntensityAnnotationCaptionEventArgs.YOffset">
      <summary>
            The y offset where the caption was dragged.
            </summary>
    </member>
    <member name="T:NationalInstruments.UI.ColorPrecedence">
      <summary>
            Specifies the color to use to draw the plot.
            </summary>
    </member>
    <member name="F:NationalInstruments.UI.ColorPrecedence.AutoGeneratedColor">
      <summary>
            The color assigned by the color generator is used to draw the plot.
            </summary>
    </member>
    <member name="F:NationalInstruments.UI.ColorPrecedence.UserDefinedColor">
      <summary>
            The color you assign is used to draw the plot.
            </summary>
    </member>
    <member name="T:NationalInstruments.UI.CacheExpirationMode">
      <summary>
            Specifies the expiration policy option for a cached object.
            </summary>
    </member>
    <member name="F:NationalInstruments.UI.CacheExpirationMode.Absolute">
      <summary>
            A cached object expires and is removed from the cache at a specified time.
            </summary>
    </member>
    <member name="F:NationalInstruments.UI.CacheExpirationMode.Sliding">
      <summary>
            The expiration of a cached object can be extended by a specified time if the object is retrieved
            from the cache before the object expires.  If the object is not retrieved during the specified time, 
            the object expires and is removed from the cache.
            </summary>
    </member>
    <member name="T:NationalInstruments.UI.BooleanWebInteractionMode">
      <summary>
            Specifies how the server control responds when the mouse is clicked in the client.
            </summary>
    </member>
    <member name="F:NationalInstruments.UI.BooleanWebInteractionMode.Indicator">
      <summary>
            The control does not change state when the mouse is clicked.
            </summary>
    </member>
    <member name="F:NationalInstruments.UI.BooleanWebInteractionMode.SwitchWhenPressed">
      <summary>
            The control changes state when the mouse is clicked.
            </summary>
    </member>
    <member name="T:NationalInstruments.UI.BeforeDrawXYCursorEventArgs">
      <summary>
            Provides data for events that occur before the cursor draws.
            </summary>
    </member>
    <member name="M:NationalInstruments.UI.BeforeDrawXYCursorEventArgs.#ctor(NationalInstruments.UI.XYCursor,System.Drawing.Rectangle,System.Drawing.Graphics,System.Drawing.Rectangle,System.Boolean)">
      <summary>
            Initializes a new instance of BeforeDrawXYCursorEventArgs with the specified cursor, point bounds,
            graphics, bounds, and cancel value.
            </summary>
      <param name="cursor">
            The XYCursor for which the event is occurring.
            </param>
      <param name="pointBounds">
            The Rectangle that represents the bounds of the cursor point.
            </param>
      <param name="graphics">
            The Graphics used to draw the item.
            </param>
      <param name="bounds">
            The Rectangle that represents the bounds in which to draw.
            </param>
      <param name="cancel">
            A value that indicates if the event is cancelled.
            </param>
      <exception cref="T:System.ArgumentNullException">cursor (parameter) is null.
            	-or-graphics (parameter) is null.
            	</exception>
    </member>
    <member name="M:NationalInstruments.UI.BeforeDrawXYCursorEventArgs.ToString">
      <summary>
            Returns a string representation of the object.
            </summary>
      <returns>
            A string representation of the object.
            </returns>
    </member>
    <member name="P:NationalInstruments.UI.BeforeDrawXYCursorEventArgs.Cursor">
      <summary>
            Gets the XYCursor to draw.
            </summary>
    </member>
    <member name="P:NationalInstruments.UI.BeforeDrawXYCursorEventArgs.PointBounds">
      <summary>
            Gets the bounds of the cursor point.
            </summary>
    </member>
    <member name="T:NationalInstruments.UI.BeforeDrawMagnitudePhaseRangeAnnotationEventArgs">
      <summary>
            Provides data for events that occur before the range annotation draws.
            </summary>
    </member>
    <member name="M:NationalInstruments.UI.BeforeDrawMagnitudePhaseRangeAnnotationEventArgs.#ctor(System.Drawing.Graphics,System.Drawing.Rectangle,System.Boolean,NationalInstruments.UI.MagnitudePhaseRangeAnnotation,NationalInstruments.UI.ComplexRangeAnnotationPart,System.Drawing.PointF,System.Drawing.PointF,System.Drawing.PointF,System.Drawing.Size,System.Single)">
      <summary>
            Initializes a new instance of BeforeDrawMagnitudePhaseRangeAnnotationEventArgs 
            with the specified graphics, bounds, annotation, annotation part, arrow head point, arrow tail point, 
            caption point, caption size, and caption angle.
            </summary>
      <param name="graphics">
            The Graphics used to draw the item.
            </param>
      <param name="bounds">
            The Rectangle that represents the bounds in which to draw.
            </param>
      <param name="cancel">
            A value that indicates if the event is cancelled.
            </param>
      <param name="annotation">
            The MagnitudePhaseRangeAnnotation for which the event is occurring.
            </param>
      <param name="annotationPart">
            The ComplexRangeAnnotationPart of the annotation to draw.
            </param>
      <param name="arrowHeadPoint">
            The Point at which to draw the arrow head.
            </param>
      <param name="arrowTailPoint">
            The Point at which arrow tail is located.
            </param>
      <param name="captionPoint">
            The Point at which to draw the caption.
            </param>
      <param name="captionSize">
            The Size of the Rectangle in which to draw the caption.
            </param>
      <param name="captionAngle">
            The angle at which to draw the caption.
            </param>
      <exception cref="T:System.ArgumentNullException">annotation (parameter) is null.
            	-or-graphics (parameter) is null.
            	</exception>
    </member>
    <member name="P:NationalInstruments.UI.BeforeDrawMagnitudePhaseRangeAnnotationEventArgs.Annotation">
      <summary>
            Gets the ComplexPointAnnotation to draw.
            </summary>
    </member>
    <member name="P:NationalInstruments.UI.BeforeDrawMagnitudePhaseRangeAnnotationEventArgs.Part">
      <summary>
            Gets the part of the annotation to draw.
            </summary>
    </member>
    <member name="P:NationalInstruments.UI.BeforeDrawMagnitudePhaseRangeAnnotationEventArgs.CaptionSize">
      <summary>
            Gets the size of the rectangle in which to draw the caption.
            </summary>
    </member>
    <member name="P:NationalInstruments.UI.BeforeDrawMagnitudePhaseRangeAnnotationEventArgs.CaptionAngle">
      <summary>
            Gets the angle at which to draw the caption.
            </summary>
    </member>
    <member name="P:NationalInstruments.UI.BeforeDrawMagnitudePhaseRangeAnnotationEventArgs.ArrowHeadPoint">
      <summary>
            Gets the point at which to draw the arrow head.
            </summary>
    </member>
    <member name="P:NationalInstruments.UI.BeforeDrawMagnitudePhaseRangeAnnotationEventArgs.ArrowTailPoint">
      <summary>
            Gets the point at which the arrow tail is located.
            </summary>
    </member>
    <member name="P:NationalInstruments.UI.BeforeDrawMagnitudePhaseRangeAnnotationEventArgs.CaptionPoint">
      <summary>
            Gets the point at which to draw the caption.
            </summary>
    </member>
    <member name="T:NationalInstruments.UI.BeforeDrawComplexPointAnnotationEventArgs">
      <summary>
            Provides data for events that occur before the point annotation draws.
            </summary>
    </member>
    <member name="M:NationalInstruments.UI.BeforeDrawComplexPointAnnotationEventArgs.#ctor(System.Drawing.Graphics,System.Drawing.Rectangle,System.Boolean,NationalInstruments.UI.ComplexPointAnnotation,NationalInstruments.UI.ComplexPointAnnotationPart,System.Drawing.PointF,System.Drawing.PointF,System.Drawing.PointF,System.Drawing.Size,System.Single,System.Drawing.PointF,System.Drawing.Size,System.Drawing.PointF[])">
      <summary>
            Initializes a new instance of BeforeDrawComplexPointAnnotationEventArgs 
            with the specified graphics, bounds, annotation, annotation part, arrow head point, arrow tail point, 
            caption point, caption size, caption angle, shape point, shape size, and shape points.
            </summary>
      <param name="graphics">
            The Graphics used to draw the item.
            </param>
      <param name="bounds">
            The Rectangle that represents the bounds in which to draw.
            </param>
      <param name="cancel">
            A value that indicates if the event is cancelled.
            </param>
      <param name="annotation">
            The ComplexPointAnnotation for which the event is occurring.
            </param>
      <param name="annotationPart">
            The ComplexPointAnnotationPart of the annotation to draw.
            </param>
      <param name="arrowHeadPoint">
            The Point at which to draw the arrow head.
            </param>
      <param name="arrowTailPoint">
            The Point at which the arrow tail is located.
            </param>
      <param name="captionPoint">
            The Point at which to draw the caption.
            </param>
      <param name="captionSize">
            The Size of the Rectangle in which to draw the caption.
            </param>
      <param name="captionAngle">
            The angle at which to draw the caption.
            </param>
      <param name="shapePoint">
            The Point at which to draw the shape.
            </param>
      <param name="shapeSize">
            The Size of the shape to draw.
            </param>
      <param name="shapePoints">
            The Point array that defines the shape to draw.
            </param>
      <exception cref="T:System.ArgumentNullException">annotation (parameter) is null.
            	-or-graphics (parameter) is null.
            	</exception>
    </member>
    <member name="P:NationalInstruments.UI.BeforeDrawComplexPointAnnotationEventArgs.Annotation">
      <summary>
            Gets the ComplexPointAnnotation to draw.
            </summary>
    </member>
    <member name="P:NationalInstruments.UI.BeforeDrawComplexPointAnnotationEventArgs.Part">
      <summary>
            Gets the part of the annotation to draw.
            </summary>
    </member>
    <member name="P:NationalInstruments.UI.BeforeDrawComplexPointAnnotationEventArgs.CaptionSize">
      <summary>
            Gets the size of the rectangle in which to draw the caption.
            </summary>
    </member>
    <member name="P:NationalInstruments.UI.BeforeDrawComplexPointAnnotationEventArgs.CaptionAngle">
      <summary>
            Gets the angle at which to draw the caption.
            </summary>
    </member>
    <member name="P:NationalInstruments.UI.BeforeDrawComplexPointAnnotationEventArgs.ShapePoint">
      <summary>
            Gets the point at which to draw the shape.
            </summary>
    </member>
    <member name="P:NationalInstruments.UI.BeforeDrawComplexPointAnnotationEventArgs.ShapeSize">
      <summary>
            Gets the size of the shape to draw.
            </summary>
    </member>
    <member name="P:NationalInstruments.UI.BeforeDrawComplexPointAnnotationEventArgs.ArrowHeadPoint">
      <summary>
            Gets the point at which to draw the arrow head.
            </summary>
    </member>
    <member name="P:NationalInstruments.UI.BeforeDrawComplexPointAnnotationEventArgs.ArrowTailPoint">
      <summary>
            Gets the point at which the arrow tail is located.
            </summary>
    </member>
    <member name="P:NationalInstruments.UI.BeforeDrawComplexPointAnnotationEventArgs.CaptionPoint">
      <summary>
            Gets the point at which to draw the caption.
            </summary>
    </member>
    <member name="P:NationalInstruments.UI.BeforeDrawComplexPointAnnotationEventArgs.ShapePoints">
      <summary>
            Gets the array of points that defines the shape to draw.
            </summary>
    </member>
    <member name="T:NationalInstruments.UI.AfterChangeNumericValueEventHandler">
      <summary>
            Represents the method that handles the AfterChangeValue
            event.
            </summary>
      <param name="sender">
            The source of the event.
            </param>
      <param name="e">
            An AfterChangeNumericValueEventArgs that contains
            the event data.
            </param>
    </member>
    <member name="T:NationalInstruments.UI.XYRangeAnnotation">
      <summary>
            Represents an annotation that highlights a range of values.
            </summary>
    </member>
    <member name="M:NationalInstruments.UI.XYRangeAnnotation.#ctor">
      <summary>
            Initializes a new instance of the XYRangeAnnotation class.
            </summary>
    </member>
    <member name="M:NationalInstruments.UI.XYRangeAnnotation.#ctor(NationalInstruments.UI.XAxis,NationalInstruments.UI.YAxis)">
      <summary>
            Initializes a new instance of the XYRangeAnnotation class with the specified
            XAxis and YAxis.
            </summary>
      <param name="xAxis">
            The XAxis of the annotation.
            </param>
      <param name="yAxis">
            The YAxis of the annotation.
            </param>
    </member>
    <member name="M:NationalInstruments.UI.XYRangeAnnotation.#ctor(NationalInstruments.UI.XAxis,NationalInstruments.UI.YAxis,NationalInstruments.UI.Range,NationalInstruments.UI.Range)">
      <summary>
            Initializes a new instance of the XYRangeAnnotation class with the specified
            XAxis, YAxis, XRange, and YRange.
            </summary>
      <param name="xAxis">
            The XAxis of the annotation.
            </param>
      <param name="yAxis">
            The YAxis of the annotation.
            </param>
      <param name="xRange">
            The XRange of the annotation.
            </param>
      <param name="yRange">
            The YRange of the annotation.
            </param>
      <exception cref="T:System.ArgumentNullException">xRange (parameter) or yRange (parameter) is null.
            </exception>
      <exception cref="T:System.ArgumentException">xRange (parameter) or yRange (parameter) is Empty.
            </exception>
    </member>
    <member name="M:NationalInstruments.UI.XYRangeAnnotation.Clone">
      <summary>
            Creates a new object that is a copy of this instance.
            </summary>
      <returns>
            A new object that is a copy of this instance.
            </returns>
      <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
    </member>
    <member name="M:NationalInstruments.UI.XYRangeAnnotation.FormatDataToolTip(NationalInstruments.UI.Range,NationalInstruments.UI.Range)">
      <summary>
            Formats an x-range and y-range data value pair as an XYRangeAnnotation data tooltip.
            </summary>
      <param name="xRange">
            The x-range data value to format.
            </param>
      <param name="yRange">
            The y-range data value to format.
            </param>
      <returns>
            A String that contains the specified x-range and y-range data values formatted as
            a data tooltip. The tooltip format is specified by the current values of the label format of 
            XAxis and YAxis.
            </returns>
      <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
    </member>
    <member name="M:NationalInstruments.UI.XYRangeAnnotation.Dispose(System.Boolean)">
      <summary>
            Releases the resources used by the XYRangeAnnotation.
            </summary>
      <param name="disposing">
            If true, this method releases managed and unmanaged resources. If false, this method releases
            only unmanaged resources.
            </param>
    </member>
    <member name="M:NationalInstruments.UI.XYRangeAnnotation.OnBeforeDraw(NationalInstruments.UI.BeforeDrawXYRangeAnnotationEventArgs)">
      <summary>
            Raises the BeforeDraw event.
            </summary>
      <param name="e">
            A BeforeDrawXYRangeAnnotationEventArgs that contains the event data.
            </param>
      <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
    </member>
    <member name="M:NationalInstruments.UI.XYRangeAnnotation.OnAfterDraw(NationalInstruments.UI.AfterDrawXYRangeAnnotationEventArgs)">
      <summary>
            Raises the AfterDraw event.
            </summary>
      <param name="e">
            An AfterDrawXYRangeAnnotationEventArgs that contains the event data.
            </param>
      <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
    </member>
    <member name="P:NationalInstruments.UI.XYRangeAnnotation.XRange">
      <summary>
            Gets or sets the minimum and maximum x-axis values of the annotation.
            </summary>
      <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
      <exception cref="T:System.ArgumentNullException">value (parameter) is null.
            </exception>
      <exception cref="T:System.ArgumentException">value (parameter) is Empty.
            </exception>
    </member>
    <member name="P:NationalInstruments.UI.XYRangeAnnotation.YRange">
      <summary>
            Gets or sets the minimum and maximum y-axis values of the annotation.
            </summary>
      <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
      <exception cref="T:System.ArgumentNullException">value (parameter) is null.
            </exception>
      <exception cref="T:System.ArgumentException">value (parameter) is Empty.
            </exception>
    </member>
    <member name="P:NationalInstruments.UI.XYRangeAnnotation.AutoHide">
      <summary>
            Gets or sets a value indicating if the annotation is hidden when the range of interest is not located
            inside the plot area bounds. 
            </summary>
      <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
    </member>
    <member name="P:NationalInstruments.UI.XYRangeAnnotation.RangeFillColor">
      <summary>
            Gets or sets the color used to fill the range area.
            </summary>
      <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
    </member>
    <member name="P:NationalInstruments.UI.XYRangeAnnotation.RangeFillStyle">
      <summary>
            Gets or sets the style used to draw the fill color of the range area.
            </summary>
      <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
      <exception cref="T:System.ArgumentNullException">value (parameter) is null.
            </exception>
    </member>
    <member name="P:NationalInstruments.UI.XYRangeAnnotation.RangeLineColor">
      <summary>
            Gets or sets the color of the line that borders the range area.
            </summary>
      <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
    </member>
    <member name="P:NationalInstruments.UI.XYRangeAnnotation.RangeLineStyle">
      <summary>
            Gets or sets the style of the line that borders the range area.
            </summary>
      <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
      <exception cref="T:System.ArgumentNullException">value (parameter) is null.
            </exception>
    </member>
    <member name="P:NationalInstruments.UI.XYRangeAnnotation.RangeLineWidth">
      <summary>
            Gets or sets the width of the line that borders the range area.
            </summary>
      <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
            The specified value is less than or equal to zero.
            
            -or-
            
            The specified value is NaN, NegativeInfinity,
            or PositiveInfinity.
            </exception>
    </member>
    <member name="P:NationalInstruments.UI.XYRangeAnnotation.RangeZOrder">
      <summary>
            Gets or sets a value indicating if the range area is drawn above or below all plots.
            </summary>
      <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
      <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
            The specified value is not an AnnotationZOrder value.
            </exception>
    </member>
    <member name="P:NationalInstruments.UI.XYRangeAnnotation.ArrowHeadAlignment">
      <summary>
            Gets or sets the location of the arrow head in relation to the range bounds.
            </summary>
      <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
      <exception cref="T:System.ArgumentNullException">value (parameter) is null.
            </exception>
    </member>
    <member name="E:NationalInstruments.UI.XYRangeAnnotation.BeforeDraw">
      <summary>
            Occurs before the range annotation is drawn.
            </summary>
      <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
    </member>
    <member name="E:NationalInstruments.UI.XYRangeAnnotation.AfterDraw">
      <summary>
            Occurs after the range annotation has been drawn.
            </summary>
      <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
    </member>
    <member name="T:NationalInstruments.UI.XYPointAnnotationPart">
      <summary>
            Specifies a part of a point annotation.
            </summary>
    </member>
    <member name="F:NationalInstruments.UI.XYPointAnnotationPart.Caption">
      <summary>
            The caption of a point annotation.
            </summary>
    </member>
    <member name="F:NationalInstruments.UI.XYPointAnnotationPart.Arrow">
      <summary>
            The arrow of a point annotation.
            </summary>
    </member>
    <member name="F:NationalInstruments.UI.XYPointAnnotationPart.Shape">
      <summary>
            The shape of a point annotation.
            </summary>
    </member>
    <member name="T:NationalInstruments.UI.XYPointAnnotation">
      <summary>
            Represents an annotation that annotates an (x, y) data point.
            </summary>
    </member>
    <member name="M:NationalInstruments.UI.XYPointAnnotation.#ctor">
      <summary>
            Initializes a new instance of the XYPointAnnotation class.
            </summary>
    </member>
    <member name="M:NationalInstruments.UI.XYPointAnnotation.#ctor(NationalInstruments.UI.XAxis,NationalInstruments.UI.YAxis)">
      <summary>
            Initializes a new instance of the XYPointAnnotation class with the specified
            XAxis and YAxis.
            </summary>
      <param name="xAxis">
            The XAxis of the annotation.
            </param>
      <param name="yAxis">
            The YAxis of the annotation.
            </param>
    </member>
    <member name="M:NationalInstruments.UI.XYPointAnnotation.#ctor(NationalInstruments.UI.XAxis,NationalInstruments.UI.YAxis,System.Double,System.Double)">
      <summary>
            Initializes a new instance of the XYPointAnnotation class with the specified
            XAxis, YAxis, XPosition, and YPosition.
            </summary>
      <param name="xAxis">
            The XAxis of the annotation.
            </param>
      <param name="yAxis">
            The YAxis of the annotation.
            </param>
      <param name="xPosition">
            The XPosition of the annotation.
            </param>
      <param name="yPosition">
            The YPosition of the annotation.
            </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
            The specified xPosition (parameter) or yPosition (parameter) is NaN, NegativeInfinity,
            or PositiveInfinity.
            </exception>
    </member>
    <member name="M:NationalInstruments.UI.XYPointAnnotation.Clone">
      <summary>
            Creates a new object that is a copy of this instance.
            </summary>
      <returns>
            A new object that is a copy of this instance.
            </returns>
      <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
    </member>
    <member name="M:NationalInstruments.UI.XYPointAnnotation.SetPosition(System.Double,System.Double)">
      <summary>
            Sets the horizontal and vertical locations of the point to annotate.
            </summary>
      <param name="xPosition">
            The horizontal location of the point to annotate.
            </param>
      <param name="yPosition">
            The vertical location of the point to annotate.
            </param>
      <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
    </member>
    <member name="M:NationalInstruments.UI.XYPointAnnotation.FormatDataToolTip(System.Double,System.Double)">
      <summary>
            Formats an x- and y-data value pair as a XYPointAnnotation data tooltip.
            </summary>
      <param name="xData">
            The x-data value to format.
            </param>
      <param name="yData">
            The y-data value to format.
            </param>
      <returns>
            A String that contains the specified x- and y-data values formatted as
            a data tooltip. The tooltip format is specified by the current values of the label format of 
            XAxis and YAxis.
            </returns>
      <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
    </member>
    <member name="M:NationalInstruments.UI.XYPointAnnotation.Dispose(System.Boolean)">
      <summary>
            Releases the resources used by the XYPointAnnotation.
            </summary>
      <param name="disposing">
            If true, this method releases managed and unmanaged resources. If false, this method releases
            only unmanaged resources.
            </param>
    </member>
    <member name="M:NationalInstruments.UI.XYPointAnnotation.OnBeforeDraw(NationalInstruments.UI.BeforeDrawXYPointAnnotationEventArgs)">
      <summary>
            Raises the BeforeDraw event.
            </summary>
      <param name="e">
            A BeforeDrawXYPointAnnotationEventArgs that contains the event data.
            </param>
      <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
    </member>
    <member name="M:NationalInstruments.UI.XYPointAnnotation.OnAfterDraw(NationalInstruments.UI.AfterDrawXYPointAnnotationEventArgs)">
      <summary>
            Raises the AfterDraw event.
            </summary>
      <param name="e">
            An AfterDrawXYPointAnnotationEventArgs that contains the event data.
            </param>
      <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
    </member>
    <member name="P:NationalInstruments.UI.XYPointAnnotation.XPosition">
      <summary>
            Gets or sets the horizontal location of the annotation in data coordinates.
            </summary>
      <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
            The specified value is NaN, NegativeInfinity,
            or PositiveInfinity.
            </exception>
    </member>
    <member name="P:NationalInstruments.UI.XYPointAnnotation.YPosition">
      <summary>
            Gets or sets the vertical location of the annotation in data coordinates.
            </summary>
      <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
            The specified value is NaN, NegativeInfinity,
            or PositiveInfinity.
            </exception>
    </member>
    <member name="P:NationalInstruments.UI.XYPointAnnotation.AutoHide">
      <summary>
            Gets or sets a value indicating if the annotation is hidden when the point of interest is not located
            inside the plot area bounds. 
            </summary>
      <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
    </member>
    <member name="P:NationalInstruments.UI.XYPointAnnotation.ArrowHeadPosition">
      <summary>
            Gets or sets the position of the arrow head relative to the bounds of the shape.
            </summary>
      <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
      <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
            The specified value is not an ArrowHeadPosition value.
            </exception>
    </member>
    <member name="P:NationalInstruments.UI.XYPointAnnotation.ShapeFillColor">
      <summary>
            Gets or sets the color used to fill the shape.
            </summary>
      <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
    </member>
    <member name="P:NationalInstruments.UI.XYPointAnnotation.ShapeFillStyle">
      <summary>
            Gets or sets the style used to draw the fill color of the shape.
            </summary>
      <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
      <exception cref="T:System.ArgumentNullException">value (parameter) is null.
            </exception>
    </member>
    <member name="P:NationalInstruments.UI.XYPointAnnotation.ShapeLineColor">
      <summary>
            Gets or sets the color of the line that outlines the shape.
            </summary>
      <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
    </member>
    <member name="P:NationalInstruments.UI.XYPointAnnotation.ShapeLineStyle">
      <summary>
            Gets or sets the style of the line that outlines the shape.
            </summary>
      <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
      <exception cref="T:System.ArgumentNullException">value (parameter) is null.
            </exception>
    </member>
    <member name="P:NationalInstruments.UI.XYPointAnnotation.ShapeLineWidth">
      <summary>
            Gets or sets the width of the line that outlines the shape.
            </summary>
      <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
            The specified value is less than or equal to zero.
            
            -or-
            
            The specified value is NaN, NegativeInfinity,
            or PositiveInfinity.
            </exception>
    </member>
    <member name="P:NationalInstruments.UI.XYPointAnnotation.ShapeZOrder">
      <summary>
            Gets or sets a value indicating if the shape is drawn above or below all plots.
            </summary>
      <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
      <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
            The specified value is not an AnnotationZOrder value.
            </exception>
    </member>
    <member name="P:NationalInstruments.UI.XYPointAnnotation.ShapeSize">
      <summary>
            Gets or sets the size of the shape.
            </summary>
      <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
            The specified value is Empty.
            
            -or-
            
            The Width is negative.
            
            -or-
            
            The Height is negative.
            </exception>
    </member>
    <member name="P:NationalInstruments.UI.XYPointAnnotation.ShapeStyle">
      <summary>
            Gets or sets the style of the shape.
            </summary>
      <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
      <exception cref="T:System.ArgumentNullException">value (parameter) is null.
            </exception>
    </member>
    <member name="P:NationalInstruments.UI.XYPointAnnotation.ShapeXOffset">
      <summary>
            Gets or sets the x offset of the shape.
            </summary>
      <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
            The specified value is NaN, NegativeInfinity,
            or PositiveInfinity.
            </exception>
    </member>
    <member name="P:NationalInstruments.UI.XYPointAnnotation.ShapeYOffset">
      <summary>
            Gets or sets the y offset of the shape.
            </summary>
      <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
            The specified value is NaN, NegativeInfinity,
            or PositiveInfinity.
            </exception>
    </member>
    <member name="P:NationalInstruments.UI.XYPointAnnotation.ShapeRotation">
      <summary>
            Gets or sets the angle at which to rotate the shape.
            </summary>
      <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
            The specified value is NaN, NegativeInfinity,
            or PositiveInfinity.
            </exception>
    </member>
    <member name="P:NationalInstruments.UI.XYPointAnnotation.ShapeVisible">
      <summary>
            Gets or sets a value indicating if the shape is visible. 
            </summary>
      <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
    </member>
    <member name="E:NationalInstruments.UI.XYPointAnnotation.BeforeDraw">
      <summary>
            Occurs before the point annotation is drawn.
            </summary>
      <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
    </member>
    <member name="E:NationalInstruments.UI.XYPointAnnotation.AfterDraw">
      <summary>
            Occurs after the point annotation has been drawn.
            </summary>
      <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
    </member>
    <member name="T:NationalInstruments.UI.RadialNumericPointerHitTestInfo">
      <summary>
            Specifies the parts of a radial numeric pointer control that can be hit-tested.
            </summary>
    </member>
    <member name="F:NationalInstruments.UI.RadialNumericPointerHitTestInfo.None">
      <summary>
            The portion of the radial numeric control outside the dial, pointer, and scale area.
            </summary>
    </member>
    <member name="F:NationalInstruments.UI.RadialNumericPointerHitTestInfo.Pointer">
      <summary>
            The pointer of the radial numeric control.
            </summary>
    </member>
    <member name="F:NationalInstruments.UI.RadialNumericPointerHitTestInfo.Dial">
      <summary>
            The circular area containing the pointer.
            </summary>
    </member>
    <member name="F:NationalInstruments.UI.RadialNumericPointerHitTestInfo.ScaleArea">
      <summary>
            The area containing the scale.
            </summary>
    </member>
    <member name="F:NationalInstruments.UI.RadialNumericPointerHitTestInfo.OuterScaleArea">
      <summary>
            The empty area separating the end of the scale from the start of the scale.
            </summary>
    </member>
    <member name="T:NationalInstruments.UI.PlotArrowDisplayMode">
      <summary>
            Provides an abstract class that defines a set of methods used to plot arrows in different display modes.
            </summary>
    </member>
    <member name="M:NationalInstruments.UI.PlotArrowDisplayMode.#ctor">
      <summary>
            Initializes a new instance of the PlotArrowDisplayMode class.
            </summary>
    </member>
    <member name="M:NationalInstruments.UI.PlotArrowDisplayMode.ToString">
      <summary>
            Returns a string representation of the object.
            </summary>
      <returns>
            A string representation of the object.
            </returns>
    </member>
    <member name="M:NationalInstruments.UI.PlotArrowDisplayMode.GetArrowLocations(System.Object,NationalInstruments.UI.PlotArrowDisplayModeArgs)">
      <summary>
            Gets information about the number of arrows to display on various segments of the plot.
            </summary>
      <param name="context">
            The Object that specifies the context in which GetArrowLocations is called.
            </param>
      <param name="args">
            A PlotArrowDisplayModeArgs containing information about the plot, bounds, and data points.
            </param>
      <returns>
            An array of PlotArrowLocationInfo that provides information about the number of arrows to display on various segments of the plot.
            </returns>
      <exception cref="T:System.ArgumentNullException">args (parameter) is null.
            </exception>
    </member>
    <member name="M:NationalInstruments.UI.PlotArrowDisplayMode.CreateFixedMode(System.Int32)">
      <summary>
            Creates a PlotArrowDisplayMode that displays the specified number of arrows on the plot.
            </summary>
      <param name="arrowCount">
            The number of arrows that must be displayed on the plot.
            </param>
      <returns>
            A PlotArrowDisplayMode that displays the arrowCount (parameter) 
            number of arrows on the plot.
            </returns>
      <exception cref="T:System.ArgumentOutOfRangeException">arrowCount (parameter) is less than zero.
            </exception>
    </member>
    <member name="M:NationalInstruments.UI.PlotArrowDisplayMode.CreateAutomaticMode">
      <summary>
            Creates a PlotArrowDisplayMode that displays arrows on the plot. The number of arrows to display is calculated automatically.
            </summary>
      <returns>
            A PlotArrowDisplayMode that displays arrows on the plot. The number of arrows to display is calculated automatically.
            </returns>
    </member>
    <member name="M:NationalInstruments.UI.PlotArrowDisplayMode.CreateNoneMode">
      <summary>
            Creates a PlotArrowDisplayMode that does not display arrows on the plot.
            </summary>
      <returns>
            A PlotArrowDisplayMode that does not display arrows on the plot.
            </returns>
    </member>
    <member name="M:NationalInstruments.UI.PlotArrowDisplayMode.op_Equality(NationalInstruments.UI.PlotArrowDisplayMode,NationalInstruments.UI.PlotArrowDisplayMode)">
      <summary>
            Checks if two PlotArrowDisplayMode objects are equal.
            </summary>
      <param name="mode1">
            A PlotArrowDisplayMode.
            </param>
      <param name="mode2">
            A PlotArrowDisplayMode.
            </param>
      <returns>true if the values of mode1 (parameter) and mode2 (parameter) are equal. 
            </returns>
    </member>
    <member name="M:NationalInstruments.UI.PlotArrowDisplayMode.op_Inequality(NationalInstruments.UI.PlotArrowDisplayMode,NationalInstruments.UI.PlotArrowDisplayMode)">
      <summary>
            Checks if two PlotArrowDisplayMode objects are 
            not equal.
            </summary>
      <param name="mode1">
            A PlotArrowDisplayMode.
            </param>
      <param name="mode2">
            A PlotArrowDisplayMode.
            </param>
      <returns>true if the values of mode1 (parameter) and mode2 (parameter) are not equal. 
            </returns>
    </member>
    <member name="M:NationalInstruments.UI.PlotArrowDisplayMode.Equals(System.Object)">
      <summary>
            Returns a value indicating if this instance is equal to the specified PlotArrowDisplayMode.
            </summary>
      <param name="obj">
            The PlotArrowDisplayMode to compare with this
            instance.
            </param>
      <returns>true if obj (parameter) is a PlotArrowDisplayMode that is equal 
            to this instance.
            </returns>
    </member>
    <member name="M:NationalInstruments.UI.PlotArrowDisplayMode.GetHashCode">
      <summary>
            Returns a hash code for this object.
            </summary>
      <returns>
            A 32-bit signed integer hash code.
            </returns>
    </member>
    <member name="M:NationalInstruments.UI.PlotArrowDisplayMode.GetService(System.Type)">
      <summary>
            Gets the service object of the specified type.
            </summary>
      <param name="serviceType">
            An Object that specifies the type of service object to get.
            </param>
      <returns>
            A service of type serviceType (parameter), or null
            if there is no object of type serviceType (parameter).
            </returns>
    </member>
    <member name="T:NationalInstruments.UI.NumericEditInteractionMouseCursors">
      <summary>
            Represents the mouse cursor for interactions with the numeric edit control.
            </summary>
    </member>
    <member name="F:NationalInstruments.UI.NumericEditInteractionMouseCursors.DefaultClickUpDownButton">
      <summary>
            Gets the default mouse cursor used when NumericEditInteractionModes is set to Buttons  for the click interaction.
            </summary>
    </member>
    <member name="F:NationalInstruments.UI.NumericEditInteractionMouseCursors.DefaultClickedUpDownButton">
      <summary>
            Gets the default mouse cursor used when NumericEditInteractionModes is set to Buttons for the click and hold interaction.
            </summary>
    </member>
    <member name="F:NationalInstruments.UI.NumericEditInteractionMouseCursors.DefaultText">
      <summary>
            Gets the default mouse cursor used when NumericEditInteractionModes is set to Text for hovering over the textbox.
            </summary>
    </member>
    <member name="M:NationalInstruments.UI.NumericEditInteractionMouseCursors.#ctor">
      <summary>
            Initializes a new instance of the NumericEditInteractionMouseCursors class.
            </summary>
    </member>
    <member name="M:NationalInstruments.UI.NumericEditInteractionMouseCursors.ToString">
      <summary>
            Creates a new object that is a copy of this instance.
            </summary>
      <returns>
            A new object that is a copy of this instance.
            </returns>
    </member>
    <member name="M:NationalInstruments.UI.NumericEditInteractionMouseCursors.ResetAllToDefault">
      <summary>
            Resets all the properties of NumericEditInteractionMouseCursors to default values.
            </summary>
    </member>
    <member name="M:NationalInstruments.UI.NumericEditInteractionMouseCursors.OnPropertyChanged(System.ComponentModel.PropertyChangedEventArgs)">
      <summary>
            Raises the PropertyChanged event.
            </summary>
      <param name="e">
            A PropertyChangedEventArgs that contains the event data.
            </param>
    </member>
    <member name="P:NationalInstruments.UI.NumericEditInteractionMouseCursors.ClickUpDownButton">
      <summary>
            Gets or sets the mouse cursor when NumericEditInteractionModes is set to Buttons  for the click interaction.
            </summary>
    </member>
    <member name="P:NationalInstruments.UI.NumericEditInteractionMouseCursors.ClickedUpDownButton">
      <summary>
            Gets or sets the mouse cursor when NumericEditInteractionModes is set to Buttons for the click and hold interaction.
            </summary>
    </member>
    <member name="P:NationalInstruments.UI.NumericEditInteractionMouseCursors.Text">
      <summary>
            Gets or sets the mouse cursor when NumericEditInteractionModes is set to Text for hovering over the textbox.
            </summary>
    </member>
    <member name="E:NationalInstruments.UI.NumericEditInteractionMouseCursors.PropertyChanged">
      <summary>
            Occurs when the value of a property changes.
            </summary>
      <exception cref="T:System.ObjectDisposedException">
            An event handler is added after the object has been disposed.</exception>
    </member>
    <member name="T:NationalInstruments.UI.MeterStyle">
      <summary>
            Provides an abstract base class for specifying a meter style
            and also provides a list of pre-defined meter styles.
            </summary>
    </member>
    <member name="M:NationalInstruments.UI.MeterStyle.#ctor">
      <summary>
            Initializes a new instance of the MeterStyle class.
            </summary>
    </member>
    <member name="M:NationalInstruments.UI.MeterStyle.DrawSpindle(NationalInstruments.UI.IMeter,NationalInstruments.UI.RadialNumericPointerStyleDrawArgs)">
      <summary>
            Draws the spindle of the style.
            </summary>
      <param name="context">
            An IMeter with additional information.
            </param>
      <param name="args">
            A RadialNumericPointerStyleDrawArgs that contains the
            drawing data.
            </param>
      <exception cref="T:System.ArgumentNullException">context (parameter) is null.
            
            -or-
            args (parameter) is null.
            </exception>
      <exception cref="T:System.NotSupportedException">GetScaleRadius is called and the 
            returned radius is NaN, NegativeInfinity, 
            PositiveInfinity, or is less than or equal to zero.
            </exception>
    </member>
    <member name="M:NationalInstruments.UI.MeterStyle.Draw(NationalInstruments.UI.INumericPointer,NationalInstruments.UI.NumericPointerStyleDrawArgs,System.Double)">
      <summary>
            Draws the style at the specified value.
            </summary>
      <param name="context">
            An INumericPointer with additional context information. 
            </param>
      <param name="args">
            A NumericPointerStyleDrawArgs that contains the
            drawing data.
            </param>
      <param name="value">
            The value used to draw the style.
            </param>
      <exception cref="T:System.ArgumentNullException">context (parameter) is null.
            
            -or-
            args (parameter) is null.
            </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
            The value (parameter) is outside the Range.
            </exception>
      <exception cref="T:System.InvalidCastException">
            The context (parameter) does not support this style.
            </exception>
    </member>
    <member name="P:NationalInstruments.UI.MeterStyle.UnderlyingType">
      <summary>
            Gets the underlying type of an EnumObject value.
            </summary>
    </member>
    <member name="P:NationalInstruments.UI.MeterStyle.FlatWithThickNeedle">
      <summary>
            Gets a meter with a flat look and a thick needle.
            </summary>
    </member>
    <member name="P:NationalInstruments.UI.MeterStyle.FlatWithThinNeedle">
      <summary>
            Gets a meter with a flat look and a thin needle.
            </summary>
    </member>
    <member name="P:NationalInstruments.UI.MeterStyle.RaisedWithThickNeedle">
      <summary>
            Gets a meter with a raised look and a thick needle.
            </summary>
    </member>
    <member name="P:NationalInstruments.UI.MeterStyle.RaisedWithThinNeedle">
      <summary>
            Gets a meter with a raised look and a thin needle.
            </summary>
    </member>
    <member name="T:NationalInstruments.UI.GraphInteractionMouseCursors">
      <summary>
            Represents the mouse cursor for interaction with the graph controls.
            </summary>
    </member>
    <member name="F:NationalInstruments.UI.GraphInteractionMouseCursors.DefaultZoomX">
      <summary>
            Gets the default mouse cursor used when GraphInteractionModes is set to ZoomX.
            </summary>
    </member>
    <member name="F:NationalInstruments.UI.GraphInteractionMouseCursors.DefaultZoomY">
      <summary>
            Gets the default mouse cursor used when GraphInteractionModes is set to ZoomY.
            </summary>
    </member>
    <member name="F:NationalInstruments.UI.GraphInteractionMouseCursors.DefaultZoomXY">
      <summary>
            Gets the default mouse cursor used when GraphInteractionModes is set to ZoomX and ZoomY.
            </summary>
    </member>
    <member name="F:NationalInstruments.UI.GraphInteractionMouseCursors.DefaultZoomPoint">
      <summary>
            Gets the default mouse cursor used when GraphInteractionModes is set to ZoomAroundPoint.
            </summary>
    </member>
    <member name="F:NationalInstruments.UI.GraphInteractionMouseCursors.DefaultZoomPointZoomX">
      <summary>
            Gets the default mouse cursor used when GraphInteractionModes is set to ZoomAroundPoint and ZoomX.
            </summary>
    </member>
    <member name="F:NationalInstruments.UI.GraphInteractionMouseCursors.DefaultZoomPointZoomY">
      <summary>
            Gets the default mouse cursor used when GraphInteractionModes is set to ZoomAroundPoint and ZoomY.
            </summary>
    </member>
    <member name="F:NationalInstruments.UI.GraphInteractionMouseCursors.DefaultZoomPointZoomXY">
      <summary>
            Gets the default mouse cursor used when GraphInteractionModes is set to ZoomAroundPoint, ZoomX, and ZoomY.
            </summary>
    </member>
    <member name="F:NationalInstruments.UI.GraphInteractionMouseCursors.DefaultPan">
      <summary>
            Gets the default mouse cursor used when GraphInteractionModes is set to PanX or PanY.
            </summary>
    </member>
    <member name="F:NationalInstruments.UI.GraphInteractionMouseCursors.DefaultPanning">
      <summary>
            Gets the default mouse cursor used when GraphInteractionModes is set to PanX or PanY for panning.
            </summary>
    </member>
    <member name="F:NationalInstruments.UI.GraphInteractionMouseCursors.DefaultEditRange">
      <summary>
            Gets the default mouse cursor used when GraphInteractionModes is set to  EditRange.
            </summary>
    </member>
    <member name="F:NationalInstruments.UI.GraphInteractionMouseCursors.DefaultDragAnnotation">
      <summary>
            Gets the default mouse cursor when GraphInteractionModes is set to DragAnnotationCaption.
            </summary>
    </member>
    <member name="F:NationalInstruments.UI.GraphInteractionMouseCursors.DefaultDragCursorX">
      <summary>
            Gets the default mouse cursor when the GraphInteractionModes is set to  DragCursor in the horizontal direction.
            </summary>
    </member>
    <member name="F:NationalInstruments.UI.GraphInteractionMouseCursors.DefaultDragCursorY">
      <summary>
            Gets the default mouse cursor used when GraphInteractionModes is set to  DragCursor in the vertical direction.
            </summary>
    </member>
    <member name="F:NationalInstruments.UI.GraphInteractionMouseCursors.DefaultDragCursorXY">
      <summary>
            Gets the default mouse cursor used when GraphInteractionModes is set to DragCursor in both the horizontal and vertical directions.
            </summary>
    </member>
    <member name="M:NationalInstruments.UI.GraphInteractionMouseCursors.#ctor">
      <summary>
            Initializes a new instance of the GraphInteractionMouseCursors class.
            </summary>
    </member>
    <member name="M:NationalInstruments.UI.GraphInteractionMouseCursors.ToString">
      <summary>
            Returns a string representation of the object.
            </summary>
      <returns>
            A string representation of the object.
            </returns>
    </member>
    <member name="M:NationalInstruments.UI.GraphInteractionMouseCursors.ResetAllToDefault">
      <summary>
            Resets all the properties of GraphInteractionMouseCursors to their default values.
            </summary>
    </member>
    <member name="M:NationalInstruments.UI.GraphInteractionMouseCursors.OnPropertyChanged(System.ComponentModel.PropertyChangedEventArgs)">
      <summary>
            Raises the PropertyChanged event.
            </summary>
      <param name="e">
            A PropertyChangedEventArgs that contains the event data.
            </param>
    </member>
    <member name="P:NationalInstruments.UI.GraphInteractionMouseCursors.ZoomX">
      <summary>
            Gets or sets the mouse cursor when the interaction mode of the graph is ZoomX.
            </summary>
    </member>
    <member name="P:NationalInstruments.UI.GraphInteractionMouseCursors.ZoomY">
      <summary>
            Gets or sets the mouse cursor when the interaction mode of the graph is ZoomY.
            </summary>
    </member>
    <member name="P:NationalInstruments.UI.GraphInteractionMouseCursors.ZoomXY">
      <summary>
            Gets or sets the mouse cursor when the interaction mode of the graph is ZoomX and ZoomY.
            </summary>
    </member>
    <member name="P:NationalInstruments.UI.GraphInteractionMouseCursors.ZoomPoint">
      <summary>
            Gets or sets the mouse cursor when the interaction mode of the graph is ZoomAroundPoint.
            </summary>
    </member>
    <member name="P:NationalInstruments.UI.GraphInteractionMouseCursors.ZoomPointZoomX">
      <summary>
            Gets or sets the mouse cursor when the interaction mode of the scatter graph or waveform graph  control is ZoomAroundPoint and ZoomX.
            </summary>
    </member>
    <member name="P:NationalInstruments.UI.GraphInteractionMouseCursors.ZoomPointZoomY">
      <summary>
            Gets or sets the mouse cursor when the interaction mode of the graph is ZoomAroundPoint and ZoomY.
            </summary>
    </member>
    <member name="P:NationalInstruments.UI.GraphInteractionMouseCursors.ZoomPointZoomXY">
      <summary>
            Gets or sets the mouse cursor when the interaction mode of the scatter graph or waveform graph  control is ZoomAroundPoint, ZoomX, and ZoomY.
            </summary>
    </member>
    <member name="P:NationalInstruments.UI.GraphInteractionMouseCursors.Pan">
      <summary>
            Gets or sets the mouse cursor when the interaction mode of the scatter graph or waveform graph control is PanX or PanY.
            </summary>
    </member>
    <member name="P:NationalInstruments.UI.GraphInteractionMouseCursors.Panning">
      <summary>
            Gets or sets the mouse cursor when the interaction mode of the scatter graph or waveform graph control is PanX or PanY when panning.
            </summary>
    </member>
    <member name="P:NationalInstruments.UI.GraphInteractionMouseCursors.EditRange">
      <summary>
            Gets or sets the mouse cursor when the interaction mode of the scatter graph or waveform graph control is EditRange.
            </summary>
    </member>
    <member name="P:NationalInstruments.UI.GraphInteractionMouseCursors.DragAnnotation">
      <summary>
            Gets or sets the mouse cursor when the interaction of the graph is DragAnnotationCaption.
            </summary>
    </member>
    <member name="P:NationalInstruments.UI.GraphInteractionMouseCursors.DragCursorX">
      <summary>
            Gets or sets the mouse cursor when the interaction mode of the graph  is DragCursor in the horizontal direction.
            </summary>
    </member>
    <member name="P:NationalInstruments.UI.GraphInteractionMouseCursors.DragCursorY">
      <summary>
            Gets or sets the mouse cursor when the interaction mode of the scatter graph or waveform graph control is DragCursor in the vertical direction.
            </summary>
    </member>
    <member name="P:NationalInstruments.UI.GraphInteractionMouseCursors.DragCursorXY">
      <summary>
            Gets or sets the mouse cursor when the interaction mode of the scatter graph or waveform graph control is DragCursor in both horizontal and vertical directions.
            </summary>
    </member>
    <member name="E:NationalInstruments.UI.GraphInteractionMouseCursors.PropertyChanged">
      <summary>
            Occurs when the value of a property changes.
            </summary>
      <exception cref="T:System.ObjectDisposedException">
            An event handler is added after the object has been disposed.</exception>
    </member>
    <member name="T:NationalInstruments.UI.GraphDefaultInteractionMode">
      <summary>
            Specifies the user interaction mode that is enabled without the use of a modifier key in the plot 
            area of a graph.
            </summary>
    </member>
    <member name="F:NationalInstruments.UI.GraphDefaultInteractionMode.None">
      <summary>
            No interaction is enabled by default.
            </summary>
    </member>
    <member name="F:NationalInstruments.UI.GraphDefaultInteractionMode.ZoomX">
      <summary>
            Zoom a horizontal selection of the plot area without the use of a modifier key.
            </summary>
    </member>
    <member name="F:NationalInstruments.UI.GraphDefaultInteractionMode.ZoomY">
      <summary>
            Zoom a vertical selection of the plot area without the use of a modifier key.
            </summary>
    </member>
    <member name="F:NationalInstruments.UI.GraphDefaultInteractionMode.ZoomXY">
      <summary>
            Zoom a rectangular selection of the plot area both horizontally and vertically without the use of a modifier key.
            </summary>
    </member>
    <member name="F:NationalInstruments.UI.GraphDefaultInteractionMode.ZoomXYProportional">
      <summary>
            Zoom a rectangular selection that is proportional to the dimension of the plot area both horizontally and vertically without the use of a modifier key.
            </summary>
    </member>
    <member name="F:NationalInstruments.UI.GraphDefaultInteractionMode.ZoomAroundPoint">
      <summary>
            Zoom the plot area around a particular point without the use of a modifier key.
            </summary>
    </member>
    <member name="F:NationalInstruments.UI.GraphDefaultInteractionMode.PanX">
      <summary>
            Pan the plot area horizontally without the use of a modifier key.
            </summary>
    </member>
    <member name="F:NationalInstruments.UI.GraphDefaultInteractionMode.PanY">
      <summary>
            Pan the plot area vertically without the use of a modifier key.
            </summary>
    </member>
    <member name="F:NationalInstruments.UI.GraphDefaultInteractionMode.PanXY">
      <summary>
            Pan the plot area both horizontally and vertically without the use of a modifier key.
            </summary>
    </member>
    <member name="T:NationalInstruments.UI.DigitalWaveformSampleTransitionStyleDrawArgs">
      <summary>
            Provides data for drawing the transition of digital waveform samples with the DigitalWaveformSampleTransitionStyle class.
            </summary>
    </member>
    <member name="M:NationalInstruments.UI.DigitalWaveformSampleTransitionStyleDrawArgs.#ctor(System.Drawing.Graphics,System.Drawing.Color,System.Single,NationalInstruments.DigitalWaveformSample,NationalInstruments.DigitalWaveformSample,System.Object,System.Object,System.Drawing.PointF[],System.Drawing.PointF[])">
      <summary>
            Initializes a new instance of the DigitalWaveformSampleTransitionStyleDrawArgs class with the specified graphics,
            line color, line width, previous sample, next sample, previous tag, next tag, previous points, and next points.
            </summary>
      <param name="graphics">
            The Graphics used to draw the style.
            </param>
      <param name="lineColor">
            The Color of the line to draw.
            </param>
      <param name="lineWidth">
            The width of the line to draw.
            </param>
      <param name="previousSample">
            The DigitalWaveformSample before the transition. 
            </param>
      <param name="nextSample">
            The DigitalWaveformSample after the transition.
            </param>
      <param name="previousTag">
            The Object value of the tag before the transition.
            </param>
      <param name="nextTag">
            The Object value of the tag after the transition.
            </param>
      <param name="previousPoints">
            The PointF array containing the points before the transition.
            </param>
      <param name="nextPoints">
            The PointF array containing the points after the transition.
            </param>
      <exception cref="T:System.ArgumentOutOfRangeException">lineWidth (parameter) is less than or equal to zero.
            </exception>
      <exception cref="T:System.ArgumentNullException">previousSample (parameter) is null.
            
            -or-
            nextSample (parameter) is null.
            
            -or-
            previousPoints (parameter) is null.
            
            -or-
            nextPoints (parameter) is null.
            </exception>
    </member>
    <member name="T:NationalInstruments.UI.DigitalWaveformGraphWebInteractionMouseCursors">
      <summary>
            Represents the mouse cursor for interaction with the digital waveform graph control.
            </summary>
    </member>
    <member name="F:NationalInstruments.UI.DigitalWaveformGraphWebInteractionMouseCursors.DefaultZoomX">
      <summary>
            The default mouse cursor when the interaction mode of the digital waveform graph control is ZoomX.
            </summary>
    </member>
    <member name="F:NationalInstruments.UI.DigitalWaveformGraphWebInteractionMouseCursors.DefaultZoomPointZoomX">
      <summary>
            Gets the default mouse cursor when DigitalWaveformGraphWebInteractionModes is set to ZoomAroundPoint and ZoomX.
            </summary>
    </member>
    <member name="F:NationalInstruments.UI.DigitalWaveformGraphWebInteractionMouseCursors.DefaultZoomPoint">
      <summary>
            Gets the default mouse cursor used when DigitalWaveformGraphWebInteractionModes is set to ZoomAroundPoint.
            </summary>
    </member>
    <member name="F:NationalInstruments.UI.DigitalWaveformGraphWebInteractionMouseCursors.DefaultPlotAreaClick">
      <summary>
            Gets the default mouse cursor used when the DigitalWaveformGraphWebInteractionModes is set to PlotAreaClick.
            </summary>
    </member>
    <member name="F:NationalInstruments.UI.DigitalWaveformGraphWebInteractionMouseCursors.DefaultDefault">
      <summary>
            Gets the default mouse cursor used on the non-interactive areas of the digital waveform graph.
            </summary>
    </member>
    <member name="F:NationalInstruments.UI.DigitalWaveformGraphWebInteractionMouseCursors.DefaultEditRange">
      <summary>
            Gets the default mouse cursor used when DigitalWaveformGraphInteractionModes is set to EditRange.
            </summary>
    </member>
    <member name="M:NationalInstruments.UI.DigitalWaveformGraphWebInteractionMouseCursors.#ctor">
      <summary>
            Initializes a new instance of the DigitalWaveformGraphWebInteractionMouseCursors class.
            </summary>
    </member>
    <member name="M:NationalInstruments.UI.DigitalWaveformGraphWebInteractionMouseCursors.ToString">
      <summary>
            Returns a string representation of the object.
            </summary>
      <returns>
            A string representation of the object.
            </returns>
    </member>
    <member name="M:NationalInstruments.UI.DigitalWaveformGraphWebInteractionMouseCursors.ResetAllToDefault">
      <summary>
            Resets all properties of BooleanInteractionMouseCursors to default values.
            </summary>
    </member>
    <member name="P:NationalInstruments.UI.DigitalWaveformGraphWebInteractionMouseCursors.ZoomX">
      <summary>
            Gets or sets the mouse cursor when the interaction mode of the digital waveform graph control is  ZoomX.
            </summary>
    </member>
    <member name="P:NationalInstruments.UI.DigitalWaveformGraphWebInteractionMouseCursors.ZoomPoint">
      <summary>
            Gets or sets the mouse cursor when the interaction mode of the digital waveform graph control is ZoomAroundPoint.
            </summary>
    </member>
    <member name="P:NationalInstruments.UI.DigitalWaveformGraphWebInteractionMouseCursors.ZoomPointZoomX">
      <summary>
            Gets or sets the mouse cursor when the interaction mode of the digital waveform graph control is  ZoomAroundPoint and ZoomX.
            </summary>
    </member>
    <member name="P:NationalInstruments.UI.DigitalWaveformGraphWebInteractionMouseCursors.EditRange">
      <summary>
            Gets or sets the mouse cursor when the interaction mode of the digital waveform graph control is ZoomX.
            </summary>
    </member>
    <member name="P:NationalInstruments.UI.DigitalWaveformGraphWebInteractionMouseCursors.PlotAreaClick">
      <summary>
            Gets or sets the mouse cursor when the interaction mode of the digital waveform graph control is PlotAreaClick.
            </summary>
    </member>
    <member name="P:NationalInstruments.UI.DigitalWaveformGraphWebInteractionMouseCursors.Default">
      <summary>
            Gets or sets the default mouse cursor for the digital waveform graph control.
            </summary>
    </member>
    <member name="T:NationalInstruments.UI.DigitalSignalPlotCollection">
      <summary>
            Represents a strongly typed collection of DigitalSignalPlot objects.
            </summary>
    </member>
    <member name="M:NationalInstruments.UI.DigitalSignalPlotCollection.#ctor">
      <summary>
            Initializes a new instance of the DigitalSignalPlotCollection class.
            </summary>
    </member>
    <member name="M:NationalInstruments.UI.DigitalSignalPlotCollection.#ctor(NationalInstruments.UI.DigitalSignalPlot[])">
      <summary>
            Initializes a new instance of the DigitalSignalPlotCollection class
            from an array of DigitalSignalPlot objects.
            </summary>
      <param name="item">
            Array of DigitalSignalPlot objects to copy.
            </param>
      <exception cref="T:System.ArgumentNullException">item (parameter) is null.
            
            -or-
            
            An element in item (parameter) is null.
            </exception>
      <exception cref="T:System.NotSupportedException">
            		An element in item (parameter) has been disposed.
            
            -or-
            
            		An element in item (parameter) is in another DigitalSignalPlotCollection.
            
            -or-
            
            		An element in item (parameter) is already in this collection.
            </exception>
    </member>
    <member name="M:NationalInstruments.UI.DigitalSignalPlotCollection.#ctor(NationalInstruments.UI.DigitalSignalPlotCollection)">
      <summary>
            Initializes a new instance of DigitalSignalPlotCollection
            from an existing collection.
            </summary>
      <param name="item">
            The DigitalSignalPlotCollection to copy.
            </param>
      <exception cref="T:System.ArgumentNullException">item (parameter) is null.
            
            -or-
            
            An element in item (parameter) is null.
            </exception>
      <exception cref="T:System.NotSupportedException">
            		An element in item (parameter) has been disposed.
            
            -or-
            
            		An element in item (parameter) is in another DigitalSignalPlotCollection.
            
            -or-
            
            		An element in item (parameter) is already in this collection.
            </exception>
    </member>
    <member name="M:NationalInstruments.UI.DigitalSignalPlotCollection.ToString">
      <summary>
            Returns a string representation of the object.
            </summary>
      <returns>
            A string representation of the object.
            </returns>
    </member>
    <member name="M:NationalInstruments.UI.DigitalSignalPlotCollection.Add(NationalInstruments.UI.DigitalSignalPlot)">
      <summary>
            Adds an item to the end of the collection.
            </summary>
      <param name="item">
            Item to add to the collection.
            </param>
      <returns>
            The array index of the added item.
            </returns>
      <exception cref="T:System.ArgumentNullException">item (parameter) is null.
            </exception>
      <exception cref="T:System.NotSupportedException">item (parameter) has been disposed.
            
            -or-
            item (parameter) is in another DigitalSignalPlotCollection.
            
            -or-
            item (parameter) is already in this collection.
            </exception>
    </member>
    <member name="M:NationalInstruments.UI.DigitalSignalPlotCollection.AddRange(NationalInstruments.UI.DigitalSignalPlot[])">
      <summary>
            Adds an array of DigitalSignalPlot objects to the end of the collection.
            </summary>
      <param name="item">
            Array of DigitalSignalPlot objects to add to the collection.
            </param>
      <exception cref="T:System.ArgumentNullException">item (parameter) is null.
            
            -or-
            
            An element in item (parameter) is null.
            </exception>
      <exception cref="T:System.NotSupportedException">
            		An element in item (parameter) has been disposed.
            
            -or-
            
            		An element in item (parameter) is in another DigitalSignalPlotCollection.
            
            -or-
            
            		An element in item (parameter) is already in this collection.
            </exception>
    </member>
    <member name="M:NationalInstruments.UI.DigitalSignalPlotCollection.AddRange(NationalInstruments.UI.DigitalSignalPlotCollection)">
      <summary>
            Adds a collection of DigitalSignalPlot objects to the end of the collection.
            </summary>
      <param name="item">
            Collection of DigitalSignalPlot objects to add to the collection.
            </param>
      <exception cref="T:System.ArgumentNullException">item (parameter) is null.
            
            -or-
            
            An element in item (parameter) is null.
            </exception>
      <exception cref="T:System.NotSupportedException">
            		An element in item (parameter) has been disposed.
            
            -or-
            
            		An element in item (parameter) is in another DigitalSignalPlotCollection.
            
            -or-
            
            		An element in item (parameter) is already in this collection.
            </exception>
    </member>
    <member name="M:NationalInstruments.UI.DigitalSignalPlotCollection.Clear">
      <summary>
            Removes all items from the collection.
            </summary>
    </member>
    <member name="M:NationalInstruments.UI.DigitalSignalPlotCollection.Contains(NationalInstruments.UI.DigitalSignalPlot)">
      <summary>
            Determines if the specified element is in the collection.
            </summary>
      <param name="item">Item to locate in the collection.</param>
      <returns>true if the collection contains item (parameter).
            </returns>
    </member>
    <member name="M:NationalInstruments.UI.DigitalSignalPlotCollection.CopyTo(NationalInstruments.UI.DigitalSignalPlot[],System.Int32)">
      <summary>
            Copies the collection to an array or a portion of an array.
            </summary>
      <param name="array">
            Destination array for the collection.
            </param>
      <param name="index">
            The index in the target array at which you want to begin copying the collection to.
            </param>
      <exception cref="T:System.ArgumentNullException">array (parameter) is null.
            </exception>
      <exception cref="T:System.ArgumentException">array (parameter) is multidimensional.
            
            -or-
            index (parameter) is equal to or greater than the length of array (parameter).
            
            -or-
            
            The number of elements in the collection is greater than the available space between
            index (parameter) and the end of array (parameter).
            </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">index (parameter) is less than the lower bound of array (parameter).
            </exception>
    </member>
    <member name="M:NationalInstruments.UI.DigitalSignalPlotCollection.IndexOf(NationalInstruments.UI.DigitalSignalPlot)">
      <summary>
            Returns the zero-based index of the first occurrence of an item in the collection.
            </summary>
      <param name="item">
            Item to search for.
            </param>
      <returns>
            Index of the item. If the item is not found, returns -1.
            </returns>
    </member>
    <member name="M:NationalInstruments.UI.DigitalSignalPlotCollection.Insert(System.Int32,NationalInstruments.UI.DigitalSignalPlot)">
      <summary>
            Inserts an item into the collection at the specified index.
            </summary>
      <param name="index">
            Index to insert the item at.
            </param>
      <param name="item">
            Item to insert into the collection.
            </param>
      <exception cref="T:System.ArgumentNullException">item (parameter) is null.
            </exception>
      <exception cref="T:System.NotSupportedException">item (parameter) has been disposed.
            
            -or-
            item (parameter) is in another DigitalSignalPlotCollection.
            
            -or-
            item (parameter) is already in this collection.
            </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">index (parameter) is less than zero.
            
            -or-
            

index (parameter) is greater than Count.
            


            -or-
            index (parameter) is greater than Count.
            </exception>
    </member>
    <member name="M:NationalInstruments.UI.DigitalSignalPlotCollection.GetEnumerator">
      <summary>
            Returns an enumerator that you can use to iterate through the collection.
            </summary>
      <returns>
            The enumerator for the collection.
            </returns>
    </member>
    <member name="M:NationalInstruments.UI.DigitalSignalPlotCollection.Remove(NationalInstruments.UI.DigitalSignalPlot)">
      <summary>
            Removes the first occurrence of the specified item.
            </summary>
      <param name="item">
            Item to remove from the collection.
            </param>
    </member>
    <member name="M:NationalInstruments.UI.DigitalSignalPlotCollection.RemoveAt(System.Int32)">
      <summary>
            Removes the item at the specified index.
            </summary>
      <param name="index">
            The zero-based index of the item to remove.
            </param>
      <exception cref="T:System.ArgumentOutOfRangeException">index (parameter) is less than zero.
            
            -or-
            

index (parameter) is greater than or equal to Count.
            


            -or-
            index (parameter) is greater than or equal to Count.
            </exception>
    </member>
    <member name="P:NationalInstruments.UI.DigitalSignalPlotCollection.Item(System.Int32)">
      <summary>
            Gets or sets the DigitalSignalPlot at the specified index. 
            </summary>
      <param name="index">
            The zero-based index of the entry to locate in the collection.
            </param>
      <exception cref="T:System.ArgumentNullException">
            	The value is null.
            </exception>
      <exception cref="T:System.NotSupportedException">
            		The value has been disposed.
            
            -or-
            
            		The value is in another DigitalSignalPlotCollection.
            
            -or-
            
            		The value is already in this collection.
            </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">index (parameter) is less than zero.
            
            -or-
            

index (parameter) is greater than Count.
            


            -or-
            index (parameter) is greater than Count.
            </exception>
    </member>
    <member name="P:NationalInstruments.UI.DigitalSignalPlotCollection.Count">
      <summary>
            Gets the number of elements in the DigitalSignalPlotCollection.
            </summary>
    </member>
    <member name="P:NationalInstruments.UI.DigitalSignalPlotCollection.IsSynchronized">
      <summary>
            Gets a value indicating whether access to the collection is synchronized
            (thread-safe).
            </summary>
    </member>
    <member name="P:NationalInstruments.UI.DigitalSignalPlotCollection.IsFixedSize">
      <summary>
            Gets a value indicating whether the collection has a fixed size.
            </summary>
    </member>
    <member name="P:NationalInstruments.UI.DigitalSignalPlotCollection.IsReadOnly">
      <summary>
            Gets a value indicating whether the collection is read-only.
            </summary>
    </member>
    <member name="P:NationalInstruments.UI.DigitalSignalPlotCollection.SyncRoot">
      <summary>
            Gets an object that can be used to synchronize access to the collection.
            </summary>
    </member>
    <member name="T:NationalInstruments.UI.ComplexYAxisEventArgs">
      <summary>
            Provides data for the 
            YAxisRangeChanged event.
            </summary>
    </member>
    <member name="M:NationalInstruments.UI.ComplexYAxisEventArgs.#ctor(NationalInstruments.UI.ComplexYAxis)">
      <summary>
            Initializes a new instance of the ComplexYAxisEventArgs class
            with the specified complex y-axis.
            </summary>
      <param name="yAxis">
            The ComplexYAxis on which the range changed event occurred.
            </param>
      <exception cref="T:System.ArgumentNullException">yAxis (parameter) is null.
            </exception>
    </member>
    <member name="M:NationalInstruments.UI.ComplexYAxisEventArgs.#ctor(NationalInstruments.UI.ComplexYAxis,NationalInstruments.UI.GraphAction)">
      <summary>
            Initializes a new instance of the ComplexYAxisEventArgs class
            with the specified complex y-axis and the action on the graph.
            </summary>
      <param name="yAxis">
            The ComplexYAxis on which the range changed event occurred.
            </param>
      <param name="action">
            The GraphAction that caused the range changed event.
            </param>
      <exception cref="T:System.ArgumentNullException">yAxis (parameter) is null.
            </exception>
    </member>
    <member name="M:NationalInstruments.UI.ComplexYAxisEventArgs.ToString">
      <summary>
            Returns a string representation of the object.
            </summary>
      <returns>
            A string representation of the object.
            </returns>
    </member>
    <member name="P:NationalInstruments.UI.ComplexYAxisEventArgs.YAxis">
      <summary>
            Gets the y-axis on which the range changed event occurred.
            </summary>
    </member>
    <member name="P:NationalInstruments.UI.ComplexYAxisEventArgs.Action">
      <summary>
            Gets the action which raised the range changed event on the complex y-axis.
            </summary>
    </member>
    <member name="T:NationalInstruments.UI.ComplexWaveformPlotOptions">
      <summary>
            Provides scaling and display information used to plot ComplexWaveform&lt;T&gt; 
            data.
            </summary>
    </member>
    <member name="M:NationalInstruments.UI.ComplexWaveformPlotOptions.#ctor(NationalInstruments.UI.ComplexWaveformPlotDisplayMode,NationalInstruments.UI.ComplexWaveformPlotScaleMode,NationalInstruments.UI.ComplexDataPart)">
      <summary>
            Initializes a new instance of the ComplexWaveformPlotOptions class
            with the specified display mode, scale mode, and data to plot.
            </summary>
      <param name="displayMode">
            The ComplexWaveformPlotDisplayMode used while plotting 
            ComplexWaveform&lt;T&gt; data.
            </param>
      <param name="scaleMode">
            The ComplexWaveformPlotScaleMode used to get scaling information 
            while plotting ComplexWaveform&lt;T&gt; data.
            </param>
      <param name="dataToPlot">
            The ComplexDataPart used to specify what part of complex data to use
            while plotting ComplexWaveform&lt;T&gt; data.
            </param>
      <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">displayMode (parameter) is not an ComplexWaveformPlotDisplayMode value.
            </exception>
      <exception cref="T:System.ArgumentNullException">scaleMode (parameter) is null.
            </exception>
      <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">dataToPlot (parameter) is not an ComplexDataPart value.
            </exception>
    </member>
    <member name="M:NationalInstruments.UI.ComplexWaveformPlotOptions.Equals(System.Object)">
      <summary>
            Returns a value indicating if this instance is equal to the specified Object.
            </summary>
      <param name="obj">
            The Object to compare with this
            instance.
            </param>
      <returns>true if obj (parameter) is an Object that is equal 
            to this instance.
            </returns>
    </member>
    <member name="M:NationalInstruments.UI.ComplexWaveformPlotOptions.GetHashCode">
      <summary>
            Returns a hash code for this object.
            </summary>
      <returns>
            A 32-bit signed integer hash code.
            </returns>
    </member>
    <member name="M:NationalInstruments.UI.ComplexWaveformPlotOptions.op_Equality(NationalInstruments.UI.ComplexWaveformPlotOptions,NationalInstruments.UI.ComplexWaveformPlotOptions)">
      <summary>
            Returns whether two ComplexWaveformPlotOptions objects are equal.
            </summary>
      <param name="source">
            A ComplexWaveformPlotOptions.
            </param>
      <param name="destination">
            A ComplexWaveformPlotOptions.
            </param>
      <returns>true if the values of source (parameter) and destination (parameter) are equal. 
            </returns>
    </member>
    <member name="M:NationalInstruments.UI.ComplexWaveformPlotOptions.op_Inequality(NationalInstruments.UI.ComplexWaveformPlotOptions,NationalInstruments.UI.ComplexWaveformPlotOptions)">
      <summary>
            Returns whether two ComplexWaveformPlotOptions objects are 
            not equal.
            </summary>
      <param name="source">
            A ComplexWaveformPlotOptions.
            </param>
      <param name="destination">
            A ComplexWaveformPlotOptions.
            </param>
      <returns>true if the values of source (parameter) and destination (parameter) are not equal. 
            </returns>
    </member>
    <member name="M:NationalInstruments.UI.ComplexWaveformPlotOptions.ToString">
      <summary>
            Returns a string representation of the object.
            </summary>
      <returns>
            A string representation of the object.
            </returns>
    </member>
    <member name="P:NationalInstruments.UI.ComplexWaveformPlotOptions.DisplayMode">
      <summary>
            Gets the mode used to display the ComplexWaveform&lt;T&gt; data.
            </summary>
    </member>
    <member name="P:NationalInstruments.UI.ComplexWaveformPlotOptions.ScaleMode">
      <summary>
            Gets the scaling information used to plot ComplexWaveform&lt;T&gt;
             data.
            </summary>
    </member>
    <member name="P:NationalInstruments.UI.ComplexWaveformPlotOptions.DataToPlot">
      <summary>
            Gets the part of the ComplexWaveform&lt;T&gt; data to be plotted.
            </summary>
    </member>
    <member name="T:NationalInstruments.UI.BeforeDrawIntensityRangeAnnotationEventArgs">
      <summary>
            Provides data for events that occur before the range annotation draws.
            </summary>
    </member>
    <member name="M:NationalInstruments.UI.BeforeDrawIntensityRangeAnnotationEventArgs.#ctor(System.Drawing.Graphics,System.Drawing.Rectangle,System.Boolean,NationalInstruments.UI.IntensityRangeAnnotation,NationalInstruments.UI.IntensityRangeAnnotationPart,System.Drawing.PointF,System.Drawing.PointF,System.Drawing.PointF,System.Drawing.Size,System.Single)">
      <summary>
            Initializes a new instance of BeforeDrawIntensityRangeAnnotationEventArgs 
            with the specified graphics, bounds, annotation, annotation part, arrow head point, arrow tail point, 
            caption point, caption size, caption angle, and a value indicating whether the event is cancelled.
            </summary>
      <param name="graphics">
            The Graphics used to draw the item.
            </param>
      <param name="bounds">
            The Rectangle that represents the bounds in which to draw.
            </param>
      <param name="cancel"> 
            A value that indicates if the event is cancelled.
            </param>
      <param name="annotation">
            The IntensityRangeAnnotation for which the event is occurring.
            </param>
      <param name="annotationPart">
            The IntensityRangeAnnotationPart of the annotation to draw.
            </param>
      <param name="arrowHeadPoint">
            The Point at which to draw the arrow head.
            </param>
      <param name="arrowTailPoint">
            The Point at which arrow tail is located.
            </param>
      <param name="captionPoint">
            The Point at which to draw the caption.
            </param>
      <param name="captionSize">
            The Size of the Rectangle in which to draw the caption.
            </param>
      <param name="captionAngle">
            The angle at which to draw the caption.
            </param>
      <exception cref="T:System.ArgumentNullException">annotation (parameter) is null.
            	-or-graphics (parameter) is null.
            	</exception>
      <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">annotationPart (parameter) is not one of the IntensityRangeAnnotationPart values.
            	</exception>
    </member>
    <member name="P:NationalInstruments.UI.BeforeDrawIntensityRangeAnnotationEventArgs.Annotation">
      <summary>
            Gets the IntensityRangeAnnotation to draw.
            </summary>
    </member>
    <member name="P:NationalInstruments.UI.BeforeDrawIntensityRangeAnnotationEventArgs.Part">
      <summary>
            Gets the part of the annotation to draw.
            </summary>
    </member>
    <member name="P:NationalInstruments.UI.BeforeDrawIntensityRangeAnnotationEventArgs.CaptionSize">
      <summary>
            Gets the size of the rectangle in which to draw the caption.
            </summary>
    </member>
    <member name="P:NationalInstruments.UI.BeforeDrawIntensityRangeAnnotationEventArgs.CaptionAngle">
      <summary>
            Gets the angle at which to draw the caption.
            </summary>
    </member>
    <member name="P:NationalInstruments.UI.BeforeDrawIntensityRangeAnnotationEventArgs.ArrowHeadPoint">
      <summary>
            Gets the point at which to draw the arrow head.
            </summary>
    </member>
    <member name="P:NationalInstruments.UI.BeforeDrawIntensityRangeAnnotationEventArgs.ArrowTailPoint">
      <summary>
            Gets the point at which to the arrow tail is located.
            </summary>
    </member>
    <member name="P:NationalInstruments.UI.BeforeDrawIntensityRangeAnnotationEventArgs.CaptionPoint">
      <summary>
            Gets the point at which to draw the caption.
            </summary>
    </member>
    <member name="T:NationalInstruments.UI.BeforeDragIntensityAnnotationCaptionEventArgs">
      <summary>
            Provides data for the events that occur before the annotation caption is dragged.
            </summary>
    </member>
    <member name="M:NationalInstruments.UI.BeforeDragIntensityAnnotationCaptionEventArgs.#ctor(NationalInstruments.UI.IntensityAnnotation,System.Single,System.Single,NationalInstruments.UI.Action,System.Boolean)">
      <summary>
            Initializes a new instance of the BeforeDragIntensityAnnotationCaptionEventArgs
            class with the specified annotation, x offset, y offset, action that caused the event, and cancel value. 
            </summary>
      <param name="annotation">
            The IntensityAnnotation for which the event is occurring.
            </param>
      <param name="xOffset">
            The x offset to drag the caption to.
            </param>
      <param name="yOffset">
            The y offset to drag the caption to. 
            </param>
      <param name="action">
            The source of the Action that caused the event.
            </param>
      <param name="cancel">
            A value that indicates if the event is cancelled.
            </param>
      <exception cref="T:System.ArgumentNullException">annotation (parameter) is null.
            </exception>
      <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">action (parameter) is not one of the Action
            values.
            </exception>
    </member>
    <member name="P:NationalInstruments.UI.BeforeDragIntensityAnnotationCaptionEventArgs.Annotation">
      <summary>
            Gets the IntensityAnnotation whose caption is going to move. 
            </summary>
    </member>
    <member name="P:NationalInstruments.UI.BeforeDragIntensityAnnotationCaptionEventArgs.XOffset">
      <summary>
            The x offset to move the caption to.
            </summary>
    </member>
    <member name="P:NationalInstruments.UI.BeforeDragIntensityAnnotationCaptionEventArgs.YOffset">
      <summary>
            The y offset to move the caption to.
            </summary>
    </member>
    <member name="T:NationalInstruments.UI.CaptionPosition">
      <summary>
            Specifies the edge of the control at which to position the caption.
            </summary>
    </member>
    <member name="F:NationalInstruments.UI.CaptionPosition.Top">
      <summary>
            The caption appears at the top edge of the control.
            </summary>
    </member>
    <member name="F:NationalInstruments.UI.CaptionPosition.Bottom">
      <summary>
            The caption appears at the bottom edge of the control.
            </summary>
    </member>
    <member name="F:NationalInstruments.UI.CaptionPosition.Left">
      <summary>
            The caption appears at the left edge of the control.
            </summary>
    </member>
    <member name="F:NationalInstruments.UI.CaptionPosition.Right">
      <summary>
            The caption appears at the right edge of the control.
            </summary>
    </member>
    <member name="T:NationalInstruments.UI.BeforeDrawXYRangeAnnotationEventHandler">
      <summary>
            Represents the method that handles the events that occur before a range annotation draws.
            </summary>
      <param name="sender">
            The source of the event.
            </param>
      <param name="e">
            A BeforeDrawXYRangeAnnotationEventArgs that contains the event data.
            </param>
    </member>
    <member name="T:NationalInstruments.UI.BeforeDrawXYPointAnnotationEventHandler">
      <summary>
            Represents the method that handles the events that occur before a point annotation draws.
            </summary>
      <param name="sender">
            The source of the event.
            </param>
      <param name="e">
            A BeforeDrawXYPointAnnotationEventArgs that contains the event data.
            </param>
    </member>
    <member name="T:NationalInstruments.UI.BeforeDrawIntensityCursorEventArgs">
      <summary>
            Provides data for events that occur before the cursor draws.
            </summary>
    </member>
    <member name="M:NationalInstruments.UI.BeforeDrawIntensityCursorEventArgs.#ctor(NationalInstruments.UI.IntensityCursor,System.Drawing.Rectangle,System.Drawing.Graphics,System.Drawing.Rectangle,System.Boolean)">
      <summary>
            Initializes a new instance of BeforeDrawIntensityCursorEventArgs with the specified cursor, point bounds,
            graphics, bounds, and cancel value.
            </summary>
      <param name="cursor">
            The IntensityCursor for which the event is occurring.
            </param>
      <param name="pointBounds">
            The Rectangle that represents the bounds of the cursor point.
            </param>
      <param name="graphics">
            The Graphics used to draw the item.
            </param>
      <param name="bounds">
            The Rectangle that represents the bounds in which to draw.
            </param>
      <param name="cancel">
            A value that indicates if the event is cancelled.
            </param>
      <exception cref="T:System.ArgumentNullException">cursor (parameter) is null.
            	-or-graphics (parameter) is null.
            	</exception>
    </member>
    <member name="M:NationalInstruments.UI.BeforeDrawIntensityCursorEventArgs.ToString">
      <summary>
            Returns a string representation of the object.
            </summary>
      <returns>
            A string representation of the object.
            </returns>
    </member>
    <member name="P:NationalInstruments.UI.BeforeDrawIntensityCursorEventArgs.Cursor">
      <summary>
            Gets the IntensityCursor to draw.
            </summary>
    </member>
    <member name="P:NationalInstruments.UI.BeforeDrawIntensityCursorEventArgs.PointBounds">
      <summary>
            Gets the bounds of the cursor point.
            </summary>
    </member>
    <member name="T:NationalInstruments.UI.BeforeDrawComplexCursorEventArgs">
      <summary>
            Provides data for events that occur before the cursor draws.
            </summary>
    </member>
    <member name="M:NationalInstruments.UI.BeforeDrawComplexCursorEventArgs.#ctor(NationalInstruments.UI.ComplexCursor,System.Drawing.Rectangle,System.Drawing.Graphics,System.Drawing.Rectangle,System.Boolean)">
      <summary>
            Initializes a new instance of BeforeDrawComplexCursorEventArgs with the specified cursor, point bounds,
            graphics, bounds, and cancel value.
            </summary>
      <param name="cursor">
            The ComplexCursor for which the event is occurring.
            </param>
      <param name="pointBounds">
            The Rectangle that represents the bounds of the cursor point.
            </param>
      <param name="graphics">
            The Graphics used to draw the item.
            </param>
      <param name="bounds">
            The Rectangle that represents the bounds in which to draw.
            </param>
      <param name="cancel">
            A value that indicates if the event is cancelled.
            </param>
      <exception cref="T:System.ArgumentNullException">cursor (parameter) is null.
            	-or-graphics (parameter) is null.
            	</exception>
    </member>
    <member name="M:NationalInstruments.UI.BeforeDrawComplexCursorEventArgs.ToString">
      <summary>
            Returns a string representation of the object.
            </summary>
      <returns>
            A string representation of the object.
            </returns>
    </member>
    <member name="P:NationalInstruments.UI.BeforeDrawComplexCursorEventArgs.Cursor">
      <summary>
            Gets the ComplexCursor to draw.
            </summary>
    </member>
    <member name="P:NationalInstruments.UI.BeforeDrawComplexCursorEventArgs.PointBounds">
      <summary>
            Gets the bounds of the cursor point.
            </summary>
    </member>
    <member name="T:NationalInstruments.UI.BeforeDragXYAnnotationCaptionEventArgs">
      <summary>
            Provides data for the events that occur before the annotation caption is dragged.
            </summary>
    </member>
    <member name="M:NationalInstruments.UI.BeforeDragXYAnnotationCaptionEventArgs.#ctor(NationalInstruments.UI.XYAnnotation,System.Single,System.Single,NationalInstruments.UI.Action,System.Boolean)">
      <summary>
            Initializes a new instance of the BeforeDragXYAnnotationCaptionEventArgs
            class with the specified annotation, x offset, y offset, and action that caused the event. 
            </summary>
      <param name="annotation">
            The XYAnnotation for which the event is occurring.
            </param>
      <param name="xOffset">
            The x offset to drag the caption to.
            </param>
      <param name="yOffset">
            The y offset to drag the caption to.
            </param>
      <param name="action">
            The source of the Action that caused the event.
            </param>
      <param name="cancel">
            A value that indicates if the event is cancelled.
            </param>
      <exception cref="T:System.ArgumentNullException">annotation (parameter) is null.
            </exception>
    </member>
    <member name="P:NationalInstruments.UI.BeforeDragXYAnnotationCaptionEventArgs.Annotation">
      <summary>
            Gets the XYAnnotation whose caption is going to move. 
            </summary>
    </member>
    <member name="P:NationalInstruments.UI.BeforeDragXYAnnotationCaptionEventArgs.XOffset">
      <summary>
            The x offset to move the caption to.
            </summary>
    </member>
    <member name="P:NationalInstruments.UI.BeforeDragXYAnnotationCaptionEventArgs.YOffset">
      <summary>
            The y offset to move the caption to.
            </summary>
    </member>
    <member name="T:NationalInstruments.UI.AxisCustomDivisionCollection">
      <summary>
            Represents a strongly typed collection of AxisCustomDivision objects.
            </summary>
    </member>
    <member name="M:NationalInstruments.UI.AxisCustomDivisionCollection.#ctor">
      <summary>
            Initializes a new instance of the AxisCustomDivisionCollection class.
            </summary>
    </member>
    <member name="M:NationalInstruments.UI.AxisCustomDivisionCollection.#ctor(NationalInstruments.UI.AxisCustomDivisionCollection)">
      <summary>
            Initializes a new instance of the AxisCustomDivisionCollection class
            from an existing collection.
            </summary>
      <param name="item">
            The AxisCustomDivisionCollection to copy.
            </param>
      <exception cref="T:System.ArgumentNullException">item (parameter) is null.
            
            -or-
            
            An element in item (parameter) is null.
            </exception>
      <exception cref="T:System.NotSupportedException">
            		An element in item (parameter) has been disposed.
            
            -or-
            
            		An element in item (parameter) is in another AxisCustomDivisionCollection.
            
            -or-
            
            		An element in item (parameter) is already in this collection.
            </exception>
    </member>
    <member name="M:NationalInstruments.UI.AxisCustomDivisionCollection.#ctor(NationalInstruments.UI.AxisCustomDivision[])">
      <summary>
            Initializes a new instance of the AxisCustomDivisionCollection class
            from an array of items.
            </summary>
      <param name="item">
            The array of AxisCustomDivision to copy.
            </param>
      <exception cref="T:System.ArgumentNullException">item (parameter) is null.
            
            -or-
            
            An element in item (parameter) is null.
            </exception>
      <exception cref="T:System.NotSupportedException">
            		An element in item (parameter) has been disposed.
            
            -or-
            
            		An element in item (parameter) is in another AxisCustomDivisionCollection.
            
            -or-
            
            		An element in item (parameter) is already in this collection.
            </exception>
    </member>
    <member name="M:NationalInstruments.UI.AxisCustomDivisionCollection.ToString">
      <summary>
            Returns a string representation of the object.
            </summary>
      <returns>
            A string representation of the object.
            </returns>
    </member>
    <member name="M:NationalInstruments.UI.AxisCustomDivisionCollection.Add(NationalInstruments.UI.AxisCustomDivision)">
      <summary>
            Adds an item to end of the collection.
            </summary>
      <param name="item">
            Item to add to the collection.
            </param>
      <returns>
            The array index of the added item.
            </returns>
      <exception cref="T:System.ArgumentNullException">item (parameter) is null.
            </exception>
      <exception cref="T:System.NotSupportedException">item (parameter) has been disposed.
            
            -or-
            item (parameter) is in another AxisCustomDivisionCollection.
            
            -or-
            item (parameter) is already in this collection.
            </exception>
    </member>
    <member name="M:NationalInstruments.UI.AxisCustomDivisionCollection.AddRange(NationalInstruments.UI.AxisCustomDivision[])">
      <summary>
            Adds an array of AxisCustomDivision objects to the end of the collection.
            </summary>
      <param name="item">
            Array of AxisCustomDivision objects to add to the collection.
            </param>
      <exception cref="T:System.ArgumentNullException">item (parameter) is null.
            
            -or-
            
            An element in item (parameter) is null.
            </exception>
      <exception cref="T:System.NotSupportedException">
            		An element in item (parameter) has been disposed.
            
            -or-
            
            		An element in item (parameter) is in another AxisCustomDivisionCollection.
            
            -or-
            
            		An element in item (parameter) is already in this collection.
            </exception>
    </member>
    <member name="M:NationalInstruments.UI.AxisCustomDivisionCollection.AddRange(NationalInstruments.UI.AxisCustomDivisionCollection)">
      <summary>
            Adds a collection of AxisCustomDivision objects to the end of the collection.
            </summary>
      <param name="item">
            Collection of AxisCustomDivision objects to add to the collection.
            </param>
      <exception cref="T:System.ArgumentNullException">item (parameter) is null.
            
            -or-
            
            An element in item (parameter) is null.
            </exception>
      <exception cref="T:System.NotSupportedException">
            		An element in item (parameter) has been disposed.
            
            -or-
            
            		An element in item (parameter) is in another AxisCustomDivisionCollection.
            
            -or-
            
            		An element in item (parameter) is already in this collection.
            </exception>
    </member>
    <member name="M:NationalInstruments.UI.AxisCustomDivisionCollection.Clear">
      <summary>
            Removes all items from the collection.
            </summary>
    </member>
    <member name="M:NationalInstruments.UI.AxisCustomDivisionCollection.Contains(NationalInstruments.UI.AxisCustomDivision)">
      <summary>
            Determines if the specified element is in the collection.
            </summary>
      <param name="item">Item to locate in the collection.</param>
      <returns>true if the collection contains item (parameter).
            </returns>
    </member>
    <member name="M:NationalInstruments.UI.AxisCustomDivisionCollection.CopyTo(NationalInstruments.UI.AxisCustomDivision[],System.Int32)">
      <summary>
            Copies the collection to an array or a portion of an array.
            </summary>
      <param name="array">
            Destination array for the collection.
            </param>
      <param name="index">
            The index in the target array at which you want to begin copying the collection to.
            </param>
      <exception cref="T:System.ArgumentNullException">array (parameter) is null.
            </exception>
      <exception cref="T:System.ArgumentException">array (parameter) is multidimensional.
            
            - or -
            index (parameter) is equal to or greater than the length of array (parameter).
            
            -or-
            
            The number of elements in the collection is greater than the available space between
            index (parameter) and the end of array (parameter).
            </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">index (parameter) is less than the lower bound of array (parameter).
            </exception>
    </member>
    <member name="M:NationalInstruments.UI.AxisCustomDivisionCollection.IndexOf(NationalInstruments.UI.AxisCustomDivision)">
      <summary>
            Returns the zero-based index of the first occurrence of an item in the collection.
            </summary>
      <param name="item">
            Item to search for.
            </param>
      <returns>
            Index of the item. If the item is not found, returns -1.
            </returns>
    </member>
    <member name="M:NationalInstruments.UI.AxisCustomDivisionCollection.Insert(System.Int32,NationalInstruments.UI.AxisCustomDivision)">
      <summary>
            Inserts an item into the collection at the specified index.
            </summary>
      <param name="index">
            Index to insert the item at.
            </param>
      <param name="item">
            Item to insert into the collection.
            </param>
      <exception cref="T:System.ArgumentNullException">item (parameter) is null.
            </exception>
      <exception cref="T:System.NotSupportedException">item (parameter) has been disposed.
            
            -or-
            item (parameter) is in another AxisCustomDivisionCollection.
            
            -or-
            item (parameter) is already in this collection.
            </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">index (parameter) is less than zero.
            
            -or-
            

index (parameter) is greater than Count.
            


            -or-
            index (parameter) is greater than Count.
            </exception>
    </member>
    <member name="M:NationalInstruments.UI.AxisCustomDivisionCollection.GetEnumerator">
      <summary>
            Returns an enumerator that you can use to iterate through the collection.
            </summary>
      <returns>
            The enumerator for the collection.
            </returns>
    </member>
    <member name="M:NationalInstruments.UI.AxisCustomDivisionCollection.Remove(NationalInstruments.UI.AxisCustomDivision)">
      <summary>
            Removes the first occurrence of the specified item.
            </summary>
      <param name="item">
            Item to remove from the collection.
            </param>
    </member>
    <member name="M:NationalInstruments.UI.AxisCustomDivisionCollection.RemoveAt(System.Int32)">
      <summary>
            Removes the item at the specified index.
            </summary>
      <param name="index">
            The zero-based index of the item to remove.
            </param>
      <exception cref="T:System.ArgumentOutOfRangeException">index (parameter) is less than zero.
            
            -or-
            

index (parameter) is greater than or equal to Count.
            


            -or-
            index (parameter) is greater than or equal to Count.
            </exception>
    </member>
    <member name="P:NationalInstruments.UI.AxisCustomDivisionCollection.Item(System.Int32)">
      <summary>
            Gets or sets the AxisCustomDivision at the specified index.
            </summary>
      <param name="index">
            The zero-based index of the entry to locate in the collection.
            </param>
      <exception cref="T:System.ArgumentNullException">
            	The value is null.
            </exception>
      <exception cref="T:System.NotSupportedException">
            		The value has been disposed.
            
            -or-
            
            		The value is in another AxisCustomDivisionCollection.
            
            -or-
            
            		The value is already in this collection.
            </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">index (parameter) is less than zero.
            
            -or-
            

index (parameter) is greater than Count.
            


            -or-
            index (parameter) is greater than Count.
            </exception>
    </member>
    <member name="P:NationalInstruments.UI.AxisCustomDivisionCollection.Count">
      <summary>
            Gets the number of elements in the AxisCustomDivisionCollection.
            </summary>
    </member>
    <member name="P:NationalInstruments.UI.AxisCustomDivisionCollection.IsSynchronized">
      <summary>
            Gets a value indicating whether access to the collection is synchronized
            (thread-safe).
            </summary>
    </member>
    <member name="P:NationalInstruments.UI.AxisCustomDivisionCollection.IsFixedSize">
      <summary>
            Gets a value indicating whether the collection has a fixed size.
            </summary>
    </member>
    <member name="P:NationalInstruments.UI.AxisCustomDivisionCollection.IsReadOnly">
      <summary>
            Gets a value indicating whether the collection is read-only.
            </summary>
    </member>
    <member name="P:NationalInstruments.UI.AxisCustomDivisionCollection.SyncRoot">
      <summary>
            Gets an object that can be used to synchronize access to the collection.
            </summary>
    </member>
    <member name="T:NationalInstruments.UI.AfterDrawLegendItemEventArgs">
      <summary>
            Provides data for the AfterDrawItem event.
            </summary>
    </member>
    <member name="M:NationalInstruments.UI.AfterDrawLegendItemEventArgs.#ctor(NationalInstruments.UI.LegendItem,System.Drawing.Graphics,System.Drawing.Rectangle)">
      <summary>
            Initializes a new instance of the AfterDrawLegendItemEventArgs
            class with the specified legend item, graphics, and bounds.
            </summary>
      <param name="item">
            The LegendItem for which the event is occurring.
            </param>
      <param name="graphics">
            The Graphics used to draw the item.
            </param>
      <param name="bounds">
            The Rectangle that represents the bounds in which to draw.
            </param>
      <exception cref="T:System.ArgumentNullException">item (parameter) is null.
            	-or-graphics (parameter) is null.
            	</exception>
    </member>
    <member name="M:NationalInstruments.UI.AfterDrawLegendItemEventArgs.ToString">
      <summary>
            Returns a string representation of the object.
            </summary>
      <returns>
            A string representation of the object.
            </returns>
    </member>
    <member name="P:NationalInstruments.UI.AfterDrawLegendItemEventArgs.Item">
      <summary>
            Gets the LegendItem that has been drawn.
            </summary>
    </member>
    <member name="P:NationalInstruments.UI.AfterDrawLegendItemEventArgs.ItemBounds">
      <summary>
            Gets the bounds of the legend item.
            </summary>
    </member>
    <member name="T:NationalInstruments.UI.XYDataStateManagement">
      <summary>
            Provides an abstract base class for specifying a state management strategy
            for x and y data and provides a pre-defined list of state management strategies.
            </summary>
    </member>
    <member name="M:NationalInstruments.UI.XYDataStateManagement.Save(System.Object,NationalInstruments.UI.XYDataStateManagementArgs)">
      <summary>
            Saves data as specified by the contextual information that is provided in the specified
            XYDataStateManagementArgs.
            </summary>
      <param name="context">
            The Object that specifies the context in which
            Save is called.
            </param>
      <param name="args">
            A XYDataStateManagementArgs that
            contains contextual data for the save operation.
            </param>
      <exception cref="T:System.ArgumentNullException">args (parameter) is null.
            </exception>
    </member>
    <member name="M:NationalInstruments.UI.XYDataStateManagement.Load(System.Object,NationalInstruments.UI.XYDataStateManagementArgs)">
      <summary>
            Retrieves data as specified by the contextual information that is provided in the specified
            XYDataStateManagementArgs.
            </summary>
      <param name="context">
            The Object that specifies the context in which
            Load is called.
            </param>
      <param name="args">
            A XYDataStateManagementArgs that
            contains contextual data for the load operation.
            </param>
      <exception cref="T:System.ArgumentNullException">args (parameter) is null.
            </exception>
    </member>
    <member name="M:NationalInstruments.UI.XYDataStateManagement.#ctor">
      <summary>
            Initializes a new instance of the XYDataStateManagement
            class.
            </summary>
    </member>
    <member name="P:NationalInstruments.UI.XYDataStateManagement.UnderlyingType">
      <summary>
            Gets the underlying type of an EnumObject value.
            </summary>
    </member>
    <member name="P:NationalInstruments.UI.XYDataStateManagement.None">
      <summary>
            Gets a data state management strategy that does not save or load the state of the data.
            </summary>
    </member>
    <member name="P:NationalInstruments.UI.XYDataStateManagement.ServerCache">
      <summary>
            Gets a data state management strategy that uses the ASP.NET cache to save and load data.
            </summary>
    </member>
    <member name="P:NationalInstruments.UI.XYDataStateManagement.SessionState">
      <summary>
            Gets a data state management strategy that uses the ASP.NET session state to save and load data.
            </summary>
    </member>
    <member name="T:NationalInstruments.UI.XYCursorLabelDisplay">
      <summary>
            Specifies which label coordinates are displayed.
            </summary>
    </member>
    <member name="F:NationalInstruments.UI.XYCursorLabelDisplay.ShowX">
      <summary>
            Displays the x label.
            </summary>
    </member>
    <member name="F:NationalInstruments.UI.XYCursorLabelDisplay.ShowY">
      <summary>
            Displays the y label.
            </summary>
    </member>
    <member name="F:NationalInstruments.UI.XYCursorLabelDisplay.ShowXY">
      <summary>
            Displays the x and y labels.
            </summary>
    </member>
    <member name="T:NationalInstruments.UI.Polarity">
      <summary>
            Specifies the polarity of a value as positive, negative, or zero.
            </summary>
    </member>
    <member name="F:NationalInstruments.UI.Polarity.Zero">
      <summary>
            The value has no polarity.
            </summary>
    </member>
    <member name="F:NationalInstruments.UI.Polarity.Positive">
      <summary>
            The value has a positive polarity by virtue of it being greater than zero.
            </summary>
    </member>
    <member name="F:NationalInstruments.UI.Polarity.Negative">
      <summary>
            The value has a negative polarity by virtue of it being less than zero.
            </summary>
    </member>
    <member name="T:NationalInstruments.UI.PlotArrowDisplayModeArgs">
      <summary>
            Provides data for displaying arrows with the PlotArrowDisplayMode class.
            </summary>
    </member>
    <member name="M:NationalInstruments.UI.PlotArrowDisplayModeArgs.GetXData">
      <summary>
            Gets the x data points in the history.
            </summary>
      <returns>
            A Double array with the x data points in the history.
            </returns>
    </member>
    <member name="M:NationalInstruments.UI.PlotArrowDisplayModeArgs.GetYData">
      <summary>
            Gets the y data points in the history.
            </summary>
      <returns>
            A Double array with the y data points in the history.
            </returns>
    </member>
    <member name="M:NationalInstruments.UI.PlotArrowDisplayModeArgs.#ctor(NationalInstruments.UI.Plot,System.Drawing.Rectangle,System.Double[],System.Double[])">
      <summary>
            Initializes a new instance of the PlotArrowDisplayModeArgs class.
            </summary>
      <param name="plot">
            The plot on which the arrows are displayed.
            </param>
      <param name="contextBounds">
            A Rectangle representing the bounds in which
            the arrows are displayed.
            </param>
      <param name="xData">
            The x data points.
            </param>
      <param name="yData">
            The y data points.
            </param>
      <exception cref="T:System.ArgumentNullException">plot (parameter) is null.
            
            -or-
            xData (parameter) is null.
            
            -or-
            yData (parameter) is null.
            </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
            		The Width of contextBounds (parameter) is less than zero.
            
            -or-
            
            		The Height of contextBounds (parameter) is less than zero.
            </exception>
    </member>
    <member name="P:NationalInstruments.UI.PlotArrowDisplayModeArgs.Plot">
      <summary>
            Gets the plot on which the arrows are displayed.
            </summary>
    </member>
    <member name="P:NationalInstruments.UI.PlotArrowDisplayModeArgs.ContextBounds">
      <summary>
            Gets a rectangle representing the bounds in which the arrows are displayed.
            </summary>
    </member>
    <member name="T:NationalInstruments.UI.LineStyleDrawArgs">
      <summary>
            Provides data for drawing line styles.
            </summary>
    </member>
    <member name="M:NationalInstruments.UI.LineStyleDrawArgs.#ctor(System.Drawing.Color,System.Single)">
      <summary>
            Initializes a new instance of the LineStyleDrawArgs class
            with the specified line color and width.
            </summary>
      <param name="color">
            The Color of the line.
            </param>
      <param name="width">
            The width of the line.
            </param>
      <exception cref="T:System.ArgumentOutOfRangeException">width (parameter) is less than or equal to 0.0.
            </exception>
    </member>
    <member name="M:NationalInstruments.UI.LineStyleDrawArgs.#ctor(System.Drawing.Rectangle,System.Drawing.Color,System.Single)">
      <summary>
            Initializes a new instance of the LineStyleDrawArgs class
            with the specified context bounds, line color, and width.
            </summary>
      <param name="contextBounds">
            A Rectangle representing the bounds in which the line is drawn.
            </param>
      <param name="color">
            The Color of the line.
            </param>
      <param name="width">
            The width of the line.
            </param>
      <exception cref="T:System.ArgumentOutOfRangeException">width (parameter) is less than or equal to 0.0.
            </exception>
    </member>
    <member name="M:NationalInstruments.UI.LineStyleDrawArgs.ToString">
      <summary>
            Returns a string representation of the object.
            </summary>
      <returns>
            A string representation of the object.
            </returns>
    </member>
    <member name="P:NationalInstruments.UI.LineStyleDrawArgs.ContextBounds">
      <summary>
            Gets a rectangle representing the bounds in which the line is drawn.
            </summary>
    </member>
    <member name="P:NationalInstruments.UI.LineStyleDrawArgs.Color">
      <summary>
            Gets the color of the line.
            </summary>
    </member>
    <member name="P:NationalInstruments.UI.LineStyleDrawArgs.Width">
      <summary>
            Gets the width of the line.
            </summary>
    </member>
    <member name="T:NationalInstruments.UI.LegendItemSource">
      <summary>
            Provides a default implementation of the
            ILegendItemSource interface.
            </summary>
    </member>
    <member name="M:NationalInstruments.UI.LegendItemSource.#ctor">
      <summary>
            Initializes a new instance of the LegendItemSource
            class.
            </summary>
    </member>
    <member name="M:NationalInstruments.UI.LegendItemSource.GetService(System.Type)">
      <summary>
            Gets the service object of the specified type.
            </summary>
      <param name="serviceType">
            An Object that specifies the type of service object to get.
            </param>
      <returns>
            A service of type serviceType (parameter), or null
            if there is no object of type serviceType (parameter).
            </returns>
    </member>
    <member name="M:NationalInstruments.UI.LegendItemSource.Dispose">
      <summary>
            Releases all resources used by LegendItemSource.
            </summary>
    </member>
    <member name="M:NationalInstruments.UI.LegendItemSource.Dispose(System.Boolean)">
      <summary>
            Releases the unmanaged resources used by the LegendItemSource 
            and optionally releases the managed resources.
            </summary>
      <param name="disposing">true to release both managed and unmanaged resources; false to release only
            unmanaged resources.
            </param>
    </member>
    <member name="M:NationalInstruments.UI.LegendItemSource.DrawLegendItem(NationalInstruments.UI.ComponentDrawArgs)">
      <summary>
            Draws the symbol of a legend item.
            </summary>
      <param name="args">
            A ComponentDrawArgs that contains the graphics surface to
            draw the legend item on and the bounds in which to draw the legend item.
            </param>
      <exception cref="T:System.ArgumentNullException">args (parameter) is null.
            </exception>
    </member>
    <member name="M:NationalInstruments.UI.LegendItemSource.OnLegendItemChanged(System.EventArgs)">
      <summary>
            Raises the LegendItemChanged event.
            </summary>
      <param name="e">
            An EventArgs that contains the event data.
            </param>
    </member>
    <member name="M:NationalInstruments.UI.LegendItemSource.OnDisposed(System.EventArgs)">
      <summary>
            Raises the Disposed event.
            </summary>
      <param name="e">
            An EventArgs that contains the event data.
            </param>
    </member>
    <member name="M:NationalInstruments.UI.LegendItemSource.OnDraw(NationalInstruments.UI.DrawImageEventArgs)">
      <summary>
            Raises the Draw event.
            </summary>
      <param name="e">
            A DrawImageEventArgs that contains the event data.
            </param>
    </member>
    <member name="P:NationalInstruments.UI.LegendItemSource.IsDisposed">
      <summary>
            Gets a value indicating whether the control has been disposed.
            </summary>
    </member>
    <member name="E:NationalInstruments.UI.LegendItemSource.LegendItemChanged">
      <summary>
            Occurs when the legend item source has changed so that the legend item appearance in a legend
            control must be updated.
            </summary>
    </member>
    <member name="E:NationalInstruments.UI.LegendItemSource.Disposed">
      <summary>
            Occurs when the legend item source has been disposed.
            </summary>
    </member>
    <member name="E:NationalInstruments.UI.LegendItemSource.Draw">
      <summary>
            Occurs when the legend item source is drawn.
            </summary>
    </member>
    <member name="T:NationalInstruments.UI.LedBlinkMode">
      <summary>
            Specifies when the LED control blinks.
            </summary>
    </member>
    <member name="F:NationalInstruments.UI.LedBlinkMode.None">
      <summary>
            The LED does not blink.
            </summary>
    </member>
    <member name="F:NationalInstruments.UI.LedBlinkMode.BlinkWhenOn">
      <summary>
            The LED blinks when Value is true.
            </summary>
    </member>
    <member name="F:NationalInstruments.UI.LedBlinkMode.BlinkWhenOff">
      <summary>
            The LED blinks when Value is false.
            </summary>
    </member>
    <member name="T:NationalInstruments.UI.IWaveformGraph">
      <summary>
            Defines the interface for graphs that accept data as a waveform.
            </summary>
    </member>
    <member name="M:NationalInstruments.UI.IWaveformGraph.PlotX(System.Double)">
      <summary>
            Plots a single x value against the default starting y value.
            </summary>
      <param name="xData">
            The x value to plot.
            </param>
      <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
      <exception cref="T:System.InvalidOperationException">
            		The XAxis of the plot is null.
            
            -or-
            
            		The YAxis of the plot is null.
            </exception>
      <exception cref="T:System.NotSupportedException">
            The Owner of the plot is not null,
            and the Owner of the plot is
            different from the Owner of XAxis.
            
            -or-
            
            The Owner of the plot is not null,
            and the Owner of the plot is
            different from the Owner of YAxis.
            </exception>
      <exception cref="T:System.ArgumentException">ProcessSpecialValues is true,
            and xData (parameter) and its corresponding y value are special values.
            </exception>
    </member>
    <member name="M:NationalInstruments.UI.IWaveformGraph.PlotX(System.Double[])">
      <summary>
            Plots an array of x values against the default starting y value using the default increment value.
            </summary>
      <param name="xData">
            The array of x values to plot.
            </param>
      <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
      <exception cref="T:System.ArgumentNullException">xData (parameter) is null.
            </exception>
      <exception cref="T:System.InvalidOperationException">
            		The XAxis of the plot is null.
            
            -or-
            
            		The YAxis of the plot is null.
            </exception>
      <exception cref="T:System.NotSupportedException">
            The Owner of the plot is not null,
            and the Owner of the plot is
            different from the Owner of XAxis.
            
            -or-
            
            The Owner of the plot is not null,
            and the Owner of the plot is
            different from the Owner of YAxis.
            </exception>
      <exception cref="T:System.ArgumentException">ProcessSpecialValues is true,
            and xData (parameter) value at a particular index and its corresponding y value are special values.
            </exception>
    </member>
    <member name="M:NationalInstruments.UI.IWaveformGraph.PlotX(System.Double[],System.Double,System.Double)">
      <summary>
            Plots an array of x values against the specified starting y value using the specified value
            to increment y values.
            </summary>
      <param name="xData">
            The array of x values to plot.
            </param>
      <param name="start">
            The starting y value.
            </param>
      <param name="increment">
            The value to use to increment y values.
            </param>
      <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
      <exception cref="T:System.ArgumentNullException">xData (parameter) is null.
            </exception>
      <exception cref="T:System.InvalidOperationException">
            		The XAxis of the plot is null.
            
            -or-
            
            		The YAxis of the plot is null.
            </exception>
      <exception cref="T:System.NotSupportedException">
            The Owner of the plot is not null,
            and the Owner of the plot is
            different from the Owner of XAxis.
            
            -or-
            
            The Owner of the plot is not null,
            and the Owner of the plot is
            different from the Owner of YAxis.
            </exception>
      <exception cref="T:System.ArgumentException">ProcessSpecialValues is true,
            and xData (parameter) value at a particular index and its corresponding y value are special values.
            </exception>
    </member>
    <member name="M:NationalInstruments.UI.IWaveformGraph.PlotX(System.Double[],System.DateTime,System.TimeSpan)">
      <summary>
            Plots an array of x values against the specified DateTime as the starting y value using the 
            specified TimeSpan to increment y values.
            </summary>
      <param name="xData">
            The array of x values to plot.
            </param>
      <param name="start">
            A DateTime that represents the starting y value.
            </param>
      <param name="increment">
            A TimeSpan that represents the value to use to increment y values.
            </param>
      <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
      <exception cref="T:System.ArgumentNullException">xData (parameter) is null.
            </exception>
      <exception cref="T:System.InvalidOperationException">
            		The XAxis of the plot is null.
            
            -or-
            
            		The YAxis of the plot is null.
            </exception>
      <exception cref="T:System.NotSupportedException">
            The Owner of the plot is not null,
            and the Owner of the plot is
            different from the Owner of XAxis.
            
            -or-
            
            The Owner of the plot is not null,
            and the Owner of the plot is
            different from the Owner of YAxis.
            </exception>
      <exception cref="T:System.ArgumentException">ProcessSpecialValues is true,
            and xData (parameter) value at a particular index and its corresponding y value are special values.
            </exception>
    </member>
    <member name="M:NationalInstruments.UI.IWaveformGraph.PlotX(System.Double[],System.Int32,System.Int32,System.Double,System.Double)">
      <summary>
            Plots a subset of an array of x values against the specified starting y value using the specified value
            to increment y values.
            </summary>
      <param name="xData">
            The array of x values to plot.
            </param>
      <param name="startIndex">
            The index in xData (parameter) at which the plot data begins.
            </param>
      <param name="length">
            The number of elements, beginning at startIndex (parameter) in xData (parameter), to plot.
            </param>
      <param name="start">
            The starting y value.
            </param>
      <param name="increment">
            The value used to increment y values.
            </param>
      <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
      <exception cref="T:System.ArgumentNullException">xData (parameter) is null.
            </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">startIndex (parameter) is less than 0.
            
            -or-
            startIndex (parameter) is greater than or equal to the
            number of elements in xData (parameter).
            
            -or-
            length (parameter) is less than 0.
            
            -or-
            length (parameter) is greater than the number of elements
            from startIndex (parameter) to the end of xData (parameter).
            </exception>
      <exception cref="T:System.InvalidOperationException">
            		The XAxis of the plot is null.
            
            -or-
            
            		The YAxis of the plot is null.
            </exception>
      <exception cref="T:System.NotSupportedException">
            The Owner of the plot is not null,
            and the Owner of the plot is
            different from the Owner of XAxis.
            
            -or-
            
            The Owner of the plot is not null,
            and the Owner of the plot is
            different from the Owner of YAxis.
            </exception>
      <exception cref="T:System.ArgumentException">ProcessSpecialValues is true,
            and the xData (parameter) value at a particular index and its corresponding y value are special values.
            </exception>
    </member>
    <member name="M:NationalInstruments.UI.IWaveformGraph.PlotX(System.Double[],System.Int32,System.Int32,System.DateTime,System.TimeSpan)">
      <summary>
            Plots a subset of an array of x values against the specified DateTime as the starting y value using the 
            specified TimeSpan to increment y values.
            </summary>
      <param name="xData">
            The array of x values to plot.
            </param>
      <param name="startIndex">
            The index in xData (parameter) at which the plot data begins.
            </param>
      <param name="length">
            The number of elements, beginning at startIndex (parameter) in xData (parameter), to plot.
            </param>
      <param name="start">
            A DateTime that represents the starting y value.
            </param>
      <param name="increment">
            A TimeSpan that represents the value used to increment y values.
            </param>
      <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
      <exception cref="T:System.ArgumentNullException">xData (parameter) is null.
            </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">startIndex (parameter) is less than 0.
            
            -or-
            startIndex (parameter) is greater than or equal to the
            number of elements in xData (parameter).
            
            -or-
            length (parameter) is less than 0.
            
            -or-
            length (parameter) is greater than the number of elements
            from startIndex (parameter) to the end of xData (parameter).
            </exception>
      <exception cref="T:System.InvalidOperationException">
            		The XAxis of the plot is null.
            
            -or-
            
            		The YAxis of the plot is null.
            </exception>
      <exception cref="T:System.NotSupportedException">
            The Owner of the plot is not null,
            and the Owner of the plot is
            different from the Owner of XAxis.
            
            -or-
            
            The Owner of the plot is not null,
            and the Owner of the plot is
            different from the Owner of YAxis.
            </exception>
      <exception cref="T:System.ArgumentException">ProcessSpecialValues is true,
            and the xData (parameter) value at a particular index and its corresponding y value are special values.
            </exception>
    </member>
    <member name="M:NationalInstruments.UI.IWaveformGraph.PlotXAppend(System.Double)">
      <summary>
            Plots a single x value against a starting y value by appending the x and y value to the existing data.
            </summary>
      <param name="xData">
            The x value to append.
            </param>
      <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
      <exception cref="T:System.InvalidOperationException">
            		The XAxis of the plot is null.
            
            -or-
            
            		The YAxis of the plot is null.
            
            -or-
            PlotXAppend is called after calling
            PlotY,
            PlotYAppend,
            PlotWaveform``1,
            PlotWaveformAppend``1,
            PlotComplexWaveform``1, or
            PlotComplexWaveformAppend``1.
            
            -or-
            
            	The increment is a positive value and it was a negative value in a previous 
            PlotX or 
            PlotXAppend 
            invocation.
            
            -or-
            
            		The increment is a negative value and it was a positive value in a 
            previous PlotX or 
            PlotXAppend 
            invocation.
            </exception>
      <exception cref="T:System.NotSupportedException">
            The Owner of the plot is not null,
            and the Owner of the plot is
            different from the Owner of XAxis.
            
            -or-
            
            The Owner of the plot is not null,
            and the Owner of the plot is
            different from the Owner of YAxis.
            </exception>
      <exception cref="T:System.ArgumentException">ProcessSpecialValues is true
            and xData (parameter) and its corresponding y value are special values.
            </exception>
    </member>
    <member name="M:NationalInstruments.UI.IWaveformGraph.PlotXAppend(System.Double,System.Double)">
      <summary>
            Plots a single x value against a starting y value by appending the x and y value to the existing data.
            PlotXAppend uses the 
            specified value to increment y values.
            </summary>
      <param name="xData">
            The x value to append.
            </param>
      <param name="increment">
            The value to use to increment y values.
            </param>
      <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
      <exception cref="T:System.InvalidOperationException">
            		The XAxis of the plot is null.
            
            -or-
            
            		The YAxis of the plot is null.
            
            -or-
            PlotXAppend is called after calling
            PlotY,
            PlotYAppend,
            PlotWaveform``1,
            PlotWaveformAppend``1,
            PlotComplexWaveform``1, or
            PlotComplexWaveformAppend``1.
            
            -or-
            increment (parameter) is a positive value and it was a negative value in a previous 
            PlotX or 
            PlotXAppend 
            invocation.
            
            -or-
            increment (parameter) is a negative value and it was a positive value in a 
            previous PlotX or 
            PlotXAppend 
            invocation.
            </exception>
      <exception cref="T:System.NotSupportedException">
            The Owner of the plot is not null,
            and the Owner of the plot is
            different from the Owner of XAxis.
            
            -or-
            
            The Owner of the plot is not null,
            and the Owner of the plot is
            different from the Owner of YAxis.
            </exception>
      <exception cref="T:System.ArgumentException">ProcessSpecialValues is true
            and xData (parameter) and its corresponding y value are special values.
            </exception>
    </member>
    <member name="M:NationalInstruments.UI.IWaveformGraph.PlotXAppend(System.Double,System.TimeSpan)">
      <summary>
            Plots a single x value against a starting y value by appending the x and y value to the existing data.
            PlotXAppend uses the 
            specified TimeSpan to increment y values.
            </summary>
      <param name="xData">
            The x value to append.
            </param>
      <param name="increment">
            A TimeSpan that represents the value to use to increment y values.
            </param>
      <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
      <exception cref="T:System.InvalidOperationException">
            		The XAxis of the plot is null.
            
            -or-
            
            		The YAxis of the plot is null.
            
            -or-
            PlotXAppend is called after calling
            PlotY,
            PlotYAppend,
            PlotWaveform``1,
            PlotWaveformAppend``1,
            PlotComplexWaveform``1, or
            PlotComplexWaveformAppend``1.
            
            -or-
            increment (parameter) is a positive value and it was a negative value in a previous 
            PlotX or 
            PlotXAppend 
            invocation.
            
            -or-
            increment (parameter) is a negative value and it was a positive value in a 
            previous PlotX or 
            PlotXAppend 
            invocation.
            </exception>
      <exception cref="T:System.NotSupportedException">
            The Owner of the plot is not null,
            and the Owner of the plot is
            different from the Owner of XAxis.
            
            -or-
            
            The Owner of the plot is not null,
            and the Owner of the plot is
            different from the Owner of YAxis.
            </exception>
      <exception cref="T:System.ArgumentException">ProcessSpecialValues is true,
            and the xData (parameter) value at a particular index and its corresponding y value are special values.
            </exception>
    </member>
    <member name="M:NationalInstruments.UI.IWaveformGraph.PlotXAppend(System.Double[])">
      <summary>
            Plots an array of x values against a starting y value by appending the x and y values to the existing data.
            </summary>
      <param name="xData">
            The array of x values to append.
            </param>
      <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
      <exception cref="T:System.ArgumentNullException">xData (parameter) is null.
            </exception>
      <exception cref="T:System.InvalidOperationException">
            		The XAxis of the plot is null.
            
            -or-
            
            		The YAxis of the plot is null.
            
            -or-
            PlotXAppend is called after calling
            PlotY,
            PlotYAppend,
            PlotWaveform``1,
            PlotWaveformAppend``1,
            PlotComplexWaveform``1, or
            PlotComplexWaveformAppend``1.
            
            -or-
            
            	The increment is a positive value and it was a negative value in a previous 
            PlotX or 
            PlotXAppend 
            invocation.
            
            -or-
            
            		The increment is a negative value and it was a positive value in a 
            previous PlotX or 
            PlotXAppend 
            invocation.
            </exception>
      <exception cref="T:System.NotSupportedException">
            The Owner of the plot is not null,
            and the Owner of the plot is
            different from the Owner of XAxis.
            
            -or-
            
            The Owner of the plot is not null,
            and the Owner of the plot is
            different from the Owner of YAxis.
            </exception>
      <exception cref="T:System.ArgumentException">ProcessSpecialValues is true,
            and xData (parameter) value at a particular index and its corresponding y value are special values.
            </exception>
    </member>
    <member name="M:NationalInstruments.UI.IWaveformGraph.PlotXAppend(System.Double[],System.Double)">
      <summary>
            Plots an array of x values against a starting y value by appending the x and y values to the existing data.
            PlotXAppend uses the 
            specified value to increment y values.
            </summary>
      <param name="xData">
            The array of x values to append.
            </param>
      <param name="increment">
            The value to use to increment y values.
            </param>
      <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
      <exception cref="T:System.ArgumentNullException">xData (parameter) is null.
            </exception>
      <exception cref="T:System.InvalidOperationException">
            		The XAxis of the plot is null.
            
            -or-
            
            		The YAxis of the plot is null.
            
            -or-
            PlotXAppend is called after calling
            PlotY,
            PlotYAppend,
            PlotWaveform``1,
            PlotWaveformAppend``1,
            PlotComplexWaveform``1, or
            PlotComplexWaveformAppend``1.
            
            -or-
            increment (parameter) is a positive value and it was a negative value in a previous 
            PlotX or 
            PlotXAppend 
            invocation.
            
            -or-
            increment (parameter) is a negative value and it was a positive value in a 
            previous PlotX or 
            PlotXAppend 
            invocation.
            </exception>
      <exception cref="T:System.NotSupportedException">
            The Owner of the plot is not null,
            and the Owner of the plot is
            different from the Owner of XAxis.
            
            -or-
            
            The Owner of the plot is not null,
            and the Owner of the plot is
            different from the Owner of YAxis.
            </exception>
      <exception cref="T:System.ArgumentException">ProcessSpecialValues is true,
            and xData (parameter) value at a particular index and its corresponding y value are special values.
            </exception>
    </member>
    <member name="M:NationalInstruments.UI.IWaveformGraph.PlotXAppend(System.Double[],System.TimeSpan)">
      <summary>
            Plots an array of x values against a starting y value by appending the x and y values to the existing data.
            PlotXAppend uses the 
            specified TimeSpan to increment y values.
            </summary>
      <param name="xData">
            The array of x values to append.
            </param>
      <param name="increment">
            A TimeSpan that represents the value used to increment y values.
            </param>
      <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
      <exception cref="T:System.ArgumentNullException">xData (parameter) is null.
            </exception>
      <exception cref="T:System.InvalidOperationException">
            		The XAxis of the plot is null.
            
            -or-
            
            		The YAxis of the plot is null.
            
            -or-
            PlotXAppend is called after calling
            PlotY,
            PlotYAppend,
            PlotWaveform``1,
            PlotWaveformAppend``1,
            PlotComplexWaveform``1, or
            PlotComplexWaveformAppend``1.
            
            -or-
            increment (parameter) is a positive value, and it was a negative value in a previous 
            PlotX or 
            PlotXAppend 
            invocation.
            
            -or-
            increment (parameter) is a negative value, and it was a positive value in a 
            previous PlotX or 
            PlotXAppend 
            invocation.
            </exception>
      <exception cref="T:System.NotSupportedException">
            The Owner of the plot is not null,
            and the Owner of the plot is
            different from the Owner of XAxis.
            
            -or-
            
            The Owner of the plot is not null,
            and the Owner of the plot is
            different from the Owner of YAxis.
            </exception>
      <exception cref="T:System.ArgumentException">ProcessSpecialValues is true,
            and the xData (parameter) value at a particular index and its corresponding y value are special values.
            </exception>
    </member>
    <member name="M:NationalInstruments.UI.IWaveformGraph.PlotXAppend(System.Double[],System.Int32,System.Int32,System.Double)">
      <summary>
            Plots a subset of an array of x values against a starting y value by appending the x and y values to the existing data.
            PlotXAppend uses the 
            specified value to increment y values.
            </summary>
      <param name="xData">
            The array of x values to append.
            </param>
      <param name="startIndex">
            The index in xData (parameter) at which the plot data begins.
            </param>
      <param name="length">
            The number of elements, beginning at startIndex (parameter) in xData (parameter), to plot.
            </param>
      <param name="increment">
            The value used to increment y values.
            </param>
      <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
      <exception cref="T:System.ArgumentNullException">xData (parameter) is null.
            </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">startIndex (parameter) is less than 0.
            
            -or-
            startIndex (parameter) is greater than or equal to the
            number of elements in xData (parameter).
            
            -or-
            length (parameter) is less than 0.
            
            -or-
            length (parameter) is greater than the number of elements
            from startIndex (parameter) to the end of xData (parameter).
            </exception>
      <exception cref="T:System.InvalidOperationException">
            		The XAxis of the plot is null.
            
            -or-
            
            		The YAxis of the plot is null.
            
            -or-
            PlotXAppend is called after calling
            PlotY,
            PlotYAppend,
            PlotWaveform``1,
            PlotWaveformAppend``1,
            PlotComplexWaveform``1, or
            PlotComplexWaveformAppend``1.
            
            -or-
            increment (parameter) is a positive value, and it was a negative value in a previous call to
            PlotX or 
            PlotXAppend.
            
            -or-
            increment (parameter) is a negative value, and it was a positive value in a 
            previous call to PlotX or 
            PlotXAppend.</exception>
      <exception cref="T:System.NotSupportedException">
            The Owner of the plot is not null,
            and the Owner of the plot is
            different from the Owner of XAxis.
            
            -or-
            
            The Owner of the plot is not null,
            and the Owner of the plot is
            different from the Owner of YAxis.
            </exception>
      <exception cref="T:System.ArgumentException">ProcessSpecialValues is true,
            and the xData (parameter) value at a particular index and its corresponding y value are special values.
            </exception>
    </member>
    <member name="M:NationalInstruments.UI.IWaveformGraph.PlotXAppend(System.Double[],System.Int32,System.Int32,System.TimeSpan)">
      <summary>
            Plots a subset of an array of x values against a starting y value by appending the x and y values to the existing data.
            PlotXAppend uses the 
            specified TimeSpan to increment y values.
            </summary>
      <param name="xData">
            The array of x values to append.
            </param>
      <param name="startIndex">
            The index in xData (parameter) at which the plot data begins.
            </param>
      <param name="length">
            The number of elements, beginning at startIndex (parameter) in xData (parameter), to plot.
            </param>
      <param name="increment">
            A TimeSpan that represents the value used to increment y values.
            </param>
      <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
      <exception cref="T:System.ArgumentNullException">xData (parameter) is null.
            </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">startIndex (parameter) is less than 0.
            
            -or-
            startIndex (parameter) is greater than or equal to the
            number of elements in xData (parameter).
            
            -or-
            length (parameter) is less than 0.
            
            -or-
            length (parameter) is greater than the number of elements
            from startIndex (parameter) to the end of xData (parameter).
            </exception>
      <exception cref="T:System.InvalidOperationException">
            		The XAxis of the plot is null.
            
            -or-
            
            		The YAxis of the plot is null.
            
            -or-
            PlotXAppend is called after calling
            PlotY,
            PlotYAppend,
            PlotWaveform``1,
            PlotWaveformAppend``1,
            PlotComplexWaveform``1, or
            PlotComplexWaveformAppend``1.
            
            -or-
            increment (parameter) is a positive value, and it was a negative value in a previous call to
            PlotX or 
            PlotXAppend.
            
            -or-
            increment (parameter) is a negative value, and it was a positive value in a 
            previous call to PlotX or 
            PlotXAppend.
            </exception>
      <exception cref="T:System.NotSupportedException">
            The Owner of the plot is not null,
            and the Owner of the plot is
            different from the Owner of XAxis.
            
            -or-
            
            The Owner of the plot is not null,
            and the Owner of the plot is
            different from the Owner of YAxis.
            </exception>
      <exception cref="T:System.ArgumentException">ProcessSpecialValues is true,
            and the xData (parameter) value at a particular index and its corresponding y value are special values.
            </exception>
    </member>
    <member name="M:NationalInstruments.UI.IWaveformGraph.PlotXAppendMultiple(System.Double[0:,0:])">
      <summary>
            Plots a 2D array of x values with the default data orientation against a 
            starting y value by appending the x and y values to the existing data. 
            </summary>
      <param name="xData">
            The 2D array of x values to plot.
            </param>
      <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
      <exception cref="T:System.ArgumentNullException">xData (parameter) is null.
            </exception>
      <exception cref="T:System.InvalidOperationException">
            		The XAxis of the plot is null.
            
            -or-
            
            		The YAxis of the plot is null.
            
            -or-
            PlotXAppend is called after calling
            PlotY,
            PlotYAppend,
            PlotWaveform``1,
            PlotWaveformAppend``1,
            PlotComplexWaveform``1, or
            PlotComplexWaveformAppend``1.
            
            -or-
            
            	The increment is a positive value and it was a negative value in a previous 
            PlotX or 
            PlotXAppend 
            invocation.
            
            -or-
            
            		The increment is a negative value and it was a positive value in a 
            previous PlotX or 
            PlotXAppend 
            invocation.
            </exception>
      <exception cref="T:System.NotSupportedException">
            The Owner of the plot is not null,
            and the Owner of the plot is
            different from the Owner of XAxis.
            
            -or-
            
            The Owner of the plot is not null,
            and the Owner of the plot is
            different from the Owner of YAxis.
            </exception>
      <exception cref="T:System.ArgumentException">ProcessSpecialValues is true,
            and the xData (parameter) value at a particular index and its corresponding y value are special values.
            </exception>
    </member>
    <member name="M:NationalInstruments.UI.IWaveformGraph.PlotXAppendMultiple(System.Double[0:,0:],NationalInstruments.UI.DataOrientation,System.Double)">
      <summary>
            Plots a 2D array of x values with the specified orientation against a starting
            y value by appending the x and y values to the existing
            data. PlotXAppendMultiple uses the 
            specified value to increment y values.
            </summary>
      <param name="xData">
            The 2D array of x values to append.
            </param>
      <param name="orientation">
            A DataOrientation value that specifies the orientation of
            data in xData (parameter).
            </param>
      <param name="increment">
            The value to use to increment y values.
            </param>
      <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
      <exception cref="T:System.ArgumentNullException">xData (parameter) is null.
            </exception>
      <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">orientation (parameter) is not one of the 
            DataOrientation values.
            </exception>
      <exception cref="T:System.InvalidOperationException">
            		The XAxis of the plot is null.
            
            -or-
            
            		The YAxis of the plot is null.
            
            -or-
            PlotXAppend is called after calling
            PlotY,
            PlotYAppend,
            PlotWaveform``1,
            PlotWaveformAppend``1,
            PlotComplexWaveform``1, or
            PlotComplexWaveformAppend``1.
            
            -or-
            increment (parameter) is a positive value and it was a negative value in a previous 
            PlotX or 
            PlotXAppend 
            invocation.
            
            -or-
            increment (parameter) is a negative value and it was a positive value in a 
            previous PlotX or 
            PlotXAppend 
            invocation.
            </exception>
      <exception cref="T:System.NotSupportedException">
            The Owner of the plot is not null,
            and the Owner of the plot is
            different from the Owner of XAxis.
            
            -or-
            
            The Owner of the plot is not null,
            and the Owner of the plot is
            different from the Owner of YAxis.
            </exception>
      <exception cref="T:System.ArgumentException">ProcessSpecialValues is true,
            and xData (parameter) value at a particular index and its corresponding y value are special values.
            </exception>
    </member>
    <member name="M:NationalInstruments.UI.IWaveformGraph.PlotXAppendMultiple(System.Double[0:,0:],NationalInstruments.UI.DataOrientation,System.TimeSpan)">
      <summary>
            Plots a 2D array of x values with the specified orientation against a starting
            y value by appending the x and y values to the existing
            data. PlotXAppendMultiple uses the 
            specified TimeSpan to increment y values.
            </summary>
      <param name="xData">
            The 2D array of x values to append.
            </param>
      <param name="orientation">
            A DataOrientation value that specifies the orientation of
            data in xData (parameter).
            </param>
      <param name="increment">
            A TimeSpan that represents the value to use to increment y values.
            </param>
      <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
      <exception cref="T:System.ArgumentNullException">xData (parameter) is null.
            </exception>
      <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">orientation (parameter) is not one of the 
            DataOrientation values.
            </exception>
      <exception cref="T:System.InvalidOperationException">
            		The XAxis of the plot is null.
            
            -or-
            
            		The YAxis of the plot is null.
            
            -or-
            PlotXAppend is called after calling
            PlotY,
            PlotYAppend,
            PlotWaveform``1,
            PlotWaveformAppend``1,
            PlotComplexWaveform``1, or
            PlotComplexWaveformAppend``1.
            
            -or-
            increment (parameter) is a positive value and it was a negative value in a previous 
            PlotX or 
            PlotXAppend 
            invocation.
            
            -or-
            increment (parameter) is a negative value and it was a positive value in a 
            previous PlotX or 
            PlotXAppend 
            invocation.
            </exception>
      <exception cref="T:System.NotSupportedException">
            The Owner of the plot is not null,
            and the Owner of the plot is
            different from the Owner of XAxis.
            
            -or-
            
            The Owner of the plot is not null,
            and the Owner of the plot is
            different from the Owner of YAxis.
            </exception>
      <exception cref="T:System.ArgumentException">ProcessSpecialValues is true,
            and xData (parameter) value at a particular index and its corresponding y value are special values.
            </exception>
    </member>
    <member name="M:NationalInstruments.UI.IWaveformGraph.PlotXMultiple(System.Double[0:,0:])">
      <summary>
            Plots a 2D array of x values with the default data orientation against 
            the default starting y value.</summary>
      <param name="xData">
            The 2D array of x values to plot.
            </param>
      <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
      <exception cref="T:System.ArgumentNullException">xData (parameter) is null.
            </exception>
      <exception cref="T:System.InvalidOperationException">
            		The XAxis of the plot is null.
            
            -or-
            
            		The YAxis of the plot is null.
            </exception>
      <exception cref="T:System.NotSupportedException">
            The Owner of the plot is not null,
            and the Owner of the plot is
            different from the Owner of XAxis.
            
            -or-
            
            The Owner of the plot is not null,
            and the Owner of the plot is
            different from the Owner of YAxis.
            </exception>
      <exception cref="T:System.ArgumentException">ProcessSpecialValues is true,
            and the xData (parameter) value at a particular index and its corresponding y value are special values.
            </exception>
    </member>
    <member name="M:NationalInstruments.UI.IWaveformGraph.PlotXMultiple(System.Double[0:,0:],NationalInstruments.UI.DataOrientation,System.Double,System.Double)">
      <summary>
            Plots a 2D array of x values with the specified data orientation against 
            the specified starting y value. PlotXMultiple uses the 
            specified value to increment y values.
            </summary>
      <param name="xData">
            The 2D array of x values to plot.
            </param>
      <param name="orientation">
            A DataOrientation value that specifies the orientation of
            data in xData (parameter).
            </param>
      <param name="start">
            The starting y value.
            </param>
      <param name="increment">
            The value to use to increment y values.
            </param>
      <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
      <exception cref="T:System.ArgumentNullException">xData (parameter) is null.
            </exception>
      <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">orientation (parameter) is not one of the 
            DataOrientation values.
            </exception>
      <exception cref="T:System.InvalidOperationException">
            		The XAxis of the plot is null.
            
            -or-
            
            		The YAxis of the plot is null.
            </exception>
      <exception cref="T:System.NotSupportedException">
            The Owner of the plot is not null,
            and the Owner of the plot is
            different from the Owner of XAxis.
            
            -or-
            
            The Owner of the plot is not null,
            and the Owner of the plot is
            different from the Owner of YAxis.
            </exception>
      <exception cref="T:System.ArgumentException">ProcessSpecialValues is true,
            and xData (parameter) value at a particular index and its corresponding y value are special values.
            </exception>
    </member>
    <member name="M:NationalInstruments.UI.IWaveformGraph.PlotXMultiple(System.Double[0:,0:],NationalInstruments.UI.DataOrientation,System.DateTime,System.TimeSpan)">
      <summary>
            Plots a 2D array of x values with the specified data orientation against 
            the specified DateTime as the starting y value. PlotXMultiple
            uses the specified TimeSpan to increment y values.
            </summary>
      <param name="xData">
            The 2D array of x values to plot.
            </param>
      <param name="orientation">
            A DataOrientation value that specifies the orientation of
            data in xData (parameter).
            </param>
      <param name="start">
            A DateTime that represents the starting y value.
            </param>
      <param name="increment">
            A TimeSpan that represents the value to use to increment y values.
            </param>
      <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
      <exception cref="T:System.ArgumentNullException">xData (parameter) is null.
            </exception>
      <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">orientation (parameter) is not one of the 
            DataOrientation values.
            </exception>
      <exception cref="T:System.InvalidOperationException">
            		The XAxis of the plot is null.
            
            -or-
            
            		The YAxis of the plot is null.
            </exception>
      <exception cref="T:System.NotSupportedException">
            The Owner of the plot is not null,
            and the Owner of the plot is
            different from the Owner of XAxis.
            
            -or-
            
            The Owner of the plot is not null,
            and the Owner of the plot is
            different from the Owner of YAxis.
            </exception>
      <exception cref="T:System.ArgumentException">ProcessSpecialValues is true,
            and xData (parameter) value at a particular index and its corresponding y value are special values.
            </exception>
    </member>
    <member name="M:NationalInstruments.UI.IWaveformGraph.PlotY(System.Double)">
      <summary>
            Plots a single y value against the default starting x value.
            </summary>
      <param name="yData">
            The y value to plot.
            </param>
      <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
      <exception cref="T:System.InvalidOperationException">
            		The XAxis of the plot is null.
            
            -or-
            
            		The YAxis of the plot is null.
            </exception>
      <exception cref="T:System.NotSupportedException">
            The Owner of the plot is not null,
            and the Owner of the plot is
            different from the Owner of XAxis.
            
            -or-
            
            The Owner of the plot is not null,
            and the Owner of the plot is
            different from the Owner of YAxis.
            </exception>
      <exception cref="T:System.ArgumentException">ProcessSpecialValues is true
            and yData (parameter) and its corresponding x value are special values.
            </exception>
    </member>
    <member name="M:NationalInstruments.UI.IWaveformGraph.PlotY(System.Double[])">
      <summary>
            Plots an array of y values against the default starting x value using the default increment value.</summary>
      <param name="yData">
            The array of y values to plot.
            </param>
      <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
      <exception cref="T:System.ArgumentNullException">yData (parameter) is null.
            </exception>
      <exception cref="T:System.InvalidOperationException">
            		The XAxis of the plot is null.
            
            -or-
            
            		The YAxis of the plot is null.
            </exception>
      <exception cref="T:System.NotSupportedException">
            The Owner of the plot is not null,
            and the Owner of the plot is
            different from the Owner of XAxis.
            
            -or-
            
            The Owner of the plot is not null,
            and the Owner of the plot is
            different from the Owner of YAxis.
            </exception>
      <exception cref="T:System.ArgumentException">ProcessSpecialValues is true,
            and yData (parameter) value at a particular index and its corresponding x value are special values.
            </exception>
    </member>
    <member name="M:NationalInstruments.UI.IWaveformGraph.PlotY(System.Double[],System.Double,System.Double)">
      <summary>
            Plots an array of y values against the specified starting x value using the specified value
            to increment x values.
            </summary>
      <param name="yData">
            The array of y values to plot.
            </param>
      <param name="start">
            The starting x value.
            </param>
      <param name="increment">
            The value to use to increment x values.
            </param>
      <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
      <exception cref="T:System.ArgumentNullException">yData (parameter) is null.
            </exception>
      <exception cref="T:System.InvalidOperationException">
            		The XAxis of the plot is null.
            
            -or-
            
            		The YAxis of the plot is null.
            </exception>
      <exception cref="T:System.NotSupportedException">
            The Owner of the plot is not null,
            and the Owner of the plot is
            different from the Owner of XAxis.
            
            -or-
            
            The Owner of the plot is not null,
            and the Owner of the plot is
            different from the Owner of YAxis.
            </exception>
      <exception cref="T:System.ArgumentException">ProcessSpecialValues is true,
            and yData (parameter) value at a particular index and its corresponding x value are special values.
            </exception>
    </member>
    <member name="M:NationalInstruments.UI.IWaveformGraph.PlotY(System.Double[],System.DateTime,System.TimeSpan)">
      <summary>
            Plots an array of y values against the specified DateTime as the starting x value using the 
            specified TimeSpan to increment x values.
            </summary>
      <param name="yData">
            The array of y values to plot.
            </param>
      <param name="start">
            A DateTime that represents the starting x value.
            </param>
      <param name="increment">
            A TimeSpan that represents the value to use to increment x values.
            </param>
      <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
      <exception cref="T:System.ArgumentNullException">yData (parameter) is null.
            </exception>
      <exception cref="T:System.InvalidOperationException">
            		The XAxis of the plot is null.
            
            -or-
            
            		The YAxis of the plot is null.
            </exception>
      <exception cref="T:System.NotSupportedException">
            The Owner of the plot is not null,
            and the Owner of the plot is
            different from the Owner of XAxis.
            
            -or-
            
            The Owner of the plot is not null,
            and the Owner of the plot is
            different from the Owner of YAxis.
            </exception>
      <exception cref="T:System.ArgumentException">ProcessSpecialValues is true,
            and yData (parameter) value at a particular index and its corresponding x value are special values.
            </exception>
    </member>
    <member name="M:NationalInstruments.UI.IWaveformGraph.PlotY(System.Double[],System.Int32,System.Int32,System.Double,System.Double)">
      <summary>
            Plots a subset of an array of y values against the specified starting x value using the specified value
            to increment x values.
            </summary>
      <param name="yData">
            The array of y values to plot.
            </param>
      <param name="startIndex">
            The index in yData (parameter) at which the plot data begins.
            </param>
      <param name="length">
            The number of elements, beginning at startIndex (parameter) in yData (parameter), to plot.
            </param>
      <param name="start">
            The starting x value.
            </param>
      <param name="increment">
            The value used to increment x values.
            </param>
      <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
      <exception cref="T:System.ArgumentNullException">yData (parameter) is null.
            </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">startIndex (parameter) is less than 0.
            
            -or-
            startIndex (parameter) is greater than or equal to the
            number of elements in yData (parameter).
            
            -or-
            length (parameter) is less than 0.
            
            -or-
            length (parameter) is greater than the number of elements
            from startIndex (parameter) to the end of yData (parameter).
            </exception>
      <exception cref="T:System.InvalidOperationException">
            		The XAxis of the plot is null.
            
            -or-
            
            		The YAxis of the plot is null.
            </exception>
      <exception cref="T:System.NotSupportedException">
            The Owner of the plot is not null,
            and the Owner of the plot is
            different from the Owner of XAxis.
            
            -or-
            
            The Owner of the plot is not null,
            and the Owner of the plot is
            different from the Owner of YAxis.
            </exception>
      <exception cref="T:System.ArgumentException">ProcessSpecialValues is true,
            and the yData (parameter) value at a particular index and its corresponding x value are special values.
            </exception>
    </member>
    <member name="M:NationalInstruments.UI.IWaveformGraph.PlotY(System.Double[],System.Int32,System.Int32,System.DateTime,System.TimeSpan)">
      <summary>
            Plots a subset of an array of y values against the specified DateTime as the starting x value using the 
            specified TimeSpan to increment x values.
            </summary>
      <param name="yData">
            The array of y values to plot.
            </param>
      <param name="startIndex">
            The index in yData (parameter) at which the plot data begins.
            </param>
      <param name="length">
            The number of elements, beginning at startIndex (parameter) in yData (parameter), to plot.
            </param>
      <param name="start">
            A DateTime that represents the starting x value.
            </param>
      <param name="increment">
            A TimeSpan that represents the value used to increment x values.
            </param>
      <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
      <exception cref="T:System.ArgumentNullException">yData (parameter) is null.
            </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">startIndex (parameter) is less than 0.
            
            -or-
            startIndex (parameter) is greater than or equal to the
            number of elements in yData (parameter).
            
            -or-
            length (parameter) is less than 0.
            
            -or-
            length (parameter) is greater than the number of elements
            from startIndex (parameter) to the end of yData (parameter).
            </exception>
      <exception cref="T:System.InvalidOperationException">
            		The XAxis of the plot is null.
            
            -or-
            
            		The YAxis of the plot is null.
            </exception>
      <exception cref="T:System.NotSupportedException">
            The Owner of the plot is not null,
            and the Owner of the plot is
            different from the Owner of XAxis.
            
            -or-
            
            The Owner of the plot is not null,
            and the Owner of the plot is
            different from the Owner of YAxis.
            </exception>
      <exception cref="T:System.ArgumentException">ProcessSpecialValues is true,
            and the yData (parameter) value at a particular index and its corresponding x value are special values.
            </exception>
    </member>
    <member name="M:NationalInstruments.UI.IWaveformGraph.PlotYAppend(System.Double)">
      <summary>
            Plots a single y value against a starting x value by appending the x and y value to the existing data.
            </summary>
      <param name="yData">
            The y value to append.
            </param>
      <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
      <exception cref="T:System.InvalidOperationException">
            		The XAxis of the plot is null.
            
            -or-
            
            		The YAxis of the plot is null.
            
            -or-
            PlotYAppend is called after calling
            PlotX,
            PlotXAppend,
            PlotWaveform``1,
            PlotWaveformAppend``1,
            PlotComplexWaveform``1, or
            PlotComplexWaveformAppend``1.
            
            -or-
            
            	The increment is a positive value and it was a negative value in a previous 
            PlotY or 
            PlotYAppend 
            invocation.
            
            -or-
            
            		The increment is a negative value and it was a positive value in a 
            previous PlotY or 
            PlotYAppend 
            invocation.
            </exception>
      <exception cref="T:System.NotSupportedException">
            The Owner of the plot is not null,
            and the Owner of the plot is
            different from the Owner of XAxis.
            
            -or-
            
            The Owner of the plot is not null,
            and the Owner of the plot is
            different from the Owner of YAxis.
            </exception>
      <exception cref="T:System.ArgumentException">ProcessSpecialValues is true
            and yData (parameter) and its corresponding x value are special values.
            </exception>
    </member>
    <member name="M:NationalInstruments.UI.IWaveformGraph.PlotYAppend(System.Double,System.Double)">
      <summary>
            Plots a single y value against a starting x value by appending the x and y value to the existing data.
            PlotYAppend uses the 
            specified value to increment x values.
            </summary>
      <param name="yData">
            The y value to append.
            </param>
      <param name="increment">
            The value to use to increment x values.
            </param>
      <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
      <exception cref="T:System.InvalidOperationException">
            		The XAxis of the plot is null.
            
            -or-
            
            		The YAxis of the plot is null.
            
            -or-
            PlotYAppend is called after calling
            PlotX,
            PlotXAppend,
            PlotWaveform``1,
            PlotWaveformAppend``1,
            PlotComplexWaveform``1, or
            PlotComplexWaveformAppend``1.
            
            -or-
            increment (parameter) is a positive value and it was a negative value in a previous 
            PlotY or 
            PlotYAppend 
            invocation.
            
            -or-
            increment (parameter) is a negative value and it was a positive value in a 
            previous PlotY or 
            PlotYAppend 
            invocation.
            </exception>
      <exception cref="T:System.NotSupportedException">
            The Owner of the plot is not null,
            and the Owner of the plot is
            different from the Owner of XAxis.
            
            -or-
            
            The Owner of the plot is not null,
            and the Owner of the plot is
            different from the Owner of YAxis.
            </exception>
      <exception cref="T:System.ArgumentException">ProcessSpecialValues is true
            and yData (parameter) and its corresponding x value are special values.
            </exception>
    </member>
    <member name="M:NationalInstruments.UI.IWaveformGraph.PlotYAppend(System.Double,System.TimeSpan)">
      <summary>
            Plots a single y value against a starting x value by appending the x and y value to the existing data.
            PlotYAppend uses the 
            specified TimeSpan to increment x values.
            </summary>
      <param name="yData">
            The y value to append.
            </param>
      <param name="increment">
            A TimeSpan that represents the value to use to increment x values.
            </param>
      <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
      <exception cref="T:System.InvalidOperationException">
            		The XAxis of the plot is null.
            
            -or-
            
            		The YAxis of the plot is null.
            
            -or-
            PlotYAppend is called after calling
            PlotX,
            PlotXAppend,
            PlotWaveform``1,
            PlotWaveformAppend``1,
            PlotComplexWaveform``1, or
            PlotComplexWaveformAppend``1.
            
            -or-
            increment (parameter) is a positive value and it was a negative value in a previous 
            PlotY or 
            PlotYAppend 
            invocation.
            
            -or-
            increment (parameter) is a negative value and it was a positive value in a 
            previous PlotY or 
            PlotYAppend 
            invocation.
            </exception>
      <exception cref="T:System.NotSupportedException">
            The Owner of the plot is not null,
            and the Owner of the plot is
            different from the Owner of XAxis.
            
            -or-
            
            The Owner of the plot is not null,
            and the Owner of the plot is
            different from the Owner of YAxis.
            </exception>
      <exception cref="T:System.ArgumentException">ProcessSpecialValues is true,
            and the yData (parameter) value at a particular index and its corresponding x value are special values.
            </exception>
    </member>
    <member name="M:NationalInstruments.UI.IWaveformGraph.PlotYAppend(System.Double[])">
      <summary>
            Plots an array of y values against a starting x value by appending the x and y values to the existing data.
            </summary>
      <param name="yData">
            The y values to append.
            </param>
      <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
      <exception cref="T:System.ArgumentNullException">yData (parameter) is null.
            </exception>
      <exception cref="T:System.InvalidOperationException">
            		The XAxis of the plot is null.
            
            -or-
            
            		The YAxis of the plot is null.
            
            -or-
            PlotYAppend is called after calling
            PlotX,
            PlotXAppend,
            PlotWaveform``1,
            PlotWaveformAppend``1,
            PlotComplexWaveform``1, or
            PlotComplexWaveformAppend``1.
            
            -or-
            
            	The increment is a positive value and it was a negative value in a previous 
            PlotY or 
            PlotYAppend 
            invocation.
            
            -or-
            
            		The increment is a negative value and it was a positive value in a 
            previous PlotY or 
            PlotYAppend 
            invocation.
            </exception>
      <exception cref="T:System.NotSupportedException">
            The Owner of the plot is not null,
            and the Owner of the plot is
            different from the Owner of XAxis.
            
            -or-
            
            The Owner of the plot is not null,
            and the Owner of the plot is
            different from the Owner of YAxis.
            </exception>
      <exception cref="T:System.ArgumentException">ProcessSpecialValues is true,
            and yData (parameter) value at a particular index and its corresponding x value are special values.
            </exception>
    </member>
    <member name="M:NationalInstruments.UI.IWaveformGraph.PlotYAppend(System.Double[],System.Double)">
      <summary>
            Plots an array of y values against a starting x value by appending the x and y values to the existing data.
            PlotYAppend uses the 
            specified value to increment x values.
            </summary>
      <param name="yData">
            The y values to append.
            </param>
      <param name="increment">
            The value to use to increment x values.
            </param>
      <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
      <exception cref="T:System.ArgumentNullException">yData (parameter) is null.
            </exception>
      <exception cref="T:System.InvalidOperationException">
            		The XAxis of the plot is null.
            
            -or-
            
            		The YAxis of the plot is null.
            
            -or-
            PlotYAppend is called after calling
            PlotX,
            PlotXAppend,
            PlotWaveform``1,
            PlotWaveformAppend``1,
            PlotComplexWaveform``1, or
            PlotComplexWaveformAppend``1.
            
            -or-
            increment (parameter) is a positive value and it was a negative value in a previous 
            PlotY or 
            PlotYAppend 
            invocation.
            
            -or-
            increment (parameter) is a negative value and it was a positive value in a 
            previous PlotY or 
            PlotYAppend 
            invocation.
            </exception>
      <exception cref="T:System.NotSupportedException">
            The Owner of the plot is not null,
            and the Owner of the plot is
            different from the Owner of XAxis.
            
            -or-
            
            The Owner of the plot is not null,
            and the Owner of the plot is
            different from the Owner of YAxis.
            </exception>
      <exception cref="T:System.ArgumentException">ProcessSpecialValues is true,
            and yData (parameter) value at a particular index and its corresponding x value are special values.
            </exception>
    </member>
    <member name="M:NationalInstruments.UI.IWaveformGraph.PlotYAppend(System.Double[],System.TimeSpan)">
      <summary>
            Plots an array of y values against a starting x value by appending the x and y values to the existing data.
            PlotYAppend uses the 
            specified TimeSpan to increment x values.
            </summary>
      <param name="yData">
            The y values to append.
            </param>
      <param name="increment">
            A TimeSpan that represents the value used to increment x values.
            </param>
      <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
      <exception cref="T:System.ArgumentNullException">yData (parameter) is null.
            </exception>
      <exception cref="T:System.InvalidOperationException">
            		The XAxis of the plot is null.
            
            -or-
            
            		The YAxis of the plot is null.
            
            -or-
            PlotYAppend is called after calling
            PlotX,
            PlotXAppend,
            PlotWaveform``1,
            PlotWaveformAppend``1,
            PlotComplexWaveform``1, or
            PlotComplexWaveformAppend``1.
            
            -or-
            increment (parameter) is a positive value, and it was a negative value in a previous 
            PlotY or 
            PlotYAppend 
            invocation.
            
            -or-
            increment (parameter) is a negative value, and it was a positive value in a 
            previous PlotY or 
            PlotYAppend 
            invocation.
            </exception>
      <exception cref="T:System.NotSupportedException">
            The Owner of the plot is not null,
            and the Owner of the plot is
            different from the Owner of XAxis.
            
            -or-
            
            The Owner of the plot is not null,
            and the Owner of the plot is
            different from the Owner of YAxis.
            </exception>
      <exception cref="T:System.ArgumentException">ProcessSpecialValues is true,
            and the yData (parameter) value at a particular index and its corresponding x value are special values.
            </exception>
    </member>
    <member name="M:NationalInstruments.UI.IWaveformGraph.PlotYAppend(System.Double[],System.Int32,System.Int32,System.Double)">
      <summary>
            Plots a subset of an array of y values against a starting x value by appending the x and y values to the existing data.
            PlotYAppend uses the 
            specified value to increment x values.
            </summary>
      <param name="yData">
            The y values to append.
            </param>
      <param name="startIndex">
            The index in yData (parameter) at which the plot data begins.
            </param>
      <param name="length">
            The number of elements, beginning at startIndex (parameter) in yData (parameter), to plot.
            </param>
      <param name="increment">
            The value used to increment x values.
            </param>
      <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
      <exception cref="T:System.ArgumentNullException">yData (parameter) is null.
            </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">startIndex (parameter) is less than 0.
            
            -or-
            startIndex (parameter) is greater than or equal to the
            number of elements in yData (parameter).
            
            -or-
            length (parameter) is less than 0.
            
            -or-
            length (parameter) is greater than the number of elements
            from startIndex (parameter) to the end of yData (parameter).
            </exception>
      <exception cref="T:System.InvalidOperationException">
            		The XAxis of the plot is null.
            
            -or-
            
            		The YAxis of the plot is null.
            
            -or-
            PlotYAppend is called after calling
            PlotX,
            PlotXAppend,
            PlotWaveform``1,
            PlotWaveformAppend``1,
            PlotComplexWaveform``1, or
            PlotComplexWaveformAppend``1.
            
            -or-
            increment (parameter) is a positive value, and it was a negative value in a previous call to
            PlotY or 
            PlotYAppend.
            
            -or-
            increment (parameter) is a negative value, and it was a positive value in a 
            previous call to PlotY or 
            PlotYAppend.
            </exception>
      <exception cref="T:System.NotSupportedException">
            The Owner of the plot is not null,
            and the Owner of the plot is
            different from the Owner of XAxis.
            
            -or-
            
            The Owner of the plot is not null,
            and the Owner of the plot is
            different from the Owner of YAxis.
            </exception>
      <exception cref="T:System.ArgumentException">ProcessSpecialValues is true,
            and the yData (parameter) value at a particular index and its corresponding x value are special values.
            </exception>
    </member>
    <member name="M:NationalInstruments.UI.IWaveformGraph.PlotYAppend(System.Double[],System.Int32,System.Int32,System.TimeSpan)">
      <summary>
            Plots a subset of an array of y values against a starting x value by appending the x and y values to the existing data.
            PlotYAppend uses the 
            specified TimeSpan to increment x values.
            </summary>
      <param name="yData">
            The y values to append.
            </param>
      <param name="startIndex">
            The index in yData (parameter) at which the plot data begins.
            </param>
      <param name="length">
            The number of elements, beginning at startIndex (parameter) in yData (parameter), to plot.
            </param>
      <param name="increment">
            A TimeSpan that represents the value to use to increment x values.
            </param>
      <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
      <exception cref="T:System.ArgumentNullException">yData (parameter) is null.
            </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">startIndex (parameter) is less than 0.
            
            -or-
            startIndex (parameter) is greater than or equal to the
            number of elements in yData (parameter).
            
            -or-
            length (parameter) is less than 0.
            
            -or-
            length (parameter) is greater than the number of elements
            from startIndex (parameter) to the end of yData (parameter).
            </exception>
      <exception cref="T:System.InvalidOperationException">
            		The XAxis of the plot is null.
            
            -or-
            
            		The YAxis of the plot is null.
            
            -or-
            PlotYAppend is called after calling
            PlotX,
            PlotXAppend,
            PlotWaveform``1,
            PlotWaveformAppend``1,
            PlotComplexWaveform``1, or
            PlotComplexWaveformAppend``1.
            
            -or-
            increment (parameter) is a positive value, and it was a negative value in a previous call to
            PlotY or 
            PlotYAppend.
            
            -or-
            increment (parameter) is a negative value, and it was a positive value in a 
            previous call to PlotY or 
            PlotYAppend.
            </exception>
      <exception cref="T:System.NotSupportedException">
            The Owner of the plot is not null,
            and the Owner of the plot is
            different from the Owner of XAxis.
            
            -or-
            
            The Owner of the plot is not null,
            and the Owner of the plot is
            different from the Owner of YAxis.
            </exception>
      <exception cref="T:System.ArgumentException">ProcessSpecialValues is true,
            and the yData (parameter) value at a particular index and its corresponding x value are special values.
            </exception>
    </member>
    <member name="M:NationalInstruments.UI.IWaveformGraph.PlotYAppendMultiple(System.Double[0:,0:])">
      <summary>
            Plots a 2D array of y values with the default data orientation against a 
            starting x value by appending 
            it to the existing data.</summary>
      <param name="yData">
            The 2D array of y values to plot.
            </param>
      <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
      <exception cref="T:System.ArgumentNullException">yData (parameter) is null.
            </exception>
      <exception cref="T:System.InvalidOperationException">
            		The XAxis of the plot is null.
            
            -or-
            
            		The YAxis of the plot is null.
            
            -or-
            PlotYAppend is called after calling
            PlotX,
            PlotXAppend,
            PlotWaveform``1,
            PlotWaveformAppend``1,
            PlotComplexWaveform``1, or
            PlotComplexWaveformAppend``1.
            
            -or-
            
            	The increment is a positive value and it was a negative value in a previous 
            PlotY or 
            PlotYAppend 
            invocation.
            
            -or-
            
            		The increment is a negative value and it was a positive value in a 
            previous PlotY or 
            PlotYAppend 
            invocation.
            </exception>
      <exception cref="T:System.NotSupportedException">
            The Owner of the plot is not null,
            and the Owner of the plot is
            different from the Owner of XAxis.
            
            -or-
            
            The Owner of the plot is not null,
            and the Owner of the plot is
            different from the Owner of YAxis.
            </exception>
      <exception cref="T:System.ArgumentException">ProcessSpecialValues is true,
            and the yData (parameter) value at a particular index and its corresponding x value are special values.
            </exception>
    </member>
    <member name="M:NationalInstruments.UI.IWaveformGraph.PlotYAppendMultiple(System.Double[0:,0:],NationalInstruments.UI.DataOrientation,System.Double)">
      <summary>
            Plots a 2D array of x values with the specified orientation against a starting
            x value by appending the x and y values to the existing
            data. PlotYAppendMultiple uses the 
            specified value to increment x values.
            </summary>
      <param name="yData">
            The 2D array of y values to append.
            </param>
      <param name="orientation">
            A DataOrientation value that specifies the orientation of
            data in yData (parameter).
            </param>
      <param name="increment">
            The value to use to increment x values.
            </param>
      <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
      <exception cref="T:System.ArgumentNullException">yData (parameter) is null.
            </exception>
      <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">orientation (parameter) is not one of the 
            DataOrientation values.
            </exception>
      <exception cref="T:System.InvalidOperationException">
            		The XAxis of the plot is null.
            
            -or-
            
            		The YAxis of the plot is null.
            
            -or-
            PlotYAppend is called after calling
            PlotX,
            PlotXAppend,
            PlotWaveform``1,
            PlotWaveformAppend``1,
            PlotComplexWaveform``1, or
            PlotComplexWaveformAppend``1.
            
            -or-
            increment (parameter) is a positive value and it was a negative value in a previous 
            PlotY or 
            PlotYAppend 
            invocation.
            
            -or-
            increment (parameter) is a negative value and it was a positive value in a 
            previous PlotY or 
            PlotYAppend 
            invocation.
            </exception>
      <exception cref="T:System.NotSupportedException">
            The Owner of the plot is not null,
            and the Owner of the plot is
            different from the Owner of XAxis.
            
            -or-
            
            The Owner of the plot is not null,
            and the Owner of the plot is
            different from the Owner of YAxis.
            </exception>
      <exception cref="T:System.ArgumentException">ProcessSpecialValues is true,
            and yData (parameter) value at a particular index and its corresponding x value are special values.
            </exception>
    </member>
    <member name="M:NationalInstruments.UI.IWaveformGraph.PlotYAppendMultiple(System.Double[0:,0:],NationalInstruments.UI.DataOrientation,System.TimeSpan)">
      <summary>
            Plots a 2D array of y values with the specified orientation against a starting
            y value by appending the x and y values to the existing
            data. PlotYAppendMultiple uses the 
            specified TimeSpan to increment x values.
            </summary>
      <param name="yData">
            The 2D array of y values to append.
            </param>
      <param name="orientation">
            A DataOrientation value that specifies the orientation of
            data in yData (parameter).
            </param>
      <param name="increment">
            A TimeSpan that represents the value to use to increment x values.
            </param>
      <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
      <exception cref="T:System.ArgumentNullException">yData (parameter) is null.
            </exception>
      <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">orientation (parameter) is not one of the 
            DataOrientation values.
            </exception>
      <exception cref="T:System.InvalidOperationException">
            		The XAxis of the plot is null.
            
            -or-
            
            		The YAxis of the plot is null.
            
            -or-
            PlotYAppend is called after calling
            PlotX,
            PlotXAppend,
            PlotWaveform``1,
            PlotWaveformAppend``1,
            PlotComplexWaveform``1, or
            PlotComplexWaveformAppend``1.
            
            -or-
            increment (parameter) is a positive value and it was a negative value in a previous 
            PlotY or 
            PlotYAppend 
            invocation.
            
            -or-
            increment (parameter) is a negative value and it was a positive value in a 
            previous PlotY or 
            PlotYAppend 
            invocation.
            </exception>
      <exception cref="T:System.NotSupportedException">
            The Owner of the plot is not null,
            and the Owner of the plot is
            different from the Owner of XAxis.
            
            -or-
            
            The Owner of the plot is not null,
            and the Owner of the plot is
            different from the Owner of YAxis.
            </exception>
      <exception cref="T:System.ArgumentException">ProcessSpecialValues is true,
            and yData (parameter) value at a particular index and its corresponding x value are special values.
            </exception>
    </member>
    <member name="M:NationalInstruments.UI.IWaveformGraph.PlotYMultiple(System.Double[0:,0:])">
      <summary>
            Plots a 2D array of y values with the default data orientation against 
            the default starting x value.
            </summary>
      <param name="yData">
            The 2D array of y values to plot.
            </param>
      <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
      <exception cref="T:System.ArgumentNullException">yData (parameter) is null.
            </exception>
      <exception cref="T:System.InvalidOperationException">
            		The XAxis of the plot is null.
            
            -or-
            
            		The YAxis of the plot is null.
            </exception>
      <exception cref="T:System.NotSupportedException">
            The Owner of the plot is not null,
            and the Owner of the plot is
            different from the Owner of XAxis.
            
            -or-
            
            The Owner of the plot is not null,
            and the Owner of the plot is
            different from the Owner of YAxis.
            </exception>
      <exception cref="T:System.ArgumentException">ProcessSpecialValues is true,
            and the yData (parameter) value at a particular index and its corresponding x value are special values.
            </exception>
    </member>
    <member name="M:NationalInstruments.UI.IWaveformGraph.PlotYMultiple(System.Double[0:,0:],NationalInstruments.UI.DataOrientation,System.Double,System.Double)">
      <summary>
            Plots a 2D array of y values with the specified data orientation against 
            the specified starting x value. PlotYMultiple
            uses the specified value to increment x values.
            </summary>
      <param name="yData">
            The 2D array of y values to plot.
            </param>
      <param name="orientation">
            A DataOrientation value that specifies the orientation of
            data in yData (parameter).
            </param>
      <param name="start">
            The starting x value.
            </param>
      <param name="increment">
            The value to use to increment x values.
            </param>
      <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
      <exception cref="T:System.ArgumentNullException">yData (parameter) is null.
            </exception>
      <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">orientation (parameter) is not one of the 
            DataOrientation values.
            </exception>
      <exception cref="T:System.InvalidOperationException">
            		The XAxis of the plot is null.
            
            -or-
            
            		The YAxis of the plot is null.
            </exception>
      <exception cref="T:System.NotSupportedException">
            The Owner of the plot is not null,
            and the Owner of the plot is
            different from the Owner of XAxis.
            
            -or-
            
            The Owner of the plot is not null,
            and the Owner of the plot is
            different from the Owner of YAxis.
            </exception>
      <exception cref="T:System.ArgumentException">ProcessSpecialValues is true,
            and yData (parameter) value at a particular index and its corresponding x value are special values.
            </exception>
    </member>
    <member name="M:NationalInstruments.UI.IWaveformGraph.PlotYMultiple(System.Double[0:,0:],NationalInstruments.UI.DataOrientation,System.DateTime,System.TimeSpan)">
      <summary>
            Plots a 2D array of y values with the specified data orientation against 
            the specified DateTime as the starting x value. PlotYMultiple
            uses the specified TimeSpan to increment y values.
            </summary>
      <param name="yData">
            The 2D array of y values to plot.
            </param>
      <param name="orientation">
            A DataOrientation value that specifies the orientation of
            data in yData (parameter).
            </param>
      <param name="start">
            A DateTime that represents the starting x value.
            </param>
      <param name="increment">
            A TimeSpan that represents the value to use to increment x values.
            </param>
      <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
      <exception cref="T:System.ArgumentNullException">yData (parameter) is null.
            </exception>
      <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">orientation (parameter) is not one of the 
            DataOrientation values.
            </exception>
      <exception cref="T:System.InvalidOperationException">
            		The XAxis of the plot is null.
            
            -or-
            
            		The YAxis of the plot is null.
            </exception>
      <exception cref="T:System.NotSupportedException">
            The Owner of the plot is not null,
            and the Owner of the plot is
            different from the Owner of XAxis.
            
            -or-
            
            The Owner of the plot is not null,
            and the Owner of the plot is
            different from the Owner of YAxis.
            </exception>
      <exception cref="T:System.ArgumentException">ProcessSpecialValues is true,
            and yData (parameter) value at a particular index and its corresponding x value are special values.
            </exception>
    </member>
    <member name="M:NationalInstruments.UI.IWaveformGraph.PlotWaveform``1(NationalInstruments.AnalogWaveform{``0})">
      <summary>
            Plots AnalogWaveform&lt;T&gt; data using default plot options.
            </summary>
      <typeparam name="TData">
            The underlying type of the waveform. 
            </typeparam>
      <param name="waveform">
            The AnalogWaveform&lt;T&gt; to plot.
            </param>
      <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
      <exception cref="T:System.ArgumentNullException">waveform (parameter) is null.
            </exception>
      <exception cref="T:System.InvalidOperationException">
            		The XAxis of the plot is null.
            
            -or-
            
            		The YAxis of the plot is null.
            </exception>
      <exception cref="T:System.NotSupportedException">
            The Owner of the plot is not null,
            and the Owner of the plot is
            different from the Owner of XAxis.
            
            -or-
            
            The Owner of the plot is not null,
            and the Owner of the plot is
            different from the Owner of YAxis.
            </exception>
    </member>
    <member name="M:NationalInstruments.UI.IWaveformGraph.PlotWaveform``1(NationalInstruments.AnalogWaveform{``0},NationalInstruments.UI.AnalogWaveformPlotOptions)">
      <summary>
            Plots AnalogWaveform&lt;T&gt; data using the specified options.
            </summary>
      <typeparam name="TData">
            The underlying type of the waveform. 
            </typeparam>
      <param name="waveform">
            The AnalogWaveform&lt;T&gt; to plot.
            </param>
      <param name="options">
            The AnalogWaveformPlotOptions that specifies whether the waveform is 
            plotted against time or against waveform sample units. This parameter
            also specifies whether the waveform data is Raw
            or Scaled.
            </param>
      <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
      <exception cref="T:System.ArgumentNullException">waveform (parameter) is null.
            
            -or-
            options (parameter) is null.
            </exception>
      <exception cref="T:System.InvalidOperationException">
            		The XAxis of the plot is null.
            
            -or-
            
            		The YAxis of the plot is null.
            </exception>
      <exception cref="T:System.NotSupportedException">
            The Owner of the plot is not null,
            and the Owner of the plot is
            different from the Owner of XAxis.
            
            -or-
            
            The Owner of the plot is not null,
            and the Owner of the plot is
            different from the Owner of YAxis.
            </exception>
    </member>
    <member name="M:NationalInstruments.UI.IWaveformGraph.PlotWaveformAppend``1(NationalInstruments.AnalogWaveform{``0})">
      <summary>
            Plots AnalogWaveform&lt;T&gt; data  by 
            appending the waveform to the existing data.
            </summary>
      <typeparam name="TData">
            The underlying type of the waveform. 
            </typeparam>
      <param name="waveform">
            The AnalogWaveform&lt;T&gt; to append.
            </param>
      <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
      <exception cref="T:System.ArgumentNullException">waveform (parameter) is null.
            </exception>
      <exception cref="T:System.InvalidOperationException">
            		The XAxis of the plot is null.
            
            -or-
            
            		The YAxis of the plot is null.
            
            -or-
            PlotWaveformAppend``1 is called after calling
            PlotX,
            PlotXAppend,
            PlotY,
            PlotYAppend,
            PlotComplexWaveform``1, or
            PlotComplexWaveformAppend``1.
            </exception>
      <exception cref="T:System.NotSupportedException">
            The Owner of the plot is not null,
            and the Owner of the plot is
            different from the Owner of XAxis.
            
            -or-
            
            The Owner of the plot is not null,
            and the Owner of the plot is
            different from the Owner of YAxis.
            </exception>
    </member>
    <member name="M:NationalInstruments.UI.IWaveformGraph.PlotWaveforms``1(NationalInstruments.AnalogWaveform{``0}[])">
      <summary>
            Plots a 1D array of AnalogWaveform&lt;T&gt; data using default plot options.
            </summary>
      <typeparam name="TData">
            The underlying type of the waveform. 
            </typeparam>
      <param name="waveforms">
            The 1D array of AnalogWaveform&lt;T&gt; data to plot.
            </param>
      <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
      <exception cref="T:System.ArgumentNullException">waveforms (parameter) is null.
            </exception>
      <exception cref="T:System.InvalidOperationException">
            		The XAxis of the plot is null.
            
            -or-
            
            		The YAxis of the plot is null.
            </exception>
      <exception cref="T:System.NotSupportedException">
            The Owner of the plot is not null,
            and the Owner of the plot is
            different from the Owner of XAxis.
            
            -or-
            
            The Owner of the plot is not null,
            and the Owner of the plot is
            different from the Owner of YAxis.
            </exception>
    </member>
    <member name="M:NationalInstruments.UI.IWaveformGraph.PlotWaveforms``1(NationalInstruments.AnalogWaveform{``0}[],NationalInstruments.UI.AnalogWaveformPlotOptions)">
      <summary>
            Plots a 1D array of AnalogWaveform&lt;T&gt; data using the specified 
            plot options.
            </summary>
      <typeparam name="TData">
            The underlying type of the waveform. 
            </typeparam>
      <param name="waveforms">
            The 1D array of AnalogWaveform&lt;T&gt; data to plot.
            </param>
      <param name="options">
            The AnalogWaveformPlotOptions that specifies whether the waveform is 
            plotted against time or against waveform sample units. This parameter
            also specifies whether the waveform data is Raw
            or Scaled.
            </param>
      <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
      <exception cref="T:System.ArgumentNullException">waveforms (parameter) is null.
            
            -or-
            options (parameter) is null.
            </exception>
      <exception cref="T:System.InvalidOperationException">
            		The XAxis of the plot is null.
            
            -or-
            
            		The YAxis of the plot is null.
            </exception>
      <exception cref="T:System.NotSupportedException">
            The Owner of the plot is not null,
            and the Owner of the plot is
            different from the Owner of XAxis.
            
            -or-
            
            The Owner of the plot is not null,
            and the Owner of the plot is
            different from the Owner of YAxis.
            </exception>
    </member>
    <member name="M:NationalInstruments.UI.IWaveformGraph.PlotWaveformsAppend``1(NationalInstruments.AnalogWaveform{``0}[])">
      <summary>
            Plots an array of AnalogWaveform&lt;T&gt; data by appending the waveforms to the 
            existing data.
            </summary>
      <typeparam name="TData">
            The underlying type of the waveform. 
            </typeparam>
      <param name="waveforms">
            The array of AnalogWaveform&lt;T&gt; data to append.
            </param>
      <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
      <exception cref="T:System.ArgumentNullException">waveforms (parameter) is null.
            </exception>
      <exception cref="T:System.InvalidOperationException">
            		The XAxis of the plot is null.
            
            -or-
            
            		The YAxis of the plot is null.
            
            -or-
            PlotWaveformAppend``1 is called after calling
            PlotX,
            PlotXAppend,
            PlotY,
            PlotYAppend,
            PlotComplexWaveform``1, or
            PlotComplexWaveformAppend``1.
            </exception>
      <exception cref="T:System.NotSupportedException">
            The Owner of the plot is not null,
            and the Owner of the plot is
            different from the Owner of XAxis.
            
            -or-
            
            The Owner of the plot is not null,
            and the Owner of the plot is
            different from the Owner of YAxis.
            </exception>
    </member>
    <member name="M:NationalInstruments.UI.IWaveformGraph.PlotWaveformsMultiple``1(NationalInstruments.AnalogWaveform{``0}[0:,0:])">
      <summary>
            Plots a 2D array of AnalogWaveform&lt;T&gt; data using default plot options.
            </summary>
      <typeparam name="TData">
            The underlying type of the waveform. 
            </typeparam>
      <param name="waveforms">
            The 2D array of AnalogWaveform&lt;T&gt; data to plot.
            </param>
      <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
      <exception cref="T:System.ArgumentNullException">waveforms (parameter) is null.
            </exception>
      <exception cref="T:System.InvalidOperationException">
            		The XAxis of the plot is null.
            
            -or-
            
            		The YAxis of the plot is null.
            </exception>
      <exception cref="T:System.NotSupportedException">
            The Owner of the plot is not null,
            and the Owner of the plot is
            different from the Owner of XAxis.
            
            -or-
            
            The Owner of the plot is not null,
            and the Owner of the plot is
            different from the Owner of YAxis.
            </exception>
    </member>
    <member name="M:NationalInstruments.UI.IWaveformGraph.PlotWaveformsMultiple``1(NationalInstruments.AnalogWaveform{``0}[0:,0:],NationalInstruments.UI.AnalogWaveformPlotOptions)">
      <summary>
            Plots a 2D array of AnalogWaveform&lt;T&gt; data using the specified 
            plot options.
            </summary>
      <typeparam name="TData">
            The underlying type of the waveform. 
            </typeparam>
      <param name="waveforms">
            The 2D array of AnalogWaveform&lt;T&gt; data to plot.
            </param>
      <param name="options">
            The AnalogWaveformPlotOptions that specifies whether the waveform is 
            plotted against time or against waveform sample units. This parameter
            also specifies whether the waveform data is Raw
            or Scaled.
            </param>
      <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
      <exception cref="T:System.ArgumentNullException">waveforms (parameter) is null.
            
            -or-
            options (parameter) is null.
            </exception>
      <exception cref="T:System.InvalidOperationException">
            		The XAxis of the plot is null.
            
            -or-
            
            		The YAxis of the plot is null.
            </exception>
      <exception cref="T:System.NotSupportedException">
            The Owner of the plot is not null,
            and the Owner of the plot is
            different from the Owner of XAxis.
            
            -or-
            
            The Owner of the plot is not null,
            and the Owner of the plot is
            different from the Owner of YAxis.
            </exception>
    </member>
    <member name="M:NationalInstruments.UI.IWaveformGraph.PlotWaveformsAppendMultiple``1(NationalInstruments.AnalogWaveform{``0}[0:,0:])">
      <summary>
            Plots a 2D array of AnalogWaveform&lt;T&gt; data by appending the waveforms against the existing data.
            </summary>
      <typeparam name="TData">
            The underlying type of the waveform. 
            </typeparam>
      <param name="waveforms">
            The 2D array of AnalogWaveform&lt;T&gt; data to plot.
            </param>
      <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
      <exception cref="T:System.ArgumentNullException">waveforms (parameter) is null.
            </exception>
      <exception cref="T:System.InvalidOperationException">
            		The XAxis of the plot is null.
            
            -or-
            
            		The YAxis of the plot is null.
            
            -or-
            PlotWaveformAppend``1 is called after calling
            PlotX,
            PlotXAppend,
            PlotY,
            PlotYAppend,
            PlotComplexWaveform``1, or
            PlotComplexWaveformAppend``1.
            </exception>
      <exception cref="T:System.NotSupportedException">
            The Owner of the plot is not null,
            and the Owner of the plot is
            different from the Owner of XAxis.
            
            -or-
            
            The Owner of the plot is not null,
            and the Owner of the plot is
            different from the Owner of YAxis.
            </exception>
    </member>
    <member name="M:NationalInstruments.UI.IWaveformGraph.PlotComplexWaveform``1(NationalInstruments.ComplexWaveform{``0})">
      <summary>
            Plots ComplexWaveform&lt;T&gt; data using default plot options.
            </summary>
      <typeparam name="TData">
            The underlying type of the waveform. 
            </typeparam>
      <param name="waveform">
            The ComplexWaveform&lt;T&gt; to plot.
            </param>
      <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
      <exception cref="T:System.ArgumentNullException">waveform (parameter) is null.
            </exception>
      <exception cref="T:System.InvalidOperationException">
            		The XAxis of the plot is null.
            
            -or-
            
            		The YAxis of the plot is null.
            </exception>
      <exception cref="T:System.NotSupportedException">
            The Owner of the plot is not null,
            and the Owner of the plot is
            different from the Owner of XAxis.
            
            -or-
            
            The Owner of the plot is not null,
            and the Owner of the plot is
            different from the Owner of YAxis.
            </exception>
    </member>
    <member name="M:NationalInstruments.UI.IWaveformGraph.PlotComplexWaveform``1(NationalInstruments.ComplexWaveform{``0},NationalInstruments.UI.ComplexWaveformPlotOptions)">
      <summary>
            Plots ComplexWaveform&lt;T&gt; data using the specified 
            plot options.
            </summary>
      <typeparam name="TData">
            The underlying type of the waveform. 
            </typeparam>
      <param name="waveform">
            The ComplexWaveform&lt;T&gt; to plot.
            </param>
      <param name="options">
            The ComplexWaveformPlotOptions that specifies whether the waveform is 
            plotted against time or against waveform sample units. This parameter
            also specifies whether the waveform data is Raw
            or Scaled and specifies whether the part of complex data plotted on YAxes is Real,
            Imaginary, Phase, or Magnitude.
            </param>
      <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
      <exception cref="T:System.ArgumentNullException">waveform (parameter) is null.
            
            -or-
            options (parameter) is null.
            </exception>
      <exception cref="T:System.InvalidOperationException">
            		The XAxis of the plot is null.
            
            -or-
            
            		The YAxis of the plot is null.
            </exception>
      <exception cref="T:System.NotSupportedException">
            The Owner of the plot is not null,
            and the Owner of the plot is
            different from the Owner of XAxis.
            
            -or-
            
            The Owner of the plot is not null,
            and the Owner of the plot is
            different from the Owner of YAxis.
            </exception>
    </member>
    <member name="M:NationalInstruments.UI.IWaveformGraph.PlotComplexWaveformAppend``1(NationalInstruments.ComplexWaveform{``0})">
      <summary>
            Plots ComplexWaveform&lt;T&gt; data  by 
            appending the waveform to the existing data.
            </summary>
      <typeparam name="TData">
            The underlying type of the waveform. 
            </typeparam>
      <param name="waveform">
            The ComplexWaveform&lt;T&gt; to append.
            </param>
      <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
      <exception cref="T:System.ArgumentNullException">waveform (parameter) is null.
            </exception>
      <exception cref="T:System.InvalidOperationException">
            		The XAxis of the plot is null.
            
            -or-
            
            		The YAxis of the plot is null.
            
            -or-
            PlotComplexWaveformAppend``1 is called after calling
            PlotX,
            PlotXAppend,
            PlotY, 
            PlotYAppend,
            PlotWaveform``1, or
            PlotWaveformAppend``1.
            </exception>
      <exception cref="T:System.NotSupportedException">
            The Owner of the plot is not null,
            and the Owner of the plot is
            different from the Owner of XAxis.
            
            -or-
            
            The Owner of the plot is not null,
            and the Owner of the plot is
            different from the Owner of YAxis.
            </exception>
    </member>
    <member name="M:NationalInstruments.UI.IWaveformGraph.PlotComplexWaveforms``1(NationalInstruments.ComplexWaveform{``0}[])">
      <summary>
            Plots a 1D array of ComplexWaveform&lt;T&gt; data using default plot options.
            </summary>
      <typeparam name="TData">
            The underlying type of the waveform. 
            </typeparam>
      <param name="waveforms">
            The 1D array of ComplexWaveform&lt;T&gt; data to plot.
            </param>
      <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
      <exception cref="T:System.ArgumentNullException">waveforms (parameter) is null.
            </exception>
      <exception cref="T:System.InvalidOperationException">
            		The XAxis of the plot is null.
            
            -or-
            
            		The YAxis of the plot is null.
            </exception>
      <exception cref="T:System.NotSupportedException">
            The Owner of the plot is not null,
            and the Owner of the plot is
            different from the Owner of XAxis.
            
            -or-
            
            The Owner of the plot is not null,
            and the Owner of the plot is
            different from the Owner of YAxis.
            </exception>
    </member>
    <member name="M:NationalInstruments.UI.IWaveformGraph.PlotComplexWaveforms``1(NationalInstruments.ComplexWaveform{``0}[],NationalInstruments.UI.ComplexWaveformPlotOptions)">
      <summary>
            Plots a 1D array of ComplexWaveform&lt;T&gt; data using the specified 
            plot options.
            </summary>
      <typeparam name="TData">
            The underlying type of the waveform. 
            </typeparam>
      <param name="waveforms">
            The 1D array of ComplexWaveform&lt;T&gt; data to plot.
            </param>
      <param name="options">
            The ComplexWaveformPlotOptions that specifies whether the waveform is 
            plotted against time or against waveform sample units. This parameter
            also specifies whether the waveform data is Raw
            or Scaled and specifies whether the part of complex data plotted on YAxes is Real,
            Imaginary, Phase, or Magnitude.
            </param>
      <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
      <exception cref="T:System.ArgumentNullException">waveforms (parameter) is null.
            
            -or-
            options (parameter) is null.
            </exception>
      <exception cref="T:System.InvalidOperationException">
            		The XAxis of the plot is null.
            
            -or-
            
            		The YAxis of the plot is null.
            </exception>
      <exception cref="T:System.NotSupportedException">
            The Owner of the plot is not null,
            and the Owner of the plot is
            different from the Owner of XAxis.
            
            -or-
            
            The Owner of the plot is not null,
            and the Owner of the plot is
            different from the Owner of YAxis.
            </exception>
    </member>
    <member name="M:NationalInstruments.UI.IWaveformGraph.PlotComplexWaveformsAppend``1(NationalInstruments.ComplexWaveform{``0}[])">
      <summary>
            Plots an array of ComplexWaveform&lt;T&gt; data by appending the waveforms to the 
            existing data.
            </summary>
      <typeparam name="TData">
            The underlying type of the waveform. 
            </typeparam>
      <param name="waveforms">
            The array of ComplexWaveform&lt;T&gt; data to append.
            </param>
      <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
      <exception cref="T:System.ArgumentNullException">waveforms (parameter) is null.
            </exception>
      <exception cref="T:System.InvalidOperationException">
            		The XAxis of the plot is null.
            
            -or-
            
            		The YAxis of the plot is null.
            
            -or-
            PlotComplexWaveformAppend``1 is called after calling
            PlotX,
            PlotXAppend,
            PlotY, 
            PlotYAppend,
            PlotWaveform``1, or
            PlotWaveformAppend``1.
            </exception>
      <exception cref="T:System.NotSupportedException">
            The Owner of the plot is not null,
            and the Owner of the plot is
            different from the Owner of XAxis.
            
            -or-
            
            The Owner of the plot is not null,
            and the Owner of the plot is
            different from the Owner of YAxis.
            </exception>
    </member>
    <member name="M:NationalInstruments.UI.IWaveformGraph.PlotComplexWaveformsMultiple``1(NationalInstruments.ComplexWaveform{``0}[0:,0:])">
      <summary>
            Plots a 2D array of ComplexWaveform&lt;T&gt; data using default plot options.
            </summary>
      <typeparam name="TData">
            The underlying type of the waveform. 
            </typeparam>
      <param name="waveforms">
            The 2D array of ComplexWaveform&lt;T&gt; data to plot.
            </param>
      <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
      <exception cref="T:System.ArgumentNullException">waveforms (parameter) is null.
            </exception>
      <exception cref="T:System.InvalidOperationException">
            		The XAxis of the plot is null.
            
            -or-
            
            		The YAxis of the plot is null.
            </exception>
      <exception cref="T:System.NotSupportedException">
            The Owner of the plot is not null,
            and the Owner of the plot is
            different from the Owner of XAxis.
            
            -or-
            
            The Owner of the plot is not null,
            and the Owner of the plot is
            different from the Owner of YAxis.
            </exception>
    </member>
    <member name="M:NationalInstruments.UI.IWaveformGraph.PlotComplexWaveformsMultiple``1(NationalInstruments.ComplexWaveform{``0}[0:,0:],NationalInstruments.UI.ComplexWaveformPlotOptions)">
      <summary>
            Plots a 2D array of ComplexWaveform&lt;T&gt; data using the specified 
            plot options.
            </summary>
      <typeparam name="TData">
            The underlying type of the waveform. 
            </typeparam>
      <param name="waveforms">
            The 2D array of ComplexWaveform&lt;T&gt; data to plot.
            </param>
      <param name="options">
            The ComplexWaveformPlotOptions that specifies whether the waveform is 
            plotted against time or against waveform sample units. This parameter
            also specifies whether the waveform data is Raw
            or Scaled and specifies whether the part of complex data plotted on YAxes is Real,
            Imaginary, Phase, or Magnitude.</param>
      <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
      <exception cref="T:System.ArgumentNullException">waveforms (parameter) is null.
            
            -or-
            options (parameter) is null.
            </exception>
      <exception cref="T:System.InvalidOperationException">
            		The XAxis of the plot is null.
            
            -or-
            
            		The YAxis of the plot is null.
            </exception>
      <exception cref="T:System.NotSupportedException">
            The Owner of the plot is not null,
            and the Owner of the plot is
            different from the Owner of XAxis.
            
            -or-
            
            The Owner of the plot is not null,
            and the Owner of the plot is
            different from the Owner of YAxis.
            </exception>
    </member>
    <member name="M:NationalInstruments.UI.IWaveformGraph.PlotComplexWaveformsAppendMultiple``1(NationalInstruments.ComplexWaveform{``0}[0:,0:])">
      <summary>
            Plots a 2D array of ComplexWaveform&lt;T&gt; data by appending the waveforms against the existing data.
            </summary>
      <typeparam name="TData">
            The underlying type of the waveform. 
            </typeparam>
      <param name="waveforms">
            The 2D array of ComplexWaveform&lt;T&gt; data to plot.
            </param>
      <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
      <exception cref="T:System.ArgumentNullException">waveforms (parameter) is null.
            </exception>
      <exception cref="T:System.InvalidOperationException">
            		The XAxis of the plot is null.
            
            -or-
            
            		The YAxis of the plot is null.
            
            -or-
            PlotComplexWaveformAppend``1 is called after calling
            PlotX,
            PlotXAppend,
            PlotY, 
            PlotYAppend,
            PlotWaveform``1, or
            PlotWaveformAppend``1.
            </exception>
      <exception cref="T:System.NotSupportedException">
            The Owner of the plot is not null,
            and the Owner of the plot is
            different from the Owner of XAxis.
            
            -or-
            
            The Owner of the plot is not null,
            and the Owner of the plot is
            different from the Owner of YAxis.
            </exception>
    </member>
    <member name="P:NationalInstruments.UI.IWaveformGraph.DefaultDataOrientation">
      <summary>
            Gets or sets the default orientation of values in a 2D array.
            </summary>
    </member>
    <member name="P:NationalInstruments.UI.IWaveformGraph.Plots">
      <summary>
            Gets the collection of plots on the graph.
            </summary>
      <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
    </member>
    <member name="P:NationalInstruments.UI.IWaveformGraph.BindingData">
      <summary>
            Gets or sets the data when binding to a data source.
            </summary>
      <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
    </member>
    <member name="P:NationalInstruments.UI.IWaveformGraph.BindingDataOrientation">
      <summary>
            Gets or sets the orientation of data in a 2D
            array when binding to a data source.
            </summary>
      <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
      <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
            The value is not one of the DataOrientation
            values.
            </exception>
    </member>
    <member name="P:NationalInstruments.UI.IWaveformGraph.BindingIncrement">
      <summary>
            Gets or sets the value to increment x or y values when binding to a data source.
            </summary>
      <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
    </member>
    <member name="P:NationalInstruments.UI.IWaveformGraph.BindingMethod">
      <summary>
            Gets or sets the method to call when binding to a data source.
            </summary>
      <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
      <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
            The value is not a BindableWaveformGraphMethod
            value.
            </exception>
    </member>
    <member name="P:NationalInstruments.UI.IWaveformGraph.BindingStart">
      <summary>
            Gets or sets the starting x or y value when binding to a data source.
            </summary>
      <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
    </member>
    <member name="T:NationalInstruments.UI.ISwitch">
      <summary>
            Defines an interface for the switch control.
            </summary>
    </member>
    <member name="P:NationalInstruments.UI.ISwitch.SwitchStyle">
      <summary>
            Gets or sets the style of the switch.
            </summary>
      <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
      <exception cref="T:System.ArgumentNullException">
            The value specified is null.
            </exception>
    </member>
    <member name="T:NationalInstruments.UI.INumericValueSource">
      <summary>
            Defines the interface for all Measurement Studio controls that function as a numeric value source.
            </summary>
    </member>
    <member name="M:NationalInstruments.UI.INumericValueSource.GetValue">
      <summary>
            Gets the value of the control.
            </summary>
      <returns>
            The value of the control.
            </returns>
      <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
    </member>
    <member name="M:NationalInstruments.UI.INumericValueSource.SetValue(System.Double,NationalInstruments.UI.Action)">
      <summary>
            Sets the value of the control.
            </summary>
      <param name="value">
            The value of the control.
            </param>
      <param name="action">
            The source of the Action that caused the event.
            </param>
    </member>
    <member name="M:NationalInstruments.UI.INumericValueSource.MovePrevious(NationalInstruments.UI.Action)">
      <summary>
            Moves the value of the control to the previous value.
            </summary>
      <returns>true if the value moved to the previous value.
            </returns>
      <param name="action">
            The source of the Action that caused the event.
            </param>
      <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
    </member>
    <member name="M:NationalInstruments.UI.INumericValueSource.MoveNext(NationalInstruments.UI.Action)">
      <summary>
            Moves the value of the control to the next value.
            </summary>
      <returns>true if the value moved to the next value.
            </returns>
      <param name="action">
            The source of the Action that caused the event.
            </param>
      <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
    </member>
    <member name="P:NationalInstruments.UI.INumericValueSource.Range">
      <summary>
            Gets an ordered pair of minimum and maximum values that defines the range of the control.
            </summary>
      <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
    </member>
    <member name="E:NationalInstruments.UI.INumericValueSource.Disposed">
      <summary>
            Occurs when the INumericValueSource has been disposed.
            </summary>
    </member>
    <member name="E:NationalInstruments.UI.INumericValueSource.AfterChangeValue">
      <summary>
            Occurs after the value of the control has changed.
            </summary>
      <exception cref="T:System.ObjectDisposedException">
            An event handler is added after the object has been disposed.
            </exception>
    </member>
    <member name="E:NationalInstruments.UI.INumericValueSource.BeforeChangeValue">
      <summary>
            Occurs before the value of the control changes, allowing for the change event to be cancelled.
            </summary>
      <exception cref="T:System.ObjectDisposedException">
            An event handler is added after the object has been disposed.
            </exception>
    </member>
    <member name="M:NationalInstruments.UI.Internal.OctreeQuantizer.#ctor(System.Int32,System.Int32)">
      <summary>
            Construct the octree quantizer
            </summary>
      <param name="maxColors">The maximum number of colors to return</param>
      <param name="maxColorBits">The number of significant bits</param>
    </member>
    <member name="M:NationalInstruments.UI.Internal.OctreeQuantizer.InitialQuantizePixel(System.Drawing.Color)">
      <summary>
            Process the pixel in the first pass of the algorithm
            </summary>
      <param name="pixel">The pixel to quantize</param>
    </member>
    <member name="M:NationalInstruments.UI.Internal.OctreeQuantizer.QuantizePixel(System.Drawing.Color)">
      <summary>
            Override this to process the pixel in the second pass of the algorithm
            </summary>
      <param name="pixel">The pixel to quantize</param>
      <returns>The quantized value</returns>
    </member>
    <member name="M:NationalInstruments.UI.Internal.OctreeQuantizer.GetPalette(System.Drawing.Imaging.ColorPalette)">
      <summary>
            Retrieve the palette for the quantized image
            </summary>
      <param name="original">Any old palette, this is overrwritten</param>
      <returns>The new color palette</returns>
    </member>
    <member name="F:NationalInstruments.UI.Internal.OctreeQuantizer._octree">
      <summary>
            Stores the tree
            </summary>
    </member>
    <member name="F:NationalInstruments.UI.Internal.OctreeQuantizer._maxColors">
      <summary>
            Maximum allowed color depth
            </summary>
    </member>
    <member name="T:NationalInstruments.UI.Internal.OctreeQuantizer.Octree">
      <summary>
            Class which does the actual quantization
            </summary>
    </member>
    <member name="M:NationalInstruments.UI.Internal.OctreeQuantizer.Octree.#ctor(System.Int32)">
      <summary>
            Construct the octree
            </summary>
      <param name="maxColorBits">The maximum number of significant bits in the image</param>
    </member>
    <member name="M:NationalInstruments.UI.Internal.OctreeQuantizer.Octree.AddColor(System.Drawing.Color)">
      <summary>
            Add a given color value to the octree
            </summary>
      <param name="pixel" />
    </member>
    <member name="M:NationalInstruments.UI.Internal.OctreeQuantizer.Octree.Reduce">
      <summary>
            Reduce the depth of the tree
            </summary>
    </member>
    <member name="M:NationalInstruments.UI.Internal.OctreeQuantizer.Octree.TrackPrevious(NationalInstruments.UI.Internal.OctreeQuantizer.Octree.OctreeNode)">
      <summary>
            Keep track of the previous node that was quantized
            </summary>
      <param name="node">The node last quantized</param>
    </member>
    <member name="M:NationalInstruments.UI.Internal.OctreeQuantizer.Octree.Palletize(System.Int32)">
      <summary>
            Convert the nodes in the octree to a palette with a maximum of colorCount colors
            </summary>
      <param name="colorCount">The maximum number of colors</param>
      <returns>An arraylist with the palettized colors</returns>
    </member>
    <member name="M:NationalInstruments.UI.Internal.OctreeQuantizer.Octree.GetPaletteIndex(System.Drawing.Color)">
      <summary>
            Get the palette index for the passed color
            </summary>
      <param name="pixel" />
      <returns />
    </member>
    <member name="F:NationalInstruments.UI.Internal.OctreeQuantizer.Octree.mask">
      <summary>
            Mask used when getting the appropriate pixels for a given node
            </summary>
    </member>
    <member name="F:NationalInstruments.UI.Internal.OctreeQuantizer.Octree._root">
      <summary>
            The root of the octree
            </summary>
    </member>
    <member name="F:NationalInstruments.UI.Internal.OctreeQuantizer.Octree._leafCount">
      <summary>
            Number of leaves in the tree
            </summary>
    </member>
    <member name="F:NationalInstruments.UI.Internal.OctreeQuantizer.Octree._reducibleNodes">
      <summary>
            Array of reducible nodes
            </summary>
    </member>
    <member name="F:NationalInstruments.UI.Internal.OctreeQuantizer.Octree._maxColorBits">
      <summary>
            Maximum number of significant bits in the image
            </summary>
    </member>
    <member name="F:NationalInstruments.UI.Internal.OctreeQuantizer.Octree._previousNode">
      <summary>
            Store the last node quantized
            </summary>
    </member>
    <member name="F:NationalInstruments.UI.Internal.OctreeQuantizer.Octree._previousColor">
      <summary>
            Cache the previous color quantized
            </summary>
    </member>
    <member name="P:NationalInstruments.UI.Internal.OctreeQuantizer.Octree.Leaves">
      <summary>
            Get/Set the number of leaves in the tree
            </summary>
    </member>
    <member name="P:NationalInstruments.UI.Internal.OctreeQuantizer.Octree.ReducibleNodes">
      <summary>
            Return the array of reducible nodes
            </summary>
    </member>
    <member name="T:NationalInstruments.UI.Internal.OctreeQuantizer.Octree.OctreeNode">
      <summary>
            Class which encapsulates each node in the tree
            </summary>
    </member>
    <member name="M:NationalInstruments.UI.Internal.OctreeQuantizer.Octree.OctreeNode.#ctor(System.Int32,System.Int32,NationalInstruments.UI.Internal.OctreeQuantizer.Octree)">
      <summary>
            Construct the node
            </summary>
      <param name="level">The level in the tree = 0 - 7</param>
      <param name="colorBits">The number of significant color bits in the image</param>
      <param name="octree">The tree to which this node belongs</param>
    </member>
    <member name="M:NationalInstruments.UI.Internal.OctreeQuantizer.Octree.OctreeNode.AddColor(System.Drawing.Color,System.Int32,System.Int32,NationalInstruments.UI.Internal.OctreeQuantizer.Octree)">
      <summary>
            Add a color into the tree
            </summary>
      <param name="pixel">The color</param>
      <param name="colorBits">The number of significant color bits</param>
      <param name="level">The level in the tree</param>
      <param name="octree">The tree to which this node belongs</param>
    </member>
    <member name="M:NationalInstruments.UI.Internal.OctreeQuantizer.Octree.OctreeNode.Reduce">
      <summary>
            Reduce this node by removing all of its children
            </summary>
      <returns>The number of leaves removed</returns>
    </member>
    <member name="M:NationalInstruments.UI.Internal.OctreeQuantizer.Octree.OctreeNode.ConstructPalette(System.Collections.ArrayList,System.Int32@)">
      <summary>
            Traverse the tree, building up the color palette
            </summary>
      <param name="palette">The palette</param>
      <param name="paletteIndex">The current palette index</param>
    </member>
    <member name="M:NationalInstruments.UI.Internal.OctreeQuantizer.Octree.OctreeNode.GetPaletteIndex(System.Drawing.Color,System.Int32)">
      <summary>
            Return the palette index for the passed color
            </summary>
    </member>
    <member name="M:NationalInstruments.UI.Internal.OctreeQuantizer.Octree.OctreeNode.Increment(System.Drawing.Color)">
      <summary>
            Increment the pixel count and add to the color information
            </summary>
    </member>
    <member name="F:NationalInstruments.UI.Internal.OctreeQuantizer.Octree.OctreeNode._leaf">
      <summary>
            Flag indicating that this is a leaf node
            </summary>
    </member>
    <member name="F:NationalInstruments.UI.Internal.OctreeQuantizer.Octree.OctreeNode._pixelCount">
      <summary>
            Number of pixels in this node
            </summary>
    </member>
    <member name="F:NationalInstruments.UI.Internal.OctreeQuantizer.Octree.OctreeNode._red">
      <summary>
            Red component
            </summary>
    </member>
    <member name="F:NationalInstruments.UI.Internal.OctreeQuantizer.Octree.OctreeNode._green">
      <summary>
            Green Component
            </summary>
    </member>
    <member name="F:NationalInstruments.UI.Internal.OctreeQuantizer.Octree.OctreeNode._blue">
      <summary>
            Blue component
            </summary>
    </member>
    <member name="F:NationalInstruments.UI.Internal.OctreeQuantizer.Octree.OctreeNode._children">
      <summary>
            Pointers to any child nodes
            </summary>
    </member>
    <member name="F:NationalInstruments.UI.Internal.OctreeQuantizer.Octree.OctreeNode._nextReducible">
      <summary>
            Pointer to next reducible node
            </summary>
    </member>
    <member name="F:NationalInstruments.UI.Internal.OctreeQuantizer.Octree.OctreeNode._paletteIndex">
      <summary>
            The index of this node in the palette
            </summary>
    </member>
    <member name="P:NationalInstruments.UI.Internal.OctreeQuantizer.Octree.OctreeNode.NextReducible">
      <summary>
            Get/Set the next reducible node
            </summary>
    </member>
    <member name="P:NationalInstruments.UI.Internal.OctreeQuantizer.Octree.OctreeNode.Children">
      <summary>
            Return the child nodes
            </summary>
    </member>
    <member name="T:NationalInstruments.UI.DigitalWaveformPlotCollection">
      <summary>
            Represents a strongly typed collection of DigitalWaveformPlot objects.
            </summary>
    </member>
    <member name="M:NationalInstruments.UI.DigitalWaveformPlotCollection.#ctor">
      <summary>
            Initializes a new instance of the DigitalWaveformPlotCollection class.
            </summary>
    </member>
    <member name="M:NationalInstruments.UI.DigitalWaveformPlotCollection.#ctor(NationalInstruments.UI.DigitalWaveformPlot[])">
      <summary>
            Initializes a new instance of the DigitalWaveformPlotCollection class
            from an array of DigitalWaveformPlot objects.
            </summary>
      <param name="item">
            Array of DigitalWaveformPlot objects to copy.
            </param>
      <exception cref="T:System.ArgumentNullException">item (parameter) is null.
            
            -or-
            
            An element in item (parameter) is null.
            </exception>
      <exception cref="T:System.NotSupportedException">
            		An element in item (parameter) has been disposed.
            
            -or-
            
            		An element in item (parameter) is in another DigitalWaveformPlotCollection.
            
            -or-
            
            		An element in item (parameter) is already in this collection.
            </exception>
    </member>
    <member name="M:NationalInstruments.UI.DigitalWaveformPlotCollection.#ctor(NationalInstruments.UI.DigitalWaveformPlotCollection)">
      <summary>
            Initializes a new instance of DigitalWaveformPlotCollection
            from an existing collection.
            </summary>
      <param name="item">
            The DigitalWaveformPlotCollection to copy.
            </param>
      <exception cref="T:System.ArgumentNullException">item (parameter) is null.
            
            -or-
            
            An element in item (parameter) is null.
            </exception>
      <exception cref="T:System.NotSupportedException">
            		An element in item (parameter) has been disposed.
            
            -or-
            
            		An element in item (parameter) is in another DigitalWaveformPlotCollection.
            
            -or-
            
            		An element in item (parameter) is already in this collection.
            </exception>
    </member>
    <member name="M:NationalInstruments.UI.DigitalWaveformPlotCollection.ToString">
      <summary>
            Returns a string representation of the object.
            </summary>
      <returns>
            A string representation of the object.
            </returns>
    </member>
    <member name="M:NationalInstruments.UI.DigitalWaveformPlotCollection.Add(NationalInstruments.UI.DigitalWaveformPlot)">
      <summary>
            Adds an item to the end of the collection.
            </summary>
      <param name="item">
            Item to add to the collection.
            </param>
      <returns>
            The array index of the added item.
            </returns>
      <exception cref="T:System.ArgumentNullException">item (parameter) is null.
            </exception>
      <exception cref="T:System.NotSupportedException">item (parameter) has been disposed.
            
            -or-
            item (parameter) is in another DigitalWaveformPlotCollection.
            
            -or-
            item (parameter) is already in this collection.
            </exception>
    </member>
    <member name="M:NationalInstruments.UI.DigitalWaveformPlotCollection.AddRange(NationalInstruments.UI.DigitalWaveformPlot[])">
      <summary>
            Adds an array of DigitalWaveformPlot objects to the end of the collection.
            </summary>
      <param name="item">
            Array of DigitalWaveformPlot objects to add to the collection.
            </param>
      <exception cref="T:System.ArgumentNullException">item (parameter) is null.
            
            -or-
            
            An element in item (parameter) is null.
            </exception>
      <exception cref="T:System.NotSupportedException">
            		An element in item (parameter) has been disposed.
            
            -or-
            
            		An element in item (parameter) is in another DigitalWaveformPlotCollection.
            
            -or-
            
            		An element in item (parameter) is already in this collection.
            </exception>
    </member>
    <member name="M:NationalInstruments.UI.DigitalWaveformPlotCollection.AddRange(NationalInstruments.UI.DigitalWaveformPlotCollection)">
      <summary>
            Adds a collection of DigitalWaveformPlot objects to the end of the collection.
            </summary>
      <param name="item">
            Collection of DigitalWaveformPlot objects to add to the collection.
            </param>
      <exception cref="T:System.ArgumentNullException">item (parameter) is null.
            
            -or-
            
            An element in item (parameter) is null.
            </exception>
      <exception cref="T:System.NotSupportedException">
            		An element in item (parameter) has been disposed.
            
            -or-
            
            		An element in item (parameter) is in another DigitalWaveformPlotCollection.
            
            -or-
            
            		An element in item (parameter) is already in this collection.
            </exception>
    </member>
    <member name="M:NationalInstruments.UI.DigitalWaveformPlotCollection.Clear">
      <summary>
            Removes all items from the collection.
            </summary>
    </member>
    <member name="M:NationalInstruments.UI.DigitalWaveformPlotCollection.Contains(NationalInstruments.UI.DigitalWaveformPlot)">
      <summary>
            Determines if the specified element is in the collection.
            </summary>
      <param name="item">Item to locate in the collection.</param>
      <returns>true if the collection contains item (parameter).
            </returns>
    </member>
    <member name="M:NationalInstruments.UI.DigitalWaveformPlotCollection.CopyTo(NationalInstruments.UI.DigitalWaveformPlot[],System.Int32)">
      <summary>
            Copies the collection to an array or a portion of an array.
            </summary>
      <param name="array">
            Destination array for the collection.
            </param>
      <param name="index">
            The index in the target array at which you want to begin copying the collection to.
            </param>
      <exception cref="T:System.ArgumentNullException">array (parameter) is null.
            </exception>
      <exception cref="T:System.ArgumentException">array (parameter) is multidimensional.
            
            -or-
            index (parameter) is equal to or greater than the length of array (parameter).
            
            -or-
            
            The number of elements in the collection is greater than the available space between
            index (parameter) and the end of array (parameter).
            </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">index (parameter) is less than the lower bound of array (parameter).
            </exception>
    </member>
    <member name="M:NationalInstruments.UI.DigitalWaveformPlotCollection.IndexOf(NationalInstruments.UI.DigitalWaveformPlot)">
      <summary>
            Returns the zero-based index of the first occurrence of an item in the collection.
            </summary>
      <param name="item">
            Item to search for.
            </param>
      <returns>
            Index of the item. If the item is not found, returns -1.
            </returns>
    </member>
    <member name="M:NationalInstruments.UI.DigitalWaveformPlotCollection.Insert(System.Int32,NationalInstruments.UI.DigitalWaveformPlot)">
      <summary>
            Inserts an item into the collection at the specified index.
            </summary>
      <param name="index">
            Index to insert the item at.
            </param>
      <param name="item">
            Item to insert into the collection.
            </param>
      <exception cref="T:System.ArgumentNullException">item (parameter) is null.
            </exception>
      <exception cref="T:System.NotSupportedException">item (parameter) has been disposed.
            
            -or-
            item (parameter) is in another DigitalWaveformPlotCollection.
            
            -or-
            item (parameter) is already in this collection.
            </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">index (parameter) is less than zero.
            
            -or-
            

index (parameter) is greater than Count.
            


            -or-
            index (parameter) is greater than Count.
            </exception>
    </member>
    <member name="M:NationalInstruments.UI.DigitalWaveformPlotCollection.GetEnumerator">
      <summary>
            Returns an enumerator that you can use to iterate through the collection.
            </summary>
      <returns>
            The enumerator for the collection.
            </returns>
    </member>
    <member name="M:NationalInstruments.UI.DigitalWaveformPlotCollection.Remove(NationalInstruments.UI.DigitalWaveformPlot)">
      <summary>
            Removes the first occurrence of the specified item.
            </summary>
      <param name="item">
            Item to remove from the collection.
            </param>
    </member>
    <member name="M:NationalInstruments.UI.DigitalWaveformPlotCollection.RemoveAt(System.Int32)">
      <summary>
            Removes the item at the specified index.
            </summary>
      <param name="index">
            The zero-based index of the item to remove.
            </param>
      <exception cref="T:System.ArgumentOutOfRangeException">index (parameter) is less than zero.
            
            -or-
            

index (parameter) is greater than or equal to Count.
            


            -or-
            index (parameter) is greater than or equal to Count.
            </exception>
    </member>
    <member name="P:NationalInstruments.UI.DigitalWaveformPlotCollection.Item(System.Int32)">
      <summary>
            Gets or sets the DigitalWaveformPlot at the specified index. 
            </summary>
      <param name="index">
            The zero-based index of the entry to locate in the collection.
            </param>
      <exception cref="T:System.ArgumentNullException">
            	The value is null.
            </exception>
      <exception cref="T:System.NotSupportedException">
            		The value has been disposed.
            
            -or-
            
            		The value is in another DigitalWaveformPlotCollection.
            
            -or-
            
            		The value is already in this collection.
            </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">index (parameter) is less than zero.
            
            -or-
            

index (parameter) is greater than Count.
            


            -or-
            index (parameter) is greater than Count.
            </exception>
    </member>
    <member name="P:NationalInstruments.UI.DigitalWaveformPlotCollection.Count">
      <summary>
            Gets the number of elements in the DigitalWaveformPlotCollection.
            </summary>
    </member>
    <member name="P:NationalInstruments.UI.DigitalWaveformPlotCollection.IsSynchronized">
      <summary>
            Gets a value indicating whether access to the collection is synchronized
            (thread-safe).
            </summary>
    </member>
    <member name="P:NationalInstruments.UI.DigitalWaveformPlotCollection.IsFixedSize">
      <summary>
            Gets a value indicating whether the collection has a fixed size.
            </summary>
    </member>
    <member name="P:NationalInstruments.UI.DigitalWaveformPlotCollection.IsReadOnly">
      <summary>
            Gets a value indicating whether the collection is read-only.
            </summary>
    </member>
    <member name="P:NationalInstruments.UI.DigitalWaveformPlotCollection.SyncRoot">
      <summary>
            Gets an object that can be used to synchronize access to the collection.
            </summary>
    </member>
    <member name="T:NationalInstruments.UI.DigitalTransitionLocation">
      <summary>
            Specifies the location at which a digital signal transitions.
            </summary>
    </member>
    <member name="F:NationalInstruments.UI.DigitalTransitionLocation.Center">
      <summary>
            The digital signal transitions between samples.
            </summary>
    </member>
    <member name="F:NationalInstruments.UI.DigitalTransitionLocation.Edge">
      <summary>
            The digital signal transitions at the edge of the sample.
            </summary>
    </member>
    <member name="T:NationalInstruments.UI.DateTimeFormatModeArgs">
      <summary>
            Provides data for formatting DateTime values with the 
            DateTimeFormatMode class.
            </summary>
    </member>
    <member name="M:NationalInstruments.UI.DateTimeFormatModeArgs.#ctor(System.DateTime)">
      <summary>
            Initializes a new instance of the DateTimeFormatModeArgs class.
            </summary>
      <param name="value">
            The value to format.
            </param>
    </member>
    <member name="P:NationalInstruments.UI.DateTimeFormatModeArgs.Value">
      <summary>
            Gets the value to format.
            </summary>
    </member>
    <member name="T:NationalInstruments.UI.DateTimeFormatMode">
      <summary>
            Defines a set of methods used to format and validate DateTime values.
            </summary>
    </member>
    <member name="M:NationalInstruments.UI.DateTimeFormatMode.#ctor">
      <summary>
            Initializes an instance of the DateTimeFormatMode class.
            </summary>
    </member>
    <member name="M:NationalInstruments.UI.DateTimeFormatMode.GetHashCode">
      <summary>
            Returns a hash code for this object.
            </summary>
      <returns>
            A 32-bit signed integer hash code.
            </returns>
    </member>
    <member name="M:NationalInstruments.UI.DateTimeFormatMode.FormatValue(System.Object,NationalInstruments.UI.DateTimeFormatModeArgs)">
      <summary>
            Converts a DateTime value into its string representation.
            </summary>
      <param name="context">
            The object that specifies the context in which FormatValue is called.
            </param>
      <param name="args">
            A DateTimeFormatModeArgs containing information about the value to format.
            </param>
      <returns>
            A String representing the formatted value.
            </returns>
      <exception cref="T:System.ArgumentNullException">args (parameter) is null.
            </exception>
    </member>
    <member name="M:NationalInstruments.UI.DateTimeFormatMode.TryParse(System.String,System.DateTime@)">
      <summary>
            Converts the string representation of a DateTime value to its date/time equivalent.
            </summary>
      <param name="s">
            The formatted string to parse.
            </param>
      <param name="value">
            Upon return, contains the parsed value.
            </param>
      <returns>true if the string was parsed successfully.
            </returns>
    </member>
    <member name="M:NationalInstruments.UI.DateTimeFormatMode.CanParse(System.String)">
      <summary>
            Determines if a formatted string can be parsed by the TryParse method of the current format mode.
            </summary>
      <param name="s">
            The formatted string to parse.
            </param>
      <returns>true if the string was parsed successfully.
            </returns>
    </member>
    <member name="M:NationalInstruments.UI.DateTimeFormatMode.ToString">
      <summary>
            Returns a string representation of the object.
            </summary>
      <returns>
            A string representation of the object.
            </returns>
    </member>
    <member name="M:NationalInstruments.UI.DateTimeFormatMode.GetService(System.Type)">
      <summary>
            Gets the service object of the specified type.
            </summary>
      <param name="serviceType">
            An Object that specifies the type of service object to get.
            </param>
      <returns>
            A service of type serviceType (parameter), or null
            if there is no object of type serviceType (parameter).
            </returns>
    </member>
    <member name="M:NationalInstruments.UI.DateTimeFormatMode.CreateShortTimeMode">
      <summary>
            Creates a DateTimeFormatMode that displays a combination of the short date and short time patterns, separated by a space. 
            </summary>
      <returns>
            A DateTimeFormatMode that displays a combination of the 
            short date and short time patterns, separated by a space. 
            </returns>
    </member>
    <member name="M:NationalInstruments.UI.DateTimeFormatMode.CreateShortTimeMode(System.IFormatProvider)">
      <summary>
            Creates a DateTimeFormatMode with the specified format 
            provider that displays a combination of the short date and short time patterns, separated by a space. 
            </summary>
      <param name="formatProvider">
            The IFormatProvider to use for formatting. IFormatProvider is typically used to supply culture-specific formatting information.
            </param>
      <returns>
            A DateTimeFormatMode that displays a combination of the 
            short date and short time patterns, separated by a space. 
            </returns>
      <exception cref="T:System.ArgumentNullException">formatProvider (parameter) is null.
            </exception>
    </member>
    <member name="M:NationalInstruments.UI.DateTimeFormatMode.CreateLongTimeMode">
      <summary>
            Creates a DateTimeFormatMode that displays a combination of the short date and long time patterns, separated by a space. 
            </summary>
      <returns>
            A DateTimeFormatMode that displays a combination of the 
            short date and long time patterns, separated by a space. 
            </returns>
    </member>
    <member name="M:NationalInstruments.UI.DateTimeFormatMode.CreateLongTimeMode(System.IFormatProvider)">
      <summary>
            Creates a DateTimeFormatMode with the specified format 
            provider that displays a combination of the short date and long time patterns, separated by a space. 
            </summary>
      <param name="formatProvider">
            The IFormatProvider to use for formatting. IFormatProvider is typically used to supply culture-specific formatting information.
            </param>
      <returns>
            A DateTimeFormatMode that displays a combination of the 
            short date and long time patterns, separated by a space. 
            </returns>
      <exception cref="T:System.ArgumentNullException">formatProvider (parameter) is null.
            </exception>
    </member>
    <member name="T:NationalInstruments.UI.ComplexGraphHitTestInfo">
      <summary>
            Specifies the parts of a complex graph control that can be hit-tested.
            </summary>
    </member>
    <member name="F:NationalInstruments.UI.ComplexGraphHitTestInfo.None">
      <summary>
            The portion of a complex graph outside the axes, plots, and plot area.
            </summary>
    </member>
    <member name="F:NationalInstruments.UI.ComplexGraphHitTestInfo.Plot">
      <summary>
            The plot of a complex graph.
            </summary>
    </member>
    <member name="F:NationalInstruments.UI.ComplexGraphHitTestInfo.XAxis">
      <summary>
            The x-axis of a complex graph.
            </summary>
    </member>
    <member name="F:NationalInstruments.UI.ComplexGraphHitTestInfo.YAxis">
      <summary>
            The y-axis of a complex graph.
            </summary>
    </member>
    <member name="F:NationalInstruments.UI.ComplexGraphHitTestInfo.PlotArea">
      <summary>
            The plot area of a complex graph.
            </summary>
    </member>
    <member name="F:NationalInstruments.UI.ComplexGraphHitTestInfo.Cursor">
      <summary>
            The cursor of a complex graph.
            </summary>
    </member>
    <member name="F:NationalInstruments.UI.ComplexGraphHitTestInfo.Annotation">
      <summary>
            The annotation of a complex graph.
            </summary>
    </member>
    <member name="F:NationalInstruments.UI.ComplexGraphHitTestInfo.ErrorBand">
      <summary>
            The error band of a complex graph.
            </summary>
    </member>
    <member name="T:NationalInstruments.UI.BeforeDrawIntensityPointAnnotationEventArgs">
      <summary>
            Provides data for events that occur before the point annotation draws.
            </summary>
    </member>
    <member name="M:NationalInstruments.UI.BeforeDrawIntensityPointAnnotationEventArgs.#ctor(System.Drawing.Graphics,System.Drawing.Rectangle,System.Boolean,NationalInstruments.UI.IntensityPointAnnotation,NationalInstruments.UI.IntensityPointAnnotationPart,System.Drawing.PointF,System.Drawing.PointF,System.Drawing.PointF,System.Drawing.Size,System.Single,System.Drawing.PointF,System.Drawing.Size,System.Drawing.PointF[])">
      <summary>
            Initializes a new instance of BeforeDrawIntensityPointAnnotationEventArgs 
            with the specified graphics, bounds, annotation, annotation part, arrow head point, arrow tail point, 
            caption point, caption size, caption angle, shape point, shape size, shape points, and a value indicating whether the event is cancelled.
            </summary>
      <param name="graphics">
            The Graphics used to draw the item.
            </param>
      <param name="bounds"> 
            The Rectangle that represents the bounds in which to draw.
            </param>
      <param name="cancel">
            A value that indicates if the event is cancelled.
            </param>
      <param name="annotation">
            The IntensityPointAnnotation for which the event is occurring.
            </param>
      <param name="annotationPart">
            The IntensityPointAnnotationPart of the annotation to draw.
            </param>
      <param name="arrowHeadPoint">
            The Point at which to draw the arrow head.
            </param>
      <param name="arrowTailPoint">
            The Point at which the arrow tail is located.
            </param>
      <param name="captionPoint">
            The Point at which to draw the caption.
            </param>
      <param name="captionSize">
            The Size of the Rectangle in which to draw the caption.
            </param>
      <param name="captionAngle">
            The angle at which to draw the caption.
            </param>
      <param name="shapePoint">
            The Point at which to draw the shape.
            </param>
      <param name="shapeSize">
            The Size of the shape to draw.
            </param>
      <param name="shapePoints">
            The Point array that defines the shape to draw.
            </param>
      <exception cref="T:System.ArgumentNullException">annotation (parameter) is null.
            	-or-graphics (parameter) is null.
            	</exception>
      <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">annotationPart (parameter) is not one of the IntensityPointAnnotationPart
            values.
            </exception>
    </member>
    <member name="P:NationalInstruments.UI.BeforeDrawIntensityPointAnnotationEventArgs.Annotation">
      <summary>
            Gets the IntensityPointAnnotation to draw.
            </summary>
    </member>
    <member name="P:NationalInstruments.UI.BeforeDrawIntensityPointAnnotationEventArgs.Part">
      <summary>
            Gets the part of the annotation to draw.
            </summary>
    </member>
    <member name="P:NationalInstruments.UI.BeforeDrawIntensityPointAnnotationEventArgs.CaptionSize">
      <summary>
            Gets the size of the rectangle in which to draw the caption.
            </summary>
    </member>
    <member name="P:NationalInstruments.UI.BeforeDrawIntensityPointAnnotationEventArgs.CaptionAngle">
      <summary>
            Gets the angle at which to draw the caption.
            </summary>
    </member>
    <member name="P:NationalInstruments.UI.BeforeDrawIntensityPointAnnotationEventArgs.ShapePoint">
      <summary>
            Gets the point at which to draw the shape.
            </summary>
    </member>
    <member name="P:NationalInstruments.UI.BeforeDrawIntensityPointAnnotationEventArgs.ShapeSize">
      <summary>
            Gets the size of the shape to draw.
            </summary>
    </member>
    <member name="P:NationalInstruments.UI.BeforeDrawIntensityPointAnnotationEventArgs.ArrowHeadPoint">
      <summary>
            Gets the point at which to draw the arrow head.
            </summary>
    </member>
    <member name="P:NationalInstruments.UI.BeforeDrawIntensityPointAnnotationEventArgs.ArrowTailPoint">
      <summary>
            Gets the point at which the arrow tail is located.
            </summary>
    </member>
    <member name="P:NationalInstruments.UI.BeforeDrawIntensityPointAnnotationEventArgs.CaptionPoint">
      <summary>
            Gets the point at which to draw the caption.
            </summary>
    </member>
    <member name="P:NationalInstruments.UI.BeforeDrawIntensityPointAnnotationEventArgs.ShapePoints">
      <summary>
            Gets the array of points that defines the shape to draw.
            </summary>
    </member>
    <member name="T:NationalInstruments.UI.ColorScaleCollection">
      <summary>
            Represents a strongly typed collection of ColorScale objects.
            </summary>
    </member>
    <member name="M:NationalInstruments.UI.ColorScaleCollection.#ctor">
      <summary>
            Initializes a new instance of the ColorScaleCollection class.
            </summary>
    </member>
    <member name="M:NationalInstruments.UI.ColorScaleCollection.#ctor(NationalInstruments.UI.ColorScale[])">
      <summary>
            Initializes a new instance of the ColorScaleCollection class
            from an array of ColorScale objects.
            </summary>
      <param name="item">
            Array of ColorScale objects to copy.
            </param>
      <exception cref="T:System.ArgumentNullException">item (parameter) is null.
            
            -or-
            
            An element in item (parameter) is null.
            </exception>
      <exception cref="T:System.NotSupportedException">
            		An element in item (parameter) has been disposed.
            
            -or-
            
            		An element in item (parameter) is in another ColorScaleCollection.
            
            -or-
            
            		An element in item (parameter) is already in this collection.
            </exception>
    </member>
    <member name="M:NationalInstruments.UI.ColorScaleCollection.#ctor(NationalInstruments.UI.ColorScaleCollection)">
      <summary>
            Initializes a new instance of the ColorScaleCollection class
            from an existing collection.
            </summary>
      <param name="item">
            The ColorScaleCollection to copy.
            </param>
      <exception cref="T:System.ArgumentNullException">item (parameter) is null.
            
            -or-
            
            An element in item (parameter) is null.
            </exception>
      <exception cref="T:System.NotSupportedException">
            		An element in item (parameter) has been disposed.
            
            -or-
            
            		An element in item (parameter) is in another ColorScaleCollection.
            
            -or-
            
            		An element in item (parameter) is already in this collection.
            </exception>
    </member>
    <member name="M:NationalInstruments.UI.ColorScaleCollection.ToString">
      <summary>
            Returns a string representation of the object.
            </summary>
      <returns>
            A string representation of the object.
            </returns>
    </member>
    <member name="M:NationalInstruments.UI.ColorScaleCollection.Add(NationalInstruments.UI.ColorScale)">
      <summary>
            Adds an item to end of the collection.
            </summary>
      <param name="item">
            Item to add to the collection.
            </param>
      <returns>
            The array index of the added item.
            </returns>
      <exception cref="T:System.ArgumentNullException">item (parameter) is null.
            </exception>
      <exception cref="T:System.NotSupportedException">item (parameter) has been disposed.
            	
            		-or-
            	item (parameter) is in another ColorScaleCollection.
            	
            		-or-
            	item (parameter) is already in this collection.
            	</exception>
    </member>
    <member name="M:NationalInstruments.UI.ColorScaleCollection.AddRange(NationalInstruments.UI.ColorScale[])">
      <summary>
            Adds an array of ColorScale objects to the end of the collection.
            </summary>
      <param name="item">
            An array of ColorScale objects to add to the collection.
            </param>
      <exception cref="T:System.ArgumentNullException">item (parameter) is null.
            	
            		-or-
            	
            		An element in item (parameter) is null.
            	</exception>
      <exception cref="T:System.NotSupportedException">
            		An element in item (parameter) has been disposed.
            	
            		-or-
            	
            		An element in item (parameter) is in another ColorScaleCollection.
            	
            		-or-
            	
            		An element in item (parameter) is already in this collection.
            	</exception>
    </member>
    <member name="M:NationalInstruments.UI.ColorScaleCollection.AddRange(NationalInstruments.UI.ColorScaleCollection)">
      <summary>
            Adds a collection of ColorScale objects to the end of the collection.
            </summary>
      <param name="item">
            A collection of ColorScale objects to add to the collection.
            </param>
      <exception cref="T:System.ArgumentNullException">item (parameter) is null.
            	
            		-or-
            	
            		An element in item (parameter) is null.
            	</exception>
      <exception cref="T:System.NotSupportedException">
            		An element in item (parameter) has been disposed.
            	
            		-or-
            	
            		An element in item (parameter) is in another ColorScaleCollection.
            	
            		-or-
            	
            		An element in item (parameter) is already in this collection.
            	</exception>
    </member>
    <member name="M:NationalInstruments.UI.ColorScaleCollection.Clear">
      <summary>
            Removes all items from the collection.
            </summary>
    </member>
    <member name="M:NationalInstruments.UI.ColorScaleCollection.Contains(NationalInstruments.UI.ColorScale)">
      <summary>
            Determines if the specified element is in the collection.
            </summary>
      <param name="item">Item to locate in the collection.</param>
      <returns>true if the collection contains item (parameter).
            </returns>
    </member>
    <member name="M:NationalInstruments.UI.ColorScaleCollection.CopyTo(NationalInstruments.UI.ColorScale[],System.Int32)">
      <summary>
            Copies the collection to an array or a portion of an array.
            </summary>
      <param name="array">
            Destination array for the collection.
            </param>
      <param name="index">
            The index in the target array at which you want to begin copying the collection to.
            </param>
      <exception cref="T:System.ArgumentNullException">array (parameter) is null.
            </exception>
      <exception cref="T:System.ArgumentException">array (parameter) is multidimensional.
            	
            		- or -
            	index (parameter) is equal to or greater than the length of array (parameter).
            	
            		-or-
            	
            		The number of elements in the collection is greater than the available space between
            		index (parameter) and the end of array (parameter).
            	</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">index (parameter) is less than the lower bound of array (parameter).
            </exception>
    </member>
    <member name="M:NationalInstruments.UI.ColorScaleCollection.IndexOf(NationalInstruments.UI.ColorScale)">
      <summary>
            Returns the zero-based index of the first occurrence of an item in the collection.
            </summary>
      <param name="item">
            Item to search for.
            </param>
      <returns>
            Index of the item. If the item is not found, returns -1.
            </returns>
    </member>
    <member name="M:NationalInstruments.UI.ColorScaleCollection.Insert(System.Int32,NationalInstruments.UI.ColorScale)">
      <summary>
            Inserts an item into the collection at the specified index.
            </summary>
      <param name="index">
            Index to insert the item at.
            </param>
      <param name="item">
            Item to insert into the collection.
            </param>
      <exception cref="T:System.ArgumentNullException">item (parameter) is null.
            	</exception>
      <exception cref="T:System.NotSupportedException">item (parameter) has been disposed.
            	
            		-or-
            	item (parameter) is in another ColorScaleCollection.
            	
            		-or-
            	item (parameter) is already in this collection.
            	</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">index (parameter) is less than zero.
            	
            		-or-
            	

index (parameter) is greater than Count.
            	


            		-or-
            	index (parameter) is greater than Count.
            	</exception>
    </member>
    <member name="M:NationalInstruments.UI.ColorScaleCollection.Remove(NationalInstruments.UI.ColorScale)">
      <summary>
            Removes the first occurrence of the specified item.
            </summary>
      <param name="item">
            Item to remove from the collection.
            </param>
    </member>
    <member name="M:NationalInstruments.UI.ColorScaleCollection.RemoveAt(System.Int32)">
      <summary>
            Removes the item at the specified index.
            </summary>
      <param name="index">
            The zero-based index of the item to remove.
            </param>
      <exception cref="T:System.ArgumentOutOfRangeException">index (parameter) is less than zero.
            
            -or-
            

index (parameter) is greater than or equal to Count.
            


            -or-
            index (parameter) is greater than or equal to Count.
            </exception>
    </member>
    <member name="M:NationalInstruments.UI.ColorScaleCollection.GetEnumerator">
      <summary>
            Returns an enumerator that you can use to iterate through the collection.
            </summary>
      <returns>
            The enumerator for the collection.
            </returns>
    </member>
    <member name="P:NationalInstruments.UI.ColorScaleCollection.Item(System.Int32)">
      <summary>
            Gets or sets the ColorScale at the specified index. 
            </summary>
      <param name="index">
            The zero-based index of the entry to locate in the collection.
            </param>
      <exception cref="T:System.ArgumentNullException">
            	The value is null.
            </exception>
      <exception cref="T:System.NotSupportedException">
            		The value has been disposed.
            	
            		-or-
            	
            		The value is in another ColorScaleCollection.
            	
            		-or-
            	
            		The value is already in this collection.
            	</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">index (parameter) is less than zero.
            	
            		-or-
            	

index (parameter) is greater than Count.
            	


            		-or-
            	index (parameter) is greater than Count.
            	</exception>
    </member>
    <member name="P:NationalInstruments.UI.ColorScaleCollection.Count">
      <summary>
            Gets the number of elements in the ColorScaleCollection.
            </summary>
    </member>
    <member name="P:NationalInstruments.UI.ColorScaleCollection.IsSynchronized">
      <summary>
            Gets a value indicating whether access to the collection is synchronized
            (thread-safe).
            </summary>
    </member>
    <member name="P:NationalInstruments.UI.ColorScaleCollection.IsFixedSize">
      <summary>
            Gets a value indicating whether the collection has a fixed size.
            </summary>
    </member>
    <member name="P:NationalInstruments.UI.ColorScaleCollection.IsReadOnly">
      <summary>
            Gets a value indicating whether the collection is read-only.
            </summary>
    </member>
    <member name="P:NationalInstruments.UI.ColorScaleCollection.SyncRoot">
      <summary>
            Gets an object that can be used to synchronize access to the collection.
            </summary>
    </member>
    <member name="T:NationalInstruments.UI.BeforeMoveComplexCursorEventArgs">
      <summary>
            Provides data for the events that occur before a cursor moves.
            </summary>
    </member>
    <member name="M:NationalInstruments.UI.BeforeMoveComplexCursorEventArgs.#ctor(NationalInstruments.UI.ComplexCursor,NationalInstruments.UI.ComplexPlot,NationalInstruments.ComplexDouble,NationalInstruments.UI.Action,System.Boolean)">
      <summary>
            Initializes a new instance of the BeforeMoveComplexCursorEventArgs
            class with the specified cursor, plot, position, action, and cancel value.
            </summary>
      <param name="cursor">
            The ComplexCursor for which the event is occurring.
            </param>
      <param name="plot">
            The ComplexPlot that the ComplexCursor
            is moving to.
            </param>
      <param name="position">
            The position that the ComplexCursor is moving to.
            </param>
      <param name="action">
            The source of the Action that caused the event.
            </param>
      <param name="cancel">true to cancel the event.
            </param>
      <exception cref="T:System.ArgumentNullException">cursor (parameter) is null.
            </exception>
    </member>
    <member name="M:NationalInstruments.UI.BeforeMoveComplexCursorEventArgs.ToString">
      <summary>
            Returns a string representation of the object.
            </summary>
      <returns>
            A string representation of the object.
            </returns>
    </member>
    <member name="P:NationalInstruments.UI.BeforeMoveComplexCursorEventArgs.Cursor">
      <summary>
            Gets the ComplexCursor that is moving.
            </summary>
    </member>
    <member name="P:NationalInstruments.UI.BeforeMoveComplexCursorEventArgs.Plot">
      <summary>
            Gets the ComplexPlot that the 
            ComplexCursor is moving to.
            </summary>
    </member>
    <member name="P:NationalInstruments.UI.BeforeMoveComplexCursorEventArgs.Position">
      <summary>
            Gets the position that the ComplexCursor is moving to.
            </summary>
    </member>
    <member name="T:NationalInstruments.UI.BeforeDrawIntensityPlotEventArgs">
      <summary>
            Provides data for the BeforeDrawPlot event.
            </summary>
    </member>
    <member name="M:NationalInstruments.UI.BeforeDrawIntensityPlotEventArgs.#ctor(NationalInstruments.UI.IntensityPlot,System.Drawing.Graphics,System.Drawing.Rectangle,System.Boolean)">
      <summary>
            Initializes a new instance of the BeforeDrawIntensityPlotEventArgs
            class with the specified plot, graphics, bounds, and cancel value.
            </summary>
      <param name="plot">
            The IntensityPlot for which the event occurs.
            </param>
      <param name="graphics">
            The Graphics used to draw the item.
            </param>
      <param name="bounds">
            The Rectangle that represents the bounds in which to draw.
            </param>
      <param name="cancel">
            A value that indicates if the event is cancelled.
            </param>
      <exception cref="T:System.ArgumentNullException">plot (parameter) is null.
            	-or-graphics (parameter) is null.
            	</exception>
    </member>
    <member name="M:NationalInstruments.UI.BeforeDrawIntensityPlotEventArgs.ToString">
      <summary>
            Returns a string representation of the object.        
            </summary>
      <returns>
            A string representation of the object.
            </returns>
    </member>
    <member name="P:NationalInstruments.UI.BeforeDrawIntensityPlotEventArgs.Plot">
      <summary>
            Gets the IntensityPlot to draw.
            </summary>
    </member>
    <member name="T:NationalInstruments.UI.BeforeDrawComplexCursorEventHandler">
      <summary>
            Represents the method that handles the events that occur before a cursor draws.
            </summary>
      <param name="sender">
            The source of the event.
            </param>
      <param name="e">
            A BeforeDrawComplexCursorEventArgs that contains the event data.
            </param>
    </member>
    <member name="T:NationalInstruments.UI.AfterDrawXYPlotEventHandler">
      <summary>
            Represents the method that handles the AfterDrawPlot
            event.
            </summary>
      <param name="sender">
            The source of the event.
            </param>
      <param name="e">
            An AfterDrawXYPlotEventArgs that contains the event data.
            </param>
    </member>
    <member name="T:NationalInstruments.UI.XAxisCollection">
      <summary>
            Represents a strongly typed collection of XAxis objects.
            </summary>
    </member>
    <member name="M:NationalInstruments.UI.XAxisCollection.#ctor">
      <summary>
            Initializes a new instance of the XAxisCollection class.
            </summary>
    </member>
    <member name="M:NationalInstruments.UI.XAxisCollection.#ctor(NationalInstruments.UI.XAxis[])">
      <summary>
            Initializes a new instance of the XAxisCollection class
            from an array of XAxis objects.
            </summary>
      <param name="item">
            Array of XAxis objects to copy.
            </param>
      <exception cref="T:System.ArgumentNullException">item (parameter) is null.
            
            -or-
            
            An element in item (parameter) is null.
            </exception>
      <exception cref="T:System.NotSupportedException">
            		An element in item (parameter) has been disposed.
            
            -or-
            
            		An element in item (parameter) is in another XAxisCollection.
            
            -or-
            
            		An element in item (parameter) is already in this collection.
            </exception>
    </member>
    <member name="M:NationalInstruments.UI.XAxisCollection.#ctor(NationalInstruments.UI.XAxisCollection)">
      <summary>
            Initializes a new instance of the XAxisCollection class
            from an existing collection.
            </summary>
      <param name="item">
            The XAxisCollection to copy.
            </param>
      <exception cref="T:System.ArgumentNullException">item (parameter) is null.
            
            -or-
            
            An element in item (parameter) is null.
            </exception>
      <exception cref="T:System.NotSupportedException">
            		An element in item (parameter) has been disposed.
            
            -or-
            
            		An element in item (parameter) is in another XAxisCollection.
            
            -or-
            
            		An element in item (parameter) is already in this collection.
            </exception>
    </member>
    <member name="M:NationalInstruments.UI.XAxisCollection.ToString">
      <summary>
            Returns a string representation of the object.
            </summary>
      <returns>
            A string representation of the object.
            </returns>
    </member>
    <member name="M:NationalInstruments.UI.XAxisCollection.Add(NationalInstruments.UI.XAxis)">
      <summary>
            Adds an item to end of the collection.
            </summary>
      <param name="item">
            Item to add to the collection.
            </param>
      <returns>
            The array index of the added item.
            </returns>
      <exception cref="T:System.ArgumentNullException">item (parameter) is null.
            </exception>
      <exception cref="T:System.NotSupportedException">item (parameter) has been disposed.
            
            -or-
            item (parameter) is in another XAxisCollection.
            
            -or-
            item (parameter) is already in this collection.
            </exception>
    </member>
    <member name="M:NationalInstruments.UI.XAxisCollection.AddRange(NationalInstruments.UI.XAxis[])">
      <summary>
            Adds an array of XAxis objects to the end of the collection.
            </summary>
      <param name="item">
            Array of XAxis objects to add to the collection.
            </param>
      <exception cref="T:System.ArgumentNullException">item (parameter) is null.
            
            -or-
            
            An element in item (parameter) is null.
            </exception>
      <exception cref="T:System.NotSupportedException">
            		An element in item (parameter) has been disposed.
            
            -or-
            
            		An element in item (parameter) is in another XAxisCollection.
            
            -or-
            
            		An element in item (parameter) is already in this collection.
            </exception>
    </member>
    <member name="M:NationalInstruments.UI.XAxisCollection.AddRange(NationalInstruments.UI.XAxisCollection)">
      <summary>
            Adds a collection of XAxis objects to the end of the collection.
            </summary>
      <param name="item">
            Collection of XAxis objects to add to the collection.
            </param>
      <exception cref="T:System.ArgumentNullException">item (parameter) is null.
            
            -or-
            
            An element in item (parameter) is null.
            </exception>
      <exception cref="T:System.NotSupportedException">
            		An element in item (parameter) has been disposed.
            
            -or-
            
            		An element in item (parameter) is in another XAxisCollection.
            
            -or-
            
            		An element in item (parameter) is already in this collection.
            </exception>
    </member>
    <member name="M:NationalInstruments.UI.XAxisCollection.Clear">
      <summary>
            Removes all items from the collection.
            </summary>
    </member>
    <member name="M:NationalInstruments.UI.XAxisCollection.Contains(NationalInstruments.UI.XAxis)">
      <summary>
            Determines if the specified element is in the collection.
            </summary>
      <param name="item">Item to locate in the collection.</param>
      <returns>true if the collection contains item (parameter).
            </returns>
    </member>
    <member name="M:NationalInstruments.UI.XAxisCollection.CopyTo(NationalInstruments.UI.XAxis[],System.Int32)">
      <summary>
            Copies the collection to an array or a portion of an array.
            </summary>
      <param name="array">
            Destination array for the collection.
            </param>
      <param name="index">
            The index in the target array at which you want to begin copying the collection to.
            </param>
      <exception cref="T:System.ArgumentNullException">array (parameter) is null.
            </exception>
      <exception cref="T:System.ArgumentException">array (parameter) is multidimensional.
            
            - or -
            index (parameter) is equal to or greater than the length of array (parameter).
            
            -or-
            
            The number of elements in the collection is greater than the available space between
            index (parameter) and the end of array (parameter).
            </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">index (parameter) is less than the lower bound of array (parameter).
            </exception>
    </member>
    <member name="M:NationalInstruments.UI.XAxisCollection.IndexOf(NationalInstruments.UI.XAxis)">
      <summary>
            Returns the zero-based index of the first occurrence of an item in the collection.
            </summary>
      <param name="item">
            Item to search for.
            </param>
      <returns>
            Index of the item. If the item is not found, returns -1.
            </returns>
    </member>
    <member name="M:NationalInstruments.UI.XAxisCollection.Insert(System.Int32,NationalInstruments.UI.XAxis)">
      <summary>
            Inserts an item into the collection at the specified index.
            </summary>
      <param name="index">
            Index to insert the item at.
            </param>
      <param name="item">
            Item to insert into the collection.
            </param>
      <exception cref="T:System.ArgumentNullException">item (parameter) is null.
            </exception>
      <exception cref="T:System.NotSupportedException">item (parameter) has been disposed.
            
            -or-
            item (parameter) is in another XAxisCollection.
            
            -or-
            item (parameter) is already in this collection.
            </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">index (parameter) is less than zero.
            
            -or-
            

index (parameter) is greater than Count.
            


            -or-
            index (parameter) is greater than Count.
            </exception>
    </member>
    <member name="M:NationalInstruments.UI.XAxisCollection.GetEnumerator">
      <summary>
            Returns an enumerator that you can use to iterate through the collection.
            </summary>
      <returns>
            The enumerator for the collection.
            </returns>
    </member>
    <member name="M:NationalInstruments.UI.XAxisCollection.Remove(NationalInstruments.UI.XAxis)">
      <summary>
            Removes the first occurrence of the specified item.
            </summary>
      <param name="item">
            Item to remove from the collection.
            </param>
    </member>
    <member name="M:NationalInstruments.UI.XAxisCollection.RemoveAt(System.Int32)">
      <summary>
            Removes the item at the specified index.
            </summary>
      <param name="index">
            The zero-based index of the item to remove.
            </param>
      <exception cref="T:System.ArgumentOutOfRangeException">index (parameter) is less than zero.
            
            -or-
            

index (parameter) is greater than or equal to Count.
            


            -or-
            index (parameter) is greater than or equal to Count.
            </exception>
    </member>
    <member name="P:NationalInstruments.UI.XAxisCollection.Item(System.Int32)">
      <summary>
            Gets or sets the XAxis at the specified index. 
            </summary>
      <param name="index">
            The zero-based index of the entry to locate in the collection.
            </param>
      <exception cref="T:System.ArgumentNullException">
            	The value is null.
            </exception>
      <exception cref="T:System.NotSupportedException">
            		The value has been disposed.
            
            -or-
            
            		The value is in another XAxisCollection.
            
            -or-
            
            		The value is already in this collection.
            </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">index (parameter) is less than zero.
            
            -or-
            

index (parameter) is greater than Count.
            


            -or-
            index (parameter) is greater than Count.
            </exception>
    </member>
    <member name="P:NationalInstruments.UI.XAxisCollection.Count">
      <summary>
            Gets the number of elements in the XAxisCollection.
            </summary>
    </member>
    <member name="P:NationalInstruments.UI.XAxisCollection.IsSynchronized">
      <summary>
            Gets a value indicating whether access to the collection is synchronized
            (thread-safe).
            </summary>
    </member>
    <member name="P:NationalInstruments.UI.XAxisCollection.IsFixedSize">
      <summary>
            Gets a value indicating whether the collection has a fixed size.
            </summary>
    </member>
    <member name="P:NationalInstruments.UI.XAxisCollection.IsReadOnly">
      <summary>
            Gets a value indicating whether the collection is read-only.
            </summary>
    </member>
    <member name="P:NationalInstruments.UI.XAxisCollection.SyncRoot">
      <summary>
            Gets an object that can be used to synchronize access to the collection.
            </summary>
    </member>
    <member name="T:NationalInstruments.UI.SelectionStyleDrawArgs">
      <summary>
            Provides data for drawing selection styles.
            </summary>
    </member>
    <member name="M:NationalInstruments.UI.SelectionStyleDrawArgs.#ctor(System.Drawing.Graphics,System.Drawing.Rectangle,System.Drawing.Color)">
      <summary>
            Initializes a new instance of the SelectionStyleDrawArgs
            class with the specified graphics surface, selection rectangle, and selection color.
            </summary>
      <param name="graphics">
            The Graphics with which to draw.
            </param>
      <param name="bounds">
            The Rectangle in which the selection is drawn.
            </param>
      <param name="color">
            The Color of the selection.
            </param>
      <exception cref="T:System.ArgumentNullException">graphics (parameter) is null.
            </exception>
    </member>
    <member name="M:NationalInstruments.UI.SelectionStyleDrawArgs.ToString">
      <summary>
            Returns a string representation of the object.
            </summary>
      <returns>
            A string representation of the object.
            </returns>
    </member>
    <member name="P:NationalInstruments.UI.SelectionStyleDrawArgs.Bounds">
      <summary>
            Gets the rectangle in which the selection is drawn.
            </summary>
    </member>
    <member name="P:NationalInstruments.UI.SelectionStyleDrawArgs.Color">
      <summary>
            Gets the color of the selection.
            </summary>
    </member>
    <member name="T:NationalInstruments.UI.PropertyEditorSourceValueWarningHint">
      <summary>
            Specifies a value indicating the cause of the warning.
            </summary>
    </member>
    <member name="F:NationalInstruments.UI.PropertyEditorSourceValueWarningHint.TypeConverterNotFound">
      <summary>
            The TypeConverter for the object type
            could not be found.
            </summary>
    </member>
    <member name="F:NationalInstruments.UI.PropertyEditorSourceValueWarningHint.ConvertFromStringNotSupported">
      <summary>
            The TypeConverter does not support
            conversion to an object from a string.
            </summary>
    </member>
    <member name="F:NationalInstruments.UI.PropertyEditorSourceValueWarningHint.StringIsInvalid">
      <summary>
            The TypeConverter could not convert
            the specified string to an object of the expected type. An exception
            may have been thrown.
            </summary>
    </member>
    <member name="F:NationalInstruments.UI.PropertyEditorSourceValueWarningHint.ObjectIsInvalid">
      <summary>
            The object converted from the string is an invalid value for
            the specified property.
            </summary>
    </member>
    <member name="T:NationalInstruments.UI.NumericScalePosition">
      <summary>
            Specifies the position of the scale with respect to the fill area in a linear numeric pointer.
            </summary>
    </member>
    <member name="F:NationalInstruments.UI.NumericScalePosition.Bottom">
      <summary>
            The scale is positioned at the bottom of the fill area.
            </summary>
    </member>
    <member name="F:NationalInstruments.UI.NumericScalePosition.Top">
      <summary>
            The scale is positioned at the top of the fill area.
            </summary>
    </member>
    <member name="F:NationalInstruments.UI.NumericScalePosition.TopBottom">
      <summary>
            The scale is positioned at the top and bottom of the fill area.
            </summary>
    </member>
    <member name="F:NationalInstruments.UI.NumericScalePosition.Left">
      <summary>
            The scale is positioned at the left of the fill area.
            </summary>
    </member>
    <member name="F:NationalInstruments.UI.NumericScalePosition.Right">
      <summary>
            The scale is positioned at the right of the fill area.
            </summary>
    </member>
    <member name="F:NationalInstruments.UI.NumericScalePosition.LeftRight">
      <summary>
            The scale is positioned at the left and right of the fill area.
            </summary>
    </member>
    <member name="T:NationalInstruments.UI.NumericFormatMode">
      <summary>
            Provides an abstract base class that defines a set of methods used to format and validate numeric values.
            </summary>
    </member>
    <member name="M:NationalInstruments.UI.NumericFormatMode.#ctor">
      <summary>
            Initializes an instance of the NumericFormatMode class.
            </summary>
    </member>
    <member name="M:NationalInstruments.UI.NumericFormatMode.FormatValue(System.Object,NationalInstruments.UI.NumericFormatModeArgs)">
      <summary>
            Converts a numeric value into its string representation.
            </summary>
      <param name="context">
            The object that specifies the context in which FormatValue is called.
            </param>
      <param name="args">
            A NumericFormatModeArgs containing information about the value to format.
            </param>
      <returns>
            A String representing the formatted value.
            </returns>
      <exception cref="T:System.ArgumentNullException">args (parameter) is null.
            </exception>
    </member>
    <member name="M:NationalInstruments.UI.NumericFormatMode.TryParse(System.String,System.Double@)">
      <summary>
            Converts the string representation of a number to its double-precision floating-point number equivalent.
            </summary>
      <param name="s">
            The formatted string to parse.
            </param>
      <param name="value">
            Upon return, contains the parsed value.
            </param>
      <returns>true if the string was parsed successfully.
            </returns>
    </member>
    <member name="M:NationalInstruments.UI.NumericFormatMode.IsValidChange(NationalInstruments.UI.NumericEditChangeArgs)">
      <summary>
            Validates a change made to the text of an object.
            </summary>
      <param name="changeArgs">
            A NumericEditChangeArgs that contains information about the change.
            </param>
      <returns>true if the string was parsed successfully.
            </returns>
    </member>
    <member name="M:NationalInstruments.UI.NumericFormatMode.ToString">
      <summary>
            Returns a string representation of the object.
            </summary>
      <returns>
            A string representation of the object.
            </returns>
    </member>
    <member name="M:NationalInstruments.UI.NumericFormatMode.CanParse(System.String)">
      <summary>
            Determines if a formatted string can be parsed by the TryParse method of the current format mode.
            </summary>
      <param name="s">
            The formatted string to parse.
            </param>
      <returns>true if the string was parsed successfully.
            </returns>
    </member>
    <member name="M:NationalInstruments.UI.NumericFormatMode.CreateGenericMode(System.String)">
      <summary>
            Creates a NumericFormatMode that formats numeric values using a numeric format supported by NumberFormatInfo.
            </summary>
      <param name="format">
            Any valid format string that is supported by NumberFormatInfo.
            </param>
      <returns>
            A NumericFormatMode that formats values according to format (parameter).
            </returns>
      <exception cref="T:System.ArgumentNullException">format (parameter) is null.
            </exception>
    </member>
    <member name="M:NationalInstruments.UI.NumericFormatMode.CreateGenericMode(System.String,System.IFormatProvider)">
      <summary>
            Creates a NumericFormatMode with the specified format provider that formats numeric values using a numeric format supported by NumberFormatInfo.
            </summary>
      <param name="format">
            Any valid format string that is supported by NumberFormatInfo.
            </param>
      <param name="formatProvider">
            The IFormatProvider object to use for formatting. IFormatProvider is typically used to supply culture-specific formatting information.
            </param>
      <returns>
            A NumericFormatMode that formats values according to format (parameter).
            </returns>
      <exception cref="T:System.ArgumentNullException">format (parameter) is null.
            </exception>
    </member>
    <member name="M:NationalInstruments.UI.NumericFormatMode.CreateEngineeringMode(System.String)">
      <summary>
            Creates a NumericFormatMode that formats numeric values using an engineering notation.
            </summary>
      <param name="format">
            The EngineeringFormatInfo formatting string to use.
            </param>
      <returns>
            A NumericFormatMode that formats values according to format (parameter).
            </returns>
      <exception cref="T:System.ArgumentNullException">format (parameter) is null.
            </exception>
    </member>
    <member name="M:NationalInstruments.UI.NumericFormatMode.CreateEngineeringMode(System.String,System.Boolean)">
      <summary>
            Creates a NumericFormatMode that formats numeric values using an engineering notation.
            </summary>
      <param name="format">
            The EngineeringFormatInfo string to use for formatting.
            </param>
      <param name="wysiwygEditing">true if what you see is what you get (WYSIWYG) editing is enabled.
            </param>
      <returns>
            A NumericFormatMode that formats values according to format (parameter).
            </returns>
      <exception cref="T:System.ArgumentNullException">format (parameter) is null.
            </exception>
    </member>
    <member name="M:NationalInstruments.UI.NumericFormatMode.CreateEngineeringMode(System.String,System.IFormatProvider)">
      <summary>
            Creates a NumericFormatMode with the specified format provider that formats numeric values using an engineering notation.
            </summary>
      <param name="format">
            The EngineeringFormatInfo string to use for formatting.
            </param>
      <param name="formatProvider">
            The IFormatProvider object to use for formatting. IFormatProvider is typically used for culture-specific formatting information.
            </param>
      <returns>
            A NumericFormatMode that formats values according to format (parameter).
            </returns>
      <exception cref="T:System.ArgumentNullException">format (parameter) is null.
            </exception>
    </member>
    <member name="M:NationalInstruments.UI.NumericFormatMode.CreateEngineeringMode(System.String,System.IFormatProvider,System.Boolean)">
      <summary>
            Creates a NumericFormatMode with the specified format provider and editing mode
            that formats numeric values using an engineering notation.
            </summary>
      <param name="format">
            The EngineeringFormatInfo string to use for formatting.
            </param>
      <param name="formatProvider">
            The IFormatProvider object to use for formatting. IFormatProvider is typically used for culture-specific formatting information.
            </param>
      <param name="wysiwygEditing">true if what you see is what you get (WYSIWYG) editing is enabled.
            </param>
      <returns>
            A NumericFormatMode that formats values according to format (parameter)
            using the specified formatProvider (parameter).
            </returns>
      <exception cref="T:System.ArgumentNullException">format (parameter) is null.
            </exception>
    </member>
    <member name="M:NationalInstruments.UI.NumericFormatMode.CreateSimpleDoubleMode">
      <summary>
            Creates a NumericFormatMode that formats and validates numeric values using a basic number representation.
            </summary>
      <returns>
            A NumericFormatMode that formats values as simple double numbers with a precision of 1 and CurrentCulture.
            </returns>
    </member>
    <member name="M:NationalInstruments.UI.NumericFormatMode.CreateSimpleDoubleMode(System.Int32)">
      <summary>
            Creates a NumericFormatMode with the specified precision that formats and validates numeric values using a basic number representation.
            </summary>
      <param name="precision">
            The number of digits to display after the decimal point in a formatted value.
            </param>
      <returns>
            A NumericFormatMode that formats values as simple double numbers 
            with the specified precision (parameter) and CurrentCulture.
            </returns>
      <exception cref="T:System.ArgumentOutOfRangeException">precision (parameter) is less than zero.
            </exception>
    </member>
    <member name="M:NationalInstruments.UI.NumericFormatMode.CreateSimpleDoubleMode(System.Int32,System.IFormatProvider)">
      <summary>
            Creates a NumericFormatMode with the specified precision and format provider that formats and validates numeric values using a basic number representation.
            </summary>
      <param name="precision">
            The number of digits to display after the decimal point in a formatted value.
            </param>
      <param name="formatProvider">
            The IFormatProvider object to use for formatting. IFormatProvider is typically used to supply culture-specific formatting information.
            </param>
      <returns>
            A NumericFormatMode that formats values as simple double numbers 
            with the specified precision (parameter) and specified formatProvider (parameter).
            </returns>
      <exception cref="T:System.ArgumentOutOfRangeException">precision (parameter) is less than zero.
            </exception>
      <exception cref="T:System.ArgumentNullException">formatProvider (parameter) is null.
            </exception>
    </member>
    <member name="M:NationalInstruments.UI.NumericFormatMode.CreateHexadecimalMode">
      <summary>
            Creates a NumericFormatMode that formats and validates numeric values using a hexadecimal representation.
            </summary>
      <returns>
            A NumericFormatMode that formats values as hexadecimal numbers 
            using a padding of 4, uppercase characters,  and CurrentCulture.
            </returns>
    </member>
    <member name="M:NationalInstruments.UI.NumericFormatMode.CreateHexadecimalMode(System.Int32)">
      <summary>
            Creates a NumericFormatMode with the specified padding that formats and validates numeric values using a hexadecimal representation.
            </summary>
      <param name="padding">
            The minimum number of digits that must exist in a formatted value.
            </param>
      <returns>
            A NumericFormatMode that formats values as hexadecimal numbers 
            using the specified padding (parameter), uppercase characters, and CurrentCulture.
            </returns>
      <exception cref="T:System.ArgumentOutOfRangeException">padding (parameter) is less than zero.
            </exception>
    </member>
    <member name="M:NationalInstruments.UI.NumericFormatMode.CreateHexadecimalMode(System.Int32,System.Boolean)">
      <summary>
            Creates a NumericFormatMode with the specified padding and character 
            case that formats and validates numeric values using a hexadecimal representation.
            </summary>
      <param name="padding">
            The minimum number of digits that must exist in a formatted value.
            </param>
      <param name="uppercase">true if the characters in the formatting string are uppercase.
            </param>
      <returns>
            A NumericFormatMode that formats values as hexadecimal numbers using the specified padding (parameter), specified value of uppercase (parameter), and CurrentCulture.
            </returns>
      <exception cref="T:System.ArgumentOutOfRangeException">padding (parameter) is less than zero.
            </exception>
    </member>
    <member name="M:NationalInstruments.UI.NumericFormatMode.CreateHexadecimalMode(System.Int32,System.Boolean,System.IFormatProvider)">
      <summary>
            Creates a NumericFormatMode with the specified padding, character 
            case, and format provider that formats and validates numeric values using a hexadecimal representation.
            </summary>
      <param name="padding">
            The minimum number of digits that must exist in a formatted value.
            </param>
      <param name="uppercase">true if the characters in the formatting string are uppercase.
            </param>
      <param name="formatProvider">
            The IFormatProvider object to use for formatting. IFormatProvider is typically used to supply culture-specific formatting information.
            </param>
      <returns>
            A NumericFormatMode that formats values as hexadecimal numbers 
            using the specified padding (parameter), specified value of uppercase (parameter), and 
            specified formatProvider (parameter).
            </returns>
      <exception cref="T:System.ArgumentOutOfRangeException">padding (parameter) is less than zero.
            </exception>
      <exception cref="T:System.ArgumentNullException">formatProvider (parameter) is null.
            </exception>
    </member>
    <member name="M:NationalInstruments.UI.NumericFormatMode.CreateBinaryMode">
      <summary>
            Creates a NumericFormatMode that formats and validates numeric values using a binary representation.
            </summary>
      <returns>
            A NumericFormatMode that formats values as binary numbers using a padding of 8 and CurrentCulture.
            </returns>
    </member>
    <member name="M:NationalInstruments.UI.NumericFormatMode.CreateBinaryMode(System.Int32)">
      <summary>
            Creates a NumericFormatMode with the specified padding that formats and validates numeric values using a binary representation.
            </summary>
      <param name="padding">
            The minimum number of digits that must exist in a formatted value.
            </param>
      <returns>
            A NumericFormatMode that formats values as binary numbers using the specified padding (parameter) and CurrentCulture.
            </returns>
      <exception cref="T:System.ArgumentOutOfRangeException">padding (parameter) is less than zero.
            </exception>
    </member>
    <member name="M:NationalInstruments.UI.NumericFormatMode.CreateBinaryMode(System.Int32,System.IFormatProvider)">
      <summary>
            Creates a NumericFormatMode with the specified padding and format provider that formats and validates numeric values using a binary representation.
            </summary>
      <param name="padding">
            The minimum number of digits that must exist in a formatted value.
            </param>
      <param name="formatProvider">
            The IFormatProvider object to use for formatting. IFormatProvider is typically used to supply culture-specific formatting information.
            </param>
      <returns>
            A NumericFormatMode that formats values as binary numbers using the specified padding (parameter) and formatProvider (parameter).
            </returns>
      <exception cref="T:System.ArgumentOutOfRangeException">padding (parameter) is less than zero.
            </exception>
      <exception cref="T:System.ArgumentNullException">formatProvider (parameter) is null.
            </exception>
    </member>
    <member name="M:NationalInstruments.UI.NumericFormatMode.CreateScientificMode">
      <summary>
            Creates a NumericFormatMode that formats and validates numeric values using a scientific notation.
            </summary>
      <returns>
            A NumericFormatMode that formats values using scientific notation with a precision of 6.
            </returns>
    </member>
    <member name="M:NationalInstruments.UI.NumericFormatMode.CreateScientificMode(System.Int32)">
      <summary>
            Creates a NumericFormatMode with the specified precision that formats and validates numeric values using a scientific notation.
            </summary>
      <param name="precision">
            The number of digits to display after the decimal point in a formatted value.
            </param>
      <returns>
            A NumericFormatMode that formats values to use scientific 
            notation with the specified precision (parameter).
            </returns>
      <exception cref="T:System.ArgumentOutOfRangeException">precision (parameter) is less than zero.
            </exception>
    </member>
    <member name="M:NationalInstruments.UI.NumericFormatMode.CreateScientificMode(System.Int32,System.Boolean)">
      <summary>
            Creates a NumericFormatMode with the specified precision and character 
            case that formats and validates numeric values using a scientific notation.
            </summary>
      <param name="precision">
            The number of digits to display after the decimal point in a formatted value.
            </param>
      <param name="uppercase">true if the formatted value uses an uppercase E.
            </param>
      <returns>
            A NumericFormatMode that formats values to use scientific notation 
            with the specified precision (parameter) and specified value of uppercase (parameter).
            </returns>
      <exception cref="T:System.ArgumentOutOfRangeException">precision (parameter) is less than zero.
            </exception>
    </member>
    <member name="M:NationalInstruments.UI.NumericFormatMode.CreateScientificMode(System.Int32,System.Boolean,System.IFormatProvider)">
      <summary>
            Creates a NumericFormatMode with the specified precision, character 
            case, and format provider that formats and validates numeric values using a scientific notation.
            </summary>
      <param name="precision">
            The number of digits to display after the decimal point in a formatted value.
            </param>
      <param name="uppercase">true if the formatted value uses an uppercase E.
            </param>
      <param name="formatProvider">
            The IFormatProvider object to use for formatting. IFormatProvider is typically used to supply culture-specific formatting information.</param>
      <returns>
            A NumericFormatMode that formats values to use scientific notation 
            with the specified precision (parameter), specified value of uppercase (parameter), and 
            specified formatProvider (parameter).
            </returns>
      <exception cref="T:System.ArgumentOutOfRangeException">precision (parameter) is less than zero.
            </exception>
      <exception cref="T:System.ArgumentNullException">formatProvider (parameter) is null.
            </exception>
    </member>
    <member name="M:NationalInstruments.UI.NumericFormatMode.GetService(System.Type)">
      <summary>
            Gets the service object of the specified type.
            </summary>
      <param name="serviceType">
            An Object that specifies the type of service object to get.
            </param>
      <returns>
            A service of type serviceType (parameter), or null
            if there is no object of type serviceType (parameter).
            </returns>
    </member>
    <member name="T:NationalInstruments.UI.IntensityColorMap">
      <summary>
            Represents a strongly typed collection of ColorMapEntry objects.
            </summary>
    </member>
    <member name="M:NationalInstruments.UI.IntensityColorMap.#ctor">
      <summary>
            Initializes a new instance of the IntensityColorMap class.
            </summary>
    </member>
    <member name="M:NationalInstruments.UI.IntensityColorMap.#ctor(NationalInstruments.UI.ColorMapEntry[])">
      <summary>
            Initializes a new instance of the IntensityColorMap class
            from an array of ColorMapEntry objects.
            </summary>
      <param name="items">
            Array of ColorMapEntry objects to copy.
            </param>
      <exception cref="T:System.ArgumentNullException">items (parameter) is null.
                
                    -or-
                
                    An element in items (parameter) is null.
                </exception>
    </member>
    <member name="M:NationalInstruments.UI.IntensityColorMap.#ctor(System.Double[],System.Drawing.Color[])">
      <summary>
            Initializes a new instance of the IntensityColorMap class
            from arrays of values and colors.
            </summary>
      <param name="values">
            Array of double values to copy.
            </param>
      <param name="colors">
            Array of Color objects to copy.
            </param>
      <exception cref="T:System.ArgumentException">values (parameter) is null.
                   
                           -or-
                   colors (parameter) is null.
                </exception>
      <exception cref="T:System.ArgumentException">
            Array lengths of values (parameter) and colors (parameter) are not equal.
            </exception>
    </member>
    <member name="M:NationalInstruments.UI.IntensityColorMap.Add(NationalInstruments.UI.ColorMapEntry)">
      <summary>
            Adds the specified item to the collection in the sorted position. 
            </summary>
      <param name="item">
            Item to add to the collection.
            </param>
      <returns>
            The index at which the item is added.
            </returns>
      <exception cref="T:System.ArgumentNullException">item (parameter) is null.
            </exception>
    </member>
    <member name="M:NationalInstruments.UI.IntensityColorMap.Add(System.Double,System.Drawing.Color)">
      <summary>
            Adds the specified item to the collection in the sorted position. </summary>
      <param name="value">
            Specifies the Value of the new ColorMapEntry element that is created and added.
            </param>
      <param name="color">
            Specifies the Color of the new ColorMapEntry element that is created and added.
            </param>
      <returns>
            The index at which the item is added.
            </returns>
    </member>
    <member name="M:NationalInstruments.UI.IntensityColorMap.AddRange(NationalInstruments.UI.ColorMapEntry[])">
      <summary>
            Adds the specified array of ColorMapEntry objects to the collection. 
            </summary>
      <param name="item">
            Array of ColorMapEntry objects to add to the collection.
            </param>
      <exception cref="T:System.ArgumentNullException">item (parameter) is null.
            
            -or-
            
            An element in item (parameter) is null.
            </exception>
    </member>
    <member name="M:NationalInstruments.UI.IntensityColorMap.AddRange(NationalInstruments.UI.IntensityColorMap)">
      <summary>
            Adds the specified collection of ColorMapEntry objects to the collection. 
            </summary>
      <param name="item">
            Collection of ColorMapEntry objects to add to the collection.
            </param>
      <exception cref="T:System.ArgumentNullException">item (parameter) is null.
            
            -or-
            
            An element in item (parameter) is null.
            </exception>
    </member>
    <member name="M:NationalInstruments.UI.IntensityColorMap.Clear">
      <summary>
            Removes all items from the collection.
            </summary>
    </member>
    <member name="M:NationalInstruments.UI.IntensityColorMap.Contains(NationalInstruments.UI.ColorMapEntry)">
      <summary>
            Determines if the specified element is in the collection.
            </summary>
      <param name="item">Item to locate in the collection.</param>
      <returns>true if the collection contains item (parameter).
            </returns>
    </member>
    <member name="M:NationalInstruments.UI.IntensityColorMap.Contains(System.Double)">
      <summary>
            Determines if an item with specified value (parameter) is in the collection.
            </summary>
      <param name="value">The value of an ColorMapEntry to locate in the collection.</param>
      <returns>true if the collection contains value (parameter).
            </returns>
    </member>
    <member name="M:NationalInstruments.UI.IntensityColorMap.CopyTo(NationalInstruments.UI.ColorMapEntry[],System.Int32)">
      <summary>
            Copies the collection to an array or a portion of an array.
            </summary>
      <param name="array">
            Destination array for the collection.
            </param>
      <param name="index">
            The index in the target array at which you want to begin copying the collection to.
            </param>
      <exception cref="T:System.ArgumentNullException">array (parameter) is null.
            </exception>
      <exception cref="T:System.ArgumentException">array (parameter) is multidimensional.
                
                    - or -
                index (parameter) is equal to or greater than the length of array (parameter).
                
                    -or-
                
                    The number of elements in the collection is greater than the available space between
                    index (parameter) and the end of array (parameter).
                </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">index (parameter) is less than the lower bound of array (parameter).
            </exception>
    </member>
    <member name="M:NationalInstruments.UI.IntensityColorMap.IndexOf(NationalInstruments.UI.ColorMapEntry)">
      <summary>
            Returns the zero-based index of the item in the collection.
            </summary>
      <param name="item">
            Item to search for.
            </param>
      <returns>
            Index of the item. If the item is not found, returns -1.
            </returns>
    </member>
    <member name="M:NationalInstruments.UI.IntensityColorMap.IndexOf(System.Double)">
      <summary>
            Returns the zero-based index of the item with Value equal to value (parameter) in the collection.
            </summary>
      <param name="value">
            The value of an item to be searched.
            </param>
      <returns>
            Index of the item. If the item is not found, returns -1.
            </returns>
    </member>
    <member name="M:NationalInstruments.UI.IntensityColorMap.Remove(NationalInstruments.UI.ColorMapEntry)">
      <summary>
            Removes the specified item.
            </summary>
      <param name="item">
            Item to remove from the color map.
            </param>
    </member>
    <member name="M:NationalInstruments.UI.IntensityColorMap.Remove(System.Double)">
      <summary>
            Removes the item with Value equal to value (parameter)</summary>
      <param name="value">
            The value of ColorMapEntry that is removed from the collection. 
            </param>
    </member>
    <member name="M:NationalInstruments.UI.IntensityColorMap.RemoveAt(System.Int32)">
      <summary>
            Removes the item at the specified index.
            </summary>
      <param name="index">
            The zero-based index of the item to remove.
            </param>
      <exception cref="T:System.ArgumentOutOfRangeException">index (parameter) is less than zero.
            
            -or-
            

index (parameter) is greater than or equal to Count.
            


            -or-
            index (parameter) is greater than or equal to Count.
            </exception>
    </member>
    <member name="M:NationalInstruments.UI.IntensityColorMap.GetHashCode">
      <summary>
            Returns a hash code for this object.
            </summary>
      <returns>
            A 32-bit signed integer hash code.
            </returns>
    </member>
    <member name="M:NationalInstruments.UI.IntensityColorMap.ToString">
      <summary>
            Returns a string representation of the object.
            </summary>
      <returns>
            A string representation of the object.
            </returns>
    </member>
    <member name="M:NationalInstruments.UI.IntensityColorMap.OnCollectionChanged(System.ComponentModel.CollectionChangeEventArgs)">
      <summary>
            Raises the CollectionChanged event.
            </summary>
      <param name="e">
            An CollectionChangeEventArgs that contains the 
            event data.
            </param>
    </member>
    <member name="M:NationalInstruments.UI.IntensityColorMap.System#Collections#IList#IndexOf(System.Object)">
      <summary>
            Determines the index of a specific item in IList.
            </summary>
      <param name="item">
            The object to locate in IList.
            </param>
      <returns>
            The index of item (parameter) if found in the list; otherwise, -1.
            </returns>
    </member>
    <member name="M:NationalInstruments.UI.IntensityColorMap.System#Collections#IList#Insert(System.Int32,System.Object)">
      <summary>
            Adds the specified item to the collection.
            </summary>
      <param name="index">
            This parameter is ignored.
            </param>
      <param name="item">
            Item to add to the collection.
            </param>
      <returns>
            The index at which the item is added.
            </returns>
      <exception cref="T:System.ArgumentNullException">item (parameter) is null.
            </exception>
    </member>
    <member name="M:NationalInstruments.UI.IntensityColorMap.System#Collections#Generic#IList{NationalInstruments#UI#ColorMapEntry}#IndexOf(NationalInstruments.UI.ColorMapEntry)">
      <summary>
            Determines the index of a specific item in IList&lt;T&gt;.
            </summary>
      <param name="item">
            The object to locate in IList&lt;T&gt;.
            </param>
      <returns>
            The index of item (parameter) if found in the list; otherwise, -1.
            </returns>
    </member>
    <member name="M:NationalInstruments.UI.IntensityColorMap.System#Collections#Generic#IList{NationalInstruments#UI#ColorMapEntry}#Insert(System.Int32,NationalInstruments.UI.ColorMapEntry)">
      <summary>
            Adds an item to the collection in the position sorted based on 
            Value. 
            If the item with the same Value 
            already exists in the collection then the existing element is replaced 
            by item (parameter).
            Note that the item will be added not inserted.
            </summary>
      <param name="index">
            This parameter is simply ignored.
            </param>
      <param name="item">
            Item to add to the collection.
            </param>
      <returns>
            The index at which the item is added.
            </returns>
      <exception cref="T:System.ArgumentNullException">item (parameter) is null.
            </exception>
    </member>
    <member name="M:NationalInstruments.UI.IntensityColorMap.System#Collections#Generic#IList{NationalInstruments#UI#ColorMapEntry}#RemoveAt(System.Int32)">
      <summary>
            Removes the IList&lt;T&gt;  item at the specified index.
            </summary>
      <param name="index">
            The zero-based index of the item to remove.
            </param>
    </member>
    <member name="M:NationalInstruments.UI.IntensityColorMap.System#Collections#Generic#ICollection{NationalInstruments#UI#ColorMapEntry}#Add(NationalInstruments.UI.ColorMapEntry)">
      <summary>
            Adds an item to ICollection&lt;T&gt;.
            </summary>
      <param name="item">
            The object to add to ICollection&lt;T&gt;.</param>
    </member>
    <member name="M:NationalInstruments.UI.IntensityColorMap.System#Collections#Generic#ICollection{NationalInstruments#UI#ColorMapEntry}#Clear">
      <summary>
            Removes all items from ICollection&lt;T&gt;.
            </summary>
    </member>
    <member name="M:NationalInstruments.UI.IntensityColorMap.System#Collections#Generic#ICollection{NationalInstruments#UI#ColorMapEntry}#Contains(NationalInstruments.UI.ColorMapEntry)">
      <summary>
            Determines whether ICollection&lt;T&gt; contains a specific value.
            </summary>
      <param name="item">
            The object to locate in ICollection&lt;T&gt;. 
            </param>
      <returns>true if item (parameter) is found in ICollection&lt;T&gt;; otherwise, false.
            </returns>
    </member>
    <member name="M:NationalInstruments.UI.IntensityColorMap.System#Collections#Generic#ICollection{NationalInstruments#UI#ColorMapEntry}#CopyTo(NationalInstruments.UI.ColorMapEntry[],System.Int32)">
      <summary>
            Copies the elements of ICollection&lt;T&gt; to an Array, starting at a particular Array index.
            </summary>
      <param name="array">
            The one-dimensional Array that is the destination of the elements copied from ICollection&lt;T&gt;. The Array must have zero-based indexing.
            </param>
      <param name="arrayIndex">
            The zero-based index in array (parameter) at which copying begins.
            </param>
    </member>
    <member name="M:NationalInstruments.UI.IntensityColorMap.System#Collections#Generic#ICollection{NationalInstruments#UI#ColorMapEntry}#Remove(NationalInstruments.UI.ColorMapEntry)">
      <summary>
            Removes the first occurrence of a specific object from ICollection&lt;T&gt;.
            </summary>
      <param name="item">
            The object to remove from ICollection&lt;T&gt;.
            </param>
      <returns>true if item (parameter) was successfully removed from ICollection&lt;T&gt;; otherwise, false. This method also returns false if item (parameter) is not found in the original ICollection&lt;T&gt;.
            </returns>
    </member>
    <member name="M:NationalInstruments.UI.IntensityColorMap.System#Collections#Generic#IEnumerable{NationalInstruments#UI#ColorMapEntry}#GetEnumerator">
      <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
      <returns>
            An IEnumerator&lt;T&gt; that can be used to iterate through the collection.
            </returns>
    </member>
    <member name="P:NationalInstruments.UI.IntensityColorMap.Item(System.Int32)">
      <summary>
            Gets the ColorMapEntry at the specified index. 
            </summary>
      <param name="index">
            The zero-based index of the entry to locate in the collection.
            </param>
      <exception cref="T:System.ArgumentNullException">
            	The value is null.
            </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">index (parameter) is less than zero.
            
            -or-
            

index (parameter) is greater than or equal to Count.
            


            -or-
            index (parameter) is greater than or equal to Count.
            </exception>
    </member>
    <member name="P:NationalInstruments.UI.IntensityColorMap.Count">
      <summary>
            Gets the number of elements in the IntensityColorMap.
            </summary>
    </member>
    <member name="E:NationalInstruments.UI.IntensityColorMap.CollectionChanged">
      <summary>
            Occurs when the collection is modified by either adding or removing single or multiple items.
            </summary>
    </member>
    <member name="P:NationalInstruments.UI.IntensityColorMap.System#Collections#Generic#IList{NationalInstruments#UI#ColorMapEntry}#Item(System.Int32)">
      <summary>
            Gets the element at the specified index.
            </summary>
      <param name="index">
            The zero-based index of the entry to locate in the collection.
            </param>
      <exception cref="T:System.InvalidOperationException">
            The set accessor is called.
            	</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">index (parameter) is less than zero.
            	</exception>
    </member>
    <member name="P:NationalInstruments.UI.IntensityColorMap.System#Collections#Generic#ICollection{NationalInstruments#UI#ColorMapEntry}#Count">
      <summary>
            Gets the number of elements contained in ICollection&lt;T&gt;.
            </summary>
    </member>
    <member name="P:NationalInstruments.UI.IntensityColorMap.System#Collections#Generic#ICollection{NationalInstruments#UI#ColorMapEntry}#IsReadOnly">
      <summary>
            Gets a value indicating whether the ICollection&lt;T&gt; is read-only.
            </summary>
    </member>
    <member name="T:NationalInstruments.UI.DrawImageEventHandler">
      <summary>
            Represents the method that handles image drawing events in a control.
            </summary>
      <param name="sender">
            The source of the event.
            </param>
      <param name="e">
            A DrawImageEventArgs that contains the event data.
            </param>
    </member>
    <member name="T:NationalInstruments.UI.DigitalWaveformGraphDisplayMode">
      <summary>
            Specifies whether the digital waveform graph displays both digital and waveform signals or only digital signals.
            </summary>
    </member>
    <member name="F:NationalInstruments.UI.DigitalWaveformGraphDisplayMode.Signals">
      <summary>
            Only the digital signals are displayed.
            </summary>
    </member>
    <member name="F:NationalInstruments.UI.DigitalWaveformGraphDisplayMode.WaveformAndSignals">
      <summary>
            Digital signals and waveform signals are displayed.
            </summary>
    </member>
    <member name="T:NationalInstruments.UI.DigitalStateTransitionStyleDrawArgs">
      <summary>
            Provides data for drawing the transition of digital states with the DigitalStateTransitionStyle class.
            </summary>
    </member>
    <member name="M:NationalInstruments.UI.DigitalStateTransitionStyleDrawArgs.#ctor(System.Drawing.Graphics,System.Drawing.Color,System.Single,System.Int32,NationalInstruments.DigitalState,NationalInstruments.DigitalState,NationalInstruments.DigitalWaveformSample,NationalInstruments.DigitalWaveformSample,System.Object,System.Object,System.Drawing.PointF[],System.Drawing.PointF[])">
      <summary>
            Initializes a new instance of the DigitalTransitionStyleDrawArgs class with the specified graphics,
            line color, line width, signal index, previous state, next state, previous sample, next sample, previous tag, next tag,
            previous points, and next points.
            </summary>
      <param name="graphics">
            The Graphics used to draw the style.
            </param>
      <param name="lineColor">
            The Color of the line to draw.
            </param>
      <param name="lineWidth">
            The width of the line to draw.
            </param>
      <param name="signalIndex">
            The DigitalWaveform signal index.
            </param>
      <param name="previousState">
            The DigitalState before the transition.
            </param>
      <param name="nextState">
            The DigitalState after the transition.
            </param>
      <param name="previousSample">
            The DigitalWaveformSample before the transition. 
            </param>
      <param name="nextSample">
            The DigitalWaveformSample after the transition.
            </param>
      <param name="previousTag">
            The Object value of the tag before the transition.
            </param>
      <param name="nextTag">
            The Object value of the tag after the transition.
            </param>
      <param name="previousPoints">
            The PointF array containing the points before the transition.
            </param>
      <param name="nextPoints">
            The PointF array containing the points after the transition.
            </param>
      <exception cref="T:System.ArgumentOutOfRangeException">lineWidth (parameter) is less than or equal to zero.
            
            -or-
            signalIndex (parameter) is less than zero.
            </exception>
      <exception cref="T:System.ArgumentNullException">previousSample (parameter) is null.
            
            -or-
            nextSample (parameter) is null.
            
            -or-
            previousPoints (parameter) is null.
            
            -or-
            nextPoints (parameter) is null.
            </exception>
      <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">nextState (parameter) is an invalid DigitalState value.
            
            -or-
            previousState (parameter) is an invalid DigitalState value.
            </exception>
    </member>
    <member name="P:NationalInstruments.UI.DigitalStateTransitionStyleDrawArgs.SignalIndex">
      <summary>
            Gets the signal index of the signal being drawn.
            </summary>
    </member>
    <member name="P:NationalInstruments.UI.DigitalStateTransitionStyleDrawArgs.PreviousState">
      <summary>
            Gets the digital state after the transition.
            </summary>
    </member>
    <member name="P:NationalInstruments.UI.DigitalStateTransitionStyleDrawArgs.NextState">
      <summary>
            Gets the digital state before the transition.
            </summary>
    </member>
    <member name="T:NationalInstruments.UI.CursorSnapMode">
      <summary>
            Specifies how the cursor behaves when it is moved.
            </summary>
    </member>
    <member name="F:NationalInstruments.UI.CursorSnapMode.Fixed">
      <summary>
            The cursor can only be moved programmatically.
            The Cursor does not respond to the mouse.
            When it is moved programmatically, the cursor behaves as if the snap mode is set to
            Floating.
            </summary>
    </member>
    <member name="F:NationalInstruments.UI.CursorSnapMode.Floating">
      <summary>
            The cursor is set independent of any plot. You can move the cursor anywhere
            in the plot area.
            </summary>
    </member>
    <member name="F:NationalInstruments.UI.CursorSnapMode.NearestPoint">
      <summary>
            The cursor snaps to the nearest point on any plot. You can move the cursor
            along any plot.
            </summary>
    </member>
    <member name="F:NationalInstruments.UI.CursorSnapMode.ToPlot">
      <summary>
            The cursor snaps to the nearest point on the associated plot. The cursor can move only along this plot.
            </summary>
    </member>
    <member name="T:NationalInstruments.UI.ComplexXAxisEventHandler">
      <summary>
            Represents the method that handles the 
            XAxisRangeChanged event.
            </summary>
      <param name="sender">
            The source of the event.
            </param>
      <param name="e">
            The ComplexXAxisEventArgs that contains the event
            data.
            </param>
    </member>
    <member name="T:NationalInstruments.UI.ComplexPointAnnotationPart">
      <summary>
            Specifies a part of a complex point annotation.
            </summary>
    </member>
    <member name="F:NationalInstruments.UI.ComplexPointAnnotationPart.Caption">
      <summary>
            The caption of a point annotation.
            </summary>
    </member>
    <member name="F:NationalInstruments.UI.ComplexPointAnnotationPart.Arrow">
      <summary>
            The arrow of a point annotation.
            </summary>
    </member>
    <member name="F:NationalInstruments.UI.ComplexPointAnnotationPart.Shape">
      <summary>
            The shape of a point annotation.
            </summary>
    </member>
    <member name="T:NationalInstruments.UI.ComplexPlotFillBase">
      <summary>
            Specifies if the fill is drawn to a base x value, base y value, or base plot.
            </summary>
    </member>
    <member name="F:NationalInstruments.UI.ComplexPlotFillBase.XValue">
      <summary>
            The base value is an x value.
            </summary>
    </member>
    <member name="F:NationalInstruments.UI.ComplexPlotFillBase.YValue">
      <summary>
            The base value is a y value.
            </summary>
    </member>
    <member name="F:NationalInstruments.UI.ComplexPlotFillBase.Plot">
      <summary>
            The base value is a plot.
            </summary>
    </member>
    <member name="T:NationalInstruments.UI.ComplexPlot">
      <summary>
            Defines a class for plotting ComplexDouble data values.
            </summary>
    </member>
    <member name="M:NationalInstruments.UI.ComplexPlot.#ctor">
      <summary>
            Initializes a new instance of the ComplexPlot class.
            </summary>
    </member>
    <member name="M:NationalInstruments.UI.ComplexPlot.#ctor(NationalInstruments.UI.ComplexXAxis,NationalInstruments.UI.ComplexYAxis)">
      <summary>
            Initializes a new instance of the ComplexPlot class with
            the specified ComplexXAxis and
            ComplexYAxis.
            </summary>
      <param name="complexXAxis">
            The ComplexXAxis to use for the plot.
            </param>
      <param name="complexYAxis">
            The ComplexYAxis to use for the plot.
            </param>
      <exception cref="T:System.ArgumentNullException">complexXAxis (parameter) is null.
            	
            -or-
            complexYAxis (parameter) is null.
            	</exception>
    </member>
    <member name="M:NationalInstruments.UI.ComplexPlot.Dispose(System.Boolean)">
      <summary>
            Releases the unmanaged resources used by the ComplexPlot 
            and optionally releases the managed resources.
            </summary>
      <param name="disposing">true to release both managed and unmanaged resources; false to release only
            unmanaged resources.
            </param>
    </member>
    <member name="M:NationalInstruments.UI.ComplexPlot.GetService(System.Type)">
      <summary>
            Gets the service object of the specified type.
            </summary>
      <param name="service">
            A service provided by the component.
            </param>
      <returns>
            An Object that represents the service provided by the component or 
            null if the component does not provide the 
            specified service.
            </returns>
    </member>
    <member name="M:NationalInstruments.UI.ComplexPlot.GetComplexData">
      <summary>
            Gets the complex data values in the history.
            </summary>
      <returns>
            A ComplexDouble array that represents the complex data values
            in the history.
            </returns>
      <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
    </member>
    <member name="M:NationalInstruments.UI.ComplexPlot.GetRealErrorHighData">
      <summary>
            Gets the complex data coordinates of the high real error points for the source data points in the plot history.
            </summary>
      <returns>
            A ComplexDouble array that represents the complex data coordinates 
            of the high real error data points.
            </returns>
      <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
    </member>
    <member name="M:NationalInstruments.UI.ComplexPlot.GetRealErrorLowData">
      <summary>
            Gets the complex data coordinates of the low real error points for the source data points in the plot history.
            </summary>
      <returns>
            A ComplexDouble array that represents the complex data coordinates 
            of the low real error data points.
            </returns>
      <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
    </member>
    <member name="M:NationalInstruments.UI.ComplexPlot.GetImaginaryErrorHighData">
      <summary>
            Gets the complex data coordinates of the high imaginary error points for the source data points in the plot history.
            </summary>
      <returns>
            A ComplexDouble array that represents the complex data coordinates 
            of the high imaginary error data points.
            </returns>
      <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
    </member>
    <member name="M:NationalInstruments.UI.ComplexPlot.GetImaginaryErrorLowData">
      <summary>
            Gets the complex data coordinates of the low imaginary error points for the source data points in the plot history.
            </summary>
      <returns>
            A ComplexDouble array that represents the complex data coordinates 
            of the low imaginary error data points.
            </returns>
      <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
    </member>
    <member name="M:NationalInstruments.UI.ComplexPlot.DrawErrorBands(NationalInstruments.UI.ComponentDrawArgs)">
      <summary>
            Draws plot error data with the specified ComponentDrawArgs.
            </summary>
      <param name="args">
            A ComponentDrawArgs that contains the drawing data.
            </param>
      <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
      <exception cref="T:System.ArgumentNullException">args (parameter) is null.
            </exception>
      <exception cref="T:System.InvalidOperationException">
              The x-axis of the plot is null.
              
              -or-
              
              The y-axis of the plot is null.
              </exception>
      <exception cref="T:System.NotSupportedException">
              The Owner of the plot is not null,
              and the Owner of the plot is
              different from the Owner of x-axis.
              
              -or-
              
              The Owner of the plot is not null,
              and the Owner of the plot is
              different from the Owner of y-axis.
              </exception>
    </member>
    <member name="M:NationalInstruments.UI.ComplexPlot.FormatDataToolTip(NationalInstruments.ComplexDouble)">
      <summary>
            Formats a complex data value as a plot data tooltip.
            </summary>
      <param name="data">
            The complex data value to format.
            </param>
      <returns>
            A String that contains the specified complex data value formatted as
            a data tooltip. The tooltip format is specified by the current value of
            ToolTipFormatString.
            </returns>
      <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
    </member>
    <member name="M:NationalInstruments.UI.ComplexPlot.GetDataPoint(System.Int32)">
      <summary>
            Gets the complex data value at the specified index in the history.
            </summary>
      <param name="index">
            The index used to get the complex data value from the history.
            </param>
      <returns>
            A ComplexDouble data value at index (parameter).
            </returns>
      <exception cref="T:System.ArgumentOutOfRangeException">index (parameter) is less than 0.
            
            -or-
            index (parameter) is greater than or equal to 
            HistoryCount.
            </exception>
    </member>
    <member name="M:NationalInstruments.UI.ComplexPlot.PlotComplex(NationalInstruments.ComplexDouble)">
      <summary>
            Plots the imaginary part against the real part of a complex data value.
            </summary>
      <param name="complexData">
            The ComplexDouble data value to plot.
            </param>
      <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
      <exception cref="T:System.InvalidOperationException">
            		The XAxis of the plot is null.
            
            -or-
            
            		The YAxis of the plot is null.
            </exception>
      <exception cref="T:System.NotSupportedException">
            The Owner of the plot is not null,
            and the Owner of the plot is
            different from the Owner of XAxis.
            
            -or-
            
            The Owner of the plot is not null,
            and the Owner of the plot is
            different from the Owner of YAxis.
            </exception>
      <exception cref="T:System.ArgumentException">The imaginary and real parts of complexData (parameter) are special values and
            	ProcessSpecialValues is true.
            </exception>
    </member>
    <member name="M:NationalInstruments.UI.ComplexPlot.PlotComplex(NationalInstruments.ComplexDouble[])">
      <summary>
            Plots the imaginary parts against the real parts of an array of complex data values.
            </summary>
      <param name="complexData">
            The array of ComplexDouble  data values to plot.
            </param>
      <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
      <exception cref="T:System.ArgumentNullException">complexData (parameter) is null.
            </exception>
      <exception cref="T:System.InvalidOperationException">
            		The XAxis of the plot is null.
            
            -or-
            
            		The YAxis of the plot is null.
            </exception>
      <exception cref="T:System.NotSupportedException">
            The Owner of the plot is not null,
            and the Owner of the plot is
            different from the Owner of XAxis.
            
            -or-
            
            The Owner of the plot is not null,
            and the Owner of the plot is
            different from the Owner of YAxis.
            </exception>
      <exception cref="T:System.ArgumentException">The imaginary and real parts of complexData (parameter) are special values and
            	ProcessSpecialValues is true.
            </exception>
    </member>
    <member name="M:NationalInstruments.UI.ComplexPlot.PlotComplex(NationalInstruments.ComplexDouble[],System.Int32,System.Int32)">
      <summary>
            Plots the imaginary parts against the real parts of a subset of an array of complex data values.
            </summary>
      <param name="complexData">
            The array of ComplexDouble  data values to plot.
            </param>
      <param name="startIndex">
            The index in complexData (parameter) at which the plot data begins.
            </param>
      <param name="length">
            The number of elements, beginning at startIndex (parameter) in complexData (parameter), to plot.
            </param>
      <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
      <exception cref="T:System.ArgumentNullException">complexData (parameter) is null.
            </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">startIndex (parameter) is less than 0.
            
            -or-
            startIndex (parameter) is greater than or equal to the
            number of elements in complexData (parameter).
            
            -or-
            length (parameter) is less than 0.
            
            -or-
            length (parameter) is greater than the number of elements
            from startIndex (parameter) to the end of complexData (parameter).
            </exception>
      <exception cref="T:System.InvalidOperationException">
            		The XAxis of the plot is null.
            
            -or-
            
            		The YAxis of the plot is null.
            </exception>
      <exception cref="T:System.NotSupportedException">
            The Owner of the plot is not null,
            and the Owner of the plot is
            different from the Owner of XAxis.
            
            -or-
            
            The Owner of the plot is not null,
            and the Owner of the plot is
            different from the Owner of YAxis.
            </exception>
      <exception cref="T:System.ArgumentException">The imaginary and real parts of complexData (parameter) are special values and
            	ProcessSpecialValues is true.
            </exception>
    </member>
    <member name="M:NationalInstruments.UI.ComplexPlot.PlotComplexAppend(NationalInstruments.ComplexDouble)">
      <summary>
            Plots the imaginary part against the real part of a complex data value by appending to the existing data.
            </summary>
      <param name="complexData">
            The ComplexDouble data value to append.
            </param>
      <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
      <exception cref="T:System.InvalidOperationException">
            		The XAxis of the plot is null.
            
            -or-
            
            		The YAxis of the plot is null.
            </exception>
      <exception cref="T:System.NotSupportedException">
            The Owner of the plot is not null,
            and the Owner of the plot is
            different from the Owner of XAxis.
            
            -or-
            
            The Owner of the plot is not null,
            and the Owner of the plot is
            different from the Owner of YAxis.
            </exception>
      <exception cref="T:System.ArgumentException">The imaginary and real parts of complexData (parameter) are special values and
            	ProcessSpecialValues is true.
            </exception>
    </member>
    <member name="M:NationalInstruments.UI.ComplexPlot.PlotComplexAppend(NationalInstruments.ComplexDouble[])">
      <summary>
            Plots the imaginary parts against the real parts of an array of complex data values by appending to the existing data.
            </summary>
      <param name="complexData">
            The array of ComplexDouble  data values to append.
            </param>
      <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
      <exception cref="T:System.ArgumentNullException">complexData (parameter) is null.
            </exception>
      <exception cref="T:System.InvalidOperationException">
            		The XAxis of the plot is null.
            
            -or-
            
            		The YAxis of the plot is null.
            </exception>
      <exception cref="T:System.NotSupportedException">
            The Owner of the plot is not null,
            and the Owner of the plot is
            different from the Owner of XAxis.
            
            -or-
            
            The Owner of the plot is not null,
            and the Owner of the plot is
            different from the Owner of YAxis.
            </exception>
      <exception cref="T:System.ArgumentException">The imaginary and real parts of complexData (parameter) are special values and
            	ProcessSpecialValues is true.
            </exception>
    </member>
    <member name="M:NationalInstruments.UI.ComplexPlot.PlotComplexAppend(NationalInstruments.ComplexDouble[],System.Int32,System.Int32)">
      <summary>
            Plots the imaginary parts against the real parts of a subset of an array of complex data values by appending to the existing data.
            </summary>
      <param name="complexData">
            The array of ComplexDouble  data values to append.
            </param>
      <param name="startIndex">
            The index in complexData (parameter) at which the plot data begins.
            </param>
      <param name="length">
            The number of elements, beginning at startIndex (parameter) in complexData (parameter), to plot.
            </param>
      <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
      <exception cref="T:System.ArgumentNullException">complexData (parameter) is null.
            </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">startIndex (parameter) is less than 0.
            
            -or-
            startIndex (parameter) is greater than or equal to the
            number of elements in complexData (parameter).
            
            -or-
            length (parameter) is less than 0.
            
            -or-
            length (parameter) is greater than the number of elements
            from startIndex (parameter) to the end of complexData (parameter).
            </exception>
      <exception cref="T:System.InvalidOperationException">
            		The XAxis of the plot is null.
            
            -or-
            
            		The YAxis of the plot is null.
            </exception>
      <exception cref="T:System.NotSupportedException">
            The Owner of the plot is not null,
            and the Owner of the plot is
            different from the Owner of XAxis.
            
            -or-
            
            The Owner of the plot is not null,
            and the Owner of the plot is
            different from the Owner of YAxis.
            </exception>
      <exception cref="T:System.ArgumentException">The imaginary and real parts of complexData (parameter) are special values and
            	ProcessSpecialValues is true.
            </exception>
    </member>
    <member name="M:NationalInstruments.UI.ComplexPlot.MapDataPoint(System.Drawing.Rectangle,NationalInstruments.ComplexDouble)">
      <summary>
            Transforms a single complex data value to a point using the specified bounds
            and the current x-axis and y-axis ranges.
            </summary>
      <param name="bounds">
            The reference Rectangle.
            </param>
      <param name="complexData">
            The ComplexDouble data value to map.
            </param>
      <returns>
            A PointF that represents the transformation of
            complexData (parameter) with respect to
            bounds (parameter) and the current XAxis
            and YAxis ranges.
            </returns>
      <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
      <exception cref="T:System.InvalidOperationException">
                    The XAxis of the plot is null.
            
            -or-
            
                    The YAxis of the plot is null.
            </exception>
      <exception cref="T:System.NotSupportedException">
            The Owner of the plot is not null,
            and the Owner of the plot is
            different from the Owner of XAxis.
            
            -or-
            
            The Owner of the plot is not null,
            and the Owner of the plot is
            different from the Owner of YAxis.
            </exception>
    </member>
    <member name="M:NationalInstruments.UI.ComplexPlot.MapDataPoints(System.Drawing.Rectangle,NationalInstruments.ComplexDouble[])">
      <summary>
            Transforms an array of complex data values to an array of points using the 
            specified bounds and the current x-axis and y-axis ranges.  The data is also
            clipped with respect to the current x-axis and y-axis ranges.
            </summary>
      <param name="bounds">
            The reference Rectangle.
            </param>
      <param name="complexData">
            The ComplexDouble data values to map.
            </param>
      <returns>
            A PointF array that represents the transformation of
            complexData (parameter) with respect to
            bounds (parameter) and the current XAxis
            and YAxis ranges.
            </returns>
      <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
      <exception cref="T:System.InvalidOperationException">
                    The XAxis of the plot is null.
            
            -or-
            
                    The YAxis of the plot is null.
            </exception>
      <exception cref="T:System.NotSupportedException">
            The Owner of the plot is not null,
            and the Owner of the plot is
            different from the Owner of XAxis.
            
            -or-
            
            The Owner of the plot is not null,
            and the Owner of the plot is
            different from the Owner of YAxis.
            </exception>
      <exception cref="T:System.ArgumentNullException">complexData (parameter) is null.
                </exception>
    </member>
    <member name="M:NationalInstruments.UI.ComplexPlot.MapDataPoints(System.Drawing.Rectangle,NationalInstruments.ComplexDouble[],System.Boolean)">
      <summary>
            Transforms an array of complex data values to an array of points using the 
            specified bounds and the current x-axis and y-axis ranges.
            </summary>
      <param name="bounds">
            The reference Rectangle.
            </param>
      <param name="complexData">
            The ComplexDouble data values to map.
            </param>
      <param name="clipData">
            Specifies if the data is clipped with respect to the current x-axis and
            y-axis ranges.
            </param>
      <returns>
            A PointF array that represents the transformation of
            complexData (parameter) with respect to
            bounds (parameter) and the current XAxis
            and YAxis ranges.
            </returns>
      <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
      <exception cref="T:System.InvalidOperationException">
                    The XAxis of the plot is null.
            
            -or-
            
                    The YAxis of the plot is null.
            </exception>
      <exception cref="T:System.NotSupportedException">
            The Owner of the plot is not null
            and the Owner of the plot is
            different from the Owner of XAxis.
            
            -or-
            
            The Owner of the plot is not null,
            and the Owner of the plot is
            different from the Owner of YAxis.
            </exception>
      <exception cref="T:System.ArgumentNullException">complexData (parameter) is null.
                </exception>
    </member>
    <member name="M:NationalInstruments.UI.ComplexPlot.MapRealErrorHighData(System.Drawing.Rectangle)">
      <summary>
            Transforms the high real error points for the source points in the plot data history to an 
            array of points using the specified bounds and the current x-axis and y-axis ranges.
            </summary>
      <param name="bounds">
            The reference Rectangle.
            </param>
      <returns>
            A PointF array that represents the transformation of
            the high real error data points for the source data points in the history with respect to
            the bounds (parameter) and the current x-axis and y-axis ranges.
            </returns>
      <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
      <exception cref="T:System.InvalidOperationException">
              The x-axis of the plot is null.
              
              -or-
              
              The y-axis of the plot is null.
              </exception>
      <exception cref="T:System.NotSupportedException">
              The Owner of the plot is not null,
              and the Owner of the plot is
              different from the Owner of x-axis.
              
              -or-
              
              The Owner of the plot is not null,
              and the Owner of the plot is
              different from the Owner of y-axis.
              </exception>
    </member>
    <member name="M:NationalInstruments.UI.ComplexPlot.MapRealErrorLowData(System.Drawing.Rectangle)">
      <summary>
            Transforms the low real error points for the source points in the plot data history to an 
            array of points using the specified bounds and the current x-axis and y-axis ranges.
            </summary>
      <param name="bounds">
            The reference Rectangle.
            </param>
      <returns>
            A PointF array that represents the transformation of
            the low real error data points for the source data points in the history with respect to
            the bounds (parameter) and the current x-axis and y-axis ranges.
            </returns>
      <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
      <exception cref="T:System.InvalidOperationException">
              The x-axis of the plot is null.
              
              -or-
              
              The y-axis of the plot is null.
              </exception>
      <exception cref="T:System.NotSupportedException">
              The Owner of the plot is not null,
              and the Owner of the plot is
              different from the Owner of x-axis.
              
              -or-
              
              The Owner of the plot is not null,
              and the Owner of the plot is
              different from the Owner of y-axis.
              </exception>
    </member>
    <member name="M:NationalInstruments.UI.ComplexPlot.MapImaginaryErrorHighData(System.Drawing.Rectangle)">
      <summary>
            Transforms the high imaginary error points for the source points in the plot data history to an 
            array of points using the specified bounds and the current x-axis and y-axis ranges.
            </summary>
      <param name="bounds">
            The reference Rectangle.
            </param>
      <returns>
            A PointF array that represents the transformation of
            the high imaginary error data points for the source data points in the history with respect to
            the bounds (parameter) and the current x-axis and y-axis ranges.
            </returns>
      <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
      <exception cref="T:System.InvalidOperationException">
              The x-axis of the plot is null.
              
              -or-
              
              The y-axis of the plot is null.
              </exception>
      <exception cref="T:System.NotSupportedException">
              The Owner of the plot is not null,
              and the Owner of the plot is
              different from the Owner of x-axis.
              
              -or-
              
              The Owner of the plot is not null,
              and the Owner of the plot is
              different from the Owner of y-axis.
              </exception>
    </member>
    <member name="M:NationalInstruments.UI.ComplexPlot.MapImaginaryErrorLowData(System.Drawing.Rectangle)">
      <summary>
            Transforms the low imaginary error points for the source points in the plot data history to an 
            array of points using the specified bounds and the current x-axis and y-axis ranges.
            </summary>
      <param name="bounds">
            The reference Rectangle.
            </param>
      <returns>
            A PointF array that represents the transformation of
            the low imaginary error data points for the source data points in the history with respect to
            the bounds (parameter) and the current x-axis and y-axis ranges.
            </returns>
      <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
      <exception cref="T:System.InvalidOperationException">
              The x-axis of the plot is null.
              
              -or-
              
              The y-axis of the plot is null.
              </exception>
      <exception cref="T:System.NotSupportedException">
              The Owner of the plot is not null,
              and the Owner of the plot is
              different from the Owner of x-axis.
              
              -or-
              
              The Owner of the plot is not null,
              and the Owner of the plot is
              different from the Owner of y-axis.
              </exception>
    </member>
    <member name="M:NationalInstruments.UI.ComplexPlot.InverseMapDataPoint(System.Drawing.Rectangle,System.Drawing.PointF)">
      <summary>
            Transforms a point to a complex data value using the specified bounds
            and the current x-axis and y-axis ranges.
            </summary>
      <param name="bounds">
            The reference Rectangle.
            </param>
      <param name="point">
            The Point to inversely map.
            </param>
      <returns>
            A ComplexDouble data value that represents the transformation of
            point (parameter) with respect to bounds (parameter) and the 
            current XAxis
            and YAxis ranges.
            </returns>
      <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
      <exception cref="T:System.InvalidOperationException">
                    The XAxis of the plot is null.
            
            -or-
            
                    The YAxis of the plot is null.
            </exception>
      <exception cref="T:System.NotSupportedException">
            The Owner of the plot is not null,
            and the Owner of the plot is
            different from the Owner of XAxis.
            
            -or-
            
            The Owner of the plot is not null,
            and the Owner of the plot is
            different from the Owner of YAxis.
            </exception>
    </member>
    <member name="M:NationalInstruments.UI.ComplexPlot.InverseMapDataPoints(System.Drawing.Rectangle,System.Drawing.PointF[])">
      <summary>
            Transforms an array of points to complex data values using the 
            specified bounds and the current x-axis and y-axis ranges.
            </summary>
      <param name="bounds">
            The reference Rectangle.
            </param>
      <param name="points">
            The Point array to inversely map.
            </param>
      <returns>
            An array of ComplexDouble data values that represents the transformation of
            points (parameter) with respect to bounds (parameter) and the 
            current XAxis
            and YAxis ranges.
            </returns>
      <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
      <exception cref="T:System.InvalidOperationException">
                    The XAxis of the plot is null.
            
            -or-
            
                    The YAxis of the plot is null.
            </exception>
      <exception cref="T:System.NotSupportedException">
            The Owner of the plot is not null,
            and the Owner of the plot is
            different from the Owner of XAxis.
            
            -or-
            
            The Owner of the plot is not null,
            and the Owner of the plot is
            different from the Owner of YAxis.
            </exception>
      <exception cref="T:System.ArgumentNullException">points (parameter) is null.
            </exception>
    </member>
    <member name="M:NationalInstruments.UI.ComplexPlot.OnBeforeDraw(NationalInstruments.UI.BeforeDrawComplexPlotEventArgs)">
      <summary>
            Raises the BeforeDraw event.
            </summary>
      <param name="e">
            An BeforeDrawComplexPlotEventArgs that contains the 
            event data.
            </param>
      <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
    </member>
    <member name="M:NationalInstruments.UI.ComplexPlot.OnAfterDraw(NationalInstruments.UI.AfterDrawComplexPlotEventArgs)">
      <summary>
            Raises the AfterDraw event.
            </summary>
      <param name="e">
            An AfterDrawComplexPlotEventArgs that contains the
            event data.
            </param>
      <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
    </member>
    <member name="M:NationalInstruments.UI.ComplexPlot.Clone">
      <summary>
            Creates a new object that is a copy of this instance.
            </summary>
      <returns>
            A new object that is a copy of this instance.
            </returns>
      <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
    </member>
    <member name="P:NationalInstruments.UI.ComplexPlot.DataStateManagement">
      <summary>
            Gets or sets a value that specifies how data is saved and restored across HTTP requests.
            </summary>
      <exception cref="T:System.ArgumentNullException">
            The specified value is null.
            </exception>
      <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
    </member>
    <member name="P:NationalInstruments.UI.ComplexPlot.XAxis">
      <summary>
            Gets or sets the x-axis for the plot.
            </summary>
      <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
    </member>
    <member name="P:NationalInstruments.UI.ComplexPlot.YAxis">
      <summary>
            Gets or sets the y-axis for the plot.
            </summary>
      <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
    </member>
    <member name="P:NationalInstruments.UI.ComplexPlot.FillBase">
      <summary>
            Gets or sets the base that the plot draws or fills to.
            </summary>
      <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
      <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
            The specified value is not a ComplexPlotFillBase value.
            </exception>
    </member>
    <member name="P:NationalInstruments.UI.ComplexPlot.BasePlot">
      <summary>
            Gets or sets the base plot used for fill or lines to base.
            </summary>
      <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
      <exception cref="T:System.NotSupportedException">
            The specified value is equal to this ComplexPlot. 
            </exception>
    </member>
    <member name="P:NationalInstruments.UI.ComplexPlot.ArrowStyle">
      <summary>
            Gets or sets the style and shape of the arrows.
            </summary>
      <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
      <exception cref="T:System.ArgumentNullException">value (parameter) is null.
            </exception>
    </member>
    <member name="P:NationalInstruments.UI.ComplexPlot.ArrowSize">
      <summary>
            Gets or sets the size of the arrows.
            </summary>
      <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
            The specified value is Empty.
            
            -or-
            
            The Width is negative.
            
            -or-
            
            The Height is negative.
            </exception>
    </member>
    <member name="P:NationalInstruments.UI.ComplexPlot.ArrowColor">
      <summary>
            Gets or sets the color of the arrow.
            </summary>
      <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
    </member>
    <member name="P:NationalInstruments.UI.ComplexPlot.ArrowDirection">
      <summary>
            Gets or sets the direction of the arrows.
            </summary>
      <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
      <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
            The specified value is not a PlotArrowDirection value.
            </exception>
    </member>
    <member name="P:NationalInstruments.UI.ComplexPlot.ArrowDisplayMode">
      <summary>
            Gets or sets the display mode for the arrows.
            </summary>
      <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
      <exception cref="T:System.ArgumentNullException">
            The specified value is null.
            </exception>
    </member>
    <member name="P:NationalInstruments.UI.ComplexPlot.ToolTipsEnabled">
      <summary>
            Gets or sets a value indicating if a plot data tooltip is shown when the mouse hovers over a data point
            in the plot.
            </summary>
      <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
    </member>
    <member name="P:NationalInstruments.UI.ComplexPlot.ToolTipFormatString">
      <summary>
            Gets or sets the format string that is used to format the 
            ComplexPlot tool tip.
            </summary>
      <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
      <exception cref="T:System.FormatException">
            The format string is not well formed.
            </exception>
    </member>
    <member name="P:NationalInstruments.UI.ComplexPlot.RealErrorDataMode">
      <summary>
            Gets or sets the mode used to generate real error data on plotted data points.
            </summary>
      <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
      <exception cref="T:System.ArgumentNullException">
            The specified value is null.
            </exception>
    </member>
    <member name="P:NationalInstruments.UI.ComplexPlot.RealErrorDisplayMode">
      <summary>
            Gets or sets the mode controlling how real error data is displayed on the plot.
            </summary>
      <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
      <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
            The specified value is not one of the ErrorBandDisplayModes values.
            </exception>
    </member>
    <member name="P:NationalInstruments.UI.ComplexPlot.RealErrorHighLineStyle">
      <summary>
            Gets or sets the style of the line connecting a high real error point with a source point on the plot.
            </summary>
      <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
      <exception cref="T:System.ArgumentNullException">
            The specified value is null.
            </exception>
    </member>
    <member name="P:NationalInstruments.UI.ComplexPlot.RealErrorHighLineColor">
      <summary>
            Gets or sets the color of the line connecting a high real error point with a source point on the plot.
            </summary>
      <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
    </member>
    <member name="P:NationalInstruments.UI.ComplexPlot.RealErrorHighLineWidth">
      <summary>
            Gets or sets the width of the line connecting a high real error point with a source point on the plot.
            </summary>
      <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
              The specified value is less than or equal to zero.
              
              -or-
              
              The specified value is NaN, NegativeInfinity,
              or PositiveInfinity.
              </exception>
    </member>
    <member name="P:NationalInstruments.UI.ComplexPlot.RealErrorHighPointStyle">
      <summary>
            Gets or sets the style for displaying a high real error point on the plot.
            </summary>
      <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
      <exception cref="T:System.ArgumentNullException">
            The specified value is null.
            </exception>
    </member>
    <member name="P:NationalInstruments.UI.ComplexPlot.RealErrorHighPointColor">
      <summary>
            Gets or sets the color for displaying a high real error point on the plot.
            </summary>
      <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
    </member>
    <member name="P:NationalInstruments.UI.ComplexPlot.RealErrorHighPointSize">
      <summary>
            Gets or sets the size of the point style used to display a high real error point on the plot.
            </summary>
      <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
              The value has negative width.
              
              -or-
              
              The value has negative height.
              </exception>
    </member>
    <member name="P:NationalInstruments.UI.ComplexPlot.RealErrorLowLineStyle">
      <summary>
            Gets or sets the style of the line connecting a low real error point with a source point on the plot.
            </summary>
      <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
      <exception cref="T:System.ArgumentNullException">
            The specified value is null.
            </exception>
    </member>
    <member name="P:NationalInstruments.UI.ComplexPlot.RealErrorLowLineColor">
      <summary>
            Gets or sets the color of the line connecting a low real error point with a source point on the plot.
            </summary>
      <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
    </member>
    <member name="P:NationalInstruments.UI.ComplexPlot.RealErrorLowLineWidth">
      <summary>
            Gets or sets the width of the line connecting a low real error point with a source point on the plot.
            </summary>
      <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
              The specified value is less than or equal to zero.
              
              -or-
              
              The specified value is NaN, NegativeInfinity,
              or PositiveInfinity.
              </exception>
    </member>
    <member name="P:NationalInstruments.UI.ComplexPlot.RealErrorLowPointStyle">
      <summary>
            Gets or sets the style for displaying a low real error point on the plot.
            </summary>
      <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
      <exception cref="T:System.ArgumentNullException">
            The specified value is null.
            </exception>
    </member>
    <member name="P:NationalInstruments.UI.ComplexPlot.RealErrorLowPointColor">
      <summary>
            Gets or sets the color for displaying a low real error point on the plot.
            </summary>
      <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
    </member>
    <member name="P:NationalInstruments.UI.ComplexPlot.RealErrorLowPointSize">
      <summary>
            Gets or sets the size of the point style used to display a low real error point on the plot.
            </summary>
      <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
              The value has negative width.
              
              -or-
              
              The value has negative height.
              </exception>
    </member>
    <member name="P:NationalInstruments.UI.ComplexPlot.ImaginaryErrorDataMode">
      <summary>
            Gets or sets the mode used to generate imaginary error data on plotted data points.
            </summary>
      <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
      <exception cref="T:System.ArgumentNullException">
            The specified value is null.
            </exception>
    </member>
    <member name="P:NationalInstruments.UI.ComplexPlot.ImaginaryErrorDisplayMode">
      <summary>
            Gets or sets the mode controlling how imaginary error data is displayed on the plot.
            </summary>
      <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
      <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
            The specified value is not one of the ErrorBandDisplayModes values.
            </exception>
    </member>
    <member name="P:NationalInstruments.UI.ComplexPlot.ImaginaryErrorHighLineStyle">
      <summary>
            Gets or sets the style of the line connecting a high imaginary error point with a source point on the plot.
            </summary>
      <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
      <exception cref="T:System.ArgumentNullException">
            The specified value is null.
            </exception>
    </member>
    <member name="P:NationalInstruments.UI.ComplexPlot.ImaginaryErrorHighLineColor">
      <summary>
            Gets or sets the color of the line connecting a high imaginary error point with a source point on the plot.
            </summary>
      <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
    </member>
    <member name="P:NationalInstruments.UI.ComplexPlot.ImaginaryErrorHighLineWidth">
      <summary>
            Gets or sets the width of the line connecting a high imaginary error point with a source point on the plot.
            </summary>
      <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
              The specified value is less than or equal to zero.
              
              -or-
              
              The specified value is NaN, NegativeInfinity,
              or PositiveInfinity.
              </exception>
    </member>
    <member name="P:NationalInstruments.UI.ComplexPlot.ImaginaryErrorHighPointStyle">
      <summary>
            Gets or sets the style for displaying a high imaginary error point on the plot.
            </summary>
      <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
      <exception cref="T:System.ArgumentNullException">
            The specified value is null.
            </exception>
    </member>
    <member name="P:NationalInstruments.UI.ComplexPlot.ImaginaryErrorHighPointColor">
      <summary>
            Gets or sets the color for displaying a high imaginary error point on the plot.
            </summary>
      <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
    </member>
    <member name="P:NationalInstruments.UI.ComplexPlot.ImaginaryErrorHighPointSize">
      <summary>
            Gets or sets the size of the point style used to display a high imaginary error point on the plot.
            </summary>
      <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
              The value has negative width.
              
              -or-
              
              The value has negative height.
              </exception>
    </member>
    <member name="P:NationalInstruments.UI.ComplexPlot.ImaginaryErrorLowLineStyle">
      <summary>
            Gets or sets the style of the line connecting a low imaginary error point with a source point on the plot.
            </summary>
      <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
      <exception cref="T:System.ArgumentNullException">
            The specified value is null.
            </exception>
    </member>
    <member name="P:NationalInstruments.UI.ComplexPlot.ImaginaryErrorLowLineColor">
      <summary>
            Gets or sets the color of the line connecting a low imaginary error point with a source point on the plot.
            </summary>
      <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
    </member>
    <member name="P:NationalInstruments.UI.ComplexPlot.ImaginaryErrorLowLineWidth">
      <summary>
            Gets or sets the width of the line connecting a low imaginary error point with a source point on the plot.
            </summary>
      <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
              The specified value is less than or equal to zero.
              
              -or-
              
              The specified value is NaN, NegativeInfinity,
              or PositiveInfinity.
              </exception>
    </member>
    <member name="P:NationalInstruments.UI.ComplexPlot.ImaginaryErrorLowPointStyle">
      <summary>
            Gets or sets the style for displaying a low imaginary error point on the plot.
            </summary>
      <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
      <exception cref="T:System.ArgumentNullException">
            The specified value is null.
            </exception>
    </member>
    <member name="P:NationalInstruments.UI.ComplexPlot.ImaginaryErrorLowPointColor">
      <summary>
            Gets or sets the color for displaying a low imaginary error point on the plot.
            </summary>
      <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
    </member>
    <member name="P:NationalInstruments.UI.ComplexPlot.ImaginaryErrorLowPointSize">
      <summary>
            Gets or sets the size of the point style used to display a low imaginary error point on the plot.
            </summary>
      <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
              The value has negative width.
              
              -or-
              
              The value has negative height.
              </exception>
    </member>
    <member name="P:NationalInstruments.UI.ComplexPlot.Snappable">
      <summary>
            Gets or sets a value indicating whether cursors can snap to this plot.
            </summary>
      <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
    </member>
    <member name="E:NationalInstruments.UI.ComplexPlot.BeforeDraw">
      <summary>
            Occurs before the plot is drawn.
            </summary>
      <exception cref="T:System.ObjectDisposedException">
            An event handler is added after the object has been disposed.
            </exception>
    </member>
    <member name="E:NationalInstruments.UI.ComplexPlot.AfterDraw">
      <summary>
            Occurs after the plot has been drawn.
            </summary>
      <exception cref="T:System.ObjectDisposedException">
            An event handler is added after the object has been disposed.
            </exception>
    </member>
    <member name="T:NationalInstruments.UI.ComplexCursorCollection">
      <summary>
            Represents a strongly typed collection of ComplexCursor objects.
            </summary>
    </member>
    <member name="M:NationalInstruments.UI.ComplexCursorCollection.#ctor">
      <summary>
            Initializes a new instance of the ComplexCursorCollection class.
            </summary>
    </member>
    <member name="M:NationalInstruments.UI.ComplexCursorCollection.#ctor(NationalInstruments.UI.ComplexCursor[])">
      <summary>
            Initializes a new instance of the ComplexCursorCollection class
            from an array of ComplexCursor objects.
            </summary>
      <param name="item">
            Array of ComplexCursor objects to copy.
            </param>
      <exception cref="T:System.ArgumentNullException">item (parameter) is null.
            
            -or-
            
            An element in item (parameter) is null.
            </exception>
      <exception cref="T:System.NotSupportedException">
            		An element in item (parameter) has been disposed.
            
            -or-
            
            		An element in item (parameter) is in another ComplexCursorCollection.
            
            -or-
            
            		An element in item (parameter) is already in this collection.
            </exception>
    </member>
    <member name="M:NationalInstruments.UI.ComplexCursorCollection.#ctor(NationalInstruments.UI.ComplexCursorCollection)">
      <summary>
            Initializes a new instance of the ComplexCursorCollection class
            from an existing collection.
            </summary>
      <param name="item">
            The ComplexCursorCollection to copy.
            </param>
      <exception cref="T:System.ArgumentNullException">item (parameter) is null.
            
            -or-
            
            An element in item (parameter) is null.
            </exception>
      <exception cref="T:System.NotSupportedException">
            		An element in item (parameter) has been disposed.
            
            -or-
            
            		An element in item (parameter) is in another ComplexCursorCollection.
            
            -or-
            
            		An element in item (parameter) is already in this collection.
            </exception>
    </member>
    <member name="M:NationalInstruments.UI.ComplexCursorCollection.ToString">
      <summary>
            Returns a string representation of the object.
            </summary>
      <returns>
            A string representation of the object.
            </returns>
    </member>
    <member name="M:NationalInstruments.UI.ComplexCursorCollection.Add(NationalInstruments.UI.ComplexCursor)">
      <summary>
            Adds an item to the end of the collection.
            </summary>
      <param name="item">
            Item to add to the collection.
            </param>
      <returns>
            The array index of the added item.
            </returns>
      <exception cref="T:System.ArgumentNullException">item (parameter) is null.
            </exception>
      <exception cref="T:System.NotSupportedException">item (parameter) has been disposed.
            
            -or-
            item (parameter) is in another ComplexCursorCollection.
            
            -or-
            item (parameter) is already in this collection.
            </exception>
    </member>
    <member name="M:NationalInstruments.UI.ComplexCursorCollection.AddRange(NationalInstruments.UI.ComplexCursor[])">
      <summary>
            Adds an array of ComplexCursor objects to the end of the collection.
            </summary>
      <param name="item">
            Array of ComplexCursor objects to add to the collection.
            </param>
      <exception cref="T:System.ArgumentNullException">item (parameter) is null.
            
            -or-
            
            An element in item (parameter) is null.
            </exception>
      <exception cref="T:System.NotSupportedException">
            		An element in item (parameter) has been disposed.
            
            -or-
            
            		An element in item (parameter) is in another ComplexCursorCollection.
            
            -or-
            
            		An element in item (parameter) is already in this collection.
            </exception>
    </member>
    <member name="M:NationalInstruments.UI.ComplexCursorCollection.AddRange(NationalInstruments.UI.ComplexCursorCollection)">
      <summary>
            Adds a collection of ComplexCursor objects to the end of the collection.
            </summary>
      <param name="item">
            Collection of ComplexCursor objects to add to the collection.
            </param>
      <exception cref="T:System.ArgumentNullException">item (parameter) is null.
            
            -or-
            
            An element in item (parameter) is null.
            </exception>
      <exception cref="T:System.NotSupportedException">
            		An element in item (parameter) has been disposed.
            
            -or-
            
            		An element in item (parameter) is in another ComplexCursorCollection.
            
            -or-
            
            		An element in item (parameter) is already in this collection.
            </exception>
    </member>
    <member name="M:NationalInstruments.UI.ComplexCursorCollection.Clear">
      <summary>
            Removes all items from the collection.
            </summary>
    </member>
    <member name="M:NationalInstruments.UI.ComplexCursorCollection.Contains(NationalInstruments.UI.ComplexCursor)">
      <summary>
            Determines if the specified element is in the collection.
            </summary>
      <param name="item">Item to locate in the collection.</param>
      <returns>true if the collection contains item (parameter).
            </returns>
    </member>
    <member name="M:NationalInstruments.UI.ComplexCursorCollection.CopyTo(NationalInstruments.UI.ComplexCursor[],System.Int32)">
      <summary>
            Copies the collection to an array or a portion of an array.
            </summary>
      <param name="array">
            Destination array for the collection.
            </param>
      <param name="index">
            The index in the target array to which you want to begin copying the collection.
            </param>
      <exception cref="T:System.ArgumentNullException">array (parameter) is null.
            </exception>
      <exception cref="T:System.ArgumentException">array (parameter) is multidimensional.
            
            - or -
            index (parameter) is equal to or greater than the length of array (parameter).
            
            -or-
            
            The number of elements in the collection is greater than the available space between
            index (parameter) and the end of array (parameter).
            </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">index (parameter) is less than the lower bound of array (parameter).
            </exception>
    </member>
    <member name="M:NationalInstruments.UI.ComplexCursorCollection.IndexOf(NationalInstruments.UI.ComplexCursor)">
      <summary>
            Returns the zero-based index of the first occurrence of an item in the collection.
            </summary>
      <param name="item">
            Item to search for.
            </param>
      <returns>
            Index of the item. If the item is not found, returns -1.
            </returns>
    </member>
    <member name="M:NationalInstruments.UI.ComplexCursorCollection.Insert(System.Int32,NationalInstruments.UI.ComplexCursor)">
      <summary>
            Inserts an item into the collection at the specified index.
            </summary>
      <param name="index">
            Index to insert the item at.
            </param>
      <param name="item">
            Item to insert into the collection.
            </param>
      <exception cref="T:System.ArgumentNullException">item (parameter) is null.
            </exception>
      <exception cref="T:System.NotSupportedException">item (parameter) has been disposed.
            
            -or-
            item (parameter) is in another ComplexCursorCollection.
            
            -or-
            item (parameter) is already in this collection.
            </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">index (parameter) is less than zero.
            
            -or-
            

index (parameter) is greater than Count.
            


            -or-
            index (parameter) is greater than Count.
            </exception>
    </member>
    <member name="M:NationalInstruments.UI.ComplexCursorCollection.GetEnumerator">
      <summary>
            Returns an enumerator that you can use to iterate through the collection.
            </summary>
      <returns>
            The enumerator for the collection.
            </returns>
    </member>
    <member name="M:NationalInstruments.UI.ComplexCursorCollection.Remove(NationalInstruments.UI.ComplexCursor)">
      <summary>
            Removes the first occurrence of the specified item.
            </summary>
      <param name="item">
            Item to remove from the collection.
            </param>
    </member>
    <member name="M:NationalInstruments.UI.ComplexCursorCollection.RemoveAt(System.Int32)">
      <summary>
            Removes the item at the specified index.
            </summary>
      <param name="index">
            The zero-based index of the item to remove.
            </param>
      <exception cref="T:System.ArgumentOutOfRangeException">index (parameter) is less than zero.
            
            -or-
            

index (parameter) is greater than or equal to Count.
            


            -or-
            index (parameter) is greater than or equal to Count.
            </exception>
    </member>
    <member name="P:NationalInstruments.UI.ComplexCursorCollection.Item(System.Int32)">
      <summary>
            Gets or sets ComplexCursor at the specified index. 
            </summary>
      <param name="index">
            The zero-based index of the entry to locate in the collection.
            </param>
      <exception cref="T:System.ArgumentNullException">
            	The value is null.
            </exception>
      <exception cref="T:System.NotSupportedException">
            		The value has been disposed.
            
            -or-
            
            		The value is in another ComplexCursorCollection.
            
            -or-
            
            		The value is already in this collection.
            </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">index (parameter) is less than zero.
            
            -or-
            

index (parameter) is greater than Count.
            


            -or-
            index (parameter) is greater than Count.
            </exception>
    </member>
    <member name="P:NationalInstruments.UI.ComplexCursorCollection.Count">
      <summary>
            Gets the number of elements in the ComplexCursorCollection.
            </summary>
    </member>
    <member name="T:NationalInstruments.UI.IntensityPointAnnotation">
      <summary>
            Represents an annotation that annotates an (x, y) data point on the plot area.
            </summary>
    </member>
    <member name="M:NationalInstruments.UI.IntensityPointAnnotation.#ctor">
      <summary>
            Initializes a new instance of the IntensityPointAnnotation class.
            </summary>
    </member>
    <member name="M:NationalInstruments.UI.IntensityPointAnnotation.#ctor(NationalInstruments.UI.IntensityXAxis,NationalInstruments.UI.IntensityYAxis)">
      <summary>
            Initializes a new instance of the IntensityPointAnnotation class with the specified
            IntensityXAxis and IntensityYAxis.
            </summary>
      <param name="xAxis">
            The IntensityXAxis of the annotation.
            </param>
      <param name="yAxis">
            The IntensityYAxis of the annotation.
            </param>
    </member>
    <member name="M:NationalInstruments.UI.IntensityPointAnnotation.#ctor(NationalInstruments.UI.IntensityXAxis,NationalInstruments.UI.IntensityYAxis,System.Double,System.Double)">
      <summary>
            Initializes a new instance of the IntensityPointAnnotation class with the specified
            IntensityXAxis, IntensityYAxis, 
            XPosition, and YPosition.
            </summary>
      <param name="xAxis">
            The IntensityXAxis of the annotation.
            </param>
      <param name="yAxis">
            The IntensityYAxis of the annotation.
            </param>
      <param name="xPosition">
            The XPosition of the annotation.
            </param>
      <param name="yPosition">
            The YPosition of the annotation.
            </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
            The xPosition (parameter) or yPosition (parameter) is NaN, NegativeInfinity,
            or PositiveInfinity.
            </exception>
    </member>
    <member name="M:NationalInstruments.UI.IntensityPointAnnotation.SetPosition(System.Double,System.Double)">
      <summary>
            Sets the horizontal and vertical locations of the point to annotate.
            </summary>
      <param name="xPosition">
            The horizontal location of the point to annotate.
            </param>
      <param name="yPosition">
            The vertical location of the point to annotate.
            </param>
      <exception cref="T:System.ObjectDisposedException">
            The object has been disposed. 
            </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
            The xPosition (parameter) or yPosition (parameter) is NaN, NegativeInfinity,
            or PositiveInfinity.
            </exception>
    </member>
    <member name="M:NationalInstruments.UI.IntensityPointAnnotation.FormatDataToolTip(System.Double,System.Double)">
      <summary>
            Formats an x- and y-data value pair as a IntensityPointAnnotation data tooltip.
            </summary>
      <param name="xData">
            The x-data value to format.
            </param>
      <param name="yData">
            The y-data value to format.
            </param>
      <returns>
            A String that contains the specified x- and y-data values formatted as
            a data tooltip. The tooltip format is specified by the current values of the label format of 
            XAxis and YAxis.
            </returns>
      <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
    </member>
    <member name="M:NationalInstruments.UI.IntensityPointAnnotation.Dispose(System.Boolean)">
      <summary>
            Releases the resources used by the IntensityPointAnnotation.
            </summary>
      <param name="disposing">
            If true, this method releases managed and unmanaged resources. If false, this method releases
            only unmanaged resources.
            </param>
    </member>
    <member name="M:NationalInstruments.UI.IntensityPointAnnotation.Clone">
      <summary>
            Creates a new object that is a copy of this instance.
            </summary>
      <returns>
            A new object that is a copy of this instance.
            </returns>
      <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
    </member>
    <member name="M:NationalInstruments.UI.IntensityPointAnnotation.OnBeforeDraw(NationalInstruments.UI.BeforeDrawIntensityPointAnnotationEventArgs)">
      <summary>
            Raises the BeforeDraw event.
            </summary>
      <param name="e">
            A BeforeDrawIntensityPointAnnotationEventArgs that contains the event data.
            </param>
      <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
    </member>
    <member name="M:NationalInstruments.UI.IntensityPointAnnotation.OnAfterDraw(NationalInstruments.UI.AfterDrawIntensityPointAnnotationEventArgs)">
      <summary>
            Raises the AfterDraw event.
            </summary>
      <param name="e">
            An AfterDrawIntensityPointAnnotationEventArgs that contains the event data.
            </param>
      <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
    </member>
    <member name="P:NationalInstruments.UI.IntensityPointAnnotation.XPosition">
      <summary>
            Gets or sets the horizontal location of the annotation in data coordinates.
            </summary>
      <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
            The specified value is NaN, NegativeInfinity,
            or PositiveInfinity.
            </exception>
    </member>
    <member name="P:NationalInstruments.UI.IntensityPointAnnotation.YPosition">
      <summary>
            Gets or sets the vertical location of the annotation in data coordinates.
            </summary>
      <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
            The specified value is NaN, NegativeInfinity,
            or PositiveInfinity.
            </exception>
    </member>
    <member name="P:NationalInstruments.UI.IntensityPointAnnotation.AutoHide">
      <summary>
            Gets or sets a value indicating if the annotation is hidden when the point of interest is not located
            inside the plot area bounds. 
            </summary>
      <exception cref="T:System.ObjectDisposedException">
            The object has been disposed. 
            </exception>
    </member>
    <member name="P:NationalInstruments.UI.IntensityPointAnnotation.ArrowHeadPosition">
      <summary>
            Gets or sets the position of the arrow head relative to the bounds of the shape.
            </summary>
      <exception cref="T:System.ObjectDisposedException"> 
            The object has been disposed.
            </exception>
      <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
            The specified value is not an ArrowHeadPosition value.
            </exception>
    </member>
    <member name="P:NationalInstruments.UI.IntensityPointAnnotation.ShapeFillColor">
      <summary>
            Gets or sets the color used to fill the shape.
            </summary>
      <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
    </member>
    <member name="P:NationalInstruments.UI.IntensityPointAnnotation.ShapeFillStyle">
      <summary>
            Gets or sets the style used to draw the fill color of the shape.
            </summary>
      <exception cref="T:System.ObjectDisposedException">
            The object has been disposed. 
            </exception>
      <exception cref="T:System.ArgumentNullException">value (parameter) is null.
            </exception>
    </member>
    <member name="P:NationalInstruments.UI.IntensityPointAnnotation.ShapeLineColor">
      <summary>
            Gets or sets the color of the line that outlines the shape.
            </summary>
      <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
    </member>
    <member name="P:NationalInstruments.UI.IntensityPointAnnotation.ShapeLineStyle">
      <summary>
            Gets or sets the style of the line that outlines the shape.
            </summary>
      <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
      <exception cref="T:System.ArgumentNullException">value (parameter) is null.
            </exception>
    </member>
    <member name="P:NationalInstruments.UI.IntensityPointAnnotation.ShapeLineWidth">
      <summary>
            Gets or sets the width of the line that outlines the shape.
            </summary>
      <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
            The specified value is less than or equal to zero.
            
            -or-
            
            The specified value is NaN, NegativeInfinity,
            or PositiveInfinity.
            </exception>
    </member>
    <member name="P:NationalInstruments.UI.IntensityPointAnnotation.ShapeZOrder">
      <summary>
            Gets or sets a value indicating if the shape is drawn above or below all plots.
            </summary>
      <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
      <exception cref="T:System.ComponentModel.InvalidEnumArgumentException"> 
            The specified value is not an AnnotationZOrder value.
            </exception>
    </member>
    <member name="P:NationalInstruments.UI.IntensityPointAnnotation.ShapeSize">
      <summary>
            Gets or sets the size of the shape.
            </summary>
      <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
            The specified value is Empty.
            
            -or-
            
            The Width is negative.
            
            -or-
            
            The Height is negative.
            </exception>
    </member>
    <member name="P:NationalInstruments.UI.IntensityPointAnnotation.ShapeStyle">
      <summary>
            Gets or sets the style of the shape.
            </summary>
      <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
      <exception cref="T:System.ArgumentNullException">value (parameter) is null.
            </exception>
    </member>
    <member name="P:NationalInstruments.UI.IntensityPointAnnotation.ShapeXOffset">
      <summary>
            Gets or sets the x offset of the shape.
            </summary>
      <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
            The specified value is NaN, NegativeInfinity,
            or PositiveInfinity.
            </exception>
    </member>
    <member name="P:NationalInstruments.UI.IntensityPointAnnotation.ShapeYOffset">
      <summary>
            Gets or sets the y offset of the shape.
            </summary>
      <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
            The specified value is NaN, NegativeInfinity,
            or PositiveInfinity.
            </exception>
    </member>
    <member name="P:NationalInstruments.UI.IntensityPointAnnotation.ShapeRotation">
      <summary>
            Gets or sets the angle at which to rotate the shape.
            </summary>
      <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
            The specified value is NaN, NegativeInfinity,
            or PositiveInfinity.
            </exception>
    </member>
    <member name="P:NationalInstruments.UI.IntensityPointAnnotation.ShapeVisible">
      <summary>
            Gets or sets a value indicating if the shape is visible. 
            </summary>
      <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
    </member>
    <member name="E:NationalInstruments.UI.IntensityPointAnnotation.BeforeDraw">
      <summary>
            Occurs before the point annotation is drawn.
            </summary>
      <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.  
            </exception>
    </member>
    <member name="E:NationalInstruments.UI.IntensityPointAnnotation.AfterDraw">
      <summary>
            Occurs after the point annotation has been drawn.
            </summary>
      <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
    </member>
    <member name="T:NationalInstruments.UI.IntensityRangeAnnotation">
      <summary>
            Represents an annotation that highlights a range of values.
            </summary>
    </member>
    <member name="M:NationalInstruments.UI.IntensityRangeAnnotation.#ctor">
      <summary>
            Initializes a new instance of the IntensityRangeAnnotation class.
            </summary>
    </member>
    <member name="M:NationalInstruments.UI.IntensityRangeAnnotation.#ctor(NationalInstruments.UI.IntensityXAxis,NationalInstruments.UI.IntensityYAxis)">
      <summary>
            Initializes a new instance of the IntensityRangeAnnotation class with the specified
            IntensityXAxis and IntensityYAxis.
            </summary>
      <param name="xAxis">
            The IntensityXAxis of the annotation.
            </param>
      <param name="yAxis">
            The IntensityYAxis of the annotation.
            </param>
    </member>
    <member name="M:NationalInstruments.UI.IntensityRangeAnnotation.#ctor(NationalInstruments.UI.IntensityXAxis,NationalInstruments.UI.IntensityYAxis,NationalInstruments.UI.Range,NationalInstruments.UI.Range)">
      <summary>
            Initializes a new instance of the IntensityRangeAnnotation class with the specified
            IntensityXAxis, IntensityYAxis, XRange, and YRange.
            </summary>
      <param name="xAxis">
            The IntensityXAxis of the annotation.
            </param>
      <param name="yAxis">
            The IntensityYAxis of the annotation.
            </param>
      <param name="xRange">
            The XRange of the annotation.
            </param>
      <param name="yRange">
            The YRange of the annotation.
            </param>
      <exception cref="T:System.ArgumentException">
            	The xRange (parameter) or yRange (parameter) is Empty.
            </exception>
      <exception cref="T:System.ArgumentNullException">
            	The xRange (parameter) or xRange (parameter) is null.
            </exception>
    </member>
    <member name="M:NationalInstruments.UI.IntensityRangeAnnotation.FormatDataToolTip(NationalInstruments.UI.Range,NationalInstruments.UI.Range)">
      <summary>
            Formats an x-range and y-range data value pair as an IntensityRangeAnnotation data tooltip.
            </summary>
      <param name="xRange">
            The x-range data value to format.
            </param>
      <param name="yRange">
            The y-range data value to format.
            </param>
      <returns> 
            A String that contains the specified x-range and y-range data values formatted as
            a data tooltip. The tooltip format is specified by the current values of the label format of 
            XAxis and YAxis.
            </returns>
      <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
    </member>
    <member name="M:NationalInstruments.UI.IntensityRangeAnnotation.Dispose(System.Boolean)">
      <summary>
            Releases the resources used by the IntensityRangeAnnotation.
            </summary>
      <param name="disposing">
            If true, this method releases managed and unmanaged resources. If false, this method releases
            only unmanaged resources.
            </param>
    </member>
    <member name="M:NationalInstruments.UI.IntensityRangeAnnotation.Clone">
      <summary>
            Creates a new object that is a copy of this instance.
            </summary>
      <returns>
            A new object that is a copy of this instance.
            </returns>
      <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
    </member>
    <member name="M:NationalInstruments.UI.IntensityRangeAnnotation.OnBeforeDraw(NationalInstruments.UI.BeforeDrawIntensityRangeAnnotationEventArgs)">
      <summary>
            Raises the BeforeDraw event.
            </summary>
      <param name="e">
            A BeforeDrawIntensityRangeAnnotationEventArgs that contains the event data.
            </param>
      <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
    </member>
    <member name="M:NationalInstruments.UI.IntensityRangeAnnotation.OnAfterDraw(NationalInstruments.UI.AfterDrawIntensityRangeAnnotationEventArgs)">
      <summary>
            Raises the AfterDraw event.
            </summary>
      <param name="e">
            An AfterDrawIntensityRangeAnnotationEventArgs that contains the event data.
            </param>
      <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
    </member>
    <member name="P:NationalInstruments.UI.IntensityRangeAnnotation.XRange">
      <summary>
            Gets or sets the minimum and maximum x-axis values of the annotation.
            </summary>
      <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
      <exception cref="T:System.ArgumentNullException">value (parameter) is null.
            </exception>
      <exception cref="T:System.ArgumentException">value (parameter) is Empty.
            </exception>
    </member>
    <member name="P:NationalInstruments.UI.IntensityRangeAnnotation.YRange">
      <summary>
            Gets or sets the minimum and maximum y-axis values of the annotation.
            </summary>
      <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
      <exception cref="T:System.ArgumentNullException">value (parameter) is null.
            </exception>
      <exception cref="T:System.ArgumentException">value (parameter) is Empty.
            </exception>
    </member>
    <member name="P:NationalInstruments.UI.IntensityRangeAnnotation.AutoHide">
      <summary>
            Gets or sets a value indicating if the annotation is hidden when the range of interest is not located
            inside the plot area bounds. 
            </summary>
      <exception cref="T:System.ObjectDisposedException">
            The object has been disposed. 
            </exception>
    </member>
    <member name="P:NationalInstruments.UI.IntensityRangeAnnotation.RangeFillColor">
      <summary>
            Gets or sets the color used to fill the range area.
            </summary>
      <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
    </member>
    <member name="P:NationalInstruments.UI.IntensityRangeAnnotation.RangeFillStyle">
      <summary>
            Gets or sets the style used to draw the fill color of the range area.
            </summary>
      <exception cref="T:System.ObjectDisposedException"> 
            The object has been disposed.
            </exception>
      <exception cref="T:System.ArgumentNullException">value (parameter) is null.
            </exception>
    </member>
    <member name="P:NationalInstruments.UI.IntensityRangeAnnotation.RangeLineColor">
      <summary>
            Gets or sets the color of the line that borders the range area.
            </summary>
      <exception cref="T:System.ObjectDisposedException"> 
            The object has been disposed.
            </exception>
    </member>
    <member name="P:NationalInstruments.UI.IntensityRangeAnnotation.RangeLineStyle">
      <summary>
            Gets or sets the style of the line that borders the range area.
            </summary>
      <exception cref="T:System.ObjectDisposedException"> 
            The object has been disposed.
            </exception>
      <exception cref="T:System.ArgumentNullException">value (parameter) is null.
            </exception>
    </member>
    <member name="P:NationalInstruments.UI.IntensityRangeAnnotation.RangeLineWidth">
      <summary>
            Gets or sets the width of the line that borders the range area.
            </summary>
      <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
            The specified value is less than or equal to zero. 
            
            -or-
            
            The specified value is NaN, NegativeInfinity,
            or PositiveInfinity.
            </exception>
    </member>
    <member name="P:NationalInstruments.UI.IntensityRangeAnnotation.RangeZOrder">
      <summary>
            Gets or sets a value indicating if the range area is drawn above or below all plots.
            </summary>
      <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
      <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
            The specified value is not an AnnotationZOrder value.
            </exception>
    </member>
    <member name="P:NationalInstruments.UI.IntensityRangeAnnotation.ArrowHeadAlignment">
      <summary>
            Gets or sets the location of the arrow head in relation to the range bounds.
            </summary>
      <exception cref="T:System.ObjectDisposedException"> 
            The object has been disposed.
            </exception>
      <exception cref="T:System.ArgumentNullException">value (parameter) is null.
            </exception>
    </member>
    <member name="E:NationalInstruments.UI.IntensityRangeAnnotation.BeforeDraw">
      <summary>
            Occurs before the range annotation is drawn.
            </summary>
      <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
    </member>
    <member name="E:NationalInstruments.UI.IntensityRangeAnnotation.AfterDraw">
      <summary>
            Occurs after the range annotation is drawn.
            </summary>
      <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
    </member>
    <member name="T:NationalInstruments.UI.ColorScaleMode">
      <summary>
            Specifies the scaling mode of the color scale.
            </summary>
    </member>
    <member name="F:NationalInstruments.UI.ColorScaleMode.Fixed">
      <summary>
            The axis fixes the range to the existing range. The range is never updated.
            </summary>
    </member>
    <member name="F:NationalInstruments.UI.ColorScaleMode.AutoScaleLoose">
      <summary>
            The axis automatically updates the range so that the range extends beyond the exact calculated data values to the nearest entries
            in the ColorMap.
            </summary>
    </member>
    <member name="F:NationalInstruments.UI.ColorScaleMode.AutoScaleExact">
      <summary>
            The axis automatically updates the range to the exact calculated values.
            </summary>
    </member>
    <member name="T:NationalInstruments.UI.BeforeMoveIntensityCursorEventArgs">
      <summary>
            Provides data for the events that occur before a cursor moves.
            </summary>
    </member>
    <member name="M:NationalInstruments.UI.BeforeMoveIntensityCursorEventArgs.#ctor(NationalInstruments.UI.IntensityCursor,NationalInstruments.UI.IntensityPlot,System.Double,System.Double,NationalInstruments.UI.Action,System.Boolean)">
      <summary>
            Initializes a new instance of the BeforeMoveIntensityCursorEventArgs
            class with the specified cursor, plot, x-coordinate, y-coordinate, action, and cancel value.
            </summary>
      <param name="cursor">
            The IntensityCursor for which the event is occurring.
            </param>
      <param name="plot">
            The IntensityPlot that the IntensityCursor
            is moving to.
            </param>
      <param name="xPosition">
            The x-coordinate that the IntensityCursor is moving to.
            </param>
      <param name="yPosition">
            The y-coordinate that the IntensityCursor is moving to.
            </param>
      <param name="action">
            The source of the Action that caused the event.
            </param>
      <param name="cancel">true to cancel the event.
            </param>
      <exception cref="T:System.ArgumentNullException">cursor (parameter) is null.
            </exception>
    </member>
    <member name="M:NationalInstruments.UI.BeforeMoveIntensityCursorEventArgs.ToString">
      <summary>
            Returns a string representation of the object.
            </summary>
      <returns>
            A string representation of the object.
            </returns>
    </member>
    <member name="P:NationalInstruments.UI.BeforeMoveIntensityCursorEventArgs.Cursor">
      <summary>
            Gets the IntensityCursor that is moving.
            </summary>
    </member>
    <member name="P:NationalInstruments.UI.BeforeMoveIntensityCursorEventArgs.Plot">
      <summary>
            Gets the IntensityPlot that the 
            IntensityCursor is moving to.
            </summary>
    </member>
    <member name="P:NationalInstruments.UI.BeforeMoveIntensityCursorEventArgs.XPosition">
      <summary>
            Gets the x-coordinate that the IntensityCursor is moving to.
            </summary>
    </member>
    <member name="P:NationalInstruments.UI.BeforeMoveIntensityCursorEventArgs.YPosition">
      <summary>
            Gets the y-coordinate that the IntensityCursor is moving to.
            </summary>
    </member>
    <member name="T:NationalInstruments.UI.BeforeDrawIntensityPlotEventHandler">
      <summary>
            Represents the method that handles the BeforeDrawPlot
            event.
            </summary>
      <param name="sender">
            The source of the event.
            </param>
      <param name="e">
            A BeforeDrawIntensityPlotEventArgs that contains the event data.
            </param>
    </member>
    <member name="T:NationalInstruments.UI.BeforeDrawEventHandler">
      <summary>
            Represents the method that handles custom draw events that occur before a control or control sub-object is drawn.
            </summary>
      <param name="sender">
            The source of the event.
            </param>
      <param name="e">
            A BeforeDrawEventArgs that contains the event data.
            </param>
    </member>
    <member name="T:NationalInstruments.UI.BeforeDrawComplexPlotEventHandler">
      <summary>
            Represents the method that handles the BeforeDrawPlot
            event.
            </summary>
      <param name="sender">
            The source of the event.
            </param>
      <param name="e">
            A BeforeDrawComplexPlotEventArgs that contains the event data.
            </param>
    </member>
    <member name="T:NationalInstruments.UI.BeforeDragComplexAnnotationCaptionEventArgs">
      <summary>
            Provides data for the events that occur before the annotation caption is dragged.
            </summary>
    </member>
    <member name="M:NationalInstruments.UI.BeforeDragComplexAnnotationCaptionEventArgs.#ctor(NationalInstruments.UI.ComplexAnnotation,System.Single,System.Single,NationalInstruments.UI.Action,System.Boolean)">
      <summary>
            Initializes a new instance of the BeforeDragComplexAnnotationCaptionEventArgs
            class with the specified annotation, x offset, y offset, and action that caused the event. 
            </summary>
      <param name="annotation">
            The ComplexAnnotation for which the event is occurring.
            </param>
      <param name="complexXOffset">
            The x offset to drag the caption to.
            </param>
      <param name="complexYOffset">
            The y offset to drag the caption to.
            </param>
      <param name="action">
            The source of the Action that caused the event.
            </param>
      <param name="cancel">
            A value that indicates if the event is cancelled.
            </param>
      <exception cref="T:System.ArgumentNullException">annotation (parameter) is null.
            </exception>
    </member>
    <member name="P:NationalInstruments.UI.BeforeDragComplexAnnotationCaptionEventArgs.Annotation">
      <summary>
            Gets the ComplexAnnotation whose caption is going to move. 
            </summary>
    </member>
    <member name="P:NationalInstruments.UI.BeforeDragComplexAnnotationCaptionEventArgs.ComplexXOffset">
      <summary>
            The x offset to move the caption to.
            </summary>
    </member>
    <member name="P:NationalInstruments.UI.BeforeDragComplexAnnotationCaptionEventArgs.ComplexYOffset">
      <summary>
            The y offset to move the caption to.
            </summary>
    </member>
    <member name="T:NationalInstruments.UI.BeforeDigitalWaveformPlotEventArgs">
      <summary>
            Provides data for the events that occur before interactive or programmatic
            user actions on the digital waveform plot.
            </summary>
    </member>
    <member name="M:NationalInstruments.UI.BeforeDigitalWaveformPlotEventArgs.#ctor(NationalInstruments.UI.DigitalWaveformPlot,NationalInstruments.UI.Action,System.Boolean)">
      <summary>
            Initializes a new instance of the BeforeDigitalWaveformPlotEventArgs class
            with the specified digital waveform plot, action, and cancel value.
            </summary>
      <param name="waveformPlot">
            The DigitalWaveformPlot that caused the event.
            </param>
      <param name="action">
            The Action that caused the event.
            </param>
      <param name="cancel">
            A value that indicates if the event is cancelled.
            </param>
      <exception cref="T:System.ArgumentNullException">waveformPlot (parameter) is null.
            </exception>
      <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">action (parameter) is not one of the Action
            values.
            </exception>
    </member>
    <member name="P:NationalInstruments.UI.BeforeDigitalWaveformPlotEventArgs.WaveformPlot">
      <summary>
            Gets the digital waveform plot.
            </summary>
    </member>
    <member name="T:NationalInstruments.UI.AnnotationCaptionAlignment">
      <summary>
            Provides a class for aligning an annotation caption in relation to the annotation or plot area bounds.
            </summary>
    </member>
    <member name="M:NationalInstruments.UI.AnnotationCaptionAlignment.#ctor(NationalInstruments.UI.BoundsAlignment,System.Single,System.Single)">
      <summary>
            Initializes a new instance of the AnnotationCaptionAlignment class
            with the specified alignment, x offset, and y offset values.
            </summary>
      <param name="alignment">
            The BoundsAlignment used to determine the location of the annotation caption in relation to graph plot area bounds.
            </param>
      <param name="xOffset">
            The x offset of the caption in relation to the location specified by the Alignment property.
            </param>
      <param name="yOffset">
            The y offset of the caption in relation to the location specified by the Alignment property.
            </param>
      <exception cref="T:System.ArgumentNullException">alignment (parameter) is null.
            </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
            The specified xOffset (parameter) or yOffset (parameter) is NaN, NegativeInfinity,
            or PositiveInfinity.
            </exception>
    </member>
    <member name="M:NationalInstruments.UI.AnnotationCaptionAlignment.GetHashCode">
      <summary>
            Returns a hash code for this object.
            </summary>
      <returns>
            A 32-bit signed integer hash code.
            </returns>
    </member>
    <member name="M:NationalInstruments.UI.AnnotationCaptionAlignment.Equals(NationalInstruments.UI.AnnotationCaptionAlignment)">
      <summary>
            Returns a value indicating if this instance is equal to the specified AnnotationCaptionAlignment.
            </summary>
      <param name="captionAlignment">
            An AnnotationCaptionAlignment to compare with this instance.
            </param>
      <returns>true if captionAlignment (parameter) is an AnnotationCaptionAlignment
            that is equal to this instance.
            </returns>
    </member>
    <member name="M:NationalInstruments.UI.AnnotationCaptionAlignment.Equals(System.Object)">
      <summary>
            Returns a value indicating if this instance is equal to the specified object.
            </summary>
      <param name="obj">
            The Object to compare with this
            instance.
            </param>
      <returns>true if obj (parameter) is an Object that is equal 
            to this instance.
            </returns>
    </member>
    <member name="P:NationalInstruments.UI.AnnotationCaptionAlignment.Alignment">
      <summary>
            Gets the alignment used to determine the location of the annotation caption in relation to the graph plot area bounds.
            </summary>
    </member>
    <member name="P:NationalInstruments.UI.AnnotationCaptionAlignment.XOffset">
      <summary>
            Gets the x offset of the caption in relation to the location specified by the Alignment property.
            </summary>
    </member>
    <member name="P:NationalInstruments.UI.AnnotationCaptionAlignment.YOffset">
      <summary>
            Gets the y offset of the caption in relation to the location specified by the Alignment property.
            </summary>
      <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
            The specified value is NaN, NegativeInfinity,
            or PositiveInfinity.
            </exception>
    </member>
    <member name="T:NationalInstruments.UI.AfterDrawCaptionEventHandler">
      <summary>
            Represents the method that handles the AfterDrawCaption
            event.
            </summary>
      <param name="sender">
            The source of the event.
            </param>
      <param name="e">
            An AfterDrawCaptionEventArgs that contains the event data.
            </param>
    </member>
    <member name="T:NationalInstruments.UI.Action">
      <summary>
            Specifies the interactive or programmatic user actions that cause an event.
            </summary>
    </member>
    <member name="F:NationalInstruments.UI.Action.ByKeyboard">
      <summary>
            The action was caused by a keystroke.
            </summary>
    </member>
    <member name="F:NationalInstruments.UI.Action.ByMouse">
      <summary>
            The action was caused by a mouse operation.
            </summary>
    </member>
    <member name="F:NationalInstruments.UI.Action.Programmatic">
      <summary>
            The action was caused by a programmatic modification.
            </summary>
    </member>
  </members>
</doc>